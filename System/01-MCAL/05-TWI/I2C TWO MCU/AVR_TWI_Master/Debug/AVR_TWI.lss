
AVR_TWI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ac6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000c84  00000000  00000000  00000b1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000061c  00000000  00000000  000017a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4f 05 	call	0xa9e	; 0xa9e <main>
  64:	0c 94 61 05 	jmp	0xac2	; 0xac2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_VidSetPinDirection>:
#include"DIO_register.h"
#include"DIO_config.h"
#include"DIO_interface.h"

void DIO_VidSetPinDirection		(u8 copy_u8port, u8 copy_U8pin, u8 copy_U8state)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	27 97       	sbiw	r28, 0x07	; 7
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	f8 94       	cli
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	cd bf       	out	0x3d, r28	; 61
  80:	89 83       	std	Y+1, r24	; 0x01
  82:	6a 83       	std	Y+2, r22	; 0x02
  84:	4b 83       	std	Y+3, r20	; 0x03
	if(OUTPUT==copy_U8state)
  86:	8b 81       	ldd	r24, Y+3	; 0x03
  88:	81 30       	cpi	r24, 0x01	; 1
  8a:	09 f0       	breq	.+2      	; 0x8e <DIO_VidSetPinDirection+0x22>
  8c:	6f c0       	rjmp	.+222    	; 0x16c <DIO_VidSetPinDirection+0x100>
	{
		switch (copy_u8port)
  8e:	89 81       	ldd	r24, Y+1	; 0x01
  90:	28 2f       	mov	r18, r24
  92:	30 e0       	ldi	r19, 0x00	; 0
  94:	3f 83       	std	Y+7, r19	; 0x07
  96:	2e 83       	std	Y+6, r18	; 0x06
  98:	8e 81       	ldd	r24, Y+6	; 0x06
  9a:	9f 81       	ldd	r25, Y+7	; 0x07
  9c:	81 30       	cpi	r24, 0x01	; 1
  9e:	91 05       	cpc	r25, r1
  a0:	49 f1       	breq	.+82     	; 0xf4 <DIO_VidSetPinDirection+0x88>
  a2:	2e 81       	ldd	r18, Y+6	; 0x06
  a4:	3f 81       	ldd	r19, Y+7	; 0x07
  a6:	22 30       	cpi	r18, 0x02	; 2
  a8:	31 05       	cpc	r19, r1
  aa:	2c f4       	brge	.+10     	; 0xb6 <DIO_VidSetPinDirection+0x4a>
  ac:	8e 81       	ldd	r24, Y+6	; 0x06
  ae:	9f 81       	ldd	r25, Y+7	; 0x07
  b0:	00 97       	sbiw	r24, 0x00	; 0
  b2:	61 f0       	breq	.+24     	; 0xcc <DIO_VidSetPinDirection+0x60>
  b4:	d2 c0       	rjmp	.+420    	; 0x25a <DIO_VidSetPinDirection+0x1ee>
  b6:	2e 81       	ldd	r18, Y+6	; 0x06
  b8:	3f 81       	ldd	r19, Y+7	; 0x07
  ba:	22 30       	cpi	r18, 0x02	; 2
  bc:	31 05       	cpc	r19, r1
  be:	71 f1       	breq	.+92     	; 0x11c <DIO_VidSetPinDirection+0xb0>
  c0:	8e 81       	ldd	r24, Y+6	; 0x06
  c2:	9f 81       	ldd	r25, Y+7	; 0x07
  c4:	83 30       	cpi	r24, 0x03	; 3
  c6:	91 05       	cpc	r25, r1
  c8:	e9 f1       	breq	.+122    	; 0x144 <DIO_VidSetPinDirection+0xd8>
  ca:	c7 c0       	rjmp	.+398    	; 0x25a <DIO_VidSetPinDirection+0x1ee>
		{
			case PORTA:SET_BIT(DDRA, copy_U8pin); break;
  cc:	aa e3       	ldi	r26, 0x3A	; 58
  ce:	b0 e0       	ldi	r27, 0x00	; 0
  d0:	ea e3       	ldi	r30, 0x3A	; 58
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	48 2f       	mov	r20, r24
  d8:	8a 81       	ldd	r24, Y+2	; 0x02
  da:	28 2f       	mov	r18, r24
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	02 2e       	mov	r0, r18
  e4:	02 c0       	rjmp	.+4      	; 0xea <DIO_VidSetPinDirection+0x7e>
  e6:	88 0f       	add	r24, r24
  e8:	99 1f       	adc	r25, r25
  ea:	0a 94       	dec	r0
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <DIO_VidSetPinDirection+0x7a>
  ee:	84 2b       	or	r24, r20
  f0:	8c 93       	st	X, r24
  f2:	b3 c0       	rjmp	.+358    	; 0x25a <DIO_VidSetPinDirection+0x1ee>
			case PORTB:SET_BIT(DDRB, copy_U8pin); break;
  f4:	a7 e3       	ldi	r26, 0x37	; 55
  f6:	b0 e0       	ldi	r27, 0x00	; 0
  f8:	e7 e3       	ldi	r30, 0x37	; 55
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	48 2f       	mov	r20, r24
 100:	8a 81       	ldd	r24, Y+2	; 0x02
 102:	28 2f       	mov	r18, r24
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	02 2e       	mov	r0, r18
 10c:	02 c0       	rjmp	.+4      	; 0x112 <DIO_VidSetPinDirection+0xa6>
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	0a 94       	dec	r0
 114:	e2 f7       	brpl	.-8      	; 0x10e <DIO_VidSetPinDirection+0xa2>
 116:	84 2b       	or	r24, r20
 118:	8c 93       	st	X, r24
 11a:	9f c0       	rjmp	.+318    	; 0x25a <DIO_VidSetPinDirection+0x1ee>
			case PORTC:SET_BIT(DDRC, copy_U8pin); break;
 11c:	a4 e3       	ldi	r26, 0x34	; 52
 11e:	b0 e0       	ldi	r27, 0x00	; 0
 120:	e4 e3       	ldi	r30, 0x34	; 52
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	48 2f       	mov	r20, r24
 128:	8a 81       	ldd	r24, Y+2	; 0x02
 12a:	28 2f       	mov	r18, r24
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	02 2e       	mov	r0, r18
 134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_VidSetPinDirection+0xce>
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	0a 94       	dec	r0
 13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_VidSetPinDirection+0xca>
 13e:	84 2b       	or	r24, r20
 140:	8c 93       	st	X, r24
 142:	8b c0       	rjmp	.+278    	; 0x25a <DIO_VidSetPinDirection+0x1ee>
			case PORTD:SET_BIT(DDRD, copy_U8pin); break;
 144:	a1 e3       	ldi	r26, 0x31	; 49
 146:	b0 e0       	ldi	r27, 0x00	; 0
 148:	e1 e3       	ldi	r30, 0x31	; 49
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	48 2f       	mov	r20, r24
 150:	8a 81       	ldd	r24, Y+2	; 0x02
 152:	28 2f       	mov	r18, r24
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	02 2e       	mov	r0, r18
 15c:	02 c0       	rjmp	.+4      	; 0x162 <DIO_VidSetPinDirection+0xf6>
 15e:	88 0f       	add	r24, r24
 160:	99 1f       	adc	r25, r25
 162:	0a 94       	dec	r0
 164:	e2 f7       	brpl	.-8      	; 0x15e <DIO_VidSetPinDirection+0xf2>
 166:	84 2b       	or	r24, r20
 168:	8c 93       	st	X, r24
 16a:	77 c0       	rjmp	.+238    	; 0x25a <DIO_VidSetPinDirection+0x1ee>
	
		}	
	}
	else if(INPUT==copy_U8state)
 16c:	8b 81       	ldd	r24, Y+3	; 0x03
 16e:	88 23       	and	r24, r24
 170:	09 f0       	breq	.+2      	; 0x174 <DIO_VidSetPinDirection+0x108>
 172:	73 c0       	rjmp	.+230    	; 0x25a <DIO_VidSetPinDirection+0x1ee>
	{
		switch(copy_u8port)
 174:	89 81       	ldd	r24, Y+1	; 0x01
 176:	28 2f       	mov	r18, r24
 178:	30 e0       	ldi	r19, 0x00	; 0
 17a:	3d 83       	std	Y+5, r19	; 0x05
 17c:	2c 83       	std	Y+4, r18	; 0x04
 17e:	8c 81       	ldd	r24, Y+4	; 0x04
 180:	9d 81       	ldd	r25, Y+5	; 0x05
 182:	81 30       	cpi	r24, 0x01	; 1
 184:	91 05       	cpc	r25, r1
 186:	59 f1       	breq	.+86     	; 0x1de <DIO_VidSetPinDirection+0x172>
 188:	2c 81       	ldd	r18, Y+4	; 0x04
 18a:	3d 81       	ldd	r19, Y+5	; 0x05
 18c:	22 30       	cpi	r18, 0x02	; 2
 18e:	31 05       	cpc	r19, r1
 190:	2c f4       	brge	.+10     	; 0x19c <DIO_VidSetPinDirection+0x130>
 192:	8c 81       	ldd	r24, Y+4	; 0x04
 194:	9d 81       	ldd	r25, Y+5	; 0x05
 196:	00 97       	sbiw	r24, 0x00	; 0
 198:	69 f0       	breq	.+26     	; 0x1b4 <DIO_VidSetPinDirection+0x148>
 19a:	5f c0       	rjmp	.+190    	; 0x25a <DIO_VidSetPinDirection+0x1ee>
 19c:	2c 81       	ldd	r18, Y+4	; 0x04
 19e:	3d 81       	ldd	r19, Y+5	; 0x05
 1a0:	22 30       	cpi	r18, 0x02	; 2
 1a2:	31 05       	cpc	r19, r1
 1a4:	89 f1       	breq	.+98     	; 0x208 <DIO_VidSetPinDirection+0x19c>
 1a6:	8c 81       	ldd	r24, Y+4	; 0x04
 1a8:	9d 81       	ldd	r25, Y+5	; 0x05
 1aa:	83 30       	cpi	r24, 0x03	; 3
 1ac:	91 05       	cpc	r25, r1
 1ae:	09 f4       	brne	.+2      	; 0x1b2 <DIO_VidSetPinDirection+0x146>
 1b0:	40 c0       	rjmp	.+128    	; 0x232 <DIO_VidSetPinDirection+0x1c6>
 1b2:	53 c0       	rjmp	.+166    	; 0x25a <DIO_VidSetPinDirection+0x1ee>
		{
			case PORTA:CLR_BIT(DDRA, copy_U8pin); break;
 1b4:	aa e3       	ldi	r26, 0x3A	; 58
 1b6:	b0 e0       	ldi	r27, 0x00	; 0
 1b8:	ea e3       	ldi	r30, 0x3A	; 58
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	80 81       	ld	r24, Z
 1be:	48 2f       	mov	r20, r24
 1c0:	8a 81       	ldd	r24, Y+2	; 0x02
 1c2:	28 2f       	mov	r18, r24
 1c4:	30 e0       	ldi	r19, 0x00	; 0
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	02 2e       	mov	r0, r18
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <DIO_VidSetPinDirection+0x166>
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	0a 94       	dec	r0
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <DIO_VidSetPinDirection+0x162>
 1d6:	80 95       	com	r24
 1d8:	84 23       	and	r24, r20
 1da:	8c 93       	st	X, r24
 1dc:	3e c0       	rjmp	.+124    	; 0x25a <DIO_VidSetPinDirection+0x1ee>
			case PORTB:CLR_BIT(DDRB, copy_U8pin); break;
 1de:	a7 e3       	ldi	r26, 0x37	; 55
 1e0:	b0 e0       	ldi	r27, 0x00	; 0
 1e2:	e7 e3       	ldi	r30, 0x37	; 55
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	80 81       	ld	r24, Z
 1e8:	48 2f       	mov	r20, r24
 1ea:	8a 81       	ldd	r24, Y+2	; 0x02
 1ec:	28 2f       	mov	r18, r24
 1ee:	30 e0       	ldi	r19, 0x00	; 0
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	02 2e       	mov	r0, r18
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <DIO_VidSetPinDirection+0x190>
 1f8:	88 0f       	add	r24, r24
 1fa:	99 1f       	adc	r25, r25
 1fc:	0a 94       	dec	r0
 1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <DIO_VidSetPinDirection+0x18c>
 200:	80 95       	com	r24
 202:	84 23       	and	r24, r20
 204:	8c 93       	st	X, r24
 206:	29 c0       	rjmp	.+82     	; 0x25a <DIO_VidSetPinDirection+0x1ee>
		    case PORTC:CLR_BIT(DDRC, copy_U8pin); break;
 208:	a4 e3       	ldi	r26, 0x34	; 52
 20a:	b0 e0       	ldi	r27, 0x00	; 0
 20c:	e4 e3       	ldi	r30, 0x34	; 52
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	80 81       	ld	r24, Z
 212:	48 2f       	mov	r20, r24
 214:	8a 81       	ldd	r24, Y+2	; 0x02
 216:	28 2f       	mov	r18, r24
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	02 2e       	mov	r0, r18
 220:	02 c0       	rjmp	.+4      	; 0x226 <DIO_VidSetPinDirection+0x1ba>
 222:	88 0f       	add	r24, r24
 224:	99 1f       	adc	r25, r25
 226:	0a 94       	dec	r0
 228:	e2 f7       	brpl	.-8      	; 0x222 <DIO_VidSetPinDirection+0x1b6>
 22a:	80 95       	com	r24
 22c:	84 23       	and	r24, r20
 22e:	8c 93       	st	X, r24
 230:	14 c0       	rjmp	.+40     	; 0x25a <DIO_VidSetPinDirection+0x1ee>
		    case PORTD:CLR_BIT(DDRD, copy_U8pin); break;
 232:	a1 e3       	ldi	r26, 0x31	; 49
 234:	b0 e0       	ldi	r27, 0x00	; 0
 236:	e1 e3       	ldi	r30, 0x31	; 49
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	80 81       	ld	r24, Z
 23c:	48 2f       	mov	r20, r24
 23e:	8a 81       	ldd	r24, Y+2	; 0x02
 240:	28 2f       	mov	r18, r24
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	02 2e       	mov	r0, r18
 24a:	02 c0       	rjmp	.+4      	; 0x250 <DIO_VidSetPinDirection+0x1e4>
 24c:	88 0f       	add	r24, r24
 24e:	99 1f       	adc	r25, r25
 250:	0a 94       	dec	r0
 252:	e2 f7       	brpl	.-8      	; 0x24c <DIO_VidSetPinDirection+0x1e0>
 254:	80 95       	com	r24
 256:	84 23       	and	r24, r20
 258:	8c 93       	st	X, r24
	else
	{
		
	}
	
}
 25a:	27 96       	adiw	r28, 0x07	; 7
 25c:	0f b6       	in	r0, 0x3f	; 63
 25e:	f8 94       	cli
 260:	de bf       	out	0x3e, r29	; 62
 262:	0f be       	out	0x3f, r0	; 63
 264:	cd bf       	out	0x3d, r28	; 61
 266:	cf 91       	pop	r28
 268:	df 91       	pop	r29
 26a:	08 95       	ret

0000026c <DIO_VidSetPinValue>:
void DIO_VidSetPinValue			(u8 copy_u8port, u8 copy_U8pin, u8 copy_U8value)
{
 26c:	df 93       	push	r29
 26e:	cf 93       	push	r28
 270:	cd b7       	in	r28, 0x3d	; 61
 272:	de b7       	in	r29, 0x3e	; 62
 274:	27 97       	sbiw	r28, 0x07	; 7
 276:	0f b6       	in	r0, 0x3f	; 63
 278:	f8 94       	cli
 27a:	de bf       	out	0x3e, r29	; 62
 27c:	0f be       	out	0x3f, r0	; 63
 27e:	cd bf       	out	0x3d, r28	; 61
 280:	89 83       	std	Y+1, r24	; 0x01
 282:	6a 83       	std	Y+2, r22	; 0x02
 284:	4b 83       	std	Y+3, r20	; 0x03
	if(HIGH==copy_U8value)
 286:	8b 81       	ldd	r24, Y+3	; 0x03
 288:	81 30       	cpi	r24, 0x01	; 1
 28a:	09 f0       	breq	.+2      	; 0x28e <DIO_VidSetPinValue+0x22>
 28c:	6f c0       	rjmp	.+222    	; 0x36c <DIO_VidSetPinValue+0x100>
	{
		switch (copy_u8port)
 28e:	89 81       	ldd	r24, Y+1	; 0x01
 290:	28 2f       	mov	r18, r24
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	3f 83       	std	Y+7, r19	; 0x07
 296:	2e 83       	std	Y+6, r18	; 0x06
 298:	8e 81       	ldd	r24, Y+6	; 0x06
 29a:	9f 81       	ldd	r25, Y+7	; 0x07
 29c:	81 30       	cpi	r24, 0x01	; 1
 29e:	91 05       	cpc	r25, r1
 2a0:	49 f1       	breq	.+82     	; 0x2f4 <DIO_VidSetPinValue+0x88>
 2a2:	2e 81       	ldd	r18, Y+6	; 0x06
 2a4:	3f 81       	ldd	r19, Y+7	; 0x07
 2a6:	22 30       	cpi	r18, 0x02	; 2
 2a8:	31 05       	cpc	r19, r1
 2aa:	2c f4       	brge	.+10     	; 0x2b6 <DIO_VidSetPinValue+0x4a>
 2ac:	8e 81       	ldd	r24, Y+6	; 0x06
 2ae:	9f 81       	ldd	r25, Y+7	; 0x07
 2b0:	00 97       	sbiw	r24, 0x00	; 0
 2b2:	61 f0       	breq	.+24     	; 0x2cc <DIO_VidSetPinValue+0x60>
 2b4:	d2 c0       	rjmp	.+420    	; 0x45a <DIO_VidSetPinValue+0x1ee>
 2b6:	2e 81       	ldd	r18, Y+6	; 0x06
 2b8:	3f 81       	ldd	r19, Y+7	; 0x07
 2ba:	22 30       	cpi	r18, 0x02	; 2
 2bc:	31 05       	cpc	r19, r1
 2be:	71 f1       	breq	.+92     	; 0x31c <DIO_VidSetPinValue+0xb0>
 2c0:	8e 81       	ldd	r24, Y+6	; 0x06
 2c2:	9f 81       	ldd	r25, Y+7	; 0x07
 2c4:	83 30       	cpi	r24, 0x03	; 3
 2c6:	91 05       	cpc	r25, r1
 2c8:	e9 f1       	breq	.+122    	; 0x344 <DIO_VidSetPinValue+0xd8>
 2ca:	c7 c0       	rjmp	.+398    	; 0x45a <DIO_VidSetPinValue+0x1ee>
		{
			case PORTA:SET_BIT(PORT_A, copy_U8pin); break;
 2cc:	ab e3       	ldi	r26, 0x3B	; 59
 2ce:	b0 e0       	ldi	r27, 0x00	; 0
 2d0:	eb e3       	ldi	r30, 0x3B	; 59
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	80 81       	ld	r24, Z
 2d6:	48 2f       	mov	r20, r24
 2d8:	8a 81       	ldd	r24, Y+2	; 0x02
 2da:	28 2f       	mov	r18, r24
 2dc:	30 e0       	ldi	r19, 0x00	; 0
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	02 2e       	mov	r0, r18
 2e4:	02 c0       	rjmp	.+4      	; 0x2ea <DIO_VidSetPinValue+0x7e>
 2e6:	88 0f       	add	r24, r24
 2e8:	99 1f       	adc	r25, r25
 2ea:	0a 94       	dec	r0
 2ec:	e2 f7       	brpl	.-8      	; 0x2e6 <DIO_VidSetPinValue+0x7a>
 2ee:	84 2b       	or	r24, r20
 2f0:	8c 93       	st	X, r24
 2f2:	b3 c0       	rjmp	.+358    	; 0x45a <DIO_VidSetPinValue+0x1ee>
			case PORTB:SET_BIT(PORT_B, copy_U8pin); break;
 2f4:	a8 e3       	ldi	r26, 0x38	; 56
 2f6:	b0 e0       	ldi	r27, 0x00	; 0
 2f8:	e8 e3       	ldi	r30, 0x38	; 56
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	80 81       	ld	r24, Z
 2fe:	48 2f       	mov	r20, r24
 300:	8a 81       	ldd	r24, Y+2	; 0x02
 302:	28 2f       	mov	r18, r24
 304:	30 e0       	ldi	r19, 0x00	; 0
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	02 2e       	mov	r0, r18
 30c:	02 c0       	rjmp	.+4      	; 0x312 <DIO_VidSetPinValue+0xa6>
 30e:	88 0f       	add	r24, r24
 310:	99 1f       	adc	r25, r25
 312:	0a 94       	dec	r0
 314:	e2 f7       	brpl	.-8      	; 0x30e <DIO_VidSetPinValue+0xa2>
 316:	84 2b       	or	r24, r20
 318:	8c 93       	st	X, r24
 31a:	9f c0       	rjmp	.+318    	; 0x45a <DIO_VidSetPinValue+0x1ee>
			case PORTC:SET_BIT(PORT_C, copy_U8pin); break;
 31c:	a5 e3       	ldi	r26, 0x35	; 53
 31e:	b0 e0       	ldi	r27, 0x00	; 0
 320:	e5 e3       	ldi	r30, 0x35	; 53
 322:	f0 e0       	ldi	r31, 0x00	; 0
 324:	80 81       	ld	r24, Z
 326:	48 2f       	mov	r20, r24
 328:	8a 81       	ldd	r24, Y+2	; 0x02
 32a:	28 2f       	mov	r18, r24
 32c:	30 e0       	ldi	r19, 0x00	; 0
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	02 2e       	mov	r0, r18
 334:	02 c0       	rjmp	.+4      	; 0x33a <DIO_VidSetPinValue+0xce>
 336:	88 0f       	add	r24, r24
 338:	99 1f       	adc	r25, r25
 33a:	0a 94       	dec	r0
 33c:	e2 f7       	brpl	.-8      	; 0x336 <DIO_VidSetPinValue+0xca>
 33e:	84 2b       	or	r24, r20
 340:	8c 93       	st	X, r24
 342:	8b c0       	rjmp	.+278    	; 0x45a <DIO_VidSetPinValue+0x1ee>
			case PORTD:SET_BIT(PORT_D, copy_U8pin); break;
 344:	a2 e3       	ldi	r26, 0x32	; 50
 346:	b0 e0       	ldi	r27, 0x00	; 0
 348:	e2 e3       	ldi	r30, 0x32	; 50
 34a:	f0 e0       	ldi	r31, 0x00	; 0
 34c:	80 81       	ld	r24, Z
 34e:	48 2f       	mov	r20, r24
 350:	8a 81       	ldd	r24, Y+2	; 0x02
 352:	28 2f       	mov	r18, r24
 354:	30 e0       	ldi	r19, 0x00	; 0
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	02 2e       	mov	r0, r18
 35c:	02 c0       	rjmp	.+4      	; 0x362 <DIO_VidSetPinValue+0xf6>
 35e:	88 0f       	add	r24, r24
 360:	99 1f       	adc	r25, r25
 362:	0a 94       	dec	r0
 364:	e2 f7       	brpl	.-8      	; 0x35e <DIO_VidSetPinValue+0xf2>
 366:	84 2b       	or	r24, r20
 368:	8c 93       	st	X, r24
 36a:	77 c0       	rjmp	.+238    	; 0x45a <DIO_VidSetPinValue+0x1ee>
	
		}	
	}
	else if(LOW==copy_U8value)
 36c:	8b 81       	ldd	r24, Y+3	; 0x03
 36e:	88 23       	and	r24, r24
 370:	09 f0       	breq	.+2      	; 0x374 <DIO_VidSetPinValue+0x108>
 372:	73 c0       	rjmp	.+230    	; 0x45a <DIO_VidSetPinValue+0x1ee>
	{
		switch(copy_u8port)
 374:	89 81       	ldd	r24, Y+1	; 0x01
 376:	28 2f       	mov	r18, r24
 378:	30 e0       	ldi	r19, 0x00	; 0
 37a:	3d 83       	std	Y+5, r19	; 0x05
 37c:	2c 83       	std	Y+4, r18	; 0x04
 37e:	8c 81       	ldd	r24, Y+4	; 0x04
 380:	9d 81       	ldd	r25, Y+5	; 0x05
 382:	81 30       	cpi	r24, 0x01	; 1
 384:	91 05       	cpc	r25, r1
 386:	59 f1       	breq	.+86     	; 0x3de <DIO_VidSetPinValue+0x172>
 388:	2c 81       	ldd	r18, Y+4	; 0x04
 38a:	3d 81       	ldd	r19, Y+5	; 0x05
 38c:	22 30       	cpi	r18, 0x02	; 2
 38e:	31 05       	cpc	r19, r1
 390:	2c f4       	brge	.+10     	; 0x39c <DIO_VidSetPinValue+0x130>
 392:	8c 81       	ldd	r24, Y+4	; 0x04
 394:	9d 81       	ldd	r25, Y+5	; 0x05
 396:	00 97       	sbiw	r24, 0x00	; 0
 398:	69 f0       	breq	.+26     	; 0x3b4 <DIO_VidSetPinValue+0x148>
 39a:	5f c0       	rjmp	.+190    	; 0x45a <DIO_VidSetPinValue+0x1ee>
 39c:	2c 81       	ldd	r18, Y+4	; 0x04
 39e:	3d 81       	ldd	r19, Y+5	; 0x05
 3a0:	22 30       	cpi	r18, 0x02	; 2
 3a2:	31 05       	cpc	r19, r1
 3a4:	89 f1       	breq	.+98     	; 0x408 <DIO_VidSetPinValue+0x19c>
 3a6:	8c 81       	ldd	r24, Y+4	; 0x04
 3a8:	9d 81       	ldd	r25, Y+5	; 0x05
 3aa:	83 30       	cpi	r24, 0x03	; 3
 3ac:	91 05       	cpc	r25, r1
 3ae:	09 f4       	brne	.+2      	; 0x3b2 <DIO_VidSetPinValue+0x146>
 3b0:	40 c0       	rjmp	.+128    	; 0x432 <DIO_VidSetPinValue+0x1c6>
 3b2:	53 c0       	rjmp	.+166    	; 0x45a <DIO_VidSetPinValue+0x1ee>
		{
			case PORTA:CLR_BIT(PORT_A, copy_U8pin); break;
 3b4:	ab e3       	ldi	r26, 0x3B	; 59
 3b6:	b0 e0       	ldi	r27, 0x00	; 0
 3b8:	eb e3       	ldi	r30, 0x3B	; 59
 3ba:	f0 e0       	ldi	r31, 0x00	; 0
 3bc:	80 81       	ld	r24, Z
 3be:	48 2f       	mov	r20, r24
 3c0:	8a 81       	ldd	r24, Y+2	; 0x02
 3c2:	28 2f       	mov	r18, r24
 3c4:	30 e0       	ldi	r19, 0x00	; 0
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	02 2e       	mov	r0, r18
 3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <DIO_VidSetPinValue+0x166>
 3ce:	88 0f       	add	r24, r24
 3d0:	99 1f       	adc	r25, r25
 3d2:	0a 94       	dec	r0
 3d4:	e2 f7       	brpl	.-8      	; 0x3ce <DIO_VidSetPinValue+0x162>
 3d6:	80 95       	com	r24
 3d8:	84 23       	and	r24, r20
 3da:	8c 93       	st	X, r24
 3dc:	3e c0       	rjmp	.+124    	; 0x45a <DIO_VidSetPinValue+0x1ee>
			case PORTB:CLR_BIT(PORT_B, copy_U8pin); break;
 3de:	a8 e3       	ldi	r26, 0x38	; 56
 3e0:	b0 e0       	ldi	r27, 0x00	; 0
 3e2:	e8 e3       	ldi	r30, 0x38	; 56
 3e4:	f0 e0       	ldi	r31, 0x00	; 0
 3e6:	80 81       	ld	r24, Z
 3e8:	48 2f       	mov	r20, r24
 3ea:	8a 81       	ldd	r24, Y+2	; 0x02
 3ec:	28 2f       	mov	r18, r24
 3ee:	30 e0       	ldi	r19, 0x00	; 0
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	02 2e       	mov	r0, r18
 3f6:	02 c0       	rjmp	.+4      	; 0x3fc <DIO_VidSetPinValue+0x190>
 3f8:	88 0f       	add	r24, r24
 3fa:	99 1f       	adc	r25, r25
 3fc:	0a 94       	dec	r0
 3fe:	e2 f7       	brpl	.-8      	; 0x3f8 <DIO_VidSetPinValue+0x18c>
 400:	80 95       	com	r24
 402:	84 23       	and	r24, r20
 404:	8c 93       	st	X, r24
 406:	29 c0       	rjmp	.+82     	; 0x45a <DIO_VidSetPinValue+0x1ee>
		    case PORTC:CLR_BIT(PORT_C, copy_U8pin); break;
 408:	a5 e3       	ldi	r26, 0x35	; 53
 40a:	b0 e0       	ldi	r27, 0x00	; 0
 40c:	e5 e3       	ldi	r30, 0x35	; 53
 40e:	f0 e0       	ldi	r31, 0x00	; 0
 410:	80 81       	ld	r24, Z
 412:	48 2f       	mov	r20, r24
 414:	8a 81       	ldd	r24, Y+2	; 0x02
 416:	28 2f       	mov	r18, r24
 418:	30 e0       	ldi	r19, 0x00	; 0
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	02 2e       	mov	r0, r18
 420:	02 c0       	rjmp	.+4      	; 0x426 <DIO_VidSetPinValue+0x1ba>
 422:	88 0f       	add	r24, r24
 424:	99 1f       	adc	r25, r25
 426:	0a 94       	dec	r0
 428:	e2 f7       	brpl	.-8      	; 0x422 <DIO_VidSetPinValue+0x1b6>
 42a:	80 95       	com	r24
 42c:	84 23       	and	r24, r20
 42e:	8c 93       	st	X, r24
 430:	14 c0       	rjmp	.+40     	; 0x45a <DIO_VidSetPinValue+0x1ee>
		    case PORTD:CLR_BIT(PORT_D, copy_U8pin); break;
 432:	a2 e3       	ldi	r26, 0x32	; 50
 434:	b0 e0       	ldi	r27, 0x00	; 0
 436:	e2 e3       	ldi	r30, 0x32	; 50
 438:	f0 e0       	ldi	r31, 0x00	; 0
 43a:	80 81       	ld	r24, Z
 43c:	48 2f       	mov	r20, r24
 43e:	8a 81       	ldd	r24, Y+2	; 0x02
 440:	28 2f       	mov	r18, r24
 442:	30 e0       	ldi	r19, 0x00	; 0
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	02 2e       	mov	r0, r18
 44a:	02 c0       	rjmp	.+4      	; 0x450 <DIO_VidSetPinValue+0x1e4>
 44c:	88 0f       	add	r24, r24
 44e:	99 1f       	adc	r25, r25
 450:	0a 94       	dec	r0
 452:	e2 f7       	brpl	.-8      	; 0x44c <DIO_VidSetPinValue+0x1e0>
 454:	80 95       	com	r24
 456:	84 23       	and	r24, r20
 458:	8c 93       	st	X, r24
		
	}	
	
	
	
}
 45a:	27 96       	adiw	r28, 0x07	; 7
 45c:	0f b6       	in	r0, 0x3f	; 63
 45e:	f8 94       	cli
 460:	de bf       	out	0x3e, r29	; 62
 462:	0f be       	out	0x3f, r0	; 63
 464:	cd bf       	out	0x3d, r28	; 61
 466:	cf 91       	pop	r28
 468:	df 91       	pop	r29
 46a:	08 95       	ret

0000046c <DIO_VidGetPinValue>:


u8 DIO_VidGetPinValue			(u8 copy_u8port, u8 Copy_U8Pin)
{
 46c:	df 93       	push	r29
 46e:	cf 93       	push	r28
 470:	00 d0       	rcall	.+0      	; 0x472 <DIO_VidGetPinValue+0x6>
 472:	00 d0       	rcall	.+0      	; 0x474 <DIO_VidGetPinValue+0x8>
 474:	0f 92       	push	r0
 476:	cd b7       	in	r28, 0x3d	; 61
 478:	de b7       	in	r29, 0x3e	; 62
 47a:	8a 83       	std	Y+2, r24	; 0x02
 47c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Lcal_U8PinResult=0;
 47e:	19 82       	std	Y+1, r1	; 0x01
	switch(copy_u8port){
 480:	8a 81       	ldd	r24, Y+2	; 0x02
 482:	28 2f       	mov	r18, r24
 484:	30 e0       	ldi	r19, 0x00	; 0
 486:	3d 83       	std	Y+5, r19	; 0x05
 488:	2c 83       	std	Y+4, r18	; 0x04
 48a:	4c 81       	ldd	r20, Y+4	; 0x04
 48c:	5d 81       	ldd	r21, Y+5	; 0x05
 48e:	41 30       	cpi	r20, 0x01	; 1
 490:	51 05       	cpc	r21, r1
 492:	41 f1       	breq	.+80     	; 0x4e4 <DIO_VidGetPinValue+0x78>
 494:	8c 81       	ldd	r24, Y+4	; 0x04
 496:	9d 81       	ldd	r25, Y+5	; 0x05
 498:	82 30       	cpi	r24, 0x02	; 2
 49a:	91 05       	cpc	r25, r1
 49c:	34 f4       	brge	.+12     	; 0x4aa <DIO_VidGetPinValue+0x3e>
 49e:	2c 81       	ldd	r18, Y+4	; 0x04
 4a0:	3d 81       	ldd	r19, Y+5	; 0x05
 4a2:	21 15       	cp	r18, r1
 4a4:	31 05       	cpc	r19, r1
 4a6:	61 f0       	breq	.+24     	; 0x4c0 <DIO_VidGetPinValue+0x54>
 4a8:	52 c0       	rjmp	.+164    	; 0x54e <DIO_VidGetPinValue+0xe2>
 4aa:	4c 81       	ldd	r20, Y+4	; 0x04
 4ac:	5d 81       	ldd	r21, Y+5	; 0x05
 4ae:	42 30       	cpi	r20, 0x02	; 2
 4b0:	51 05       	cpc	r21, r1
 4b2:	51 f1       	breq	.+84     	; 0x508 <DIO_VidGetPinValue+0x9c>
 4b4:	8c 81       	ldd	r24, Y+4	; 0x04
 4b6:	9d 81       	ldd	r25, Y+5	; 0x05
 4b8:	83 30       	cpi	r24, 0x03	; 3
 4ba:	91 05       	cpc	r25, r1
 4bc:	b9 f1       	breq	.+110    	; 0x52c <DIO_VidGetPinValue+0xc0>
 4be:	47 c0       	rjmp	.+142    	; 0x54e <DIO_VidGetPinValue+0xe2>

			case PORTA :		Lcal_U8PinResult=GET_BIT(PINA,Copy_U8Pin);	        break;
 4c0:	e9 e3       	ldi	r30, 0x39	; 57
 4c2:	f0 e0       	ldi	r31, 0x00	; 0
 4c4:	80 81       	ld	r24, Z
 4c6:	28 2f       	mov	r18, r24
 4c8:	30 e0       	ldi	r19, 0x00	; 0
 4ca:	8b 81       	ldd	r24, Y+3	; 0x03
 4cc:	88 2f       	mov	r24, r24
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	a9 01       	movw	r20, r18
 4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <DIO_VidGetPinValue+0x6c>
 4d4:	55 95       	asr	r21
 4d6:	47 95       	ror	r20
 4d8:	8a 95       	dec	r24
 4da:	e2 f7       	brpl	.-8      	; 0x4d4 <DIO_VidGetPinValue+0x68>
 4dc:	ca 01       	movw	r24, r20
 4de:	81 70       	andi	r24, 0x01	; 1
 4e0:	89 83       	std	Y+1, r24	; 0x01
 4e2:	35 c0       	rjmp	.+106    	; 0x54e <DIO_VidGetPinValue+0xe2>
			case PORTB :		Lcal_U8PinResult=GET_BIT(PINB,Copy_U8Pin); 		    break;
 4e4:	e6 e3       	ldi	r30, 0x36	; 54
 4e6:	f0 e0       	ldi	r31, 0x00	; 0
 4e8:	80 81       	ld	r24, Z
 4ea:	28 2f       	mov	r18, r24
 4ec:	30 e0       	ldi	r19, 0x00	; 0
 4ee:	8b 81       	ldd	r24, Y+3	; 0x03
 4f0:	88 2f       	mov	r24, r24
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	a9 01       	movw	r20, r18
 4f6:	02 c0       	rjmp	.+4      	; 0x4fc <DIO_VidGetPinValue+0x90>
 4f8:	55 95       	asr	r21
 4fa:	47 95       	ror	r20
 4fc:	8a 95       	dec	r24
 4fe:	e2 f7       	brpl	.-8      	; 0x4f8 <DIO_VidGetPinValue+0x8c>
 500:	ca 01       	movw	r24, r20
 502:	81 70       	andi	r24, 0x01	; 1
 504:	89 83       	std	Y+1, r24	; 0x01
 506:	23 c0       	rjmp	.+70     	; 0x54e <DIO_VidGetPinValue+0xe2>
			case PORTC :		Lcal_U8PinResult=GET_BIT(PINC,Copy_U8Pin);			break;
 508:	e3 e3       	ldi	r30, 0x33	; 51
 50a:	f0 e0       	ldi	r31, 0x00	; 0
 50c:	80 81       	ld	r24, Z
 50e:	28 2f       	mov	r18, r24
 510:	30 e0       	ldi	r19, 0x00	; 0
 512:	8b 81       	ldd	r24, Y+3	; 0x03
 514:	88 2f       	mov	r24, r24
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	a9 01       	movw	r20, r18
 51a:	02 c0       	rjmp	.+4      	; 0x520 <DIO_VidGetPinValue+0xb4>
 51c:	55 95       	asr	r21
 51e:	47 95       	ror	r20
 520:	8a 95       	dec	r24
 522:	e2 f7       	brpl	.-8      	; 0x51c <DIO_VidGetPinValue+0xb0>
 524:	ca 01       	movw	r24, r20
 526:	81 70       	andi	r24, 0x01	; 1
 528:	89 83       	std	Y+1, r24	; 0x01
 52a:	11 c0       	rjmp	.+34     	; 0x54e <DIO_VidGetPinValue+0xe2>
			case PORTD :		Lcal_U8PinResult=GET_BIT(PIND,Copy_U8Pin);			break;
 52c:	e0 e3       	ldi	r30, 0x30	; 48
 52e:	f0 e0       	ldi	r31, 0x00	; 0
 530:	80 81       	ld	r24, Z
 532:	28 2f       	mov	r18, r24
 534:	30 e0       	ldi	r19, 0x00	; 0
 536:	8b 81       	ldd	r24, Y+3	; 0x03
 538:	88 2f       	mov	r24, r24
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	a9 01       	movw	r20, r18
 53e:	02 c0       	rjmp	.+4      	; 0x544 <DIO_VidGetPinValue+0xd8>
 540:	55 95       	asr	r21
 542:	47 95       	ror	r20
 544:	8a 95       	dec	r24
 546:	e2 f7       	brpl	.-8      	; 0x540 <DIO_VidGetPinValue+0xd4>
 548:	ca 01       	movw	r24, r20
 54a:	81 70       	andi	r24, 0x01	; 1
 54c:	89 83       	std	Y+1, r24	; 0x01

			}


return(Lcal_U8PinResult);
 54e:	89 81       	ldd	r24, Y+1	; 0x01
	
	
}
 550:	0f 90       	pop	r0
 552:	0f 90       	pop	r0
 554:	0f 90       	pop	r0
 556:	0f 90       	pop	r0
 558:	0f 90       	pop	r0
 55a:	cf 91       	pop	r28
 55c:	df 91       	pop	r29
 55e:	08 95       	ret

00000560 <DIO_VidSetPortDirection>:

void DIO_VidSetPortDirection	(u8 copy_u8port, u8 copy_U8state)
{
 560:	df 93       	push	r29
 562:	cf 93       	push	r28
 564:	00 d0       	rcall	.+0      	; 0x566 <DIO_VidSetPortDirection+0x6>
 566:	00 d0       	rcall	.+0      	; 0x568 <DIO_VidSetPortDirection+0x8>
 568:	00 d0       	rcall	.+0      	; 0x56a <DIO_VidSetPortDirection+0xa>
 56a:	cd b7       	in	r28, 0x3d	; 61
 56c:	de b7       	in	r29, 0x3e	; 62
 56e:	89 83       	std	Y+1, r24	; 0x01
 570:	6a 83       	std	Y+2, r22	; 0x02
	
	if(OUTPUT==copy_U8state)
 572:	8a 81       	ldd	r24, Y+2	; 0x02
 574:	81 30       	cpi	r24, 0x01	; 1
 576:	99 f5       	brne	.+102    	; 0x5de <DIO_VidSetPortDirection+0x7e>
	{
		switch (copy_u8port)
 578:	89 81       	ldd	r24, Y+1	; 0x01
 57a:	28 2f       	mov	r18, r24
 57c:	30 e0       	ldi	r19, 0x00	; 0
 57e:	3e 83       	std	Y+6, r19	; 0x06
 580:	2d 83       	std	Y+5, r18	; 0x05
 582:	8d 81       	ldd	r24, Y+5	; 0x05
 584:	9e 81       	ldd	r25, Y+6	; 0x06
 586:	81 30       	cpi	r24, 0x01	; 1
 588:	91 05       	cpc	r25, r1
 58a:	d1 f0       	breq	.+52     	; 0x5c0 <DIO_VidSetPortDirection+0x60>
 58c:	2d 81       	ldd	r18, Y+5	; 0x05
 58e:	3e 81       	ldd	r19, Y+6	; 0x06
 590:	22 30       	cpi	r18, 0x02	; 2
 592:	31 05       	cpc	r19, r1
 594:	2c f4       	brge	.+10     	; 0x5a0 <DIO_VidSetPortDirection+0x40>
 596:	8d 81       	ldd	r24, Y+5	; 0x05
 598:	9e 81       	ldd	r25, Y+6	; 0x06
 59a:	00 97       	sbiw	r24, 0x00	; 0
 59c:	61 f0       	breq	.+24     	; 0x5b6 <DIO_VidSetPortDirection+0x56>
 59e:	50 c0       	rjmp	.+160    	; 0x640 <DIO_VidSetPortDirection+0xe0>
 5a0:	2d 81       	ldd	r18, Y+5	; 0x05
 5a2:	3e 81       	ldd	r19, Y+6	; 0x06
 5a4:	22 30       	cpi	r18, 0x02	; 2
 5a6:	31 05       	cpc	r19, r1
 5a8:	81 f0       	breq	.+32     	; 0x5ca <DIO_VidSetPortDirection+0x6a>
 5aa:	8d 81       	ldd	r24, Y+5	; 0x05
 5ac:	9e 81       	ldd	r25, Y+6	; 0x06
 5ae:	83 30       	cpi	r24, 0x03	; 3
 5b0:	91 05       	cpc	r25, r1
 5b2:	81 f0       	breq	.+32     	; 0x5d4 <DIO_VidSetPortDirection+0x74>
 5b4:	45 c0       	rjmp	.+138    	; 0x640 <DIO_VidSetPortDirection+0xe0>
		{
			case PORTA:DDRA= ALL_OUTPUT		; break;
 5b6:	ea e3       	ldi	r30, 0x3A	; 58
 5b8:	f0 e0       	ldi	r31, 0x00	; 0
 5ba:	8f ef       	ldi	r24, 0xFF	; 255
 5bc:	80 83       	st	Z, r24
 5be:	40 c0       	rjmp	.+128    	; 0x640 <DIO_VidSetPortDirection+0xe0>
			case PORTB:DDRB= ALL_OUTPUT		; break;
 5c0:	e7 e3       	ldi	r30, 0x37	; 55
 5c2:	f0 e0       	ldi	r31, 0x00	; 0
 5c4:	8f ef       	ldi	r24, 0xFF	; 255
 5c6:	80 83       	st	Z, r24
 5c8:	3b c0       	rjmp	.+118    	; 0x640 <DIO_VidSetPortDirection+0xe0>
			case PORTC:DDRC= ALL_OUTPUT		; break;
 5ca:	e4 e3       	ldi	r30, 0x34	; 52
 5cc:	f0 e0       	ldi	r31, 0x00	; 0
 5ce:	8f ef       	ldi	r24, 0xFF	; 255
 5d0:	80 83       	st	Z, r24
 5d2:	36 c0       	rjmp	.+108    	; 0x640 <DIO_VidSetPortDirection+0xe0>
			case PORTD:DDRD= ALL_OUTPUT		; break;
 5d4:	e1 e3       	ldi	r30, 0x31	; 49
 5d6:	f0 e0       	ldi	r31, 0x00	; 0
 5d8:	8f ef       	ldi	r24, 0xFF	; 255
 5da:	80 83       	st	Z, r24
 5dc:	31 c0       	rjmp	.+98     	; 0x640 <DIO_VidSetPortDirection+0xe0>
	
		}	
	}
	else if(INPUT==copy_U8state)
 5de:	8a 81       	ldd	r24, Y+2	; 0x02
 5e0:	88 23       	and	r24, r24
 5e2:	71 f5       	brne	.+92     	; 0x640 <DIO_VidSetPortDirection+0xe0>
	{
		switch(copy_u8port)
 5e4:	89 81       	ldd	r24, Y+1	; 0x01
 5e6:	28 2f       	mov	r18, r24
 5e8:	30 e0       	ldi	r19, 0x00	; 0
 5ea:	3c 83       	std	Y+4, r19	; 0x04
 5ec:	2b 83       	std	Y+3, r18	; 0x03
 5ee:	8b 81       	ldd	r24, Y+3	; 0x03
 5f0:	9c 81       	ldd	r25, Y+4	; 0x04
 5f2:	81 30       	cpi	r24, 0x01	; 1
 5f4:	91 05       	cpc	r25, r1
 5f6:	c9 f0       	breq	.+50     	; 0x62a <DIO_VidSetPortDirection+0xca>
 5f8:	2b 81       	ldd	r18, Y+3	; 0x03
 5fa:	3c 81       	ldd	r19, Y+4	; 0x04
 5fc:	22 30       	cpi	r18, 0x02	; 2
 5fe:	31 05       	cpc	r19, r1
 600:	2c f4       	brge	.+10     	; 0x60c <DIO_VidSetPortDirection+0xac>
 602:	8b 81       	ldd	r24, Y+3	; 0x03
 604:	9c 81       	ldd	r25, Y+4	; 0x04
 606:	00 97       	sbiw	r24, 0x00	; 0
 608:	61 f0       	breq	.+24     	; 0x622 <DIO_VidSetPortDirection+0xc2>
 60a:	1a c0       	rjmp	.+52     	; 0x640 <DIO_VidSetPortDirection+0xe0>
 60c:	2b 81       	ldd	r18, Y+3	; 0x03
 60e:	3c 81       	ldd	r19, Y+4	; 0x04
 610:	22 30       	cpi	r18, 0x02	; 2
 612:	31 05       	cpc	r19, r1
 614:	71 f0       	breq	.+28     	; 0x632 <DIO_VidSetPortDirection+0xd2>
 616:	8b 81       	ldd	r24, Y+3	; 0x03
 618:	9c 81       	ldd	r25, Y+4	; 0x04
 61a:	83 30       	cpi	r24, 0x03	; 3
 61c:	91 05       	cpc	r25, r1
 61e:	69 f0       	breq	.+26     	; 0x63a <DIO_VidSetPortDirection+0xda>
 620:	0f c0       	rjmp	.+30     	; 0x640 <DIO_VidSetPortDirection+0xe0>
		{
			case PORTA:DDRA= ALL_INPUT		; break;
 622:	ea e3       	ldi	r30, 0x3A	; 58
 624:	f0 e0       	ldi	r31, 0x00	; 0
 626:	10 82       	st	Z, r1
 628:	0b c0       	rjmp	.+22     	; 0x640 <DIO_VidSetPortDirection+0xe0>
			case PORTB:DDRB= ALL_INPUT		; break;
 62a:	e7 e3       	ldi	r30, 0x37	; 55
 62c:	f0 e0       	ldi	r31, 0x00	; 0
 62e:	10 82       	st	Z, r1
 630:	07 c0       	rjmp	.+14     	; 0x640 <DIO_VidSetPortDirection+0xe0>
			case PORTC:DDRC= ALL_INPUT		; break;
 632:	e4 e3       	ldi	r30, 0x34	; 52
 634:	f0 e0       	ldi	r31, 0x00	; 0
 636:	10 82       	st	Z, r1
 638:	03 c0       	rjmp	.+6      	; 0x640 <DIO_VidSetPortDirection+0xe0>
			case PORTD:DDRD= ALL_INPUT		; break;
 63a:	e1 e3       	ldi	r30, 0x31	; 49
 63c:	f0 e0       	ldi	r31, 0x00	; 0
 63e:	10 82       	st	Z, r1
	{
		
	}
	
	
}
 640:	26 96       	adiw	r28, 0x06	; 6
 642:	0f b6       	in	r0, 0x3f	; 63
 644:	f8 94       	cli
 646:	de bf       	out	0x3e, r29	; 62
 648:	0f be       	out	0x3f, r0	; 63
 64a:	cd bf       	out	0x3d, r28	; 61
 64c:	cf 91       	pop	r28
 64e:	df 91       	pop	r29
 650:	08 95       	ret

00000652 <DIO_VidSetPortValue>:
void DIO_VidSetPortValue		(u8 copy_u8port, u8 copy_U8value)
{
 652:	df 93       	push	r29
 654:	cf 93       	push	r28
 656:	00 d0       	rcall	.+0      	; 0x658 <DIO_VidSetPortValue+0x6>
 658:	00 d0       	rcall	.+0      	; 0x65a <DIO_VidSetPortValue+0x8>
 65a:	cd b7       	in	r28, 0x3d	; 61
 65c:	de b7       	in	r29, 0x3e	; 62
 65e:	89 83       	std	Y+1, r24	; 0x01
 660:	6a 83       	std	Y+2, r22	; 0x02
		
		switch (copy_u8port)
 662:	89 81       	ldd	r24, Y+1	; 0x01
 664:	28 2f       	mov	r18, r24
 666:	30 e0       	ldi	r19, 0x00	; 0
 668:	3c 83       	std	Y+4, r19	; 0x04
 66a:	2b 83       	std	Y+3, r18	; 0x03
 66c:	8b 81       	ldd	r24, Y+3	; 0x03
 66e:	9c 81       	ldd	r25, Y+4	; 0x04
 670:	81 30       	cpi	r24, 0x01	; 1
 672:	91 05       	cpc	r25, r1
 674:	d1 f0       	breq	.+52     	; 0x6aa <DIO_VidSetPortValue+0x58>
 676:	2b 81       	ldd	r18, Y+3	; 0x03
 678:	3c 81       	ldd	r19, Y+4	; 0x04
 67a:	22 30       	cpi	r18, 0x02	; 2
 67c:	31 05       	cpc	r19, r1
 67e:	2c f4       	brge	.+10     	; 0x68a <DIO_VidSetPortValue+0x38>
 680:	8b 81       	ldd	r24, Y+3	; 0x03
 682:	9c 81       	ldd	r25, Y+4	; 0x04
 684:	00 97       	sbiw	r24, 0x00	; 0
 686:	61 f0       	breq	.+24     	; 0x6a0 <DIO_VidSetPortValue+0x4e>
 688:	1e c0       	rjmp	.+60     	; 0x6c6 <DIO_VidSetPortValue+0x74>
 68a:	2b 81       	ldd	r18, Y+3	; 0x03
 68c:	3c 81       	ldd	r19, Y+4	; 0x04
 68e:	22 30       	cpi	r18, 0x02	; 2
 690:	31 05       	cpc	r19, r1
 692:	81 f0       	breq	.+32     	; 0x6b4 <DIO_VidSetPortValue+0x62>
 694:	8b 81       	ldd	r24, Y+3	; 0x03
 696:	9c 81       	ldd	r25, Y+4	; 0x04
 698:	83 30       	cpi	r24, 0x03	; 3
 69a:	91 05       	cpc	r25, r1
 69c:	81 f0       	breq	.+32     	; 0x6be <DIO_VidSetPortValue+0x6c>
 69e:	13 c0       	rjmp	.+38     	; 0x6c6 <DIO_VidSetPortValue+0x74>
		{
			case PORTA:PORT_A=copy_U8value		; break;
 6a0:	eb e3       	ldi	r30, 0x3B	; 59
 6a2:	f0 e0       	ldi	r31, 0x00	; 0
 6a4:	8a 81       	ldd	r24, Y+2	; 0x02
 6a6:	80 83       	st	Z, r24
 6a8:	0e c0       	rjmp	.+28     	; 0x6c6 <DIO_VidSetPortValue+0x74>
			case PORTB:PORT_B=copy_U8value		; break;
 6aa:	e8 e3       	ldi	r30, 0x38	; 56
 6ac:	f0 e0       	ldi	r31, 0x00	; 0
 6ae:	8a 81       	ldd	r24, Y+2	; 0x02
 6b0:	80 83       	st	Z, r24
 6b2:	09 c0       	rjmp	.+18     	; 0x6c6 <DIO_VidSetPortValue+0x74>
			case PORTC:PORT_C=copy_U8value		; break;
 6b4:	e5 e3       	ldi	r30, 0x35	; 53
 6b6:	f0 e0       	ldi	r31, 0x00	; 0
 6b8:	8a 81       	ldd	r24, Y+2	; 0x02
 6ba:	80 83       	st	Z, r24
 6bc:	04 c0       	rjmp	.+8      	; 0x6c6 <DIO_VidSetPortValue+0x74>
			case PORTD:PORT_D=copy_U8value		; break;
 6be:	e2 e3       	ldi	r30, 0x32	; 50
 6c0:	f0 e0       	ldi	r31, 0x00	; 0
 6c2:	8a 81       	ldd	r24, Y+2	; 0x02
 6c4:	80 83       	st	Z, r24
		}	
	
	
	
	
}
 6c6:	0f 90       	pop	r0
 6c8:	0f 90       	pop	r0
 6ca:	0f 90       	pop	r0
 6cc:	0f 90       	pop	r0
 6ce:	cf 91       	pop	r28
 6d0:	df 91       	pop	r29
 6d2:	08 95       	ret

000006d4 <DIO_VidTogglePin>:

void DIO_VidTogglePin			(u8 copy_u8port, u8 copy_U8pin)
{
 6d4:	df 93       	push	r29
 6d6:	cf 93       	push	r28
 6d8:	00 d0       	rcall	.+0      	; 0x6da <DIO_VidTogglePin+0x6>
 6da:	00 d0       	rcall	.+0      	; 0x6dc <DIO_VidTogglePin+0x8>
 6dc:	cd b7       	in	r28, 0x3d	; 61
 6de:	de b7       	in	r29, 0x3e	; 62
 6e0:	89 83       	std	Y+1, r24	; 0x01
 6e2:	6a 83       	std	Y+2, r22	; 0x02

		switch (copy_u8port)
 6e4:	89 81       	ldd	r24, Y+1	; 0x01
 6e6:	28 2f       	mov	r18, r24
 6e8:	30 e0       	ldi	r19, 0x00	; 0
 6ea:	3c 83       	std	Y+4, r19	; 0x04
 6ec:	2b 83       	std	Y+3, r18	; 0x03
 6ee:	8b 81       	ldd	r24, Y+3	; 0x03
 6f0:	9c 81       	ldd	r25, Y+4	; 0x04
 6f2:	81 30       	cpi	r24, 0x01	; 1
 6f4:	91 05       	cpc	r25, r1
 6f6:	49 f1       	breq	.+82     	; 0x74a <DIO_VidTogglePin+0x76>
 6f8:	2b 81       	ldd	r18, Y+3	; 0x03
 6fa:	3c 81       	ldd	r19, Y+4	; 0x04
 6fc:	22 30       	cpi	r18, 0x02	; 2
 6fe:	31 05       	cpc	r19, r1
 700:	2c f4       	brge	.+10     	; 0x70c <DIO_VidTogglePin+0x38>
 702:	8b 81       	ldd	r24, Y+3	; 0x03
 704:	9c 81       	ldd	r25, Y+4	; 0x04
 706:	00 97       	sbiw	r24, 0x00	; 0
 708:	61 f0       	breq	.+24     	; 0x722 <DIO_VidTogglePin+0x4e>
 70a:	5a c0       	rjmp	.+180    	; 0x7c0 <DIO_VidTogglePin+0xec>
 70c:	2b 81       	ldd	r18, Y+3	; 0x03
 70e:	3c 81       	ldd	r19, Y+4	; 0x04
 710:	22 30       	cpi	r18, 0x02	; 2
 712:	31 05       	cpc	r19, r1
 714:	71 f1       	breq	.+92     	; 0x772 <DIO_VidTogglePin+0x9e>
 716:	8b 81       	ldd	r24, Y+3	; 0x03
 718:	9c 81       	ldd	r25, Y+4	; 0x04
 71a:	83 30       	cpi	r24, 0x03	; 3
 71c:	91 05       	cpc	r25, r1
 71e:	e9 f1       	breq	.+122    	; 0x79a <DIO_VidTogglePin+0xc6>
 720:	4f c0       	rjmp	.+158    	; 0x7c0 <DIO_VidTogglePin+0xec>
		{
					case PORTA:TOG_BIT(PORT_A, copy_U8pin); break;
 722:	ab e3       	ldi	r26, 0x3B	; 59
 724:	b0 e0       	ldi	r27, 0x00	; 0
 726:	eb e3       	ldi	r30, 0x3B	; 59
 728:	f0 e0       	ldi	r31, 0x00	; 0
 72a:	80 81       	ld	r24, Z
 72c:	48 2f       	mov	r20, r24
 72e:	8a 81       	ldd	r24, Y+2	; 0x02
 730:	28 2f       	mov	r18, r24
 732:	30 e0       	ldi	r19, 0x00	; 0
 734:	81 e0       	ldi	r24, 0x01	; 1
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	02 2e       	mov	r0, r18
 73a:	02 c0       	rjmp	.+4      	; 0x740 <DIO_VidTogglePin+0x6c>
 73c:	88 0f       	add	r24, r24
 73e:	99 1f       	adc	r25, r25
 740:	0a 94       	dec	r0
 742:	e2 f7       	brpl	.-8      	; 0x73c <DIO_VidTogglePin+0x68>
 744:	84 27       	eor	r24, r20
 746:	8c 93       	st	X, r24
 748:	3b c0       	rjmp	.+118    	; 0x7c0 <DIO_VidTogglePin+0xec>
					case PORTB:TOG_BIT(PORT_B, copy_U8pin); break;
 74a:	a8 e3       	ldi	r26, 0x38	; 56
 74c:	b0 e0       	ldi	r27, 0x00	; 0
 74e:	e8 e3       	ldi	r30, 0x38	; 56
 750:	f0 e0       	ldi	r31, 0x00	; 0
 752:	80 81       	ld	r24, Z
 754:	48 2f       	mov	r20, r24
 756:	8a 81       	ldd	r24, Y+2	; 0x02
 758:	28 2f       	mov	r18, r24
 75a:	30 e0       	ldi	r19, 0x00	; 0
 75c:	81 e0       	ldi	r24, 0x01	; 1
 75e:	90 e0       	ldi	r25, 0x00	; 0
 760:	02 2e       	mov	r0, r18
 762:	02 c0       	rjmp	.+4      	; 0x768 <DIO_VidTogglePin+0x94>
 764:	88 0f       	add	r24, r24
 766:	99 1f       	adc	r25, r25
 768:	0a 94       	dec	r0
 76a:	e2 f7       	brpl	.-8      	; 0x764 <DIO_VidTogglePin+0x90>
 76c:	84 27       	eor	r24, r20
 76e:	8c 93       	st	X, r24
 770:	27 c0       	rjmp	.+78     	; 0x7c0 <DIO_VidTogglePin+0xec>
					case PORTC:TOG_BIT(PORT_C, copy_U8pin); break;
 772:	a5 e3       	ldi	r26, 0x35	; 53
 774:	b0 e0       	ldi	r27, 0x00	; 0
 776:	e5 e3       	ldi	r30, 0x35	; 53
 778:	f0 e0       	ldi	r31, 0x00	; 0
 77a:	80 81       	ld	r24, Z
 77c:	48 2f       	mov	r20, r24
 77e:	8a 81       	ldd	r24, Y+2	; 0x02
 780:	28 2f       	mov	r18, r24
 782:	30 e0       	ldi	r19, 0x00	; 0
 784:	81 e0       	ldi	r24, 0x01	; 1
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	02 2e       	mov	r0, r18
 78a:	02 c0       	rjmp	.+4      	; 0x790 <DIO_VidTogglePin+0xbc>
 78c:	88 0f       	add	r24, r24
 78e:	99 1f       	adc	r25, r25
 790:	0a 94       	dec	r0
 792:	e2 f7       	brpl	.-8      	; 0x78c <DIO_VidTogglePin+0xb8>
 794:	84 27       	eor	r24, r20
 796:	8c 93       	st	X, r24
 798:	13 c0       	rjmp	.+38     	; 0x7c0 <DIO_VidTogglePin+0xec>
					case PORTD:TOG_BIT(PORT_D, copy_U8pin); break;
 79a:	a2 e3       	ldi	r26, 0x32	; 50
 79c:	b0 e0       	ldi	r27, 0x00	; 0
 79e:	e2 e3       	ldi	r30, 0x32	; 50
 7a0:	f0 e0       	ldi	r31, 0x00	; 0
 7a2:	80 81       	ld	r24, Z
 7a4:	48 2f       	mov	r20, r24
 7a6:	8a 81       	ldd	r24, Y+2	; 0x02
 7a8:	28 2f       	mov	r18, r24
 7aa:	30 e0       	ldi	r19, 0x00	; 0
 7ac:	81 e0       	ldi	r24, 0x01	; 1
 7ae:	90 e0       	ldi	r25, 0x00	; 0
 7b0:	02 2e       	mov	r0, r18
 7b2:	02 c0       	rjmp	.+4      	; 0x7b8 <DIO_VidTogglePin+0xe4>
 7b4:	88 0f       	add	r24, r24
 7b6:	99 1f       	adc	r25, r25
 7b8:	0a 94       	dec	r0
 7ba:	e2 f7       	brpl	.-8      	; 0x7b4 <DIO_VidTogglePin+0xe0>
 7bc:	84 27       	eor	r24, r20
 7be:	8c 93       	st	X, r24
		}

}
 7c0:	0f 90       	pop	r0
 7c2:	0f 90       	pop	r0
 7c4:	0f 90       	pop	r0
 7c6:	0f 90       	pop	r0
 7c8:	cf 91       	pop	r28
 7ca:	df 91       	pop	r29
 7cc:	08 95       	ret

000007ce <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 copy_u8port)
{
 7ce:	df 93       	push	r29
 7d0:	cf 93       	push	r28
 7d2:	00 d0       	rcall	.+0      	; 0x7d4 <DIO_u8GetPortValue+0x6>
 7d4:	00 d0       	rcall	.+0      	; 0x7d6 <DIO_u8GetPortValue+0x8>
 7d6:	cd b7       	in	r28, 0x3d	; 61
 7d8:	de b7       	in	r29, 0x3e	; 62
 7da:	8a 83       	std	Y+2, r24	; 0x02
		u8 Lcal_U8PortResult=0;
 7dc:	19 82       	std	Y+1, r1	; 0x01
	switch(copy_u8port){
 7de:	8a 81       	ldd	r24, Y+2	; 0x02
 7e0:	28 2f       	mov	r18, r24
 7e2:	30 e0       	ldi	r19, 0x00	; 0
 7e4:	3c 83       	std	Y+4, r19	; 0x04
 7e6:	2b 83       	std	Y+3, r18	; 0x03
 7e8:	8b 81       	ldd	r24, Y+3	; 0x03
 7ea:	9c 81       	ldd	r25, Y+4	; 0x04
 7ec:	81 30       	cpi	r24, 0x01	; 1
 7ee:	91 05       	cpc	r25, r1
 7f0:	d1 f0       	breq	.+52     	; 0x826 <DIO_u8GetPortValue+0x58>
 7f2:	2b 81       	ldd	r18, Y+3	; 0x03
 7f4:	3c 81       	ldd	r19, Y+4	; 0x04
 7f6:	22 30       	cpi	r18, 0x02	; 2
 7f8:	31 05       	cpc	r19, r1
 7fa:	2c f4       	brge	.+10     	; 0x806 <DIO_u8GetPortValue+0x38>
 7fc:	8b 81       	ldd	r24, Y+3	; 0x03
 7fe:	9c 81       	ldd	r25, Y+4	; 0x04
 800:	00 97       	sbiw	r24, 0x00	; 0
 802:	61 f0       	breq	.+24     	; 0x81c <DIO_u8GetPortValue+0x4e>
 804:	1e c0       	rjmp	.+60     	; 0x842 <DIO_u8GetPortValue+0x74>
 806:	2b 81       	ldd	r18, Y+3	; 0x03
 808:	3c 81       	ldd	r19, Y+4	; 0x04
 80a:	22 30       	cpi	r18, 0x02	; 2
 80c:	31 05       	cpc	r19, r1
 80e:	81 f0       	breq	.+32     	; 0x830 <DIO_u8GetPortValue+0x62>
 810:	8b 81       	ldd	r24, Y+3	; 0x03
 812:	9c 81       	ldd	r25, Y+4	; 0x04
 814:	83 30       	cpi	r24, 0x03	; 3
 816:	91 05       	cpc	r25, r1
 818:	81 f0       	breq	.+32     	; 0x83a <DIO_u8GetPortValue+0x6c>
 81a:	13 c0       	rjmp	.+38     	; 0x842 <DIO_u8GetPortValue+0x74>

			case PORTA :	Lcal_U8PortResult=PINA;	        break;
 81c:	e9 e3       	ldi	r30, 0x39	; 57
 81e:	f0 e0       	ldi	r31, 0x00	; 0
 820:	80 81       	ld	r24, Z
 822:	89 83       	std	Y+1, r24	; 0x01
 824:	0e c0       	rjmp	.+28     	; 0x842 <DIO_u8GetPortValue+0x74>
			case PORTB :	Lcal_U8PortResult=PINB; 		    break;
 826:	e6 e3       	ldi	r30, 0x36	; 54
 828:	f0 e0       	ldi	r31, 0x00	; 0
 82a:	80 81       	ld	r24, Z
 82c:	89 83       	std	Y+1, r24	; 0x01
 82e:	09 c0       	rjmp	.+18     	; 0x842 <DIO_u8GetPortValue+0x74>
			case PORTC :	Lcal_U8PortResult=PINC;			break;
 830:	e3 e3       	ldi	r30, 0x33	; 51
 832:	f0 e0       	ldi	r31, 0x00	; 0
 834:	80 81       	ld	r24, Z
 836:	89 83       	std	Y+1, r24	; 0x01
 838:	04 c0       	rjmp	.+8      	; 0x842 <DIO_u8GetPortValue+0x74>
			case PORTD :	Lcal_U8PortResult=PIND;			break;
 83a:	e0 e3       	ldi	r30, 0x30	; 48
 83c:	f0 e0       	ldi	r31, 0x00	; 0
 83e:	80 81       	ld	r24, Z
 840:	89 83       	std	Y+1, r24	; 0x01

			}


return(Lcal_U8PortResult);
 842:	89 81       	ldd	r24, Y+1	; 0x01
	
	
}
 844:	0f 90       	pop	r0
 846:	0f 90       	pop	r0
 848:	0f 90       	pop	r0
 84a:	0f 90       	pop	r0
 84c:	cf 91       	pop	r28
 84e:	df 91       	pop	r29
 850:	08 95       	ret

00000852 <TWI_VoidMasterInit>:
#include "I2C_interface.h"
#include "I2C_Config.h"
#include "I2C_private.h"

void TWI_VoidMasterInit(void)
{
 852:	df 93       	push	r29
 854:	cf 93       	push	r28
 856:	cd b7       	in	r28, 0x3d	; 61
 858:	de b7       	in	r29, 0x3e	; 62

	//Set Prescalar Value 0
	#if PRESCALER == ONE 
		CLR_BIT(TWSR,TWPS0);
 85a:	a1 e2       	ldi	r26, 0x21	; 33
 85c:	b0 e0       	ldi	r27, 0x00	; 0
 85e:	e1 e2       	ldi	r30, 0x21	; 33
 860:	f0 e0       	ldi	r31, 0x00	; 0
 862:	80 81       	ld	r24, Z
 864:	8e 7f       	andi	r24, 0xFE	; 254
 866:	8c 93       	st	X, r24
		CLR_BIT(TWSR,TWPS1);
 868:	a1 e2       	ldi	r26, 0x21	; 33
 86a:	b0 e0       	ldi	r27, 0x00	; 0
 86c:	e1 e2       	ldi	r30, 0x21	; 33
 86e:	f0 e0       	ldi	r31, 0x00	; 0
 870:	80 81       	ld	r24, Z
 872:	8d 7f       	andi	r24, 0xFD	; 253
 874:	8c 93       	st	X, r24
	#endif	

	#if INTERRUPT_O== ENABLE
		SET_BIT(TWCR, TWIE);
	#elif INTERRUPT_O== DISABLE
		CLR_BIT(TWCR, TWIE);
 876:	a6 e5       	ldi	r26, 0x56	; 86
 878:	b0 e0       	ldi	r27, 0x00	; 0
 87a:	e6 e5       	ldi	r30, 0x56	; 86
 87c:	f0 e0       	ldi	r31, 0x00	; 0
 87e:	80 81       	ld	r24, Z
 880:	8e 7f       	andi	r24, 0xFE	; 254
 882:	8c 93       	st	X, r24
	#endif

	#if ACK_OP== ENABLE
		SET_BIT(TWCR, TWEA);
 884:	a6 e5       	ldi	r26, 0x56	; 86
 886:	b0 e0       	ldi	r27, 0x00	; 0
 888:	e6 e5       	ldi	r30, 0x56	; 86
 88a:	f0 e0       	ldi	r31, 0x00	; 0
 88c:	80 81       	ld	r24, Z
 88e:	80 64       	ori	r24, 0x40	; 64
 890:	8c 93       	st	X, r24
	#elif ACK_OP== DISABLE
		CLR_BIT(TWCR, TWEA);
	#endif

	//CLK 400kHZ
	TWBR = Division_Factor;
 892:	e0 e2       	ldi	r30, 0x20	; 32
 894:	f0 e0       	ldi	r31, 0x00	; 0
 896:	80 e2       	ldi	r24, 0x20	; 32
 898:	80 83       	st	Z, r24

	//Enable I2C Peripheral
	SET_BIT(TWCR,TWEN);
 89a:	a6 e5       	ldi	r26, 0x56	; 86
 89c:	b0 e0       	ldi	r27, 0x00	; 0
 89e:	e6 e5       	ldi	r30, 0x56	; 86
 8a0:	f0 e0       	ldi	r31, 0x00	; 0
 8a2:	80 81       	ld	r24, Z
 8a4:	84 60       	ori	r24, 0x04	; 4
 8a6:	8c 93       	st	X, r24

}
 8a8:	cf 91       	pop	r28
 8aa:	df 91       	pop	r29
 8ac:	08 95       	ret

000008ae <TWI_VoidSlaveInit>:

void TWI_VoidSlaveInit(u8 Copy_u8Address)
{
 8ae:	df 93       	push	r29
 8b0:	cf 93       	push	r28
 8b2:	0f 92       	push	r0
 8b4:	cd b7       	in	r28, 0x3d	; 61
 8b6:	de b7       	in	r29, 0x3e	; 62
 8b8:	89 83       	std	Y+1, r24	; 0x01
	TWAR = Copy_u8Address<<1;
 8ba:	e2 e2       	ldi	r30, 0x22	; 34
 8bc:	f0 e0       	ldi	r31, 0x00	; 0
 8be:	89 81       	ldd	r24, Y+1	; 0x01
 8c0:	88 0f       	add	r24, r24
 8c2:	80 83       	st	Z, r24

	//Enable Ack
	SET_BIT(TWCR,TWEA);
 8c4:	a6 e5       	ldi	r26, 0x56	; 86
 8c6:	b0 e0       	ldi	r27, 0x00	; 0
 8c8:	e6 e5       	ldi	r30, 0x56	; 86
 8ca:	f0 e0       	ldi	r31, 0x00	; 0
 8cc:	80 81       	ld	r24, Z
 8ce:	80 64       	ori	r24, 0x40	; 64
 8d0:	8c 93       	st	X, r24
	//Enable I2C Peripheral
	SET_BIT(TWCR,TWEN);
 8d2:	a6 e5       	ldi	r26, 0x56	; 86
 8d4:	b0 e0       	ldi	r27, 0x00	; 0
 8d6:	e6 e5       	ldi	r30, 0x56	; 86
 8d8:	f0 e0       	ldi	r31, 0x00	; 0
 8da:	80 81       	ld	r24, Z
 8dc:	84 60       	ori	r24, 0x04	; 4
 8de:	8c 93       	st	X, r24

}
 8e0:	0f 90       	pop	r0
 8e2:	cf 91       	pop	r28
 8e4:	df 91       	pop	r29
 8e6:	08 95       	ret

000008e8 <TWI_VoidStartCondition>:



void  TWI_VoidStartCondition()
{
 8e8:	df 93       	push	r29
 8ea:	cf 93       	push	r28
 8ec:	cd b7       	in	r28, 0x3d	; 61
 8ee:	de b7       	in	r29, 0x3e	; 62


	//start condition
	//TWCR = (1<<TWINT)|(1<<TWSTA)| (1<<TWEN)
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);   // Clearing TWINT flag by logic one
 8f0:	e6 e5       	ldi	r30, 0x56	; 86
 8f2:	f0 e0       	ldi	r31, 0x00	; 0
 8f4:	84 ea       	ldi	r24, 0xA4	; 164
 8f6:	80 83       	st	Z, r24

	// Wait for TWINT Flag set
	while (!(TWCR & (1<<TWINT)));
 8f8:	e6 e5       	ldi	r30, 0x56	; 86
 8fa:	f0 e0       	ldi	r31, 0x00	; 0
 8fc:	80 81       	ld	r24, Z
 8fe:	88 23       	and	r24, r24
 900:	dc f7       	brge	.-10     	; 0x8f8 <TWI_VoidStartCondition+0x10>
}
 902:	cf 91       	pop	r28
 904:	df 91       	pop	r29
 906:	08 95       	ret

00000908 <TWI_VoidRepeatedStartCondition>:

void TWI_VoidRepeatedStartCondition(void)
{
 908:	df 93       	push	r29
 90a:	cf 93       	push	r28
 90c:	cd b7       	in	r28, 0x3d	; 61
 90e:	de b7       	in	r29, 0x3e	; 62
	// Send Repeated Start Condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 910:	e6 e5       	ldi	r30, 0x56	; 86
 912:	f0 e0       	ldi	r31, 0x00	; 0
 914:	84 ea       	ldi	r24, 0xA4	; 164
 916:	80 83       	st	Z, r24

	// Wait for TWINT Flag set
	while (!(TWCR & (1<<TWINT)));
 918:	e6 e5       	ldi	r30, 0x56	; 86
 91a:	f0 e0       	ldi	r31, 0x00	; 0
 91c:	80 81       	ld	r24, Z
 91e:	88 23       	and	r24, r24
 920:	dc f7       	brge	.-10     	; 0x918 <TWI_VoidRepeatedStartCondition+0x10>

}
 922:	cf 91       	pop	r28
 924:	df 91       	pop	r29
 926:	08 95       	ret

00000928 <TWI_VoidMaster_Send_Slave_Address_With_Write>:

void TWI_VoidMaster_Send_Slave_Address_With_Write(u8 Address, u8 Copy_Rw)
{
 928:	df 93       	push	r29
 92a:	cf 93       	push	r28
 92c:	00 d0       	rcall	.+0      	; 0x92e <TWI_VoidMaster_Send_Slave_Address_With_Write+0x6>
 92e:	cd b7       	in	r28, 0x3d	; 61
 930:	de b7       	in	r29, 0x3e	; 62
 932:	89 83       	std	Y+1, r24	; 0x01
 934:	6a 83       	std	Y+2, r22	; 0x02

	//Load SLA_W into TWDR Register

	TWDR = (Address<<1);
 936:	e3 e2       	ldi	r30, 0x23	; 35
 938:	f0 e0       	ldi	r31, 0x00	; 0
 93a:	89 81       	ldd	r24, Y+1	; 0x01
 93c:	88 0f       	add	r24, r24
 93e:	80 83       	st	Z, r24
	if(Copy_Rw == 1)
 940:	8a 81       	ldd	r24, Y+2	; 0x02
 942:	81 30       	cpi	r24, 0x01	; 1
 944:	89 f4       	brne	.+34     	; 0x968 <TWI_VoidMaster_Send_Slave_Address_With_Write+0x40>
	{
		SET_BIT(TWDR,R_W);		//Set R\W Bit To Read From Slave
 946:	a3 e2       	ldi	r26, 0x23	; 35
 948:	b0 e0       	ldi	r27, 0x00	; 0
 94a:	e3 e2       	ldi	r30, 0x23	; 35
 94c:	f0 e0       	ldi	r31, 0x00	; 0
 94e:	80 81       	ld	r24, Z
 950:	81 60       	ori	r24, 0x01	; 1
 952:	8c 93       	st	X, r24
		// Clear TWINT bit in TWCR to start transmission of address
		TWCR=(1<<TWEN)|(1<<TWINT);
 954:	e6 e5       	ldi	r30, 0x56	; 86
 956:	f0 e0       	ldi	r31, 0x00	; 0
 958:	84 e8       	ldi	r24, 0x84	; 132
 95a:	80 83       	st	Z, r24

		//Wait for TWINT Flag set
		while(!(TWCR&(1<<TWINT)));
 95c:	e6 e5       	ldi	r30, 0x56	; 86
 95e:	f0 e0       	ldi	r31, 0x00	; 0
 960:	80 81       	ld	r24, Z
 962:	88 23       	and	r24, r24
 964:	dc f7       	brge	.-10     	; 0x95c <TWI_VoidMaster_Send_Slave_Address_With_Write+0x34>
 966:	10 c0       	rjmp	.+32     	; 0x988 <TWI_VoidMaster_Send_Slave_Address_With_Write+0x60>

	}
	else
	{
		CLR_BIT(TWDR,R_W);
 968:	a3 e2       	ldi	r26, 0x23	; 35
 96a:	b0 e0       	ldi	r27, 0x00	; 0
 96c:	e3 e2       	ldi	r30, 0x23	; 35
 96e:	f0 e0       	ldi	r31, 0x00	; 0
 970:	80 81       	ld	r24, Z
 972:	8e 7f       	andi	r24, 0xFE	; 254
 974:	8c 93       	st	X, r24
		// Clear TWINT bit in TWCR to start transmission of address
		TWCR=(1<<TWEN)|(1<<TWINT);
 976:	e6 e5       	ldi	r30, 0x56	; 86
 978:	f0 e0       	ldi	r31, 0x00	; 0
 97a:	84 e8       	ldi	r24, 0x84	; 132
 97c:	80 83       	st	Z, r24

		//Wait for TWINT Flag set
		while(!(TWCR&(1<<TWINT)));		
 97e:	e6 e5       	ldi	r30, 0x56	; 86
 980:	f0 e0       	ldi	r31, 0x00	; 0
 982:	80 81       	ld	r24, Z
 984:	88 23       	and	r24, r24
 986:	dc f7       	brge	.-10     	; 0x97e <TWI_VoidMaster_Send_Slave_Address_With_Write+0x56>
	}
}
 988:	0f 90       	pop	r0
 98a:	0f 90       	pop	r0
 98c:	cf 91       	pop	r28
 98e:	df 91       	pop	r29
 990:	08 95       	ret

00000992 <TWI_VoidMaster_Reading_Byte_From_Slave>:

u8  TWI_VoidMaster_Reading_Byte_From_Slave(u8 No_ofBytes)
{
 992:	df 93       	push	r29
 994:	cf 93       	push	r28
 996:	0f 92       	push	r0
 998:	cd b7       	in	r28, 0x3d	; 61
 99a:	de b7       	in	r29, 0x3e	; 62
 99c:	89 83       	std	Y+1, r24	; 0x01
	if(No_ofBytes>1)
 99e:	89 81       	ldd	r24, Y+1	; 0x01
 9a0:	82 30       	cpi	r24, 0x02	; 2
 9a2:	28 f0       	brcs	.+10     	; 0x9ae <TWI_VoidMaster_Reading_Byte_From_Slave+0x1c>
	{
			TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA); 
 9a4:	e6 e5       	ldi	r30, 0x56	; 86
 9a6:	f0 e0       	ldi	r31, 0x00	; 0
 9a8:	84 ec       	ldi	r24, 0xC4	; 196
 9aa:	80 83       	st	Z, r24
 9ac:	04 c0       	rjmp	.+8      	; 0x9b6 <TWI_VoidMaster_Reading_Byte_From_Slave+0x24>
	}
	else
	{
			TWCR=(1<<TWEN)|(1<<TWINT); 
 9ae:	e6 e5       	ldi	r30, 0x56	; 86
 9b0:	f0 e0       	ldi	r31, 0x00	; 0
 9b2:	84 e8       	ldi	r24, 0x84	; 132
 9b4:	80 83       	st	Z, r24
	}

	while((TWCR & (1<<TWINT))==0);
 9b6:	e6 e5       	ldi	r30, 0x56	; 86
 9b8:	f0 e0       	ldi	r31, 0x00	; 0
 9ba:	80 81       	ld	r24, Z
 9bc:	88 23       	and	r24, r24
 9be:	dc f7       	brge	.-10     	; 0x9b6 <TWI_VoidMaster_Reading_Byte_From_Slave+0x24>

	return TWDR;
 9c0:	e3 e2       	ldi	r30, 0x23	; 35
 9c2:	f0 e0       	ldi	r31, 0x00	; 0
 9c4:	80 81       	ld	r24, Z


}
 9c6:	0f 90       	pop	r0
 9c8:	cf 91       	pop	r28
 9ca:	df 91       	pop	r29
 9cc:	08 95       	ret

000009ce <TWI_U8ReadACK>:

u8 TWI_U8ReadACK(void)
{
 9ce:	df 93       	push	r29
 9d0:	cf 93       	push	r28
 9d2:	cd b7       	in	r28, 0x3d	; 61
 9d4:	de b7       	in	r29, 0x3e	; 62
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);   //enable Ack
 9d6:	e6 e5       	ldi	r30, 0x56	; 86
 9d8:	f0 e0       	ldi	r31, 0x00	; 0
 9da:	84 ec       	ldi	r24, 0xC4	; 196
 9dc:	80 83       	st	Z, r24
	//Wait for TWINT flag to be set
	while (!(TWCR & (1<<TWINT)));
 9de:	e6 e5       	ldi	r30, 0x56	; 86
 9e0:	f0 e0       	ldi	r31, 0x00	; 0
 9e2:	80 81       	ld	r24, Z
 9e4:	88 23       	and	r24, r24
 9e6:	dc f7       	brge	.-10     	; 0x9de <TWI_U8ReadACK+0x10>
	// Read Data
	return TWDR;
 9e8:	e3 e2       	ldi	r30, 0x23	; 35
 9ea:	f0 e0       	ldi	r31, 0x00	; 0
 9ec:	80 81       	ld	r24, Z
							
		
}
 9ee:	cf 91       	pop	r28
 9f0:	df 91       	pop	r29
 9f2:	08 95       	ret

000009f4 <TWI_U8ReadNACK>:

u8 TWI_U8ReadNACK(void)
{
 9f4:	df 93       	push	r29
 9f6:	cf 93       	push	r28
 9f8:	cd b7       	in	r28, 0x3d	; 61
 9fa:	de b7       	in	r29, 0x3e	; 62
	TWCR=(1<<TWEN)|(1<<TWINT);
 9fc:	e6 e5       	ldi	r30, 0x56	; 86
 9fe:	f0 e0       	ldi	r31, 0x00	; 0
 a00:	84 e8       	ldi	r24, 0x84	; 132
 a02:	80 83       	st	Z, r24

	//Wait for TWINT flag to be set
	 while(!(TWCR&(1<<TWINT)));
 a04:	e6 e5       	ldi	r30, 0x56	; 86
 a06:	f0 e0       	ldi	r31, 0x00	; 0
 a08:	80 81       	ld	r24, Z
 a0a:	88 23       	and	r24, r24
 a0c:	dc f7       	brge	.-10     	; 0xa04 <TWI_U8ReadNACK+0x10>
	// Read Data
	return TWDR;
 a0e:	e3 e2       	ldi	r30, 0x23	; 35
 a10:	f0 e0       	ldi	r31, 0x00	; 0
 a12:	80 81       	ld	r24, Z

}
 a14:	cf 91       	pop	r28
 a16:	df 91       	pop	r29
 a18:	08 95       	ret

00000a1a <TWI_VoidMaster_Write_Byte_To_Slave>:

void TWI_VoidMaster_Write_Byte_To_Slave(u8 data)
{
 a1a:	df 93       	push	r29
 a1c:	cf 93       	push	r28
 a1e:	0f 92       	push	r0
 a20:	cd b7       	in	r28, 0x3d	; 61
 a22:	de b7       	in	r29, 0x3e	; 62
 a24:	89 83       	std	Y+1, r24	; 0x01
	// Load SLA_W into TWDR Register
	TWDR = data;
 a26:	e3 e2       	ldi	r30, 0x23	; 35
 a28:	f0 e0       	ldi	r31, 0x00	; 0
 a2a:	89 81       	ldd	r24, Y+1	; 0x01
 a2c:	80 83       	st	Z, r24
	// Clear TWINT bit in TWCR to start transmission of address
	TWCR=(1<<TWEN)|(1<<TWINT);
 a2e:	e6 e5       	ldi	r30, 0x56	; 86
 a30:	f0 e0       	ldi	r31, 0x00	; 0
 a32:	84 e8       	ldi	r24, 0x84	; 132
 a34:	80 83       	st	Z, r24
	//Wait for TWINT flag to be set
	while(!(TWCR&(1<<TWINT)));;
 a36:	e6 e5       	ldi	r30, 0x56	; 86
 a38:	f0 e0       	ldi	r31, 0x00	; 0
 a3a:	80 81       	ld	r24, Z
 a3c:	88 23       	and	r24, r24
 a3e:	dc f7       	brge	.-10     	; 0xa36 <TWI_VoidMaster_Write_Byte_To_Slave+0x1c>

}
 a40:	0f 90       	pop	r0
 a42:	cf 91       	pop	r28
 a44:	df 91       	pop	r29
 a46:	08 95       	ret

00000a48 <TWI_U8GetStatus>:




u8 TWI_U8GetStatus(void)
{
 a48:	df 93       	push	r29
 a4a:	cf 93       	push	r28
 a4c:	00 d0       	rcall	.+0      	; 0xa4e <TWI_U8GetStatus+0x6>
 a4e:	cd b7       	in	r28, 0x3d	; 61
 a50:	de b7       	in	r29, 0x3e	; 62
	u8 status;
	status = (TWSR & I2C_STATUS_CODE_MASK);
 a52:	e1 e2       	ldi	r30, 0x21	; 33
 a54:	f0 e0       	ldi	r31, 0x00	; 0
 a56:	80 81       	ld	r24, Z
 a58:	88 7f       	andi	r24, 0xF8	; 248
 a5a:	89 83       	std	Y+1, r24	; 0x01
	if (status != 0x08)
 a5c:	89 81       	ldd	r24, Y+1	; 0x01
 a5e:	88 30       	cpi	r24, 0x08	; 8
 a60:	11 f0       	breq	.+4      	; 0xa66 <TWI_U8GetStatus+0x1e>
	{
		return 0;
 a62:	1a 82       	std	Y+2, r1	; 0x02
 a64:	02 c0       	rjmp	.+4      	; 0xa6a <TWI_U8GetStatus+0x22>
	}
	return status;
 a66:	89 81       	ldd	r24, Y+1	; 0x01
 a68:	8a 83       	std	Y+2, r24	; 0x02
 a6a:	8a 81       	ldd	r24, Y+2	; 0x02
}
 a6c:	0f 90       	pop	r0
 a6e:	0f 90       	pop	r0
 a70:	cf 91       	pop	r28
 a72:	df 91       	pop	r29
 a74:	08 95       	ret

00000a76 <TWI_VoidStopCondition>:


void  TWI_VoidStopCondition()
{
 a76:	df 93       	push	r29
 a78:	cf 93       	push	r28
 a7a:	cd b7       	in	r28, 0x3d	; 61
 a7c:	de b7       	in	r29, 0x3e	; 62
	//TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);  /* Enable TWI, generate stop */
 a7e:	e6 e5       	ldi	r30, 0x56	; 86
 a80:	f0 e0       	ldi	r31, 0x00	; 0
 a82:	84 e9       	ldi	r24, 0x94	; 148
 a84:	80 83       	st	Z, r24
    while(TWCR&(1<<TWSTO));	               /* Wait until stop condition execution */
 a86:	e6 e5       	ldi	r30, 0x56	; 86
 a88:	f0 e0       	ldi	r31, 0x00	; 0
 a8a:	80 81       	ld	r24, Z
 a8c:	88 2f       	mov	r24, r24
 a8e:	90 e0       	ldi	r25, 0x00	; 0
 a90:	80 71       	andi	r24, 0x10	; 16
 a92:	90 70       	andi	r25, 0x00	; 0
 a94:	00 97       	sbiw	r24, 0x00	; 0
 a96:	b9 f7       	brne	.-18     	; 0xa86 <TWI_VoidStopCondition+0x10>

}
 a98:	cf 91       	pop	r28
 a9a:	df 91       	pop	r29
 a9c:	08 95       	ret

00000a9e <main>:
#include  "BIT_MATH.h"
#include "I2C_Interface.h"
#include "DIO_interface.h"

void main(void)
{
 a9e:	df 93       	push	r29
 aa0:	cf 93       	push	r28
 aa2:	cd b7       	in	r28, 0x3d	; 61
 aa4:	de b7       	in	r29, 0x3e	; 62
	TWI_VoidMasterInit();
 aa6:	0e 94 29 04 	call	0x852	; 0x852 <TWI_VoidMasterInit>
	TWI_VoidStartCondition();
 aaa:	0e 94 74 04 	call	0x8e8	; 0x8e8 <TWI_VoidStartCondition>
	TWI_VoidMaster_Send_Slave_Address_With_Write(0b1101000,0);
 aae:	88 e6       	ldi	r24, 0x68	; 104
 ab0:	60 e0       	ldi	r22, 0x00	; 0
 ab2:	0e 94 94 04 	call	0x928	; 0x928 <TWI_VoidMaster_Send_Slave_Address_With_Write>
	TWI_VoidMaster_Write_Byte_To_Slave(0b11111100);
 ab6:	8c ef       	ldi	r24, 0xFC	; 252
 ab8:	0e 94 0d 05 	call	0xa1a	; 0xa1a <TWI_VoidMaster_Write_Byte_To_Slave>
	TWI_VoidStopCondition();
 abc:	0e 94 3b 05 	call	0xa76	; 0xa76 <TWI_VoidStopCondition>
 ac0:	ff cf       	rjmp	.-2      	; 0xac0 <main+0x22>

00000ac2 <_exit>:
 ac2:	f8 94       	cli

00000ac4 <__stop_program>:
 ac4:	ff cf       	rjmp	.-2      	; 0xac4 <__stop_program>
