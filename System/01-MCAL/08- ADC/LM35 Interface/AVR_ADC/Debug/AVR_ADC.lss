
AVR_ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000027c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  000027c8  0000285c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800072  00800072  0000286e  2**0
                  ALLOC
  3 .stab         00001cd4  00000000  00000000  00002870  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b78  00000000  00000000  00004544  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000050bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000051fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000536c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006fb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008c50  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008db0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000903d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000980b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 42 07 	jmp	0xe84	; 0xe84 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ec       	ldi	r30, 0xC8	; 200
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e7       	ldi	r26, 0x72	; 114
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 37       	cpi	r26, 0x73	; 115
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 04 12 	call	0x2408	; 0x2408 <main>
      8a:	0c 94 e2 13 	jmp	0x27c4	; 0x27c4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ab 13 	jmp	0x2756	; 0x2756 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 e6       	ldi	r26, 0x69	; 105
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c7 13 	jmp	0x278e	; 0x278e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b7 13 	jmp	0x276e	; 0x276e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d3 13 	jmp	0x27a6	; 0x27a6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b7 13 	jmp	0x276e	; 0x276e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d3 13 	jmp	0x27a6	; 0x27a6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ab 13 	jmp	0x2756	; 0x2756 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	89 e6       	ldi	r24, 0x69	; 105
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c7 13 	jmp	0x278e	; 0x278e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b7 13 	jmp	0x276e	; 0x276e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 d3 13 	jmp	0x27a6	; 0x27a6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 b7 13 	jmp	0x276e	; 0x276e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 d3 13 	jmp	0x27a6	; 0x27a6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 b7 13 	jmp	0x276e	; 0x276e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 d3 13 	jmp	0x27a6	; 0x27a6 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 bb 13 	jmp	0x2776	; 0x2776 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 d7 13 	jmp	0x27ae	; 0x27ae <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GIE_voidEnable>:


u8 SPCR_Help;

void GIE_voidEnable(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	// GIE
	SET_BIT(SREG,GIE);
     b4e:	af e5       	ldi	r26, 0x5F	; 95
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	ef e5       	ldi	r30, 0x5F	; 95
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 68       	ori	r24, 0x80	; 128
     b5a:	8c 93       	st	X, r24
}
     b5c:	cf 91       	pop	r28
     b5e:	df 91       	pop	r29
     b60:	08 95       	ret

00000b62 <GIE_voidDisable>:

void GIE_voidDisable(void)
{
     b62:	df 93       	push	r29
     b64:	cf 93       	push	r28
     b66:	cd b7       	in	r28, 0x3d	; 61
     b68:	de b7       	in	r29, 0x3e	; 62
	// GIE
	CLR_BIT(SREG,GIE);
     b6a:	af e5       	ldi	r26, 0x5F	; 95
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	ef e5       	ldi	r30, 0x5F	; 95
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8f 77       	andi	r24, 0x7F	; 127
     b76:	8c 93       	st	X, r24
}
     b78:	cf 91       	pop	r28
     b7a:	df 91       	pop	r29
     b7c:	08 95       	ret

00000b7e <ADC_VoidInit>:

void ADC_VoidInit(void)
{
     b7e:	df 93       	push	r29
     b80:	cf 93       	push	r28
     b82:	cd b7       	in	r28, 0x3d	; 61
     b84:	de b7       	in	r29, 0x3e	; 62
		SET_BIT(ADMUX,REFS0);		
	#elif VREF_S== RESERVED
		SET_BIT(ADMUX,REFS1);
		CLR_BIT(ADMUX,REFS0);
	#elif VREF_S==INTERNAL_2_56
		SET_BIT(ADMUX,REFS1);
     b86:	a7 e2       	ldi	r26, 0x27	; 39
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e7 e2       	ldi	r30, 0x27	; 39
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	80 68       	ori	r24, 0x80	; 128
     b92:	8c 93       	st	X, r24
		SET_BIT(ADMUX,REFS0);
     b94:	a7 e2       	ldi	r26, 0x27	; 39
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e7 e2       	ldi	r30, 0x27	; 39
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	80 64       	ori	r24, 0x40	; 64
     ba0:	8c 93       	st	X, r24
	#endif

	#if ADC_DATA_ADJUST==ADJUST_RIGHT
		CLR_BIT(ADMUX,ADLAR);
     ba2:	a7 e2       	ldi	r26, 0x27	; 39
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e7 e2       	ldi	r30, 0x27	; 39
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	8f 7d       	andi	r24, 0xDF	; 223
     bae:	8c 93       	st	X, r24
	#elif ADC_DATA_ADJUST==ADJUST_LEFT		
		SET_BIT(ADMUX,ADLAR);		
	#endif

	#if INT_OP == DISABLE
		CLR_BIT(ADCSRA,ADIE);
     bb0:	a6 e2       	ldi	r26, 0x26	; 38
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	e6 e2       	ldi	r30, 0x26	; 38
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	87 7f       	andi	r24, 0xF7	; 247
     bbc:	8c 93       	st	X, r24
		GIE_voidEnable();	
		SET_BIT(ADCSRA,ADIE);		
	#endif
	
	#if ADC_CHANNEL == ADC_C0
		CLR_BIT(ADMUX,MUX0);
     bbe:	a7 e2       	ldi	r26, 0x27	; 39
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e7 e2       	ldi	r30, 0x27	; 39
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	8e 7f       	andi	r24, 0xFE	; 254
     bca:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX1);
     bcc:	a7 e2       	ldi	r26, 0x27	; 39
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	e7 e2       	ldi	r30, 0x27	; 39
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	8d 7f       	andi	r24, 0xFD	; 253
     bd8:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX2);
     bda:	a7 e2       	ldi	r26, 0x27	; 39
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	e7 e2       	ldi	r30, 0x27	; 39
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	8b 7f       	andi	r24, 0xFB	; 251
     be6:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX3);
     be8:	a7 e2       	ldi	r26, 0x27	; 39
     bea:	b0 e0       	ldi	r27, 0x00	; 0
     bec:	e7 e2       	ldi	r30, 0x27	; 39
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	80 81       	ld	r24, Z
     bf2:	87 7f       	andi	r24, 0xF7	; 247
     bf4:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX4);
     bf6:	a7 e2       	ldi	r26, 0x27	; 39
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	e7 e2       	ldi	r30, 0x27	; 39
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	8f 7e       	andi	r24, 0xEF	; 239
     c02:	8c 93       	st	X, r24
	#elif CLOCK_RATE== F_64
		CLR_BIT(ADCSRA,ADPS0);
		SET_BIT(ADCSRA,ADPS1);
		SET_BIT(ADCSRA,ADPS2);
	#elif CLOCK_RATE== F_128
		SET_BIT(ADCSRA,ADPS0);
     c04:	a6 e2       	ldi	r26, 0x26	; 38
     c06:	b0 e0       	ldi	r27, 0x00	; 0
     c08:	e6 e2       	ldi	r30, 0x26	; 38
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	81 60       	ori	r24, 0x01	; 1
     c10:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS1);
     c12:	a6 e2       	ldi	r26, 0x26	; 38
     c14:	b0 e0       	ldi	r27, 0x00	; 0
     c16:	e6 e2       	ldi	r30, 0x26	; 38
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	80 81       	ld	r24, Z
     c1c:	82 60       	ori	r24, 0x02	; 2
     c1e:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS2);
     c20:	a6 e2       	ldi	r26, 0x26	; 38
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	e6 e2       	ldi	r30, 0x26	; 38
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	80 81       	ld	r24, Z
     c2a:	84 60       	ori	r24, 0x04	; 4
     c2c:	8c 93       	st	X, r24
	#endif

	


}
     c2e:	cf 91       	pop	r28
     c30:	df 91       	pop	r29
     c32:	08 95       	ret

00000c34 <ADC_VoidSelect_channel>:

void ADC_VoidSelect_channel(u8 Copy_Channel)
{
     c34:	df 93       	push	r29
     c36:	cf 93       	push	r28
     c38:	00 d0       	rcall	.+0      	; 0xc3a <ADC_VoidSelect_channel+0x6>
     c3a:	0f 92       	push	r0
     c3c:	cd b7       	in	r28, 0x3d	; 61
     c3e:	de b7       	in	r29, 0x3e	; 62
     c40:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(ADMUX,MUX4);
     c42:	a7 e2       	ldi	r26, 0x27	; 39
     c44:	b0 e0       	ldi	r27, 0x00	; 0
     c46:	e7 e2       	ldi	r30, 0x27	; 39
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	80 81       	ld	r24, Z
     c4c:	8f 7e       	andi	r24, 0xEF	; 239
     c4e:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,MUX3);
     c50:	a7 e2       	ldi	r26, 0x27	; 39
     c52:	b0 e0       	ldi	r27, 0x00	; 0
     c54:	e7 e2       	ldi	r30, 0x27	; 39
     c56:	f0 e0       	ldi	r31, 0x00	; 0
     c58:	80 81       	ld	r24, Z
     c5a:	87 7f       	andi	r24, 0xF7	; 247
     c5c:	8c 93       	st	X, r24


	switch(Copy_Channel)
     c5e:	89 81       	ldd	r24, Y+1	; 0x01
     c60:	28 2f       	mov	r18, r24
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	3b 83       	std	Y+3, r19	; 0x03
     c66:	2a 83       	std	Y+2, r18	; 0x02
     c68:	8a 81       	ldd	r24, Y+2	; 0x02
     c6a:	9b 81       	ldd	r25, Y+3	; 0x03
     c6c:	83 30       	cpi	r24, 0x03	; 3
     c6e:	91 05       	cpc	r25, r1
     c70:	09 f4       	brne	.+2      	; 0xc74 <ADC_VoidSelect_channel+0x40>
     c72:	61 c0       	rjmp	.+194    	; 0xd36 <ADC_VoidSelect_channel+0x102>
     c74:	2a 81       	ldd	r18, Y+2	; 0x02
     c76:	3b 81       	ldd	r19, Y+3	; 0x03
     c78:	24 30       	cpi	r18, 0x04	; 4
     c7a:	31 05       	cpc	r19, r1
     c7c:	7c f4       	brge	.+30     	; 0xc9c <ADC_VoidSelect_channel+0x68>
     c7e:	8a 81       	ldd	r24, Y+2	; 0x02
     c80:	9b 81       	ldd	r25, Y+3	; 0x03
     c82:	81 30       	cpi	r24, 0x01	; 1
     c84:	91 05       	cpc	r25, r1
     c86:	59 f1       	breq	.+86     	; 0xcde <ADC_VoidSelect_channel+0xaa>
     c88:	2a 81       	ldd	r18, Y+2	; 0x02
     c8a:	3b 81       	ldd	r19, Y+3	; 0x03
     c8c:	22 30       	cpi	r18, 0x02	; 2
     c8e:	31 05       	cpc	r19, r1
     c90:	e4 f5       	brge	.+120    	; 0xd0a <ADC_VoidSelect_channel+0xd6>
     c92:	8a 81       	ldd	r24, Y+2	; 0x02
     c94:	9b 81       	ldd	r25, Y+3	; 0x03
     c96:	00 97       	sbiw	r24, 0x00	; 0
     c98:	d1 f0       	breq	.+52     	; 0xcce <ADC_VoidSelect_channel+0x9a>
     c9a:	ba c0       	rjmp	.+372    	; 0xe10 <ADC_VoidSelect_channel+0x1dc>
     c9c:	2a 81       	ldd	r18, Y+2	; 0x02
     c9e:	3b 81       	ldd	r19, Y+3	; 0x03
     ca0:	25 30       	cpi	r18, 0x05	; 5
     ca2:	31 05       	cpc	r19, r1
     ca4:	09 f4       	brne	.+2      	; 0xca8 <ADC_VoidSelect_channel+0x74>
     ca6:	73 c0       	rjmp	.+230    	; 0xd8e <ADC_VoidSelect_channel+0x15a>
     ca8:	8a 81       	ldd	r24, Y+2	; 0x02
     caa:	9b 81       	ldd	r25, Y+3	; 0x03
     cac:	85 30       	cpi	r24, 0x05	; 5
     cae:	91 05       	cpc	r25, r1
     cb0:	0c f4       	brge	.+2      	; 0xcb4 <ADC_VoidSelect_channel+0x80>
     cb2:	57 c0       	rjmp	.+174    	; 0xd62 <ADC_VoidSelect_channel+0x12e>
     cb4:	2a 81       	ldd	r18, Y+2	; 0x02
     cb6:	3b 81       	ldd	r19, Y+3	; 0x03
     cb8:	26 30       	cpi	r18, 0x06	; 6
     cba:	31 05       	cpc	r19, r1
     cbc:	09 f4       	brne	.+2      	; 0xcc0 <ADC_VoidSelect_channel+0x8c>
     cbe:	7d c0       	rjmp	.+250    	; 0xdba <ADC_VoidSelect_channel+0x186>
     cc0:	8a 81       	ldd	r24, Y+2	; 0x02
     cc2:	9b 81       	ldd	r25, Y+3	; 0x03
     cc4:	87 30       	cpi	r24, 0x07	; 7
     cc6:	91 05       	cpc	r25, r1
     cc8:	09 f4       	brne	.+2      	; 0xccc <ADC_VoidSelect_channel+0x98>
     cca:	8d c0       	rjmp	.+282    	; 0xde6 <ADC_VoidSelect_channel+0x1b2>
     ccc:	a1 c0       	rjmp	.+322    	; 0xe10 <ADC_VoidSelect_channel+0x1dc>
	{	case ADC_C0 : ADMUX&=0B11100000; break;  // choose channel
     cce:	a7 e2       	ldi	r26, 0x27	; 39
     cd0:	b0 e0       	ldi	r27, 0x00	; 0
     cd2:	e7 e2       	ldi	r30, 0x27	; 39
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	80 81       	ld	r24, Z
     cd8:	80 7e       	andi	r24, 0xE0	; 224
     cda:	8c 93       	st	X, r24
     cdc:	99 c0       	rjmp	.+306    	; 0xe10 <ADC_VoidSelect_channel+0x1dc>
		case ADC_C1 :SET_BIT(ADMUX,MUX0);CLR_BIT(ADMUX,MUX1);CLR_BIT(ADMUX,MUX2); break;
     cde:	a7 e2       	ldi	r26, 0x27	; 39
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e7 e2       	ldi	r30, 0x27	; 39
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	81 60       	ori	r24, 0x01	; 1
     cea:	8c 93       	st	X, r24
     cec:	a7 e2       	ldi	r26, 0x27	; 39
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e7 e2       	ldi	r30, 0x27	; 39
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	8d 7f       	andi	r24, 0xFD	; 253
     cf8:	8c 93       	st	X, r24
     cfa:	a7 e2       	ldi	r26, 0x27	; 39
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e7 e2       	ldi	r30, 0x27	; 39
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	8b 7f       	andi	r24, 0xFB	; 251
     d06:	8c 93       	st	X, r24
     d08:	83 c0       	rjmp	.+262    	; 0xe10 <ADC_VoidSelect_channel+0x1dc>
		case ADC_C2 :CLR_BIT(ADMUX,MUX0);SET_BIT(ADMUX,MUX1);CLR_BIT(ADMUX,MUX2); break;
     d0a:	a7 e2       	ldi	r26, 0x27	; 39
     d0c:	b0 e0       	ldi	r27, 0x00	; 0
     d0e:	e7 e2       	ldi	r30, 0x27	; 39
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	80 81       	ld	r24, Z
     d14:	8e 7f       	andi	r24, 0xFE	; 254
     d16:	8c 93       	st	X, r24
     d18:	a7 e2       	ldi	r26, 0x27	; 39
     d1a:	b0 e0       	ldi	r27, 0x00	; 0
     d1c:	e7 e2       	ldi	r30, 0x27	; 39
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	80 81       	ld	r24, Z
     d22:	82 60       	ori	r24, 0x02	; 2
     d24:	8c 93       	st	X, r24
     d26:	a7 e2       	ldi	r26, 0x27	; 39
     d28:	b0 e0       	ldi	r27, 0x00	; 0
     d2a:	e7 e2       	ldi	r30, 0x27	; 39
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	8b 7f       	andi	r24, 0xFB	; 251
     d32:	8c 93       	st	X, r24
     d34:	6d c0       	rjmp	.+218    	; 0xe10 <ADC_VoidSelect_channel+0x1dc>
		case ADC_C3 :CLR_BIT(ADMUX,MUX0);SET_BIT(ADMUX,MUX1);SET_BIT(ADMUX,MUX2); break;
     d36:	a7 e2       	ldi	r26, 0x27	; 39
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	e7 e2       	ldi	r30, 0x27	; 39
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	8e 7f       	andi	r24, 0xFE	; 254
     d42:	8c 93       	st	X, r24
     d44:	a7 e2       	ldi	r26, 0x27	; 39
     d46:	b0 e0       	ldi	r27, 0x00	; 0
     d48:	e7 e2       	ldi	r30, 0x27	; 39
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	80 81       	ld	r24, Z
     d4e:	82 60       	ori	r24, 0x02	; 2
     d50:	8c 93       	st	X, r24
     d52:	a7 e2       	ldi	r26, 0x27	; 39
     d54:	b0 e0       	ldi	r27, 0x00	; 0
     d56:	e7 e2       	ldi	r30, 0x27	; 39
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	84 60       	ori	r24, 0x04	; 4
     d5e:	8c 93       	st	X, r24
     d60:	57 c0       	rjmp	.+174    	; 0xe10 <ADC_VoidSelect_channel+0x1dc>
		case ADC_C4 :SET_BIT(ADMUX,MUX0);CLR_BIT(ADMUX,MUX1);CLR_BIT(ADMUX,MUX2); break;
     d62:	a7 e2       	ldi	r26, 0x27	; 39
     d64:	b0 e0       	ldi	r27, 0x00	; 0
     d66:	e7 e2       	ldi	r30, 0x27	; 39
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	80 81       	ld	r24, Z
     d6c:	81 60       	ori	r24, 0x01	; 1
     d6e:	8c 93       	st	X, r24
     d70:	a7 e2       	ldi	r26, 0x27	; 39
     d72:	b0 e0       	ldi	r27, 0x00	; 0
     d74:	e7 e2       	ldi	r30, 0x27	; 39
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	80 81       	ld	r24, Z
     d7a:	8d 7f       	andi	r24, 0xFD	; 253
     d7c:	8c 93       	st	X, r24
     d7e:	a7 e2       	ldi	r26, 0x27	; 39
     d80:	b0 e0       	ldi	r27, 0x00	; 0
     d82:	e7 e2       	ldi	r30, 0x27	; 39
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	80 81       	ld	r24, Z
     d88:	8b 7f       	andi	r24, 0xFB	; 251
     d8a:	8c 93       	st	X, r24
     d8c:	41 c0       	rjmp	.+130    	; 0xe10 <ADC_VoidSelect_channel+0x1dc>
		case ADC_C5 :SET_BIT(ADMUX,MUX0);CLR_BIT(ADMUX,MUX1);SET_BIT(ADMUX,MUX2); break;
     d8e:	a7 e2       	ldi	r26, 0x27	; 39
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	e7 e2       	ldi	r30, 0x27	; 39
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	81 60       	ori	r24, 0x01	; 1
     d9a:	8c 93       	st	X, r24
     d9c:	a7 e2       	ldi	r26, 0x27	; 39
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	e7 e2       	ldi	r30, 0x27	; 39
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	8d 7f       	andi	r24, 0xFD	; 253
     da8:	8c 93       	st	X, r24
     daa:	a7 e2       	ldi	r26, 0x27	; 39
     dac:	b0 e0       	ldi	r27, 0x00	; 0
     dae:	e7 e2       	ldi	r30, 0x27	; 39
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	80 81       	ld	r24, Z
     db4:	84 60       	ori	r24, 0x04	; 4
     db6:	8c 93       	st	X, r24
     db8:	2b c0       	rjmp	.+86     	; 0xe10 <ADC_VoidSelect_channel+0x1dc>
		case ADC_C6 :SET_BIT(ADMUX,MUX0);SET_BIT(ADMUX,MUX1);CLR_BIT(ADMUX,MUX2); break;
     dba:	a7 e2       	ldi	r26, 0x27	; 39
     dbc:	b0 e0       	ldi	r27, 0x00	; 0
     dbe:	e7 e2       	ldi	r30, 0x27	; 39
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	80 81       	ld	r24, Z
     dc4:	81 60       	ori	r24, 0x01	; 1
     dc6:	8c 93       	st	X, r24
     dc8:	a7 e2       	ldi	r26, 0x27	; 39
     dca:	b0 e0       	ldi	r27, 0x00	; 0
     dcc:	e7 e2       	ldi	r30, 0x27	; 39
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	80 81       	ld	r24, Z
     dd2:	82 60       	ori	r24, 0x02	; 2
     dd4:	8c 93       	st	X, r24
     dd6:	a7 e2       	ldi	r26, 0x27	; 39
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	e7 e2       	ldi	r30, 0x27	; 39
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	8b 7f       	andi	r24, 0xFB	; 251
     de2:	8c 93       	st	X, r24
     de4:	15 c0       	rjmp	.+42     	; 0xe10 <ADC_VoidSelect_channel+0x1dc>
		case ADC_C7 :SET_BIT(ADMUX,MUX0);SET_BIT(ADMUX,MUX1);SET_BIT(ADMUX,MUX2); break;
     de6:	a7 e2       	ldi	r26, 0x27	; 39
     de8:	b0 e0       	ldi	r27, 0x00	; 0
     dea:	e7 e2       	ldi	r30, 0x27	; 39
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	81 60       	ori	r24, 0x01	; 1
     df2:	8c 93       	st	X, r24
     df4:	a7 e2       	ldi	r26, 0x27	; 39
     df6:	b0 e0       	ldi	r27, 0x00	; 0
     df8:	e7 e2       	ldi	r30, 0x27	; 39
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	80 81       	ld	r24, Z
     dfe:	82 60       	ori	r24, 0x02	; 2
     e00:	8c 93       	st	X, r24
     e02:	a7 e2       	ldi	r26, 0x27	; 39
     e04:	b0 e0       	ldi	r27, 0x00	; 0
     e06:	e7 e2       	ldi	r30, 0x27	; 39
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	80 81       	ld	r24, Z
     e0c:	84 60       	ori	r24, 0x04	; 4
     e0e:	8c 93       	st	X, r24
	}
}
     e10:	0f 90       	pop	r0
     e12:	0f 90       	pop	r0
     e14:	0f 90       	pop	r0
     e16:	cf 91       	pop	r28
     e18:	df 91       	pop	r29
     e1a:	08 95       	ret

00000e1c <ADC_VoidADCEnable>:

void ADC_VoidADCEnable(void)
{
     e1c:	df 93       	push	r29
     e1e:	cf 93       	push	r28
     e20:	cd b7       	in	r28, 0x3d	; 61
     e22:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADEN);
     e24:	a6 e2       	ldi	r26, 0x26	; 38
     e26:	b0 e0       	ldi	r27, 0x00	; 0
     e28:	e6 e2       	ldi	r30, 0x26	; 38
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	80 81       	ld	r24, Z
     e2e:	80 68       	ori	r24, 0x80	; 128
     e30:	8c 93       	st	X, r24
}
     e32:	cf 91       	pop	r28
     e34:	df 91       	pop	r29
     e36:	08 95       	ret

00000e38 <ADC_VoidStartConversion>:

void ADC_VoidStartConversion(void)
{
     e38:	df 93       	push	r29
     e3a:	cf 93       	push	r28
     e3c:	cd b7       	in	r28, 0x3d	; 61
     e3e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADSC);
     e40:	a6 e2       	ldi	r26, 0x26	; 38
     e42:	b0 e0       	ldi	r27, 0x00	; 0
     e44:	e6 e2       	ldi	r30, 0x26	; 38
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
     e4a:	80 64       	ori	r24, 0x40	; 64
     e4c:	8c 93       	st	X, r24
}
     e4e:	cf 91       	pop	r28
     e50:	df 91       	pop	r29
     e52:	08 95       	ret

00000e54 <ADC_U16ReadDigitalValue>:
u16 ADC_U16ReadDigitalValue(void)
{	ADC_VoidStartConversion();
     e54:	df 93       	push	r29
     e56:	cf 93       	push	r28
     e58:	cd b7       	in	r28, 0x3d	; 61
     e5a:	de b7       	in	r29, 0x3e	; 62
     e5c:	0e 94 1c 07 	call	0xe38	; 0xe38 <ADC_VoidStartConversion>
	while(GET_BIT(ADCSRA,ADIF) == 0);
     e60:	e6 e2       	ldi	r30, 0x26	; 38
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	80 81       	ld	r24, Z
     e66:	82 95       	swap	r24
     e68:	8f 70       	andi	r24, 0x0F	; 15
     e6a:	88 2f       	mov	r24, r24
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	81 70       	andi	r24, 0x01	; 1
     e70:	90 70       	andi	r25, 0x00	; 0
     e72:	00 97       	sbiw	r24, 0x00	; 0
     e74:	a9 f3       	breq	.-22     	; 0xe60 <ADC_U16ReadDigitalValue+0xc>
	return ADC_DATA;
     e76:	e4 e2       	ldi	r30, 0x24	; 36
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	91 81       	ldd	r25, Z+1	; 0x01
}
     e7e:	cf 91       	pop	r28
     e80:	df 91       	pop	r29
     e82:	08 95       	ret

00000e84 <__vector_16>:

void __vector_16(void )
{
     e84:	1f 92       	push	r1
     e86:	0f 92       	push	r0
     e88:	0f b6       	in	r0, 0x3f	; 63
     e8a:	0f 92       	push	r0
     e8c:	11 24       	eor	r1, r1
     e8e:	df 93       	push	r29
     e90:	cf 93       	push	r28
     e92:	cd b7       	in	r28, 0x3d	; 61
     e94:	de b7       	in	r29, 0x3e	; 62
// write your code 

}
     e96:	cf 91       	pop	r28
     e98:	df 91       	pop	r29
     e9a:	0f 90       	pop	r0
     e9c:	0f be       	out	0x3f, r0	; 63
     e9e:	0f 90       	pop	r0
     ea0:	1f 90       	pop	r1
     ea2:	18 95       	reti

00000ea4 <DIO_VidSetPinDirection>:
#include"DIO_register.h"
#include"DIO_config.h"
#include"DIO_interface.h"

void DIO_VidSetPinDirection		(u8 copy_u8port, u8 copy_U8pin, u8 copy_U8state)
{
     ea4:	df 93       	push	r29
     ea6:	cf 93       	push	r28
     ea8:	cd b7       	in	r28, 0x3d	; 61
     eaa:	de b7       	in	r29, 0x3e	; 62
     eac:	27 97       	sbiw	r28, 0x07	; 7
     eae:	0f b6       	in	r0, 0x3f	; 63
     eb0:	f8 94       	cli
     eb2:	de bf       	out	0x3e, r29	; 62
     eb4:	0f be       	out	0x3f, r0	; 63
     eb6:	cd bf       	out	0x3d, r28	; 61
     eb8:	89 83       	std	Y+1, r24	; 0x01
     eba:	6a 83       	std	Y+2, r22	; 0x02
     ebc:	4b 83       	std	Y+3, r20	; 0x03
	if(OUTPUT==copy_U8state)
     ebe:	8b 81       	ldd	r24, Y+3	; 0x03
     ec0:	81 30       	cpi	r24, 0x01	; 1
     ec2:	09 f0       	breq	.+2      	; 0xec6 <DIO_VidSetPinDirection+0x22>
     ec4:	6f c0       	rjmp	.+222    	; 0xfa4 <DIO_VidSetPinDirection+0x100>
	{
		switch (copy_u8port)
     ec6:	89 81       	ldd	r24, Y+1	; 0x01
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	3f 83       	std	Y+7, r19	; 0x07
     ece:	2e 83       	std	Y+6, r18	; 0x06
     ed0:	8e 81       	ldd	r24, Y+6	; 0x06
     ed2:	9f 81       	ldd	r25, Y+7	; 0x07
     ed4:	81 30       	cpi	r24, 0x01	; 1
     ed6:	91 05       	cpc	r25, r1
     ed8:	49 f1       	breq	.+82     	; 0xf2c <DIO_VidSetPinDirection+0x88>
     eda:	2e 81       	ldd	r18, Y+6	; 0x06
     edc:	3f 81       	ldd	r19, Y+7	; 0x07
     ede:	22 30       	cpi	r18, 0x02	; 2
     ee0:	31 05       	cpc	r19, r1
     ee2:	2c f4       	brge	.+10     	; 0xeee <DIO_VidSetPinDirection+0x4a>
     ee4:	8e 81       	ldd	r24, Y+6	; 0x06
     ee6:	9f 81       	ldd	r25, Y+7	; 0x07
     ee8:	00 97       	sbiw	r24, 0x00	; 0
     eea:	61 f0       	breq	.+24     	; 0xf04 <DIO_VidSetPinDirection+0x60>
     eec:	d2 c0       	rjmp	.+420    	; 0x1092 <DIO_VidSetPinDirection+0x1ee>
     eee:	2e 81       	ldd	r18, Y+6	; 0x06
     ef0:	3f 81       	ldd	r19, Y+7	; 0x07
     ef2:	22 30       	cpi	r18, 0x02	; 2
     ef4:	31 05       	cpc	r19, r1
     ef6:	71 f1       	breq	.+92     	; 0xf54 <DIO_VidSetPinDirection+0xb0>
     ef8:	8e 81       	ldd	r24, Y+6	; 0x06
     efa:	9f 81       	ldd	r25, Y+7	; 0x07
     efc:	83 30       	cpi	r24, 0x03	; 3
     efe:	91 05       	cpc	r25, r1
     f00:	e9 f1       	breq	.+122    	; 0xf7c <DIO_VidSetPinDirection+0xd8>
     f02:	c7 c0       	rjmp	.+398    	; 0x1092 <DIO_VidSetPinDirection+0x1ee>
		{
			case PORTA:SET_BIT(DDRA, copy_U8pin); break;
     f04:	aa e3       	ldi	r26, 0x3A	; 58
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	ea e3       	ldi	r30, 0x3A	; 58
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	48 2f       	mov	r20, r24
     f10:	8a 81       	ldd	r24, Y+2	; 0x02
     f12:	28 2f       	mov	r18, r24
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	02 2e       	mov	r0, r18
     f1c:	02 c0       	rjmp	.+4      	; 0xf22 <DIO_VidSetPinDirection+0x7e>
     f1e:	88 0f       	add	r24, r24
     f20:	99 1f       	adc	r25, r25
     f22:	0a 94       	dec	r0
     f24:	e2 f7       	brpl	.-8      	; 0xf1e <DIO_VidSetPinDirection+0x7a>
     f26:	84 2b       	or	r24, r20
     f28:	8c 93       	st	X, r24
     f2a:	b3 c0       	rjmp	.+358    	; 0x1092 <DIO_VidSetPinDirection+0x1ee>
			case PORTB:SET_BIT(DDRB, copy_U8pin); break;
     f2c:	a7 e3       	ldi	r26, 0x37	; 55
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	e7 e3       	ldi	r30, 0x37	; 55
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	48 2f       	mov	r20, r24
     f38:	8a 81       	ldd	r24, Y+2	; 0x02
     f3a:	28 2f       	mov	r18, r24
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	02 2e       	mov	r0, r18
     f44:	02 c0       	rjmp	.+4      	; 0xf4a <DIO_VidSetPinDirection+0xa6>
     f46:	88 0f       	add	r24, r24
     f48:	99 1f       	adc	r25, r25
     f4a:	0a 94       	dec	r0
     f4c:	e2 f7       	brpl	.-8      	; 0xf46 <DIO_VidSetPinDirection+0xa2>
     f4e:	84 2b       	or	r24, r20
     f50:	8c 93       	st	X, r24
     f52:	9f c0       	rjmp	.+318    	; 0x1092 <DIO_VidSetPinDirection+0x1ee>
			case PORTC:SET_BIT(DDRC, copy_U8pin); break;
     f54:	a4 e3       	ldi	r26, 0x34	; 52
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	e4 e3       	ldi	r30, 0x34	; 52
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	48 2f       	mov	r20, r24
     f60:	8a 81       	ldd	r24, Y+2	; 0x02
     f62:	28 2f       	mov	r18, r24
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	02 2e       	mov	r0, r18
     f6c:	02 c0       	rjmp	.+4      	; 0xf72 <DIO_VidSetPinDirection+0xce>
     f6e:	88 0f       	add	r24, r24
     f70:	99 1f       	adc	r25, r25
     f72:	0a 94       	dec	r0
     f74:	e2 f7       	brpl	.-8      	; 0xf6e <DIO_VidSetPinDirection+0xca>
     f76:	84 2b       	or	r24, r20
     f78:	8c 93       	st	X, r24
     f7a:	8b c0       	rjmp	.+278    	; 0x1092 <DIO_VidSetPinDirection+0x1ee>
			case PORTD:SET_BIT(DDRD, copy_U8pin); break;
     f7c:	a1 e3       	ldi	r26, 0x31	; 49
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	e1 e3       	ldi	r30, 0x31	; 49
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	48 2f       	mov	r20, r24
     f88:	8a 81       	ldd	r24, Y+2	; 0x02
     f8a:	28 2f       	mov	r18, r24
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	02 2e       	mov	r0, r18
     f94:	02 c0       	rjmp	.+4      	; 0xf9a <DIO_VidSetPinDirection+0xf6>
     f96:	88 0f       	add	r24, r24
     f98:	99 1f       	adc	r25, r25
     f9a:	0a 94       	dec	r0
     f9c:	e2 f7       	brpl	.-8      	; 0xf96 <DIO_VidSetPinDirection+0xf2>
     f9e:	84 2b       	or	r24, r20
     fa0:	8c 93       	st	X, r24
     fa2:	77 c0       	rjmp	.+238    	; 0x1092 <DIO_VidSetPinDirection+0x1ee>
	
		}	
	}
	else if(INPUT==copy_U8state)
     fa4:	8b 81       	ldd	r24, Y+3	; 0x03
     fa6:	88 23       	and	r24, r24
     fa8:	09 f0       	breq	.+2      	; 0xfac <DIO_VidSetPinDirection+0x108>
     faa:	73 c0       	rjmp	.+230    	; 0x1092 <DIO_VidSetPinDirection+0x1ee>
	{
		switch(copy_u8port)
     fac:	89 81       	ldd	r24, Y+1	; 0x01
     fae:	28 2f       	mov	r18, r24
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	3d 83       	std	Y+5, r19	; 0x05
     fb4:	2c 83       	std	Y+4, r18	; 0x04
     fb6:	8c 81       	ldd	r24, Y+4	; 0x04
     fb8:	9d 81       	ldd	r25, Y+5	; 0x05
     fba:	81 30       	cpi	r24, 0x01	; 1
     fbc:	91 05       	cpc	r25, r1
     fbe:	59 f1       	breq	.+86     	; 0x1016 <DIO_VidSetPinDirection+0x172>
     fc0:	2c 81       	ldd	r18, Y+4	; 0x04
     fc2:	3d 81       	ldd	r19, Y+5	; 0x05
     fc4:	22 30       	cpi	r18, 0x02	; 2
     fc6:	31 05       	cpc	r19, r1
     fc8:	2c f4       	brge	.+10     	; 0xfd4 <DIO_VidSetPinDirection+0x130>
     fca:	8c 81       	ldd	r24, Y+4	; 0x04
     fcc:	9d 81       	ldd	r25, Y+5	; 0x05
     fce:	00 97       	sbiw	r24, 0x00	; 0
     fd0:	69 f0       	breq	.+26     	; 0xfec <DIO_VidSetPinDirection+0x148>
     fd2:	5f c0       	rjmp	.+190    	; 0x1092 <DIO_VidSetPinDirection+0x1ee>
     fd4:	2c 81       	ldd	r18, Y+4	; 0x04
     fd6:	3d 81       	ldd	r19, Y+5	; 0x05
     fd8:	22 30       	cpi	r18, 0x02	; 2
     fda:	31 05       	cpc	r19, r1
     fdc:	89 f1       	breq	.+98     	; 0x1040 <DIO_VidSetPinDirection+0x19c>
     fde:	8c 81       	ldd	r24, Y+4	; 0x04
     fe0:	9d 81       	ldd	r25, Y+5	; 0x05
     fe2:	83 30       	cpi	r24, 0x03	; 3
     fe4:	91 05       	cpc	r25, r1
     fe6:	09 f4       	brne	.+2      	; 0xfea <DIO_VidSetPinDirection+0x146>
     fe8:	40 c0       	rjmp	.+128    	; 0x106a <DIO_VidSetPinDirection+0x1c6>
     fea:	53 c0       	rjmp	.+166    	; 0x1092 <DIO_VidSetPinDirection+0x1ee>
		{
			case PORTA:CLR_BIT(DDRA, copy_U8pin); break;
     fec:	aa e3       	ldi	r26, 0x3A	; 58
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	ea e3       	ldi	r30, 0x3A	; 58
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	48 2f       	mov	r20, r24
     ff8:	8a 81       	ldd	r24, Y+2	; 0x02
     ffa:	28 2f       	mov	r18, r24
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	02 2e       	mov	r0, r18
    1004:	02 c0       	rjmp	.+4      	; 0x100a <DIO_VidSetPinDirection+0x166>
    1006:	88 0f       	add	r24, r24
    1008:	99 1f       	adc	r25, r25
    100a:	0a 94       	dec	r0
    100c:	e2 f7       	brpl	.-8      	; 0x1006 <DIO_VidSetPinDirection+0x162>
    100e:	80 95       	com	r24
    1010:	84 23       	and	r24, r20
    1012:	8c 93       	st	X, r24
    1014:	3e c0       	rjmp	.+124    	; 0x1092 <DIO_VidSetPinDirection+0x1ee>
			case PORTB:CLR_BIT(DDRB, copy_U8pin); break;
    1016:	a7 e3       	ldi	r26, 0x37	; 55
    1018:	b0 e0       	ldi	r27, 0x00	; 0
    101a:	e7 e3       	ldi	r30, 0x37	; 55
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	48 2f       	mov	r20, r24
    1022:	8a 81       	ldd	r24, Y+2	; 0x02
    1024:	28 2f       	mov	r18, r24
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	02 2e       	mov	r0, r18
    102e:	02 c0       	rjmp	.+4      	; 0x1034 <DIO_VidSetPinDirection+0x190>
    1030:	88 0f       	add	r24, r24
    1032:	99 1f       	adc	r25, r25
    1034:	0a 94       	dec	r0
    1036:	e2 f7       	brpl	.-8      	; 0x1030 <DIO_VidSetPinDirection+0x18c>
    1038:	80 95       	com	r24
    103a:	84 23       	and	r24, r20
    103c:	8c 93       	st	X, r24
    103e:	29 c0       	rjmp	.+82     	; 0x1092 <DIO_VidSetPinDirection+0x1ee>
		    case PORTC:CLR_BIT(DDRC, copy_U8pin); break;
    1040:	a4 e3       	ldi	r26, 0x34	; 52
    1042:	b0 e0       	ldi	r27, 0x00	; 0
    1044:	e4 e3       	ldi	r30, 0x34	; 52
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	48 2f       	mov	r20, r24
    104c:	8a 81       	ldd	r24, Y+2	; 0x02
    104e:	28 2f       	mov	r18, r24
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	02 2e       	mov	r0, r18
    1058:	02 c0       	rjmp	.+4      	; 0x105e <DIO_VidSetPinDirection+0x1ba>
    105a:	88 0f       	add	r24, r24
    105c:	99 1f       	adc	r25, r25
    105e:	0a 94       	dec	r0
    1060:	e2 f7       	brpl	.-8      	; 0x105a <DIO_VidSetPinDirection+0x1b6>
    1062:	80 95       	com	r24
    1064:	84 23       	and	r24, r20
    1066:	8c 93       	st	X, r24
    1068:	14 c0       	rjmp	.+40     	; 0x1092 <DIO_VidSetPinDirection+0x1ee>
		    case PORTD:CLR_BIT(DDRD, copy_U8pin); break;
    106a:	a1 e3       	ldi	r26, 0x31	; 49
    106c:	b0 e0       	ldi	r27, 0x00	; 0
    106e:	e1 e3       	ldi	r30, 0x31	; 49
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	48 2f       	mov	r20, r24
    1076:	8a 81       	ldd	r24, Y+2	; 0x02
    1078:	28 2f       	mov	r18, r24
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	02 2e       	mov	r0, r18
    1082:	02 c0       	rjmp	.+4      	; 0x1088 <DIO_VidSetPinDirection+0x1e4>
    1084:	88 0f       	add	r24, r24
    1086:	99 1f       	adc	r25, r25
    1088:	0a 94       	dec	r0
    108a:	e2 f7       	brpl	.-8      	; 0x1084 <DIO_VidSetPinDirection+0x1e0>
    108c:	80 95       	com	r24
    108e:	84 23       	and	r24, r20
    1090:	8c 93       	st	X, r24
	else
	{
		
	}
	
}
    1092:	27 96       	adiw	r28, 0x07	; 7
    1094:	0f b6       	in	r0, 0x3f	; 63
    1096:	f8 94       	cli
    1098:	de bf       	out	0x3e, r29	; 62
    109a:	0f be       	out	0x3f, r0	; 63
    109c:	cd bf       	out	0x3d, r28	; 61
    109e:	cf 91       	pop	r28
    10a0:	df 91       	pop	r29
    10a2:	08 95       	ret

000010a4 <DIO_VidSetPinValue>:
void DIO_VidSetPinValue			(u8 copy_u8port, u8 copy_U8pin, u8 copy_U8value)
{
    10a4:	df 93       	push	r29
    10a6:	cf 93       	push	r28
    10a8:	cd b7       	in	r28, 0x3d	; 61
    10aa:	de b7       	in	r29, 0x3e	; 62
    10ac:	27 97       	sbiw	r28, 0x07	; 7
    10ae:	0f b6       	in	r0, 0x3f	; 63
    10b0:	f8 94       	cli
    10b2:	de bf       	out	0x3e, r29	; 62
    10b4:	0f be       	out	0x3f, r0	; 63
    10b6:	cd bf       	out	0x3d, r28	; 61
    10b8:	89 83       	std	Y+1, r24	; 0x01
    10ba:	6a 83       	std	Y+2, r22	; 0x02
    10bc:	4b 83       	std	Y+3, r20	; 0x03
	if(HIGH==copy_U8value)
    10be:	8b 81       	ldd	r24, Y+3	; 0x03
    10c0:	81 30       	cpi	r24, 0x01	; 1
    10c2:	09 f0       	breq	.+2      	; 0x10c6 <DIO_VidSetPinValue+0x22>
    10c4:	6f c0       	rjmp	.+222    	; 0x11a4 <DIO_VidSetPinValue+0x100>
	{
		switch (copy_u8port)
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	3f 83       	std	Y+7, r19	; 0x07
    10ce:	2e 83       	std	Y+6, r18	; 0x06
    10d0:	8e 81       	ldd	r24, Y+6	; 0x06
    10d2:	9f 81       	ldd	r25, Y+7	; 0x07
    10d4:	81 30       	cpi	r24, 0x01	; 1
    10d6:	91 05       	cpc	r25, r1
    10d8:	49 f1       	breq	.+82     	; 0x112c <DIO_VidSetPinValue+0x88>
    10da:	2e 81       	ldd	r18, Y+6	; 0x06
    10dc:	3f 81       	ldd	r19, Y+7	; 0x07
    10de:	22 30       	cpi	r18, 0x02	; 2
    10e0:	31 05       	cpc	r19, r1
    10e2:	2c f4       	brge	.+10     	; 0x10ee <DIO_VidSetPinValue+0x4a>
    10e4:	8e 81       	ldd	r24, Y+6	; 0x06
    10e6:	9f 81       	ldd	r25, Y+7	; 0x07
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	61 f0       	breq	.+24     	; 0x1104 <DIO_VidSetPinValue+0x60>
    10ec:	d2 c0       	rjmp	.+420    	; 0x1292 <DIO_VidSetPinValue+0x1ee>
    10ee:	2e 81       	ldd	r18, Y+6	; 0x06
    10f0:	3f 81       	ldd	r19, Y+7	; 0x07
    10f2:	22 30       	cpi	r18, 0x02	; 2
    10f4:	31 05       	cpc	r19, r1
    10f6:	71 f1       	breq	.+92     	; 0x1154 <DIO_VidSetPinValue+0xb0>
    10f8:	8e 81       	ldd	r24, Y+6	; 0x06
    10fa:	9f 81       	ldd	r25, Y+7	; 0x07
    10fc:	83 30       	cpi	r24, 0x03	; 3
    10fe:	91 05       	cpc	r25, r1
    1100:	e9 f1       	breq	.+122    	; 0x117c <DIO_VidSetPinValue+0xd8>
    1102:	c7 c0       	rjmp	.+398    	; 0x1292 <DIO_VidSetPinValue+0x1ee>
		{
			case PORTA:SET_BIT(PORT_A, copy_U8pin); break;
    1104:	ab e3       	ldi	r26, 0x3B	; 59
    1106:	b0 e0       	ldi	r27, 0x00	; 0
    1108:	eb e3       	ldi	r30, 0x3B	; 59
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	80 81       	ld	r24, Z
    110e:	48 2f       	mov	r20, r24
    1110:	8a 81       	ldd	r24, Y+2	; 0x02
    1112:	28 2f       	mov	r18, r24
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	02 2e       	mov	r0, r18
    111c:	02 c0       	rjmp	.+4      	; 0x1122 <DIO_VidSetPinValue+0x7e>
    111e:	88 0f       	add	r24, r24
    1120:	99 1f       	adc	r25, r25
    1122:	0a 94       	dec	r0
    1124:	e2 f7       	brpl	.-8      	; 0x111e <DIO_VidSetPinValue+0x7a>
    1126:	84 2b       	or	r24, r20
    1128:	8c 93       	st	X, r24
    112a:	b3 c0       	rjmp	.+358    	; 0x1292 <DIO_VidSetPinValue+0x1ee>
			case PORTB:SET_BIT(PORT_B, copy_U8pin); break;
    112c:	a8 e3       	ldi	r26, 0x38	; 56
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	e8 e3       	ldi	r30, 0x38	; 56
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	48 2f       	mov	r20, r24
    1138:	8a 81       	ldd	r24, Y+2	; 0x02
    113a:	28 2f       	mov	r18, r24
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	02 2e       	mov	r0, r18
    1144:	02 c0       	rjmp	.+4      	; 0x114a <DIO_VidSetPinValue+0xa6>
    1146:	88 0f       	add	r24, r24
    1148:	99 1f       	adc	r25, r25
    114a:	0a 94       	dec	r0
    114c:	e2 f7       	brpl	.-8      	; 0x1146 <DIO_VidSetPinValue+0xa2>
    114e:	84 2b       	or	r24, r20
    1150:	8c 93       	st	X, r24
    1152:	9f c0       	rjmp	.+318    	; 0x1292 <DIO_VidSetPinValue+0x1ee>
			case PORTC:SET_BIT(PORT_C, copy_U8pin); break;
    1154:	a5 e3       	ldi	r26, 0x35	; 53
    1156:	b0 e0       	ldi	r27, 0x00	; 0
    1158:	e5 e3       	ldi	r30, 0x35	; 53
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	48 2f       	mov	r20, r24
    1160:	8a 81       	ldd	r24, Y+2	; 0x02
    1162:	28 2f       	mov	r18, r24
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	02 2e       	mov	r0, r18
    116c:	02 c0       	rjmp	.+4      	; 0x1172 <DIO_VidSetPinValue+0xce>
    116e:	88 0f       	add	r24, r24
    1170:	99 1f       	adc	r25, r25
    1172:	0a 94       	dec	r0
    1174:	e2 f7       	brpl	.-8      	; 0x116e <DIO_VidSetPinValue+0xca>
    1176:	84 2b       	or	r24, r20
    1178:	8c 93       	st	X, r24
    117a:	8b c0       	rjmp	.+278    	; 0x1292 <DIO_VidSetPinValue+0x1ee>
			case PORTD:SET_BIT(PORT_D, copy_U8pin); break;
    117c:	a2 e3       	ldi	r26, 0x32	; 50
    117e:	b0 e0       	ldi	r27, 0x00	; 0
    1180:	e2 e3       	ldi	r30, 0x32	; 50
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	80 81       	ld	r24, Z
    1186:	48 2f       	mov	r20, r24
    1188:	8a 81       	ldd	r24, Y+2	; 0x02
    118a:	28 2f       	mov	r18, r24
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	02 2e       	mov	r0, r18
    1194:	02 c0       	rjmp	.+4      	; 0x119a <DIO_VidSetPinValue+0xf6>
    1196:	88 0f       	add	r24, r24
    1198:	99 1f       	adc	r25, r25
    119a:	0a 94       	dec	r0
    119c:	e2 f7       	brpl	.-8      	; 0x1196 <DIO_VidSetPinValue+0xf2>
    119e:	84 2b       	or	r24, r20
    11a0:	8c 93       	st	X, r24
    11a2:	77 c0       	rjmp	.+238    	; 0x1292 <DIO_VidSetPinValue+0x1ee>
	
		}	
	}
	else if(LOW==copy_U8value)
    11a4:	8b 81       	ldd	r24, Y+3	; 0x03
    11a6:	88 23       	and	r24, r24
    11a8:	09 f0       	breq	.+2      	; 0x11ac <DIO_VidSetPinValue+0x108>
    11aa:	73 c0       	rjmp	.+230    	; 0x1292 <DIO_VidSetPinValue+0x1ee>
	{
		switch(copy_u8port)
    11ac:	89 81       	ldd	r24, Y+1	; 0x01
    11ae:	28 2f       	mov	r18, r24
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	3d 83       	std	Y+5, r19	; 0x05
    11b4:	2c 83       	std	Y+4, r18	; 0x04
    11b6:	8c 81       	ldd	r24, Y+4	; 0x04
    11b8:	9d 81       	ldd	r25, Y+5	; 0x05
    11ba:	81 30       	cpi	r24, 0x01	; 1
    11bc:	91 05       	cpc	r25, r1
    11be:	59 f1       	breq	.+86     	; 0x1216 <DIO_VidSetPinValue+0x172>
    11c0:	2c 81       	ldd	r18, Y+4	; 0x04
    11c2:	3d 81       	ldd	r19, Y+5	; 0x05
    11c4:	22 30       	cpi	r18, 0x02	; 2
    11c6:	31 05       	cpc	r19, r1
    11c8:	2c f4       	brge	.+10     	; 0x11d4 <DIO_VidSetPinValue+0x130>
    11ca:	8c 81       	ldd	r24, Y+4	; 0x04
    11cc:	9d 81       	ldd	r25, Y+5	; 0x05
    11ce:	00 97       	sbiw	r24, 0x00	; 0
    11d0:	69 f0       	breq	.+26     	; 0x11ec <DIO_VidSetPinValue+0x148>
    11d2:	5f c0       	rjmp	.+190    	; 0x1292 <DIO_VidSetPinValue+0x1ee>
    11d4:	2c 81       	ldd	r18, Y+4	; 0x04
    11d6:	3d 81       	ldd	r19, Y+5	; 0x05
    11d8:	22 30       	cpi	r18, 0x02	; 2
    11da:	31 05       	cpc	r19, r1
    11dc:	89 f1       	breq	.+98     	; 0x1240 <DIO_VidSetPinValue+0x19c>
    11de:	8c 81       	ldd	r24, Y+4	; 0x04
    11e0:	9d 81       	ldd	r25, Y+5	; 0x05
    11e2:	83 30       	cpi	r24, 0x03	; 3
    11e4:	91 05       	cpc	r25, r1
    11e6:	09 f4       	brne	.+2      	; 0x11ea <DIO_VidSetPinValue+0x146>
    11e8:	40 c0       	rjmp	.+128    	; 0x126a <DIO_VidSetPinValue+0x1c6>
    11ea:	53 c0       	rjmp	.+166    	; 0x1292 <DIO_VidSetPinValue+0x1ee>
		{
			case PORTA:CLR_BIT(PORT_A, copy_U8pin); break;
    11ec:	ab e3       	ldi	r26, 0x3B	; 59
    11ee:	b0 e0       	ldi	r27, 0x00	; 0
    11f0:	eb e3       	ldi	r30, 0x3B	; 59
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	80 81       	ld	r24, Z
    11f6:	48 2f       	mov	r20, r24
    11f8:	8a 81       	ldd	r24, Y+2	; 0x02
    11fa:	28 2f       	mov	r18, r24
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	02 2e       	mov	r0, r18
    1204:	02 c0       	rjmp	.+4      	; 0x120a <DIO_VidSetPinValue+0x166>
    1206:	88 0f       	add	r24, r24
    1208:	99 1f       	adc	r25, r25
    120a:	0a 94       	dec	r0
    120c:	e2 f7       	brpl	.-8      	; 0x1206 <DIO_VidSetPinValue+0x162>
    120e:	80 95       	com	r24
    1210:	84 23       	and	r24, r20
    1212:	8c 93       	st	X, r24
    1214:	3e c0       	rjmp	.+124    	; 0x1292 <DIO_VidSetPinValue+0x1ee>
			case PORTB:CLR_BIT(PORT_B, copy_U8pin); break;
    1216:	a8 e3       	ldi	r26, 0x38	; 56
    1218:	b0 e0       	ldi	r27, 0x00	; 0
    121a:	e8 e3       	ldi	r30, 0x38	; 56
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	48 2f       	mov	r20, r24
    1222:	8a 81       	ldd	r24, Y+2	; 0x02
    1224:	28 2f       	mov	r18, r24
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	02 2e       	mov	r0, r18
    122e:	02 c0       	rjmp	.+4      	; 0x1234 <DIO_VidSetPinValue+0x190>
    1230:	88 0f       	add	r24, r24
    1232:	99 1f       	adc	r25, r25
    1234:	0a 94       	dec	r0
    1236:	e2 f7       	brpl	.-8      	; 0x1230 <DIO_VidSetPinValue+0x18c>
    1238:	80 95       	com	r24
    123a:	84 23       	and	r24, r20
    123c:	8c 93       	st	X, r24
    123e:	29 c0       	rjmp	.+82     	; 0x1292 <DIO_VidSetPinValue+0x1ee>
		    case PORTC:CLR_BIT(PORT_C, copy_U8pin); break;
    1240:	a5 e3       	ldi	r26, 0x35	; 53
    1242:	b0 e0       	ldi	r27, 0x00	; 0
    1244:	e5 e3       	ldi	r30, 0x35	; 53
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 81       	ld	r24, Z
    124a:	48 2f       	mov	r20, r24
    124c:	8a 81       	ldd	r24, Y+2	; 0x02
    124e:	28 2f       	mov	r18, r24
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	02 2e       	mov	r0, r18
    1258:	02 c0       	rjmp	.+4      	; 0x125e <DIO_VidSetPinValue+0x1ba>
    125a:	88 0f       	add	r24, r24
    125c:	99 1f       	adc	r25, r25
    125e:	0a 94       	dec	r0
    1260:	e2 f7       	brpl	.-8      	; 0x125a <DIO_VidSetPinValue+0x1b6>
    1262:	80 95       	com	r24
    1264:	84 23       	and	r24, r20
    1266:	8c 93       	st	X, r24
    1268:	14 c0       	rjmp	.+40     	; 0x1292 <DIO_VidSetPinValue+0x1ee>
		    case PORTD:CLR_BIT(PORT_D, copy_U8pin); break;
    126a:	a2 e3       	ldi	r26, 0x32	; 50
    126c:	b0 e0       	ldi	r27, 0x00	; 0
    126e:	e2 e3       	ldi	r30, 0x32	; 50
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	48 2f       	mov	r20, r24
    1276:	8a 81       	ldd	r24, Y+2	; 0x02
    1278:	28 2f       	mov	r18, r24
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	02 2e       	mov	r0, r18
    1282:	02 c0       	rjmp	.+4      	; 0x1288 <DIO_VidSetPinValue+0x1e4>
    1284:	88 0f       	add	r24, r24
    1286:	99 1f       	adc	r25, r25
    1288:	0a 94       	dec	r0
    128a:	e2 f7       	brpl	.-8      	; 0x1284 <DIO_VidSetPinValue+0x1e0>
    128c:	80 95       	com	r24
    128e:	84 23       	and	r24, r20
    1290:	8c 93       	st	X, r24
		
	}	
	
	
	
}
    1292:	27 96       	adiw	r28, 0x07	; 7
    1294:	0f b6       	in	r0, 0x3f	; 63
    1296:	f8 94       	cli
    1298:	de bf       	out	0x3e, r29	; 62
    129a:	0f be       	out	0x3f, r0	; 63
    129c:	cd bf       	out	0x3d, r28	; 61
    129e:	cf 91       	pop	r28
    12a0:	df 91       	pop	r29
    12a2:	08 95       	ret

000012a4 <DIO_VidGetPinValue>:


u8 DIO_VidGetPinValue			(u8 copy_u8port, u8 Copy_U8Pin)
{
    12a4:	df 93       	push	r29
    12a6:	cf 93       	push	r28
    12a8:	00 d0       	rcall	.+0      	; 0x12aa <DIO_VidGetPinValue+0x6>
    12aa:	00 d0       	rcall	.+0      	; 0x12ac <DIO_VidGetPinValue+0x8>
    12ac:	0f 92       	push	r0
    12ae:	cd b7       	in	r28, 0x3d	; 61
    12b0:	de b7       	in	r29, 0x3e	; 62
    12b2:	8a 83       	std	Y+2, r24	; 0x02
    12b4:	6b 83       	std	Y+3, r22	; 0x03
	u8 Lcal_U8PinResult=0;
    12b6:	19 82       	std	Y+1, r1	; 0x01
	switch(copy_u8port){
    12b8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ba:	28 2f       	mov	r18, r24
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	3d 83       	std	Y+5, r19	; 0x05
    12c0:	2c 83       	std	Y+4, r18	; 0x04
    12c2:	4c 81       	ldd	r20, Y+4	; 0x04
    12c4:	5d 81       	ldd	r21, Y+5	; 0x05
    12c6:	41 30       	cpi	r20, 0x01	; 1
    12c8:	51 05       	cpc	r21, r1
    12ca:	41 f1       	breq	.+80     	; 0x131c <DIO_VidGetPinValue+0x78>
    12cc:	8c 81       	ldd	r24, Y+4	; 0x04
    12ce:	9d 81       	ldd	r25, Y+5	; 0x05
    12d0:	82 30       	cpi	r24, 0x02	; 2
    12d2:	91 05       	cpc	r25, r1
    12d4:	34 f4       	brge	.+12     	; 0x12e2 <DIO_VidGetPinValue+0x3e>
    12d6:	2c 81       	ldd	r18, Y+4	; 0x04
    12d8:	3d 81       	ldd	r19, Y+5	; 0x05
    12da:	21 15       	cp	r18, r1
    12dc:	31 05       	cpc	r19, r1
    12de:	61 f0       	breq	.+24     	; 0x12f8 <DIO_VidGetPinValue+0x54>
    12e0:	52 c0       	rjmp	.+164    	; 0x1386 <DIO_VidGetPinValue+0xe2>
    12e2:	4c 81       	ldd	r20, Y+4	; 0x04
    12e4:	5d 81       	ldd	r21, Y+5	; 0x05
    12e6:	42 30       	cpi	r20, 0x02	; 2
    12e8:	51 05       	cpc	r21, r1
    12ea:	51 f1       	breq	.+84     	; 0x1340 <DIO_VidGetPinValue+0x9c>
    12ec:	8c 81       	ldd	r24, Y+4	; 0x04
    12ee:	9d 81       	ldd	r25, Y+5	; 0x05
    12f0:	83 30       	cpi	r24, 0x03	; 3
    12f2:	91 05       	cpc	r25, r1
    12f4:	b9 f1       	breq	.+110    	; 0x1364 <DIO_VidGetPinValue+0xc0>
    12f6:	47 c0       	rjmp	.+142    	; 0x1386 <DIO_VidGetPinValue+0xe2>

			case PORTA :		Lcal_U8PinResult=GET_BIT(PINA,Copy_U8Pin);	        break;
    12f8:	e9 e3       	ldi	r30, 0x39	; 57
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	28 2f       	mov	r18, r24
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	8b 81       	ldd	r24, Y+3	; 0x03
    1304:	88 2f       	mov	r24, r24
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	a9 01       	movw	r20, r18
    130a:	02 c0       	rjmp	.+4      	; 0x1310 <DIO_VidGetPinValue+0x6c>
    130c:	55 95       	asr	r21
    130e:	47 95       	ror	r20
    1310:	8a 95       	dec	r24
    1312:	e2 f7       	brpl	.-8      	; 0x130c <DIO_VidGetPinValue+0x68>
    1314:	ca 01       	movw	r24, r20
    1316:	81 70       	andi	r24, 0x01	; 1
    1318:	89 83       	std	Y+1, r24	; 0x01
    131a:	35 c0       	rjmp	.+106    	; 0x1386 <DIO_VidGetPinValue+0xe2>
			case PORTB :		Lcal_U8PinResult=GET_BIT(PINB,Copy_U8Pin); 		    break;
    131c:	e6 e3       	ldi	r30, 0x36	; 54
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	80 81       	ld	r24, Z
    1322:	28 2f       	mov	r18, r24
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	8b 81       	ldd	r24, Y+3	; 0x03
    1328:	88 2f       	mov	r24, r24
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	a9 01       	movw	r20, r18
    132e:	02 c0       	rjmp	.+4      	; 0x1334 <DIO_VidGetPinValue+0x90>
    1330:	55 95       	asr	r21
    1332:	47 95       	ror	r20
    1334:	8a 95       	dec	r24
    1336:	e2 f7       	brpl	.-8      	; 0x1330 <DIO_VidGetPinValue+0x8c>
    1338:	ca 01       	movw	r24, r20
    133a:	81 70       	andi	r24, 0x01	; 1
    133c:	89 83       	std	Y+1, r24	; 0x01
    133e:	23 c0       	rjmp	.+70     	; 0x1386 <DIO_VidGetPinValue+0xe2>
			case PORTC :		Lcal_U8PinResult=GET_BIT(PINC,Copy_U8Pin);			break;
    1340:	e3 e3       	ldi	r30, 0x33	; 51
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	80 81       	ld	r24, Z
    1346:	28 2f       	mov	r18, r24
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	8b 81       	ldd	r24, Y+3	; 0x03
    134c:	88 2f       	mov	r24, r24
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	a9 01       	movw	r20, r18
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <DIO_VidGetPinValue+0xb4>
    1354:	55 95       	asr	r21
    1356:	47 95       	ror	r20
    1358:	8a 95       	dec	r24
    135a:	e2 f7       	brpl	.-8      	; 0x1354 <DIO_VidGetPinValue+0xb0>
    135c:	ca 01       	movw	r24, r20
    135e:	81 70       	andi	r24, 0x01	; 1
    1360:	89 83       	std	Y+1, r24	; 0x01
    1362:	11 c0       	rjmp	.+34     	; 0x1386 <DIO_VidGetPinValue+0xe2>
			case PORTD :		Lcal_U8PinResult=GET_BIT(PIND,Copy_U8Pin);			break;
    1364:	e0 e3       	ldi	r30, 0x30	; 48
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	80 81       	ld	r24, Z
    136a:	28 2f       	mov	r18, r24
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	8b 81       	ldd	r24, Y+3	; 0x03
    1370:	88 2f       	mov	r24, r24
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	a9 01       	movw	r20, r18
    1376:	02 c0       	rjmp	.+4      	; 0x137c <DIO_VidGetPinValue+0xd8>
    1378:	55 95       	asr	r21
    137a:	47 95       	ror	r20
    137c:	8a 95       	dec	r24
    137e:	e2 f7       	brpl	.-8      	; 0x1378 <DIO_VidGetPinValue+0xd4>
    1380:	ca 01       	movw	r24, r20
    1382:	81 70       	andi	r24, 0x01	; 1
    1384:	89 83       	std	Y+1, r24	; 0x01

			}


return(Lcal_U8PinResult);
    1386:	89 81       	ldd	r24, Y+1	; 0x01
	
	
}
    1388:	0f 90       	pop	r0
    138a:	0f 90       	pop	r0
    138c:	0f 90       	pop	r0
    138e:	0f 90       	pop	r0
    1390:	0f 90       	pop	r0
    1392:	cf 91       	pop	r28
    1394:	df 91       	pop	r29
    1396:	08 95       	ret

00001398 <DIO_VidSetPortDirection>:

void DIO_VidSetPortDirection	(u8 copy_u8port, u8 copy_U8state)
{
    1398:	df 93       	push	r29
    139a:	cf 93       	push	r28
    139c:	00 d0       	rcall	.+0      	; 0x139e <DIO_VidSetPortDirection+0x6>
    139e:	00 d0       	rcall	.+0      	; 0x13a0 <DIO_VidSetPortDirection+0x8>
    13a0:	00 d0       	rcall	.+0      	; 0x13a2 <DIO_VidSetPortDirection+0xa>
    13a2:	cd b7       	in	r28, 0x3d	; 61
    13a4:	de b7       	in	r29, 0x3e	; 62
    13a6:	89 83       	std	Y+1, r24	; 0x01
    13a8:	6a 83       	std	Y+2, r22	; 0x02
	
	if(OUTPUT==copy_U8state)
    13aa:	8a 81       	ldd	r24, Y+2	; 0x02
    13ac:	81 30       	cpi	r24, 0x01	; 1
    13ae:	99 f5       	brne	.+102    	; 0x1416 <DIO_VidSetPortDirection+0x7e>
	{
		switch (copy_u8port)
    13b0:	89 81       	ldd	r24, Y+1	; 0x01
    13b2:	28 2f       	mov	r18, r24
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	3e 83       	std	Y+6, r19	; 0x06
    13b8:	2d 83       	std	Y+5, r18	; 0x05
    13ba:	8d 81       	ldd	r24, Y+5	; 0x05
    13bc:	9e 81       	ldd	r25, Y+6	; 0x06
    13be:	81 30       	cpi	r24, 0x01	; 1
    13c0:	91 05       	cpc	r25, r1
    13c2:	d1 f0       	breq	.+52     	; 0x13f8 <DIO_VidSetPortDirection+0x60>
    13c4:	2d 81       	ldd	r18, Y+5	; 0x05
    13c6:	3e 81       	ldd	r19, Y+6	; 0x06
    13c8:	22 30       	cpi	r18, 0x02	; 2
    13ca:	31 05       	cpc	r19, r1
    13cc:	2c f4       	brge	.+10     	; 0x13d8 <DIO_VidSetPortDirection+0x40>
    13ce:	8d 81       	ldd	r24, Y+5	; 0x05
    13d0:	9e 81       	ldd	r25, Y+6	; 0x06
    13d2:	00 97       	sbiw	r24, 0x00	; 0
    13d4:	61 f0       	breq	.+24     	; 0x13ee <DIO_VidSetPortDirection+0x56>
    13d6:	50 c0       	rjmp	.+160    	; 0x1478 <DIO_VidSetPortDirection+0xe0>
    13d8:	2d 81       	ldd	r18, Y+5	; 0x05
    13da:	3e 81       	ldd	r19, Y+6	; 0x06
    13dc:	22 30       	cpi	r18, 0x02	; 2
    13de:	31 05       	cpc	r19, r1
    13e0:	81 f0       	breq	.+32     	; 0x1402 <DIO_VidSetPortDirection+0x6a>
    13e2:	8d 81       	ldd	r24, Y+5	; 0x05
    13e4:	9e 81       	ldd	r25, Y+6	; 0x06
    13e6:	83 30       	cpi	r24, 0x03	; 3
    13e8:	91 05       	cpc	r25, r1
    13ea:	81 f0       	breq	.+32     	; 0x140c <DIO_VidSetPortDirection+0x74>
    13ec:	45 c0       	rjmp	.+138    	; 0x1478 <DIO_VidSetPortDirection+0xe0>
		{
			case PORTA:DDRA= ALL_OUTPUT		; break;
    13ee:	ea e3       	ldi	r30, 0x3A	; 58
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	8f ef       	ldi	r24, 0xFF	; 255
    13f4:	80 83       	st	Z, r24
    13f6:	40 c0       	rjmp	.+128    	; 0x1478 <DIO_VidSetPortDirection+0xe0>
			case PORTB:DDRB= ALL_OUTPUT		; break;
    13f8:	e7 e3       	ldi	r30, 0x37	; 55
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	8f ef       	ldi	r24, 0xFF	; 255
    13fe:	80 83       	st	Z, r24
    1400:	3b c0       	rjmp	.+118    	; 0x1478 <DIO_VidSetPortDirection+0xe0>
			case PORTC:DDRC= ALL_OUTPUT		; break;
    1402:	e4 e3       	ldi	r30, 0x34	; 52
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	8f ef       	ldi	r24, 0xFF	; 255
    1408:	80 83       	st	Z, r24
    140a:	36 c0       	rjmp	.+108    	; 0x1478 <DIO_VidSetPortDirection+0xe0>
			case PORTD:DDRD= ALL_OUTPUT		; break;
    140c:	e1 e3       	ldi	r30, 0x31	; 49
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	8f ef       	ldi	r24, 0xFF	; 255
    1412:	80 83       	st	Z, r24
    1414:	31 c0       	rjmp	.+98     	; 0x1478 <DIO_VidSetPortDirection+0xe0>
	
		}	
	}
	else if(INPUT==copy_U8state)
    1416:	8a 81       	ldd	r24, Y+2	; 0x02
    1418:	88 23       	and	r24, r24
    141a:	71 f5       	brne	.+92     	; 0x1478 <DIO_VidSetPortDirection+0xe0>
	{
		switch(copy_u8port)
    141c:	89 81       	ldd	r24, Y+1	; 0x01
    141e:	28 2f       	mov	r18, r24
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	3c 83       	std	Y+4, r19	; 0x04
    1424:	2b 83       	std	Y+3, r18	; 0x03
    1426:	8b 81       	ldd	r24, Y+3	; 0x03
    1428:	9c 81       	ldd	r25, Y+4	; 0x04
    142a:	81 30       	cpi	r24, 0x01	; 1
    142c:	91 05       	cpc	r25, r1
    142e:	c9 f0       	breq	.+50     	; 0x1462 <DIO_VidSetPortDirection+0xca>
    1430:	2b 81       	ldd	r18, Y+3	; 0x03
    1432:	3c 81       	ldd	r19, Y+4	; 0x04
    1434:	22 30       	cpi	r18, 0x02	; 2
    1436:	31 05       	cpc	r19, r1
    1438:	2c f4       	brge	.+10     	; 0x1444 <DIO_VidSetPortDirection+0xac>
    143a:	8b 81       	ldd	r24, Y+3	; 0x03
    143c:	9c 81       	ldd	r25, Y+4	; 0x04
    143e:	00 97       	sbiw	r24, 0x00	; 0
    1440:	61 f0       	breq	.+24     	; 0x145a <DIO_VidSetPortDirection+0xc2>
    1442:	1a c0       	rjmp	.+52     	; 0x1478 <DIO_VidSetPortDirection+0xe0>
    1444:	2b 81       	ldd	r18, Y+3	; 0x03
    1446:	3c 81       	ldd	r19, Y+4	; 0x04
    1448:	22 30       	cpi	r18, 0x02	; 2
    144a:	31 05       	cpc	r19, r1
    144c:	71 f0       	breq	.+28     	; 0x146a <DIO_VidSetPortDirection+0xd2>
    144e:	8b 81       	ldd	r24, Y+3	; 0x03
    1450:	9c 81       	ldd	r25, Y+4	; 0x04
    1452:	83 30       	cpi	r24, 0x03	; 3
    1454:	91 05       	cpc	r25, r1
    1456:	69 f0       	breq	.+26     	; 0x1472 <DIO_VidSetPortDirection+0xda>
    1458:	0f c0       	rjmp	.+30     	; 0x1478 <DIO_VidSetPortDirection+0xe0>
		{
			case PORTA:DDRA= ALL_INPUT		; break;
    145a:	ea e3       	ldi	r30, 0x3A	; 58
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	10 82       	st	Z, r1
    1460:	0b c0       	rjmp	.+22     	; 0x1478 <DIO_VidSetPortDirection+0xe0>
			case PORTB:DDRB= ALL_INPUT		; break;
    1462:	e7 e3       	ldi	r30, 0x37	; 55
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	10 82       	st	Z, r1
    1468:	07 c0       	rjmp	.+14     	; 0x1478 <DIO_VidSetPortDirection+0xe0>
			case PORTC:DDRC= ALL_INPUT		; break;
    146a:	e4 e3       	ldi	r30, 0x34	; 52
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	10 82       	st	Z, r1
    1470:	03 c0       	rjmp	.+6      	; 0x1478 <DIO_VidSetPortDirection+0xe0>
			case PORTD:DDRD= ALL_INPUT		; break;
    1472:	e1 e3       	ldi	r30, 0x31	; 49
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	10 82       	st	Z, r1
	{
		
	}
	
	
}
    1478:	26 96       	adiw	r28, 0x06	; 6
    147a:	0f b6       	in	r0, 0x3f	; 63
    147c:	f8 94       	cli
    147e:	de bf       	out	0x3e, r29	; 62
    1480:	0f be       	out	0x3f, r0	; 63
    1482:	cd bf       	out	0x3d, r28	; 61
    1484:	cf 91       	pop	r28
    1486:	df 91       	pop	r29
    1488:	08 95       	ret

0000148a <DIO_VidSetPortValue>:
void DIO_VidSetPortValue		(u8 copy_u8port, u8 copy_U8value)
{
    148a:	df 93       	push	r29
    148c:	cf 93       	push	r28
    148e:	00 d0       	rcall	.+0      	; 0x1490 <DIO_VidSetPortValue+0x6>
    1490:	00 d0       	rcall	.+0      	; 0x1492 <DIO_VidSetPortValue+0x8>
    1492:	cd b7       	in	r28, 0x3d	; 61
    1494:	de b7       	in	r29, 0x3e	; 62
    1496:	89 83       	std	Y+1, r24	; 0x01
    1498:	6a 83       	std	Y+2, r22	; 0x02
		
		switch (copy_u8port)
    149a:	89 81       	ldd	r24, Y+1	; 0x01
    149c:	28 2f       	mov	r18, r24
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	3c 83       	std	Y+4, r19	; 0x04
    14a2:	2b 83       	std	Y+3, r18	; 0x03
    14a4:	8b 81       	ldd	r24, Y+3	; 0x03
    14a6:	9c 81       	ldd	r25, Y+4	; 0x04
    14a8:	81 30       	cpi	r24, 0x01	; 1
    14aa:	91 05       	cpc	r25, r1
    14ac:	d1 f0       	breq	.+52     	; 0x14e2 <DIO_VidSetPortValue+0x58>
    14ae:	2b 81       	ldd	r18, Y+3	; 0x03
    14b0:	3c 81       	ldd	r19, Y+4	; 0x04
    14b2:	22 30       	cpi	r18, 0x02	; 2
    14b4:	31 05       	cpc	r19, r1
    14b6:	2c f4       	brge	.+10     	; 0x14c2 <DIO_VidSetPortValue+0x38>
    14b8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ba:	9c 81       	ldd	r25, Y+4	; 0x04
    14bc:	00 97       	sbiw	r24, 0x00	; 0
    14be:	61 f0       	breq	.+24     	; 0x14d8 <DIO_VidSetPortValue+0x4e>
    14c0:	1e c0       	rjmp	.+60     	; 0x14fe <DIO_VidSetPortValue+0x74>
    14c2:	2b 81       	ldd	r18, Y+3	; 0x03
    14c4:	3c 81       	ldd	r19, Y+4	; 0x04
    14c6:	22 30       	cpi	r18, 0x02	; 2
    14c8:	31 05       	cpc	r19, r1
    14ca:	81 f0       	breq	.+32     	; 0x14ec <DIO_VidSetPortValue+0x62>
    14cc:	8b 81       	ldd	r24, Y+3	; 0x03
    14ce:	9c 81       	ldd	r25, Y+4	; 0x04
    14d0:	83 30       	cpi	r24, 0x03	; 3
    14d2:	91 05       	cpc	r25, r1
    14d4:	81 f0       	breq	.+32     	; 0x14f6 <DIO_VidSetPortValue+0x6c>
    14d6:	13 c0       	rjmp	.+38     	; 0x14fe <DIO_VidSetPortValue+0x74>
		{
			case PORTA:PORT_A=copy_U8value		; break;
    14d8:	eb e3       	ldi	r30, 0x3B	; 59
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	8a 81       	ldd	r24, Y+2	; 0x02
    14de:	80 83       	st	Z, r24
    14e0:	0e c0       	rjmp	.+28     	; 0x14fe <DIO_VidSetPortValue+0x74>
			case PORTB:PORT_B=copy_U8value		; break;
    14e2:	e8 e3       	ldi	r30, 0x38	; 56
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	8a 81       	ldd	r24, Y+2	; 0x02
    14e8:	80 83       	st	Z, r24
    14ea:	09 c0       	rjmp	.+18     	; 0x14fe <DIO_VidSetPortValue+0x74>
			case PORTC:PORT_C=copy_U8value		; break;
    14ec:	e5 e3       	ldi	r30, 0x35	; 53
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	8a 81       	ldd	r24, Y+2	; 0x02
    14f2:	80 83       	st	Z, r24
    14f4:	04 c0       	rjmp	.+8      	; 0x14fe <DIO_VidSetPortValue+0x74>
			case PORTD:PORT_D=copy_U8value		; break;
    14f6:	e2 e3       	ldi	r30, 0x32	; 50
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	8a 81       	ldd	r24, Y+2	; 0x02
    14fc:	80 83       	st	Z, r24
		}	
	
	
	
	
}
    14fe:	0f 90       	pop	r0
    1500:	0f 90       	pop	r0
    1502:	0f 90       	pop	r0
    1504:	0f 90       	pop	r0
    1506:	cf 91       	pop	r28
    1508:	df 91       	pop	r29
    150a:	08 95       	ret

0000150c <DIO_VidTogglePin>:

void DIO_VidTogglePin			(u8 copy_u8port, u8 copy_U8pin)
{
    150c:	df 93       	push	r29
    150e:	cf 93       	push	r28
    1510:	00 d0       	rcall	.+0      	; 0x1512 <DIO_VidTogglePin+0x6>
    1512:	00 d0       	rcall	.+0      	; 0x1514 <DIO_VidTogglePin+0x8>
    1514:	cd b7       	in	r28, 0x3d	; 61
    1516:	de b7       	in	r29, 0x3e	; 62
    1518:	89 83       	std	Y+1, r24	; 0x01
    151a:	6a 83       	std	Y+2, r22	; 0x02

		switch (copy_u8port)
    151c:	89 81       	ldd	r24, Y+1	; 0x01
    151e:	28 2f       	mov	r18, r24
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	3c 83       	std	Y+4, r19	; 0x04
    1524:	2b 83       	std	Y+3, r18	; 0x03
    1526:	8b 81       	ldd	r24, Y+3	; 0x03
    1528:	9c 81       	ldd	r25, Y+4	; 0x04
    152a:	81 30       	cpi	r24, 0x01	; 1
    152c:	91 05       	cpc	r25, r1
    152e:	49 f1       	breq	.+82     	; 0x1582 <DIO_VidTogglePin+0x76>
    1530:	2b 81       	ldd	r18, Y+3	; 0x03
    1532:	3c 81       	ldd	r19, Y+4	; 0x04
    1534:	22 30       	cpi	r18, 0x02	; 2
    1536:	31 05       	cpc	r19, r1
    1538:	2c f4       	brge	.+10     	; 0x1544 <DIO_VidTogglePin+0x38>
    153a:	8b 81       	ldd	r24, Y+3	; 0x03
    153c:	9c 81       	ldd	r25, Y+4	; 0x04
    153e:	00 97       	sbiw	r24, 0x00	; 0
    1540:	61 f0       	breq	.+24     	; 0x155a <DIO_VidTogglePin+0x4e>
    1542:	5a c0       	rjmp	.+180    	; 0x15f8 <DIO_VidTogglePin+0xec>
    1544:	2b 81       	ldd	r18, Y+3	; 0x03
    1546:	3c 81       	ldd	r19, Y+4	; 0x04
    1548:	22 30       	cpi	r18, 0x02	; 2
    154a:	31 05       	cpc	r19, r1
    154c:	71 f1       	breq	.+92     	; 0x15aa <DIO_VidTogglePin+0x9e>
    154e:	8b 81       	ldd	r24, Y+3	; 0x03
    1550:	9c 81       	ldd	r25, Y+4	; 0x04
    1552:	83 30       	cpi	r24, 0x03	; 3
    1554:	91 05       	cpc	r25, r1
    1556:	e9 f1       	breq	.+122    	; 0x15d2 <DIO_VidTogglePin+0xc6>
    1558:	4f c0       	rjmp	.+158    	; 0x15f8 <DIO_VidTogglePin+0xec>
		{
					case PORTA:TOG_BIT(PORT_A, copy_U8pin); break;
    155a:	ab e3       	ldi	r26, 0x3B	; 59
    155c:	b0 e0       	ldi	r27, 0x00	; 0
    155e:	eb e3       	ldi	r30, 0x3B	; 59
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	80 81       	ld	r24, Z
    1564:	48 2f       	mov	r20, r24
    1566:	8a 81       	ldd	r24, Y+2	; 0x02
    1568:	28 2f       	mov	r18, r24
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	02 2e       	mov	r0, r18
    1572:	02 c0       	rjmp	.+4      	; 0x1578 <DIO_VidTogglePin+0x6c>
    1574:	88 0f       	add	r24, r24
    1576:	99 1f       	adc	r25, r25
    1578:	0a 94       	dec	r0
    157a:	e2 f7       	brpl	.-8      	; 0x1574 <DIO_VidTogglePin+0x68>
    157c:	84 27       	eor	r24, r20
    157e:	8c 93       	st	X, r24
    1580:	3b c0       	rjmp	.+118    	; 0x15f8 <DIO_VidTogglePin+0xec>
					case PORTB:TOG_BIT(PORT_B, copy_U8pin); break;
    1582:	a8 e3       	ldi	r26, 0x38	; 56
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	e8 e3       	ldi	r30, 0x38	; 56
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	48 2f       	mov	r20, r24
    158e:	8a 81       	ldd	r24, Y+2	; 0x02
    1590:	28 2f       	mov	r18, r24
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	02 2e       	mov	r0, r18
    159a:	02 c0       	rjmp	.+4      	; 0x15a0 <DIO_VidTogglePin+0x94>
    159c:	88 0f       	add	r24, r24
    159e:	99 1f       	adc	r25, r25
    15a0:	0a 94       	dec	r0
    15a2:	e2 f7       	brpl	.-8      	; 0x159c <DIO_VidTogglePin+0x90>
    15a4:	84 27       	eor	r24, r20
    15a6:	8c 93       	st	X, r24
    15a8:	27 c0       	rjmp	.+78     	; 0x15f8 <DIO_VidTogglePin+0xec>
					case PORTC:TOG_BIT(PORT_C, copy_U8pin); break;
    15aa:	a5 e3       	ldi	r26, 0x35	; 53
    15ac:	b0 e0       	ldi	r27, 0x00	; 0
    15ae:	e5 e3       	ldi	r30, 0x35	; 53
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	80 81       	ld	r24, Z
    15b4:	48 2f       	mov	r20, r24
    15b6:	8a 81       	ldd	r24, Y+2	; 0x02
    15b8:	28 2f       	mov	r18, r24
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	02 2e       	mov	r0, r18
    15c2:	02 c0       	rjmp	.+4      	; 0x15c8 <DIO_VidTogglePin+0xbc>
    15c4:	88 0f       	add	r24, r24
    15c6:	99 1f       	adc	r25, r25
    15c8:	0a 94       	dec	r0
    15ca:	e2 f7       	brpl	.-8      	; 0x15c4 <DIO_VidTogglePin+0xb8>
    15cc:	84 27       	eor	r24, r20
    15ce:	8c 93       	st	X, r24
    15d0:	13 c0       	rjmp	.+38     	; 0x15f8 <DIO_VidTogglePin+0xec>
					case PORTD:TOG_BIT(PORT_D, copy_U8pin); break;
    15d2:	a2 e3       	ldi	r26, 0x32	; 50
    15d4:	b0 e0       	ldi	r27, 0x00	; 0
    15d6:	e2 e3       	ldi	r30, 0x32	; 50
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	80 81       	ld	r24, Z
    15dc:	48 2f       	mov	r20, r24
    15de:	8a 81       	ldd	r24, Y+2	; 0x02
    15e0:	28 2f       	mov	r18, r24
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	02 2e       	mov	r0, r18
    15ea:	02 c0       	rjmp	.+4      	; 0x15f0 <DIO_VidTogglePin+0xe4>
    15ec:	88 0f       	add	r24, r24
    15ee:	99 1f       	adc	r25, r25
    15f0:	0a 94       	dec	r0
    15f2:	e2 f7       	brpl	.-8      	; 0x15ec <DIO_VidTogglePin+0xe0>
    15f4:	84 27       	eor	r24, r20
    15f6:	8c 93       	st	X, r24
		}

}
    15f8:	0f 90       	pop	r0
    15fa:	0f 90       	pop	r0
    15fc:	0f 90       	pop	r0
    15fe:	0f 90       	pop	r0
    1600:	cf 91       	pop	r28
    1602:	df 91       	pop	r29
    1604:	08 95       	ret

00001606 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 copy_u8port)
{
    1606:	df 93       	push	r29
    1608:	cf 93       	push	r28
    160a:	00 d0       	rcall	.+0      	; 0x160c <DIO_u8GetPortValue+0x6>
    160c:	00 d0       	rcall	.+0      	; 0x160e <DIO_u8GetPortValue+0x8>
    160e:	cd b7       	in	r28, 0x3d	; 61
    1610:	de b7       	in	r29, 0x3e	; 62
    1612:	8a 83       	std	Y+2, r24	; 0x02
		u8 Lcal_U8PortResult=0;
    1614:	19 82       	std	Y+1, r1	; 0x01
	switch(copy_u8port){
    1616:	8a 81       	ldd	r24, Y+2	; 0x02
    1618:	28 2f       	mov	r18, r24
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	3c 83       	std	Y+4, r19	; 0x04
    161e:	2b 83       	std	Y+3, r18	; 0x03
    1620:	8b 81       	ldd	r24, Y+3	; 0x03
    1622:	9c 81       	ldd	r25, Y+4	; 0x04
    1624:	81 30       	cpi	r24, 0x01	; 1
    1626:	91 05       	cpc	r25, r1
    1628:	d1 f0       	breq	.+52     	; 0x165e <DIO_u8GetPortValue+0x58>
    162a:	2b 81       	ldd	r18, Y+3	; 0x03
    162c:	3c 81       	ldd	r19, Y+4	; 0x04
    162e:	22 30       	cpi	r18, 0x02	; 2
    1630:	31 05       	cpc	r19, r1
    1632:	2c f4       	brge	.+10     	; 0x163e <DIO_u8GetPortValue+0x38>
    1634:	8b 81       	ldd	r24, Y+3	; 0x03
    1636:	9c 81       	ldd	r25, Y+4	; 0x04
    1638:	00 97       	sbiw	r24, 0x00	; 0
    163a:	61 f0       	breq	.+24     	; 0x1654 <DIO_u8GetPortValue+0x4e>
    163c:	1e c0       	rjmp	.+60     	; 0x167a <DIO_u8GetPortValue+0x74>
    163e:	2b 81       	ldd	r18, Y+3	; 0x03
    1640:	3c 81       	ldd	r19, Y+4	; 0x04
    1642:	22 30       	cpi	r18, 0x02	; 2
    1644:	31 05       	cpc	r19, r1
    1646:	81 f0       	breq	.+32     	; 0x1668 <DIO_u8GetPortValue+0x62>
    1648:	8b 81       	ldd	r24, Y+3	; 0x03
    164a:	9c 81       	ldd	r25, Y+4	; 0x04
    164c:	83 30       	cpi	r24, 0x03	; 3
    164e:	91 05       	cpc	r25, r1
    1650:	81 f0       	breq	.+32     	; 0x1672 <DIO_u8GetPortValue+0x6c>
    1652:	13 c0       	rjmp	.+38     	; 0x167a <DIO_u8GetPortValue+0x74>

			case PORTA :	Lcal_U8PortResult=PINA;	        break;
    1654:	e9 e3       	ldi	r30, 0x39	; 57
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	80 81       	ld	r24, Z
    165a:	89 83       	std	Y+1, r24	; 0x01
    165c:	0e c0       	rjmp	.+28     	; 0x167a <DIO_u8GetPortValue+0x74>
			case PORTB :	Lcal_U8PortResult=PINB; 		    break;
    165e:	e6 e3       	ldi	r30, 0x36	; 54
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	80 81       	ld	r24, Z
    1664:	89 83       	std	Y+1, r24	; 0x01
    1666:	09 c0       	rjmp	.+18     	; 0x167a <DIO_u8GetPortValue+0x74>
			case PORTC :	Lcal_U8PortResult=PINC;			break;
    1668:	e3 e3       	ldi	r30, 0x33	; 51
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	80 81       	ld	r24, Z
    166e:	89 83       	std	Y+1, r24	; 0x01
    1670:	04 c0       	rjmp	.+8      	; 0x167a <DIO_u8GetPortValue+0x74>
			case PORTD :	Lcal_U8PortResult=PIND;			break;
    1672:	e0 e3       	ldi	r30, 0x30	; 48
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	80 81       	ld	r24, Z
    1678:	89 83       	std	Y+1, r24	; 0x01

			}


return(Lcal_U8PortResult);
    167a:	89 81       	ldd	r24, Y+1	; 0x01
	
	
}
    167c:	0f 90       	pop	r0
    167e:	0f 90       	pop	r0
    1680:	0f 90       	pop	r0
    1682:	0f 90       	pop	r0
    1684:	cf 91       	pop	r28
    1686:	df 91       	pop	r29
    1688:	08 95       	ret

0000168a <LCD_VidInit>:




void LCD_VidInit(void)
{
    168a:	0f 93       	push	r16
    168c:	1f 93       	push	r17
    168e:	df 93       	push	r29
    1690:	cf 93       	push	r28
    1692:	cd b7       	in	r28, 0x3d	; 61
    1694:	de b7       	in	r29, 0x3e	; 62
    1696:	c6 54       	subi	r28, 0x46	; 70
    1698:	d0 40       	sbci	r29, 0x00	; 0
    169a:	0f b6       	in	r0, 0x3f	; 63
    169c:	f8 94       	cli
    169e:	de bf       	out	0x3e, r29	; 62
    16a0:	0f be       	out	0x3f, r0	; 63
    16a2:	cd bf       	out	0x3d, r28	; 61

	#if LCD_Mode==EIGHT_BIT
	DIO_VidSetPinDirection	( Lcopy_u8PORT	,RS_copy_u8Pin,  OUTPUT);
    16a4:	83 e0       	ldi	r24, 0x03	; 3
    16a6:	60 e0       	ldi	r22, 0x00	; 0
    16a8:	41 e0       	ldi	r20, 0x01	; 1
    16aa:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection	( Lcopy_u8PORT	,R_w_copy_u8Pin, OUTPUT);
    16ae:	83 e0       	ldi	r24, 0x03	; 3
    16b0:	61 e0       	ldi	r22, 0x01	; 1
    16b2:	41 e0       	ldi	r20, 0x01	; 1
    16b4:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection	( Lcopy_u8PORT	,E_copy_u8Pin,   OUTPUT);
    16b8:	83 e0       	ldi	r24, 0x03	; 3
    16ba:	62 e0       	ldi	r22, 0x02	; 2
    16bc:	41 e0       	ldi	r20, 0x01	; 1
    16be:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_VidSetPinDirection>
    16c2:	fe 01       	movw	r30, r28
    16c4:	ed 5b       	subi	r30, 0xBD	; 189
    16c6:	ff 4f       	sbci	r31, 0xFF	; 255
    16c8:	80 e0       	ldi	r24, 0x00	; 0
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	a0 e2       	ldi	r26, 0x20	; 32
    16ce:	b2 e4       	ldi	r27, 0x42	; 66
    16d0:	80 83       	st	Z, r24
    16d2:	91 83       	std	Z+1, r25	; 0x01
    16d4:	a2 83       	std	Z+2, r26	; 0x02
    16d6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16d8:	8e 01       	movw	r16, r28
    16da:	01 5c       	subi	r16, 0xC1	; 193
    16dc:	1f 4f       	sbci	r17, 0xFF	; 255
    16de:	fe 01       	movw	r30, r28
    16e0:	ed 5b       	subi	r30, 0xBD	; 189
    16e2:	ff 4f       	sbci	r31, 0xFF	; 255
    16e4:	60 81       	ld	r22, Z
    16e6:	71 81       	ldd	r23, Z+1	; 0x01
    16e8:	82 81       	ldd	r24, Z+2	; 0x02
    16ea:	93 81       	ldd	r25, Z+3	; 0x03
    16ec:	20 e0       	ldi	r18, 0x00	; 0
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	4a ef       	ldi	r20, 0xFA	; 250
    16f2:	54 e4       	ldi	r21, 0x44	; 68
    16f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16f8:	dc 01       	movw	r26, r24
    16fa:	cb 01       	movw	r24, r22
    16fc:	f8 01       	movw	r30, r16
    16fe:	80 83       	st	Z, r24
    1700:	91 83       	std	Z+1, r25	; 0x01
    1702:	a2 83       	std	Z+2, r26	; 0x02
    1704:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1706:	fe 01       	movw	r30, r28
    1708:	ff 96       	adiw	r30, 0x3f	; 63
    170a:	60 81       	ld	r22, Z
    170c:	71 81       	ldd	r23, Z+1	; 0x01
    170e:	82 81       	ldd	r24, Z+2	; 0x02
    1710:	93 81       	ldd	r25, Z+3	; 0x03
    1712:	20 e0       	ldi	r18, 0x00	; 0
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	40 e8       	ldi	r20, 0x80	; 128
    1718:	5f e3       	ldi	r21, 0x3F	; 63
    171a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    171e:	88 23       	and	r24, r24
    1720:	2c f4       	brge	.+10     	; 0x172c <LCD_VidInit+0xa2>
		__ticks = 1;
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	9e af       	std	Y+62, r25	; 0x3e
    1728:	8d af       	std	Y+61, r24	; 0x3d
    172a:	46 c0       	rjmp	.+140    	; 0x17b8 <LCD_VidInit+0x12e>
	else if (__tmp > 65535)
    172c:	fe 01       	movw	r30, r28
    172e:	ff 96       	adiw	r30, 0x3f	; 63
    1730:	60 81       	ld	r22, Z
    1732:	71 81       	ldd	r23, Z+1	; 0x01
    1734:	82 81       	ldd	r24, Z+2	; 0x02
    1736:	93 81       	ldd	r25, Z+3	; 0x03
    1738:	20 e0       	ldi	r18, 0x00	; 0
    173a:	3f ef       	ldi	r19, 0xFF	; 255
    173c:	4f e7       	ldi	r20, 0x7F	; 127
    173e:	57 e4       	ldi	r21, 0x47	; 71
    1740:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1744:	18 16       	cp	r1, r24
    1746:	64 f5       	brge	.+88     	; 0x17a0 <LCD_VidInit+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1748:	fe 01       	movw	r30, r28
    174a:	ed 5b       	subi	r30, 0xBD	; 189
    174c:	ff 4f       	sbci	r31, 0xFF	; 255
    174e:	60 81       	ld	r22, Z
    1750:	71 81       	ldd	r23, Z+1	; 0x01
    1752:	82 81       	ldd	r24, Z+2	; 0x02
    1754:	93 81       	ldd	r25, Z+3	; 0x03
    1756:	20 e0       	ldi	r18, 0x00	; 0
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	40 e2       	ldi	r20, 0x20	; 32
    175c:	51 e4       	ldi	r21, 0x41	; 65
    175e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1762:	dc 01       	movw	r26, r24
    1764:	cb 01       	movw	r24, r22
    1766:	bc 01       	movw	r22, r24
    1768:	cd 01       	movw	r24, r26
    176a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    176e:	dc 01       	movw	r26, r24
    1770:	cb 01       	movw	r24, r22
    1772:	9e af       	std	Y+62, r25	; 0x3e
    1774:	8d af       	std	Y+61, r24	; 0x3d
    1776:	0f c0       	rjmp	.+30     	; 0x1796 <LCD_VidInit+0x10c>
    1778:	88 ec       	ldi	r24, 0xC8	; 200
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	9c af       	std	Y+60, r25	; 0x3c
    177e:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1780:	8b ad       	ldd	r24, Y+59	; 0x3b
    1782:	9c ad       	ldd	r25, Y+60	; 0x3c
    1784:	01 97       	sbiw	r24, 0x01	; 1
    1786:	f1 f7       	brne	.-4      	; 0x1784 <LCD_VidInit+0xfa>
    1788:	9c af       	std	Y+60, r25	; 0x3c
    178a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    178c:	8d ad       	ldd	r24, Y+61	; 0x3d
    178e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1790:	01 97       	sbiw	r24, 0x01	; 1
    1792:	9e af       	std	Y+62, r25	; 0x3e
    1794:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1796:	8d ad       	ldd	r24, Y+61	; 0x3d
    1798:	9e ad       	ldd	r25, Y+62	; 0x3e
    179a:	00 97       	sbiw	r24, 0x00	; 0
    179c:	69 f7       	brne	.-38     	; 0x1778 <LCD_VidInit+0xee>
    179e:	16 c0       	rjmp	.+44     	; 0x17cc <LCD_VidInit+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17a0:	fe 01       	movw	r30, r28
    17a2:	ff 96       	adiw	r30, 0x3f	; 63
    17a4:	60 81       	ld	r22, Z
    17a6:	71 81       	ldd	r23, Z+1	; 0x01
    17a8:	82 81       	ldd	r24, Z+2	; 0x02
    17aa:	93 81       	ldd	r25, Z+3	; 0x03
    17ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17b0:	dc 01       	movw	r26, r24
    17b2:	cb 01       	movw	r24, r22
    17b4:	9e af       	std	Y+62, r25	; 0x3e
    17b6:	8d af       	std	Y+61, r24	; 0x3d
    17b8:	8d ad       	ldd	r24, Y+61	; 0x3d
    17ba:	9e ad       	ldd	r25, Y+62	; 0x3e
    17bc:	9a af       	std	Y+58, r25	; 0x3a
    17be:	89 af       	std	Y+57, r24	; 0x39
    17c0:	89 ad       	ldd	r24, Y+57	; 0x39
    17c2:	9a ad       	ldd	r25, Y+58	; 0x3a
    17c4:	01 97       	sbiw	r24, 0x01	; 1
    17c6:	f1 f7       	brne	.-4      	; 0x17c4 <LCD_VidInit+0x13a>
    17c8:	9a af       	std	Y+58, r25	; 0x3a
    17ca:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(40);
	DIO_VidSetPortDirection	( LDcopy_u8PORT,OUTPUT);
    17cc:	82 e0       	ldi	r24, 0x02	; 2
    17ce:	61 e0       	ldi	r22, 0x01	; 1
    17d0:	0e 94 cc 09 	call	0x1398	; 0x1398 <DIO_VidSetPortDirection>

	LCD_VidSendCommand(0b00111000);
    17d4:	88 e3       	ldi	r24, 0x38	; 56
    17d6:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <LCD_VidSendCommand>
    17da:	80 e0       	ldi	r24, 0x00	; 0
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	a0 e8       	ldi	r26, 0x80	; 128
    17e0:	bf e3       	ldi	r27, 0x3F	; 63
    17e2:	8d ab       	std	Y+53, r24	; 0x35
    17e4:	9e ab       	std	Y+54, r25	; 0x36
    17e6:	af ab       	std	Y+55, r26	; 0x37
    17e8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17ea:	6d a9       	ldd	r22, Y+53	; 0x35
    17ec:	7e a9       	ldd	r23, Y+54	; 0x36
    17ee:	8f a9       	ldd	r24, Y+55	; 0x37
    17f0:	98 ad       	ldd	r25, Y+56	; 0x38
    17f2:	20 e0       	ldi	r18, 0x00	; 0
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	4a ef       	ldi	r20, 0xFA	; 250
    17f8:	54 e4       	ldi	r21, 0x44	; 68
    17fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17fe:	dc 01       	movw	r26, r24
    1800:	cb 01       	movw	r24, r22
    1802:	89 ab       	std	Y+49, r24	; 0x31
    1804:	9a ab       	std	Y+50, r25	; 0x32
    1806:	ab ab       	std	Y+51, r26	; 0x33
    1808:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    180a:	69 a9       	ldd	r22, Y+49	; 0x31
    180c:	7a a9       	ldd	r23, Y+50	; 0x32
    180e:	8b a9       	ldd	r24, Y+51	; 0x33
    1810:	9c a9       	ldd	r25, Y+52	; 0x34
    1812:	20 e0       	ldi	r18, 0x00	; 0
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	40 e8       	ldi	r20, 0x80	; 128
    1818:	5f e3       	ldi	r21, 0x3F	; 63
    181a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    181e:	88 23       	and	r24, r24
    1820:	2c f4       	brge	.+10     	; 0x182c <LCD_VidInit+0x1a2>
		__ticks = 1;
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	98 ab       	std	Y+48, r25	; 0x30
    1828:	8f a7       	std	Y+47, r24	; 0x2f
    182a:	3f c0       	rjmp	.+126    	; 0x18aa <LCD_VidInit+0x220>
	else if (__tmp > 65535)
    182c:	69 a9       	ldd	r22, Y+49	; 0x31
    182e:	7a a9       	ldd	r23, Y+50	; 0x32
    1830:	8b a9       	ldd	r24, Y+51	; 0x33
    1832:	9c a9       	ldd	r25, Y+52	; 0x34
    1834:	20 e0       	ldi	r18, 0x00	; 0
    1836:	3f ef       	ldi	r19, 0xFF	; 255
    1838:	4f e7       	ldi	r20, 0x7F	; 127
    183a:	57 e4       	ldi	r21, 0x47	; 71
    183c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1840:	18 16       	cp	r1, r24
    1842:	4c f5       	brge	.+82     	; 0x1896 <LCD_VidInit+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1844:	6d a9       	ldd	r22, Y+53	; 0x35
    1846:	7e a9       	ldd	r23, Y+54	; 0x36
    1848:	8f a9       	ldd	r24, Y+55	; 0x37
    184a:	98 ad       	ldd	r25, Y+56	; 0x38
    184c:	20 e0       	ldi	r18, 0x00	; 0
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	40 e2       	ldi	r20, 0x20	; 32
    1852:	51 e4       	ldi	r21, 0x41	; 65
    1854:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1858:	dc 01       	movw	r26, r24
    185a:	cb 01       	movw	r24, r22
    185c:	bc 01       	movw	r22, r24
    185e:	cd 01       	movw	r24, r26
    1860:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1864:	dc 01       	movw	r26, r24
    1866:	cb 01       	movw	r24, r22
    1868:	98 ab       	std	Y+48, r25	; 0x30
    186a:	8f a7       	std	Y+47, r24	; 0x2f
    186c:	0f c0       	rjmp	.+30     	; 0x188c <LCD_VidInit+0x202>
    186e:	88 ec       	ldi	r24, 0xC8	; 200
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	9e a7       	std	Y+46, r25	; 0x2e
    1874:	8d a7       	std	Y+45, r24	; 0x2d
    1876:	8d a5       	ldd	r24, Y+45	; 0x2d
    1878:	9e a5       	ldd	r25, Y+46	; 0x2e
    187a:	01 97       	sbiw	r24, 0x01	; 1
    187c:	f1 f7       	brne	.-4      	; 0x187a <LCD_VidInit+0x1f0>
    187e:	9e a7       	std	Y+46, r25	; 0x2e
    1880:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1882:	8f a5       	ldd	r24, Y+47	; 0x2f
    1884:	98 a9       	ldd	r25, Y+48	; 0x30
    1886:	01 97       	sbiw	r24, 0x01	; 1
    1888:	98 ab       	std	Y+48, r25	; 0x30
    188a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    188c:	8f a5       	ldd	r24, Y+47	; 0x2f
    188e:	98 a9       	ldd	r25, Y+48	; 0x30
    1890:	00 97       	sbiw	r24, 0x00	; 0
    1892:	69 f7       	brne	.-38     	; 0x186e <LCD_VidInit+0x1e4>
    1894:	14 c0       	rjmp	.+40     	; 0x18be <LCD_VidInit+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1896:	69 a9       	ldd	r22, Y+49	; 0x31
    1898:	7a a9       	ldd	r23, Y+50	; 0x32
    189a:	8b a9       	ldd	r24, Y+51	; 0x33
    189c:	9c a9       	ldd	r25, Y+52	; 0x34
    189e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18a2:	dc 01       	movw	r26, r24
    18a4:	cb 01       	movw	r24, r22
    18a6:	98 ab       	std	Y+48, r25	; 0x30
    18a8:	8f a7       	std	Y+47, r24	; 0x2f
    18aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    18ac:	98 a9       	ldd	r25, Y+48	; 0x30
    18ae:	9c a7       	std	Y+44, r25	; 0x2c
    18b0:	8b a7       	std	Y+43, r24	; 0x2b
    18b2:	8b a5       	ldd	r24, Y+43	; 0x2b
    18b4:	9c a5       	ldd	r25, Y+44	; 0x2c
    18b6:	01 97       	sbiw	r24, 0x01	; 1
    18b8:	f1 f7       	brne	.-4      	; 0x18b6 <LCD_VidInit+0x22c>
    18ba:	9c a7       	std	Y+44, r25	; 0x2c
    18bc:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_VidSendCommand(0b00001111);
    18be:	8f e0       	ldi	r24, 0x0F	; 15
    18c0:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <LCD_VidSendCommand>
    18c4:	80 e0       	ldi	r24, 0x00	; 0
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	a0 e8       	ldi	r26, 0x80	; 128
    18ca:	bf e3       	ldi	r27, 0x3F	; 63
    18cc:	8f a3       	std	Y+39, r24	; 0x27
    18ce:	98 a7       	std	Y+40, r25	; 0x28
    18d0:	a9 a7       	std	Y+41, r26	; 0x29
    18d2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18d4:	6f a1       	ldd	r22, Y+39	; 0x27
    18d6:	78 a5       	ldd	r23, Y+40	; 0x28
    18d8:	89 a5       	ldd	r24, Y+41	; 0x29
    18da:	9a a5       	ldd	r25, Y+42	; 0x2a
    18dc:	20 e0       	ldi	r18, 0x00	; 0
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	4a ef       	ldi	r20, 0xFA	; 250
    18e2:	54 e4       	ldi	r21, 0x44	; 68
    18e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18e8:	dc 01       	movw	r26, r24
    18ea:	cb 01       	movw	r24, r22
    18ec:	8b a3       	std	Y+35, r24	; 0x23
    18ee:	9c a3       	std	Y+36, r25	; 0x24
    18f0:	ad a3       	std	Y+37, r26	; 0x25
    18f2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    18f4:	6b a1       	ldd	r22, Y+35	; 0x23
    18f6:	7c a1       	ldd	r23, Y+36	; 0x24
    18f8:	8d a1       	ldd	r24, Y+37	; 0x25
    18fa:	9e a1       	ldd	r25, Y+38	; 0x26
    18fc:	20 e0       	ldi	r18, 0x00	; 0
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	40 e8       	ldi	r20, 0x80	; 128
    1902:	5f e3       	ldi	r21, 0x3F	; 63
    1904:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1908:	88 23       	and	r24, r24
    190a:	2c f4       	brge	.+10     	; 0x1916 <LCD_VidInit+0x28c>
		__ticks = 1;
    190c:	81 e0       	ldi	r24, 0x01	; 1
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	9a a3       	std	Y+34, r25	; 0x22
    1912:	89 a3       	std	Y+33, r24	; 0x21
    1914:	3f c0       	rjmp	.+126    	; 0x1994 <LCD_VidInit+0x30a>
	else if (__tmp > 65535)
    1916:	6b a1       	ldd	r22, Y+35	; 0x23
    1918:	7c a1       	ldd	r23, Y+36	; 0x24
    191a:	8d a1       	ldd	r24, Y+37	; 0x25
    191c:	9e a1       	ldd	r25, Y+38	; 0x26
    191e:	20 e0       	ldi	r18, 0x00	; 0
    1920:	3f ef       	ldi	r19, 0xFF	; 255
    1922:	4f e7       	ldi	r20, 0x7F	; 127
    1924:	57 e4       	ldi	r21, 0x47	; 71
    1926:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    192a:	18 16       	cp	r1, r24
    192c:	4c f5       	brge	.+82     	; 0x1980 <LCD_VidInit+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    192e:	6f a1       	ldd	r22, Y+39	; 0x27
    1930:	78 a5       	ldd	r23, Y+40	; 0x28
    1932:	89 a5       	ldd	r24, Y+41	; 0x29
    1934:	9a a5       	ldd	r25, Y+42	; 0x2a
    1936:	20 e0       	ldi	r18, 0x00	; 0
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	40 e2       	ldi	r20, 0x20	; 32
    193c:	51 e4       	ldi	r21, 0x41	; 65
    193e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1942:	dc 01       	movw	r26, r24
    1944:	cb 01       	movw	r24, r22
    1946:	bc 01       	movw	r22, r24
    1948:	cd 01       	movw	r24, r26
    194a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    194e:	dc 01       	movw	r26, r24
    1950:	cb 01       	movw	r24, r22
    1952:	9a a3       	std	Y+34, r25	; 0x22
    1954:	89 a3       	std	Y+33, r24	; 0x21
    1956:	0f c0       	rjmp	.+30     	; 0x1976 <LCD_VidInit+0x2ec>
    1958:	88 ec       	ldi	r24, 0xC8	; 200
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	98 a3       	std	Y+32, r25	; 0x20
    195e:	8f 8f       	std	Y+31, r24	; 0x1f
    1960:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1962:	98 a1       	ldd	r25, Y+32	; 0x20
    1964:	01 97       	sbiw	r24, 0x01	; 1
    1966:	f1 f7       	brne	.-4      	; 0x1964 <LCD_VidInit+0x2da>
    1968:	98 a3       	std	Y+32, r25	; 0x20
    196a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    196c:	89 a1       	ldd	r24, Y+33	; 0x21
    196e:	9a a1       	ldd	r25, Y+34	; 0x22
    1970:	01 97       	sbiw	r24, 0x01	; 1
    1972:	9a a3       	std	Y+34, r25	; 0x22
    1974:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1976:	89 a1       	ldd	r24, Y+33	; 0x21
    1978:	9a a1       	ldd	r25, Y+34	; 0x22
    197a:	00 97       	sbiw	r24, 0x00	; 0
    197c:	69 f7       	brne	.-38     	; 0x1958 <LCD_VidInit+0x2ce>
    197e:	14 c0       	rjmp	.+40     	; 0x19a8 <LCD_VidInit+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1980:	6b a1       	ldd	r22, Y+35	; 0x23
    1982:	7c a1       	ldd	r23, Y+36	; 0x24
    1984:	8d a1       	ldd	r24, Y+37	; 0x25
    1986:	9e a1       	ldd	r25, Y+38	; 0x26
    1988:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    198c:	dc 01       	movw	r26, r24
    198e:	cb 01       	movw	r24, r22
    1990:	9a a3       	std	Y+34, r25	; 0x22
    1992:	89 a3       	std	Y+33, r24	; 0x21
    1994:	89 a1       	ldd	r24, Y+33	; 0x21
    1996:	9a a1       	ldd	r25, Y+34	; 0x22
    1998:	9e 8f       	std	Y+30, r25	; 0x1e
    199a:	8d 8f       	std	Y+29, r24	; 0x1d
    199c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    199e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    19a0:	01 97       	sbiw	r24, 0x01	; 1
    19a2:	f1 f7       	brne	.-4      	; 0x19a0 <LCD_VidInit+0x316>
    19a4:	9e 8f       	std	Y+30, r25	; 0x1e
    19a6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_VidSendCommand(0b00000001);
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <LCD_VidSendCommand>
    19ae:	80 e0       	ldi	r24, 0x00	; 0
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	a0 e0       	ldi	r26, 0x00	; 0
    19b4:	b0 e4       	ldi	r27, 0x40	; 64
    19b6:	89 8f       	std	Y+25, r24	; 0x19
    19b8:	9a 8f       	std	Y+26, r25	; 0x1a
    19ba:	ab 8f       	std	Y+27, r26	; 0x1b
    19bc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19be:	69 8d       	ldd	r22, Y+25	; 0x19
    19c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19c6:	20 e0       	ldi	r18, 0x00	; 0
    19c8:	30 e0       	ldi	r19, 0x00	; 0
    19ca:	4a ef       	ldi	r20, 0xFA	; 250
    19cc:	54 e4       	ldi	r21, 0x44	; 68
    19ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19d2:	dc 01       	movw	r26, r24
    19d4:	cb 01       	movw	r24, r22
    19d6:	8d 8b       	std	Y+21, r24	; 0x15
    19d8:	9e 8b       	std	Y+22, r25	; 0x16
    19da:	af 8b       	std	Y+23, r26	; 0x17
    19dc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19de:	6d 89       	ldd	r22, Y+21	; 0x15
    19e0:	7e 89       	ldd	r23, Y+22	; 0x16
    19e2:	8f 89       	ldd	r24, Y+23	; 0x17
    19e4:	98 8d       	ldd	r25, Y+24	; 0x18
    19e6:	20 e0       	ldi	r18, 0x00	; 0
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	40 e8       	ldi	r20, 0x80	; 128
    19ec:	5f e3       	ldi	r21, 0x3F	; 63
    19ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19f2:	88 23       	and	r24, r24
    19f4:	2c f4       	brge	.+10     	; 0x1a00 <LCD_VidInit+0x376>
		__ticks = 1;
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	9c 8b       	std	Y+20, r25	; 0x14
    19fc:	8b 8b       	std	Y+19, r24	; 0x13
    19fe:	3f c0       	rjmp	.+126    	; 0x1a7e <LCD_VidInit+0x3f4>
	else if (__tmp > 65535)
    1a00:	6d 89       	ldd	r22, Y+21	; 0x15
    1a02:	7e 89       	ldd	r23, Y+22	; 0x16
    1a04:	8f 89       	ldd	r24, Y+23	; 0x17
    1a06:	98 8d       	ldd	r25, Y+24	; 0x18
    1a08:	20 e0       	ldi	r18, 0x00	; 0
    1a0a:	3f ef       	ldi	r19, 0xFF	; 255
    1a0c:	4f e7       	ldi	r20, 0x7F	; 127
    1a0e:	57 e4       	ldi	r21, 0x47	; 71
    1a10:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a14:	18 16       	cp	r1, r24
    1a16:	4c f5       	brge	.+82     	; 0x1a6a <LCD_VidInit+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a18:	69 8d       	ldd	r22, Y+25	; 0x19
    1a1a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a1c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a1e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a20:	20 e0       	ldi	r18, 0x00	; 0
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	40 e2       	ldi	r20, 0x20	; 32
    1a26:	51 e4       	ldi	r21, 0x41	; 65
    1a28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a2c:	dc 01       	movw	r26, r24
    1a2e:	cb 01       	movw	r24, r22
    1a30:	bc 01       	movw	r22, r24
    1a32:	cd 01       	movw	r24, r26
    1a34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a38:	dc 01       	movw	r26, r24
    1a3a:	cb 01       	movw	r24, r22
    1a3c:	9c 8b       	std	Y+20, r25	; 0x14
    1a3e:	8b 8b       	std	Y+19, r24	; 0x13
    1a40:	0f c0       	rjmp	.+30     	; 0x1a60 <LCD_VidInit+0x3d6>
    1a42:	88 ec       	ldi	r24, 0xC8	; 200
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	9a 8b       	std	Y+18, r25	; 0x12
    1a48:	89 8b       	std	Y+17, r24	; 0x11
    1a4a:	89 89       	ldd	r24, Y+17	; 0x11
    1a4c:	9a 89       	ldd	r25, Y+18	; 0x12
    1a4e:	01 97       	sbiw	r24, 0x01	; 1
    1a50:	f1 f7       	brne	.-4      	; 0x1a4e <LCD_VidInit+0x3c4>
    1a52:	9a 8b       	std	Y+18, r25	; 0x12
    1a54:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a56:	8b 89       	ldd	r24, Y+19	; 0x13
    1a58:	9c 89       	ldd	r25, Y+20	; 0x14
    1a5a:	01 97       	sbiw	r24, 0x01	; 1
    1a5c:	9c 8b       	std	Y+20, r25	; 0x14
    1a5e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a60:	8b 89       	ldd	r24, Y+19	; 0x13
    1a62:	9c 89       	ldd	r25, Y+20	; 0x14
    1a64:	00 97       	sbiw	r24, 0x00	; 0
    1a66:	69 f7       	brne	.-38     	; 0x1a42 <LCD_VidInit+0x3b8>
    1a68:	14 c0       	rjmp	.+40     	; 0x1a92 <LCD_VidInit+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a6a:	6d 89       	ldd	r22, Y+21	; 0x15
    1a6c:	7e 89       	ldd	r23, Y+22	; 0x16
    1a6e:	8f 89       	ldd	r24, Y+23	; 0x17
    1a70:	98 8d       	ldd	r25, Y+24	; 0x18
    1a72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a76:	dc 01       	movw	r26, r24
    1a78:	cb 01       	movw	r24, r22
    1a7a:	9c 8b       	std	Y+20, r25	; 0x14
    1a7c:	8b 8b       	std	Y+19, r24	; 0x13
    1a7e:	8b 89       	ldd	r24, Y+19	; 0x13
    1a80:	9c 89       	ldd	r25, Y+20	; 0x14
    1a82:	98 8b       	std	Y+16, r25	; 0x10
    1a84:	8f 87       	std	Y+15, r24	; 0x0f
    1a86:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a88:	98 89       	ldd	r25, Y+16	; 0x10
    1a8a:	01 97       	sbiw	r24, 0x01	; 1
    1a8c:	f1 f7       	brne	.-4      	; 0x1a8a <LCD_VidInit+0x400>
    1a8e:	98 8b       	std	Y+16, r25	; 0x10
    1a90:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	LCD_VidSendCommand(0b00000110);
    1a92:	86 e0       	ldi	r24, 0x06	; 6
    1a94:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <LCD_VidSendCommand>
    1a98:	80 e0       	ldi	r24, 0x00	; 0
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	a0 e8       	ldi	r26, 0x80	; 128
    1a9e:	bf e3       	ldi	r27, 0x3F	; 63
    1aa0:	8b 87       	std	Y+11, r24	; 0x0b
    1aa2:	9c 87       	std	Y+12, r25	; 0x0c
    1aa4:	ad 87       	std	Y+13, r26	; 0x0d
    1aa6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aa8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aaa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aac:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aae:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ab0:	20 e0       	ldi	r18, 0x00	; 0
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	4a ef       	ldi	r20, 0xFA	; 250
    1ab6:	54 e4       	ldi	r21, 0x44	; 68
    1ab8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1abc:	dc 01       	movw	r26, r24
    1abe:	cb 01       	movw	r24, r22
    1ac0:	8f 83       	std	Y+7, r24	; 0x07
    1ac2:	98 87       	std	Y+8, r25	; 0x08
    1ac4:	a9 87       	std	Y+9, r26	; 0x09
    1ac6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ac8:	6f 81       	ldd	r22, Y+7	; 0x07
    1aca:	78 85       	ldd	r23, Y+8	; 0x08
    1acc:	89 85       	ldd	r24, Y+9	; 0x09
    1ace:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ad0:	20 e0       	ldi	r18, 0x00	; 0
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	40 e8       	ldi	r20, 0x80	; 128
    1ad6:	5f e3       	ldi	r21, 0x3F	; 63
    1ad8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1adc:	88 23       	and	r24, r24
    1ade:	2c f4       	brge	.+10     	; 0x1aea <LCD_VidInit+0x460>
		__ticks = 1;
    1ae0:	81 e0       	ldi	r24, 0x01	; 1
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	9e 83       	std	Y+6, r25	; 0x06
    1ae6:	8d 83       	std	Y+5, r24	; 0x05
    1ae8:	3f c0       	rjmp	.+126    	; 0x1b68 <LCD_VidInit+0x4de>
	else if (__tmp > 65535)
    1aea:	6f 81       	ldd	r22, Y+7	; 0x07
    1aec:	78 85       	ldd	r23, Y+8	; 0x08
    1aee:	89 85       	ldd	r24, Y+9	; 0x09
    1af0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1af2:	20 e0       	ldi	r18, 0x00	; 0
    1af4:	3f ef       	ldi	r19, 0xFF	; 255
    1af6:	4f e7       	ldi	r20, 0x7F	; 127
    1af8:	57 e4       	ldi	r21, 0x47	; 71
    1afa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1afe:	18 16       	cp	r1, r24
    1b00:	4c f5       	brge	.+82     	; 0x1b54 <LCD_VidInit+0x4ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b02:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b04:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b06:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b08:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b0a:	20 e0       	ldi	r18, 0x00	; 0
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	40 e2       	ldi	r20, 0x20	; 32
    1b10:	51 e4       	ldi	r21, 0x41	; 65
    1b12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b16:	dc 01       	movw	r26, r24
    1b18:	cb 01       	movw	r24, r22
    1b1a:	bc 01       	movw	r22, r24
    1b1c:	cd 01       	movw	r24, r26
    1b1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b22:	dc 01       	movw	r26, r24
    1b24:	cb 01       	movw	r24, r22
    1b26:	9e 83       	std	Y+6, r25	; 0x06
    1b28:	8d 83       	std	Y+5, r24	; 0x05
    1b2a:	0f c0       	rjmp	.+30     	; 0x1b4a <LCD_VidInit+0x4c0>
    1b2c:	88 ec       	ldi	r24, 0xC8	; 200
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	9c 83       	std	Y+4, r25	; 0x04
    1b32:	8b 83       	std	Y+3, r24	; 0x03
    1b34:	8b 81       	ldd	r24, Y+3	; 0x03
    1b36:	9c 81       	ldd	r25, Y+4	; 0x04
    1b38:	01 97       	sbiw	r24, 0x01	; 1
    1b3a:	f1 f7       	brne	.-4      	; 0x1b38 <LCD_VidInit+0x4ae>
    1b3c:	9c 83       	std	Y+4, r25	; 0x04
    1b3e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b40:	8d 81       	ldd	r24, Y+5	; 0x05
    1b42:	9e 81       	ldd	r25, Y+6	; 0x06
    1b44:	01 97       	sbiw	r24, 0x01	; 1
    1b46:	9e 83       	std	Y+6, r25	; 0x06
    1b48:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b4e:	00 97       	sbiw	r24, 0x00	; 0
    1b50:	69 f7       	brne	.-38     	; 0x1b2c <LCD_VidInit+0x4a2>
    1b52:	14 c0       	rjmp	.+40     	; 0x1b7c <LCD_VidInit+0x4f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b54:	6f 81       	ldd	r22, Y+7	; 0x07
    1b56:	78 85       	ldd	r23, Y+8	; 0x08
    1b58:	89 85       	ldd	r24, Y+9	; 0x09
    1b5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b60:	dc 01       	movw	r26, r24
    1b62:	cb 01       	movw	r24, r22
    1b64:	9e 83       	std	Y+6, r25	; 0x06
    1b66:	8d 83       	std	Y+5, r24	; 0x05
    1b68:	8d 81       	ldd	r24, Y+5	; 0x05
    1b6a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b6c:	9a 83       	std	Y+2, r25	; 0x02
    1b6e:	89 83       	std	Y+1, r24	; 0x01
    1b70:	89 81       	ldd	r24, Y+1	; 0x01
    1b72:	9a 81       	ldd	r25, Y+2	; 0x02
    1b74:	01 97       	sbiw	r24, 0x01	; 1
    1b76:	f1 f7       	brne	.-4      	; 0x1b74 <LCD_VidInit+0x4ea>
    1b78:	9a 83       	std	Y+2, r25	; 0x02
    1b7a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_VidSendCommand(0x01);	/* Clear display screen */
	_delay_ms(2);

	#endif
}
    1b7c:	ca 5b       	subi	r28, 0xBA	; 186
    1b7e:	df 4f       	sbci	r29, 0xFF	; 255
    1b80:	0f b6       	in	r0, 0x3f	; 63
    1b82:	f8 94       	cli
    1b84:	de bf       	out	0x3e, r29	; 62
    1b86:	0f be       	out	0x3f, r0	; 63
    1b88:	cd bf       	out	0x3d, r28	; 61
    1b8a:	cf 91       	pop	r28
    1b8c:	df 91       	pop	r29
    1b8e:	1f 91       	pop	r17
    1b90:	0f 91       	pop	r16
    1b92:	08 95       	ret

00001b94 <LCD_VidSendData>:

void LCD_VidSendData(u8 copy_u8data)
{
    1b94:	df 93       	push	r29
    1b96:	cf 93       	push	r28
    1b98:	cd b7       	in	r28, 0x3d	; 61
    1b9a:	de b7       	in	r29, 0x3e	; 62
    1b9c:	e9 97       	sbiw	r28, 0x39	; 57
    1b9e:	0f b6       	in	r0, 0x3f	; 63
    1ba0:	f8 94       	cli
    1ba2:	de bf       	out	0x3e, r29	; 62
    1ba4:	0f be       	out	0x3f, r0	; 63
    1ba6:	cd bf       	out	0x3d, r28	; 61
    1ba8:	89 af       	std	Y+57, r24	; 0x39
	#if LCD_Mode==EIGHT_BIT
		DIO_VidSetPinValue(Lcopy_u8PORT,  RS_copy_u8Pin,1);
    1baa:	83 e0       	ldi	r24, 0x03	; 3
    1bac:	60 e0       	ldi	r22, 0x00	; 0
    1bae:	41 e0       	ldi	r20, 0x01	; 1
    1bb0:	0e 94 52 08 	call	0x10a4	; 0x10a4 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(Lcopy_u8PORT,  R_w_copy_u8Pin,0);
    1bb4:	83 e0       	ldi	r24, 0x03	; 3
    1bb6:	61 e0       	ldi	r22, 0x01	; 1
    1bb8:	40 e0       	ldi	r20, 0x00	; 0
    1bba:	0e 94 52 08 	call	0x10a4	; 0x10a4 <DIO_VidSetPinValue>
    1bbe:	80 e0       	ldi	r24, 0x00	; 0
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	a0 e8       	ldi	r26, 0x80	; 128
    1bc4:	bf e3       	ldi	r27, 0x3F	; 63
    1bc6:	8d ab       	std	Y+53, r24	; 0x35
    1bc8:	9e ab       	std	Y+54, r25	; 0x36
    1bca:	af ab       	std	Y+55, r26	; 0x37
    1bcc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bce:	6d a9       	ldd	r22, Y+53	; 0x35
    1bd0:	7e a9       	ldd	r23, Y+54	; 0x36
    1bd2:	8f a9       	ldd	r24, Y+55	; 0x37
    1bd4:	98 ad       	ldd	r25, Y+56	; 0x38
    1bd6:	20 e0       	ldi	r18, 0x00	; 0
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	4a ef       	ldi	r20, 0xFA	; 250
    1bdc:	54 e4       	ldi	r21, 0x44	; 68
    1bde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1be2:	dc 01       	movw	r26, r24
    1be4:	cb 01       	movw	r24, r22
    1be6:	89 ab       	std	Y+49, r24	; 0x31
    1be8:	9a ab       	std	Y+50, r25	; 0x32
    1bea:	ab ab       	std	Y+51, r26	; 0x33
    1bec:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1bee:	69 a9       	ldd	r22, Y+49	; 0x31
    1bf0:	7a a9       	ldd	r23, Y+50	; 0x32
    1bf2:	8b a9       	ldd	r24, Y+51	; 0x33
    1bf4:	9c a9       	ldd	r25, Y+52	; 0x34
    1bf6:	20 e0       	ldi	r18, 0x00	; 0
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	40 e8       	ldi	r20, 0x80	; 128
    1bfc:	5f e3       	ldi	r21, 0x3F	; 63
    1bfe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c02:	88 23       	and	r24, r24
    1c04:	2c f4       	brge	.+10     	; 0x1c10 <LCD_VidSendData+0x7c>
		__ticks = 1;
    1c06:	81 e0       	ldi	r24, 0x01	; 1
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	98 ab       	std	Y+48, r25	; 0x30
    1c0c:	8f a7       	std	Y+47, r24	; 0x2f
    1c0e:	3f c0       	rjmp	.+126    	; 0x1c8e <LCD_VidSendData+0xfa>
	else if (__tmp > 65535)
    1c10:	69 a9       	ldd	r22, Y+49	; 0x31
    1c12:	7a a9       	ldd	r23, Y+50	; 0x32
    1c14:	8b a9       	ldd	r24, Y+51	; 0x33
    1c16:	9c a9       	ldd	r25, Y+52	; 0x34
    1c18:	20 e0       	ldi	r18, 0x00	; 0
    1c1a:	3f ef       	ldi	r19, 0xFF	; 255
    1c1c:	4f e7       	ldi	r20, 0x7F	; 127
    1c1e:	57 e4       	ldi	r21, 0x47	; 71
    1c20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c24:	18 16       	cp	r1, r24
    1c26:	4c f5       	brge	.+82     	; 0x1c7a <LCD_VidSendData+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c28:	6d a9       	ldd	r22, Y+53	; 0x35
    1c2a:	7e a9       	ldd	r23, Y+54	; 0x36
    1c2c:	8f a9       	ldd	r24, Y+55	; 0x37
    1c2e:	98 ad       	ldd	r25, Y+56	; 0x38
    1c30:	20 e0       	ldi	r18, 0x00	; 0
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	40 e2       	ldi	r20, 0x20	; 32
    1c36:	51 e4       	ldi	r21, 0x41	; 65
    1c38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c3c:	dc 01       	movw	r26, r24
    1c3e:	cb 01       	movw	r24, r22
    1c40:	bc 01       	movw	r22, r24
    1c42:	cd 01       	movw	r24, r26
    1c44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c48:	dc 01       	movw	r26, r24
    1c4a:	cb 01       	movw	r24, r22
    1c4c:	98 ab       	std	Y+48, r25	; 0x30
    1c4e:	8f a7       	std	Y+47, r24	; 0x2f
    1c50:	0f c0       	rjmp	.+30     	; 0x1c70 <LCD_VidSendData+0xdc>
    1c52:	88 ec       	ldi	r24, 0xC8	; 200
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	9e a7       	std	Y+46, r25	; 0x2e
    1c58:	8d a7       	std	Y+45, r24	; 0x2d
    1c5a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c5c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c5e:	01 97       	sbiw	r24, 0x01	; 1
    1c60:	f1 f7       	brne	.-4      	; 0x1c5e <LCD_VidSendData+0xca>
    1c62:	9e a7       	std	Y+46, r25	; 0x2e
    1c64:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c66:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c68:	98 a9       	ldd	r25, Y+48	; 0x30
    1c6a:	01 97       	sbiw	r24, 0x01	; 1
    1c6c:	98 ab       	std	Y+48, r25	; 0x30
    1c6e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c70:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c72:	98 a9       	ldd	r25, Y+48	; 0x30
    1c74:	00 97       	sbiw	r24, 0x00	; 0
    1c76:	69 f7       	brne	.-38     	; 0x1c52 <LCD_VidSendData+0xbe>
    1c78:	14 c0       	rjmp	.+40     	; 0x1ca2 <LCD_VidSendData+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c7a:	69 a9       	ldd	r22, Y+49	; 0x31
    1c7c:	7a a9       	ldd	r23, Y+50	; 0x32
    1c7e:	8b a9       	ldd	r24, Y+51	; 0x33
    1c80:	9c a9       	ldd	r25, Y+52	; 0x34
    1c82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c86:	dc 01       	movw	r26, r24
    1c88:	cb 01       	movw	r24, r22
    1c8a:	98 ab       	std	Y+48, r25	; 0x30
    1c8c:	8f a7       	std	Y+47, r24	; 0x2f
    1c8e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c90:	98 a9       	ldd	r25, Y+48	; 0x30
    1c92:	9c a7       	std	Y+44, r25	; 0x2c
    1c94:	8b a7       	std	Y+43, r24	; 0x2b
    1c96:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c98:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c9a:	01 97       	sbiw	r24, 0x01	; 1
    1c9c:	f1 f7       	brne	.-4      	; 0x1c9a <LCD_VidSendData+0x106>
    1c9e:	9c a7       	std	Y+44, r25	; 0x2c
    1ca0:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1);
		DIO_VidSetPortValue(LDcopy_u8PORT,copy_u8data);
    1ca2:	82 e0       	ldi	r24, 0x02	; 2
    1ca4:	69 ad       	ldd	r22, Y+57	; 0x39
    1ca6:	0e 94 45 0a 	call	0x148a	; 0x148a <DIO_VidSetPortValue>
    1caa:	80 e0       	ldi	r24, 0x00	; 0
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	a0 e8       	ldi	r26, 0x80	; 128
    1cb0:	bf e3       	ldi	r27, 0x3F	; 63
    1cb2:	8f a3       	std	Y+39, r24	; 0x27
    1cb4:	98 a7       	std	Y+40, r25	; 0x28
    1cb6:	a9 a7       	std	Y+41, r26	; 0x29
    1cb8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cba:	6f a1       	ldd	r22, Y+39	; 0x27
    1cbc:	78 a5       	ldd	r23, Y+40	; 0x28
    1cbe:	89 a5       	ldd	r24, Y+41	; 0x29
    1cc0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cc2:	20 e0       	ldi	r18, 0x00	; 0
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	4a ef       	ldi	r20, 0xFA	; 250
    1cc8:	54 e4       	ldi	r21, 0x44	; 68
    1cca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cce:	dc 01       	movw	r26, r24
    1cd0:	cb 01       	movw	r24, r22
    1cd2:	8b a3       	std	Y+35, r24	; 0x23
    1cd4:	9c a3       	std	Y+36, r25	; 0x24
    1cd6:	ad a3       	std	Y+37, r26	; 0x25
    1cd8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1cda:	6b a1       	ldd	r22, Y+35	; 0x23
    1cdc:	7c a1       	ldd	r23, Y+36	; 0x24
    1cde:	8d a1       	ldd	r24, Y+37	; 0x25
    1ce0:	9e a1       	ldd	r25, Y+38	; 0x26
    1ce2:	20 e0       	ldi	r18, 0x00	; 0
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	40 e8       	ldi	r20, 0x80	; 128
    1ce8:	5f e3       	ldi	r21, 0x3F	; 63
    1cea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cee:	88 23       	and	r24, r24
    1cf0:	2c f4       	brge	.+10     	; 0x1cfc <LCD_VidSendData+0x168>
		__ticks = 1;
    1cf2:	81 e0       	ldi	r24, 0x01	; 1
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	9a a3       	std	Y+34, r25	; 0x22
    1cf8:	89 a3       	std	Y+33, r24	; 0x21
    1cfa:	3f c0       	rjmp	.+126    	; 0x1d7a <LCD_VidSendData+0x1e6>
	else if (__tmp > 65535)
    1cfc:	6b a1       	ldd	r22, Y+35	; 0x23
    1cfe:	7c a1       	ldd	r23, Y+36	; 0x24
    1d00:	8d a1       	ldd	r24, Y+37	; 0x25
    1d02:	9e a1       	ldd	r25, Y+38	; 0x26
    1d04:	20 e0       	ldi	r18, 0x00	; 0
    1d06:	3f ef       	ldi	r19, 0xFF	; 255
    1d08:	4f e7       	ldi	r20, 0x7F	; 127
    1d0a:	57 e4       	ldi	r21, 0x47	; 71
    1d0c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d10:	18 16       	cp	r1, r24
    1d12:	4c f5       	brge	.+82     	; 0x1d66 <LCD_VidSendData+0x1d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d14:	6f a1       	ldd	r22, Y+39	; 0x27
    1d16:	78 a5       	ldd	r23, Y+40	; 0x28
    1d18:	89 a5       	ldd	r24, Y+41	; 0x29
    1d1a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d1c:	20 e0       	ldi	r18, 0x00	; 0
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	40 e2       	ldi	r20, 0x20	; 32
    1d22:	51 e4       	ldi	r21, 0x41	; 65
    1d24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d28:	dc 01       	movw	r26, r24
    1d2a:	cb 01       	movw	r24, r22
    1d2c:	bc 01       	movw	r22, r24
    1d2e:	cd 01       	movw	r24, r26
    1d30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d34:	dc 01       	movw	r26, r24
    1d36:	cb 01       	movw	r24, r22
    1d38:	9a a3       	std	Y+34, r25	; 0x22
    1d3a:	89 a3       	std	Y+33, r24	; 0x21
    1d3c:	0f c0       	rjmp	.+30     	; 0x1d5c <LCD_VidSendData+0x1c8>
    1d3e:	88 ec       	ldi	r24, 0xC8	; 200
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	98 a3       	std	Y+32, r25	; 0x20
    1d44:	8f 8f       	std	Y+31, r24	; 0x1f
    1d46:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d48:	98 a1       	ldd	r25, Y+32	; 0x20
    1d4a:	01 97       	sbiw	r24, 0x01	; 1
    1d4c:	f1 f7       	brne	.-4      	; 0x1d4a <LCD_VidSendData+0x1b6>
    1d4e:	98 a3       	std	Y+32, r25	; 0x20
    1d50:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d52:	89 a1       	ldd	r24, Y+33	; 0x21
    1d54:	9a a1       	ldd	r25, Y+34	; 0x22
    1d56:	01 97       	sbiw	r24, 0x01	; 1
    1d58:	9a a3       	std	Y+34, r25	; 0x22
    1d5a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d5c:	89 a1       	ldd	r24, Y+33	; 0x21
    1d5e:	9a a1       	ldd	r25, Y+34	; 0x22
    1d60:	00 97       	sbiw	r24, 0x00	; 0
    1d62:	69 f7       	brne	.-38     	; 0x1d3e <LCD_VidSendData+0x1aa>
    1d64:	14 c0       	rjmp	.+40     	; 0x1d8e <LCD_VidSendData+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d66:	6b a1       	ldd	r22, Y+35	; 0x23
    1d68:	7c a1       	ldd	r23, Y+36	; 0x24
    1d6a:	8d a1       	ldd	r24, Y+37	; 0x25
    1d6c:	9e a1       	ldd	r25, Y+38	; 0x26
    1d6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d72:	dc 01       	movw	r26, r24
    1d74:	cb 01       	movw	r24, r22
    1d76:	9a a3       	std	Y+34, r25	; 0x22
    1d78:	89 a3       	std	Y+33, r24	; 0x21
    1d7a:	89 a1       	ldd	r24, Y+33	; 0x21
    1d7c:	9a a1       	ldd	r25, Y+34	; 0x22
    1d7e:	9e 8f       	std	Y+30, r25	; 0x1e
    1d80:	8d 8f       	std	Y+29, r24	; 0x1d
    1d82:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d84:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d86:	01 97       	sbiw	r24, 0x01	; 1
    1d88:	f1 f7       	brne	.-4      	; 0x1d86 <LCD_VidSendData+0x1f2>
    1d8a:	9e 8f       	std	Y+30, r25	; 0x1e
    1d8c:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
		DIO_VidSetPinValue(Lcopy_u8PORT,  E_copy_u8Pin,1);  // E=1; Upload Command
    1d8e:	83 e0       	ldi	r24, 0x03	; 3
    1d90:	62 e0       	ldi	r22, 0x02	; 2
    1d92:	41 e0       	ldi	r20, 0x01	; 1
    1d94:	0e 94 52 08 	call	0x10a4	; 0x10a4 <DIO_VidSetPinValue>
    1d98:	80 e0       	ldi	r24, 0x00	; 0
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	a0 e8       	ldi	r26, 0x80	; 128
    1d9e:	bf e3       	ldi	r27, 0x3F	; 63
    1da0:	89 8f       	std	Y+25, r24	; 0x19
    1da2:	9a 8f       	std	Y+26, r25	; 0x1a
    1da4:	ab 8f       	std	Y+27, r26	; 0x1b
    1da6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1da8:	69 8d       	ldd	r22, Y+25	; 0x19
    1daa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1db0:	20 e0       	ldi	r18, 0x00	; 0
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	4a ef       	ldi	r20, 0xFA	; 250
    1db6:	54 e4       	ldi	r21, 0x44	; 68
    1db8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dbc:	dc 01       	movw	r26, r24
    1dbe:	cb 01       	movw	r24, r22
    1dc0:	8d 8b       	std	Y+21, r24	; 0x15
    1dc2:	9e 8b       	std	Y+22, r25	; 0x16
    1dc4:	af 8b       	std	Y+23, r26	; 0x17
    1dc6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1dc8:	6d 89       	ldd	r22, Y+21	; 0x15
    1dca:	7e 89       	ldd	r23, Y+22	; 0x16
    1dcc:	8f 89       	ldd	r24, Y+23	; 0x17
    1dce:	98 8d       	ldd	r25, Y+24	; 0x18
    1dd0:	20 e0       	ldi	r18, 0x00	; 0
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	40 e8       	ldi	r20, 0x80	; 128
    1dd6:	5f e3       	ldi	r21, 0x3F	; 63
    1dd8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ddc:	88 23       	and	r24, r24
    1dde:	2c f4       	brge	.+10     	; 0x1dea <LCD_VidSendData+0x256>
		__ticks = 1;
    1de0:	81 e0       	ldi	r24, 0x01	; 1
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	9c 8b       	std	Y+20, r25	; 0x14
    1de6:	8b 8b       	std	Y+19, r24	; 0x13
    1de8:	3f c0       	rjmp	.+126    	; 0x1e68 <LCD_VidSendData+0x2d4>
	else if (__tmp > 65535)
    1dea:	6d 89       	ldd	r22, Y+21	; 0x15
    1dec:	7e 89       	ldd	r23, Y+22	; 0x16
    1dee:	8f 89       	ldd	r24, Y+23	; 0x17
    1df0:	98 8d       	ldd	r25, Y+24	; 0x18
    1df2:	20 e0       	ldi	r18, 0x00	; 0
    1df4:	3f ef       	ldi	r19, 0xFF	; 255
    1df6:	4f e7       	ldi	r20, 0x7F	; 127
    1df8:	57 e4       	ldi	r21, 0x47	; 71
    1dfa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dfe:	18 16       	cp	r1, r24
    1e00:	4c f5       	brge	.+82     	; 0x1e54 <LCD_VidSendData+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e02:	69 8d       	ldd	r22, Y+25	; 0x19
    1e04:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e06:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e08:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e0a:	20 e0       	ldi	r18, 0x00	; 0
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	40 e2       	ldi	r20, 0x20	; 32
    1e10:	51 e4       	ldi	r21, 0x41	; 65
    1e12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e16:	dc 01       	movw	r26, r24
    1e18:	cb 01       	movw	r24, r22
    1e1a:	bc 01       	movw	r22, r24
    1e1c:	cd 01       	movw	r24, r26
    1e1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e22:	dc 01       	movw	r26, r24
    1e24:	cb 01       	movw	r24, r22
    1e26:	9c 8b       	std	Y+20, r25	; 0x14
    1e28:	8b 8b       	std	Y+19, r24	; 0x13
    1e2a:	0f c0       	rjmp	.+30     	; 0x1e4a <LCD_VidSendData+0x2b6>
    1e2c:	88 ec       	ldi	r24, 0xC8	; 200
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	9a 8b       	std	Y+18, r25	; 0x12
    1e32:	89 8b       	std	Y+17, r24	; 0x11
    1e34:	89 89       	ldd	r24, Y+17	; 0x11
    1e36:	9a 89       	ldd	r25, Y+18	; 0x12
    1e38:	01 97       	sbiw	r24, 0x01	; 1
    1e3a:	f1 f7       	brne	.-4      	; 0x1e38 <LCD_VidSendData+0x2a4>
    1e3c:	9a 8b       	std	Y+18, r25	; 0x12
    1e3e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e40:	8b 89       	ldd	r24, Y+19	; 0x13
    1e42:	9c 89       	ldd	r25, Y+20	; 0x14
    1e44:	01 97       	sbiw	r24, 0x01	; 1
    1e46:	9c 8b       	std	Y+20, r25	; 0x14
    1e48:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e4a:	8b 89       	ldd	r24, Y+19	; 0x13
    1e4c:	9c 89       	ldd	r25, Y+20	; 0x14
    1e4e:	00 97       	sbiw	r24, 0x00	; 0
    1e50:	69 f7       	brne	.-38     	; 0x1e2c <LCD_VidSendData+0x298>
    1e52:	14 c0       	rjmp	.+40     	; 0x1e7c <LCD_VidSendData+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e54:	6d 89       	ldd	r22, Y+21	; 0x15
    1e56:	7e 89       	ldd	r23, Y+22	; 0x16
    1e58:	8f 89       	ldd	r24, Y+23	; 0x17
    1e5a:	98 8d       	ldd	r25, Y+24	; 0x18
    1e5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e60:	dc 01       	movw	r26, r24
    1e62:	cb 01       	movw	r24, r22
    1e64:	9c 8b       	std	Y+20, r25	; 0x14
    1e66:	8b 8b       	std	Y+19, r24	; 0x13
    1e68:	8b 89       	ldd	r24, Y+19	; 0x13
    1e6a:	9c 89       	ldd	r25, Y+20	; 0x14
    1e6c:	98 8b       	std	Y+16, r25	; 0x10
    1e6e:	8f 87       	std	Y+15, r24	; 0x0f
    1e70:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e72:	98 89       	ldd	r25, Y+16	; 0x10
    1e74:	01 97       	sbiw	r24, 0x01	; 1
    1e76:	f1 f7       	brne	.-4      	; 0x1e74 <LCD_VidSendData+0x2e0>
    1e78:	98 8b       	std	Y+16, r25	; 0x10
    1e7a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		DIO_VidSetPinValue(Lcopy_u8PORT,  E_copy_u8Pin,0);   // E=0 Display Command
    1e7c:	83 e0       	ldi	r24, 0x03	; 3
    1e7e:	62 e0       	ldi	r22, 0x02	; 2
    1e80:	40 e0       	ldi	r20, 0x00	; 0
    1e82:	0e 94 52 08 	call	0x10a4	; 0x10a4 <DIO_VidSetPinValue>
    1e86:	80 e0       	ldi	r24, 0x00	; 0
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	a0 e8       	ldi	r26, 0x80	; 128
    1e8c:	bf e3       	ldi	r27, 0x3F	; 63
    1e8e:	8b 87       	std	Y+11, r24	; 0x0b
    1e90:	9c 87       	std	Y+12, r25	; 0x0c
    1e92:	ad 87       	std	Y+13, r26	; 0x0d
    1e94:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e96:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e98:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e9e:	20 e0       	ldi	r18, 0x00	; 0
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	4a ef       	ldi	r20, 0xFA	; 250
    1ea4:	54 e4       	ldi	r21, 0x44	; 68
    1ea6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eaa:	dc 01       	movw	r26, r24
    1eac:	cb 01       	movw	r24, r22
    1eae:	8f 83       	std	Y+7, r24	; 0x07
    1eb0:	98 87       	std	Y+8, r25	; 0x08
    1eb2:	a9 87       	std	Y+9, r26	; 0x09
    1eb4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1eb6:	6f 81       	ldd	r22, Y+7	; 0x07
    1eb8:	78 85       	ldd	r23, Y+8	; 0x08
    1eba:	89 85       	ldd	r24, Y+9	; 0x09
    1ebc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ebe:	20 e0       	ldi	r18, 0x00	; 0
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	40 e8       	ldi	r20, 0x80	; 128
    1ec4:	5f e3       	ldi	r21, 0x3F	; 63
    1ec6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1eca:	88 23       	and	r24, r24
    1ecc:	2c f4       	brge	.+10     	; 0x1ed8 <LCD_VidSendData+0x344>
		__ticks = 1;
    1ece:	81 e0       	ldi	r24, 0x01	; 1
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	9e 83       	std	Y+6, r25	; 0x06
    1ed4:	8d 83       	std	Y+5, r24	; 0x05
    1ed6:	3f c0       	rjmp	.+126    	; 0x1f56 <LCD_VidSendData+0x3c2>
	else if (__tmp > 65535)
    1ed8:	6f 81       	ldd	r22, Y+7	; 0x07
    1eda:	78 85       	ldd	r23, Y+8	; 0x08
    1edc:	89 85       	ldd	r24, Y+9	; 0x09
    1ede:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ee0:	20 e0       	ldi	r18, 0x00	; 0
    1ee2:	3f ef       	ldi	r19, 0xFF	; 255
    1ee4:	4f e7       	ldi	r20, 0x7F	; 127
    1ee6:	57 e4       	ldi	r21, 0x47	; 71
    1ee8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1eec:	18 16       	cp	r1, r24
    1eee:	4c f5       	brge	.+82     	; 0x1f42 <LCD_VidSendData+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ef0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ef2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ef4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ef6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ef8:	20 e0       	ldi	r18, 0x00	; 0
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	40 e2       	ldi	r20, 0x20	; 32
    1efe:	51 e4       	ldi	r21, 0x41	; 65
    1f00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f04:	dc 01       	movw	r26, r24
    1f06:	cb 01       	movw	r24, r22
    1f08:	bc 01       	movw	r22, r24
    1f0a:	cd 01       	movw	r24, r26
    1f0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f10:	dc 01       	movw	r26, r24
    1f12:	cb 01       	movw	r24, r22
    1f14:	9e 83       	std	Y+6, r25	; 0x06
    1f16:	8d 83       	std	Y+5, r24	; 0x05
    1f18:	0f c0       	rjmp	.+30     	; 0x1f38 <LCD_VidSendData+0x3a4>
    1f1a:	88 ec       	ldi	r24, 0xC8	; 200
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	9c 83       	std	Y+4, r25	; 0x04
    1f20:	8b 83       	std	Y+3, r24	; 0x03
    1f22:	8b 81       	ldd	r24, Y+3	; 0x03
    1f24:	9c 81       	ldd	r25, Y+4	; 0x04
    1f26:	01 97       	sbiw	r24, 0x01	; 1
    1f28:	f1 f7       	brne	.-4      	; 0x1f26 <LCD_VidSendData+0x392>
    1f2a:	9c 83       	std	Y+4, r25	; 0x04
    1f2c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f30:	9e 81       	ldd	r25, Y+6	; 0x06
    1f32:	01 97       	sbiw	r24, 0x01	; 1
    1f34:	9e 83       	std	Y+6, r25	; 0x06
    1f36:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f38:	8d 81       	ldd	r24, Y+5	; 0x05
    1f3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f3c:	00 97       	sbiw	r24, 0x00	; 0
    1f3e:	69 f7       	brne	.-38     	; 0x1f1a <LCD_VidSendData+0x386>
    1f40:	14 c0       	rjmp	.+40     	; 0x1f6a <LCD_VidSendData+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f42:	6f 81       	ldd	r22, Y+7	; 0x07
    1f44:	78 85       	ldd	r23, Y+8	; 0x08
    1f46:	89 85       	ldd	r24, Y+9	; 0x09
    1f48:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f4e:	dc 01       	movw	r26, r24
    1f50:	cb 01       	movw	r24, r22
    1f52:	9e 83       	std	Y+6, r25	; 0x06
    1f54:	8d 83       	std	Y+5, r24	; 0x05
    1f56:	8d 81       	ldd	r24, Y+5	; 0x05
    1f58:	9e 81       	ldd	r25, Y+6	; 0x06
    1f5a:	9a 83       	std	Y+2, r25	; 0x02
    1f5c:	89 83       	std	Y+1, r24	; 0x01
    1f5e:	89 81       	ldd	r24, Y+1	; 0x01
    1f60:	9a 81       	ldd	r25, Y+2	; 0x02
    1f62:	01 97       	sbiw	r24, 0x01	; 1
    1f64:	f1 f7       	brne	.-4      	; 0x1f62 <LCD_VidSendData+0x3ce>
    1f66:	9a 83       	std	Y+2, r25	; 0x02
    1f68:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		DIO_VidSetPinValue(Lcopy_u8PORT,  E_copy_u8Pin,0);   // E=0 Display Command
		_delay_ms(2);

	#endif
}
    1f6a:	e9 96       	adiw	r28, 0x39	; 57
    1f6c:	0f b6       	in	r0, 0x3f	; 63
    1f6e:	f8 94       	cli
    1f70:	de bf       	out	0x3e, r29	; 62
    1f72:	0f be       	out	0x3f, r0	; 63
    1f74:	cd bf       	out	0x3d, r28	; 61
    1f76:	cf 91       	pop	r28
    1f78:	df 91       	pop	r29
    1f7a:	08 95       	ret

00001f7c <LCD_VidSendCommand>:

void LCD_VidSendCommand(u8 copy_u8command)
{
    1f7c:	df 93       	push	r29
    1f7e:	cf 93       	push	r28
    1f80:	cd b7       	in	r28, 0x3d	; 61
    1f82:	de b7       	in	r29, 0x3e	; 62
    1f84:	6d 97       	sbiw	r28, 0x1d	; 29
    1f86:	0f b6       	in	r0, 0x3f	; 63
    1f88:	f8 94       	cli
    1f8a:	de bf       	out	0x3e, r29	; 62
    1f8c:	0f be       	out	0x3f, r0	; 63
    1f8e:	cd bf       	out	0x3d, r28	; 61
    1f90:	8d 8f       	std	Y+29, r24	; 0x1d
	#if LCD_Mode==EIGHT_BIT
	DIO_VidSetPinValue(Lcopy_u8PORT,  RS_copy_u8Pin,0);
    1f92:	83 e0       	ldi	r24, 0x03	; 3
    1f94:	60 e0       	ldi	r22, 0x00	; 0
    1f96:	40 e0       	ldi	r20, 0x00	; 0
    1f98:	0e 94 52 08 	call	0x10a4	; 0x10a4 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(Lcopy_u8PORT,  R_w_copy_u8Pin,0);
    1f9c:	83 e0       	ldi	r24, 0x03	; 3
    1f9e:	61 e0       	ldi	r22, 0x01	; 1
    1fa0:	40 e0       	ldi	r20, 0x00	; 0
    1fa2:	0e 94 52 08 	call	0x10a4	; 0x10a4 <DIO_VidSetPinValue>
	
	
	DIO_VidSetPortValue(LDcopy_u8PORT,copy_u8command);
    1fa6:	82 e0       	ldi	r24, 0x02	; 2
    1fa8:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1faa:	0e 94 45 0a 	call	0x148a	; 0x148a <DIO_VidSetPortValue>
	DIO_VidSetPinValue(Lcopy_u8PORT,  E_copy_u8Pin,1);  // E=1; Upload Command
    1fae:	83 e0       	ldi	r24, 0x03	; 3
    1fb0:	62 e0       	ldi	r22, 0x02	; 2
    1fb2:	41 e0       	ldi	r20, 0x01	; 1
    1fb4:	0e 94 52 08 	call	0x10a4	; 0x10a4 <DIO_VidSetPinValue>
    1fb8:	80 e0       	ldi	r24, 0x00	; 0
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	a0 e8       	ldi	r26, 0x80	; 128
    1fbe:	bf e3       	ldi	r27, 0x3F	; 63
    1fc0:	89 8f       	std	Y+25, r24	; 0x19
    1fc2:	9a 8f       	std	Y+26, r25	; 0x1a
    1fc4:	ab 8f       	std	Y+27, r26	; 0x1b
    1fc6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fc8:	69 8d       	ldd	r22, Y+25	; 0x19
    1fca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fcc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fd0:	20 e0       	ldi	r18, 0x00	; 0
    1fd2:	30 e0       	ldi	r19, 0x00	; 0
    1fd4:	4a ef       	ldi	r20, 0xFA	; 250
    1fd6:	54 e4       	ldi	r21, 0x44	; 68
    1fd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fdc:	dc 01       	movw	r26, r24
    1fde:	cb 01       	movw	r24, r22
    1fe0:	8d 8b       	std	Y+21, r24	; 0x15
    1fe2:	9e 8b       	std	Y+22, r25	; 0x16
    1fe4:	af 8b       	std	Y+23, r26	; 0x17
    1fe6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1fe8:	6d 89       	ldd	r22, Y+21	; 0x15
    1fea:	7e 89       	ldd	r23, Y+22	; 0x16
    1fec:	8f 89       	ldd	r24, Y+23	; 0x17
    1fee:	98 8d       	ldd	r25, Y+24	; 0x18
    1ff0:	20 e0       	ldi	r18, 0x00	; 0
    1ff2:	30 e0       	ldi	r19, 0x00	; 0
    1ff4:	40 e8       	ldi	r20, 0x80	; 128
    1ff6:	5f e3       	ldi	r21, 0x3F	; 63
    1ff8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ffc:	88 23       	and	r24, r24
    1ffe:	2c f4       	brge	.+10     	; 0x200a <LCD_VidSendCommand+0x8e>
		__ticks = 1;
    2000:	81 e0       	ldi	r24, 0x01	; 1
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	9c 8b       	std	Y+20, r25	; 0x14
    2006:	8b 8b       	std	Y+19, r24	; 0x13
    2008:	3f c0       	rjmp	.+126    	; 0x2088 <LCD_VidSendCommand+0x10c>
	else if (__tmp > 65535)
    200a:	6d 89       	ldd	r22, Y+21	; 0x15
    200c:	7e 89       	ldd	r23, Y+22	; 0x16
    200e:	8f 89       	ldd	r24, Y+23	; 0x17
    2010:	98 8d       	ldd	r25, Y+24	; 0x18
    2012:	20 e0       	ldi	r18, 0x00	; 0
    2014:	3f ef       	ldi	r19, 0xFF	; 255
    2016:	4f e7       	ldi	r20, 0x7F	; 127
    2018:	57 e4       	ldi	r21, 0x47	; 71
    201a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    201e:	18 16       	cp	r1, r24
    2020:	4c f5       	brge	.+82     	; 0x2074 <LCD_VidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2022:	69 8d       	ldd	r22, Y+25	; 0x19
    2024:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2026:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2028:	9c 8d       	ldd	r25, Y+28	; 0x1c
    202a:	20 e0       	ldi	r18, 0x00	; 0
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	40 e2       	ldi	r20, 0x20	; 32
    2030:	51 e4       	ldi	r21, 0x41	; 65
    2032:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2036:	dc 01       	movw	r26, r24
    2038:	cb 01       	movw	r24, r22
    203a:	bc 01       	movw	r22, r24
    203c:	cd 01       	movw	r24, r26
    203e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2042:	dc 01       	movw	r26, r24
    2044:	cb 01       	movw	r24, r22
    2046:	9c 8b       	std	Y+20, r25	; 0x14
    2048:	8b 8b       	std	Y+19, r24	; 0x13
    204a:	0f c0       	rjmp	.+30     	; 0x206a <LCD_VidSendCommand+0xee>
    204c:	88 ec       	ldi	r24, 0xC8	; 200
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	9a 8b       	std	Y+18, r25	; 0x12
    2052:	89 8b       	std	Y+17, r24	; 0x11
    2054:	89 89       	ldd	r24, Y+17	; 0x11
    2056:	9a 89       	ldd	r25, Y+18	; 0x12
    2058:	01 97       	sbiw	r24, 0x01	; 1
    205a:	f1 f7       	brne	.-4      	; 0x2058 <LCD_VidSendCommand+0xdc>
    205c:	9a 8b       	std	Y+18, r25	; 0x12
    205e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2060:	8b 89       	ldd	r24, Y+19	; 0x13
    2062:	9c 89       	ldd	r25, Y+20	; 0x14
    2064:	01 97       	sbiw	r24, 0x01	; 1
    2066:	9c 8b       	std	Y+20, r25	; 0x14
    2068:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    206a:	8b 89       	ldd	r24, Y+19	; 0x13
    206c:	9c 89       	ldd	r25, Y+20	; 0x14
    206e:	00 97       	sbiw	r24, 0x00	; 0
    2070:	69 f7       	brne	.-38     	; 0x204c <LCD_VidSendCommand+0xd0>
    2072:	14 c0       	rjmp	.+40     	; 0x209c <LCD_VidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2074:	6d 89       	ldd	r22, Y+21	; 0x15
    2076:	7e 89       	ldd	r23, Y+22	; 0x16
    2078:	8f 89       	ldd	r24, Y+23	; 0x17
    207a:	98 8d       	ldd	r25, Y+24	; 0x18
    207c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2080:	dc 01       	movw	r26, r24
    2082:	cb 01       	movw	r24, r22
    2084:	9c 8b       	std	Y+20, r25	; 0x14
    2086:	8b 8b       	std	Y+19, r24	; 0x13
    2088:	8b 89       	ldd	r24, Y+19	; 0x13
    208a:	9c 89       	ldd	r25, Y+20	; 0x14
    208c:	98 8b       	std	Y+16, r25	; 0x10
    208e:	8f 87       	std	Y+15, r24	; 0x0f
    2090:	8f 85       	ldd	r24, Y+15	; 0x0f
    2092:	98 89       	ldd	r25, Y+16	; 0x10
    2094:	01 97       	sbiw	r24, 0x01	; 1
    2096:	f1 f7       	brne	.-4      	; 0x2094 <LCD_VidSendCommand+0x118>
    2098:	98 8b       	std	Y+16, r25	; 0x10
    209a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_VidSetPinValue(Lcopy_u8PORT,  E_copy_u8Pin,0);   // E=0 Display Command
    209c:	83 e0       	ldi	r24, 0x03	; 3
    209e:	62 e0       	ldi	r22, 0x02	; 2
    20a0:	40 e0       	ldi	r20, 0x00	; 0
    20a2:	0e 94 52 08 	call	0x10a4	; 0x10a4 <DIO_VidSetPinValue>
	if (copy_u8command==1)
    20a6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20a8:	81 30       	cpi	r24, 0x01	; 1
    20aa:	09 f0       	breq	.+2      	; 0x20ae <LCD_VidSendCommand+0x132>
    20ac:	72 c0       	rjmp	.+228    	; 0x2192 <LCD_VidSendCommand+0x216>
    20ae:	80 e0       	ldi	r24, 0x00	; 0
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	a0 e0       	ldi	r26, 0x00	; 0
    20b4:	b0 e4       	ldi	r27, 0x40	; 64
    20b6:	8b 87       	std	Y+11, r24	; 0x0b
    20b8:	9c 87       	std	Y+12, r25	; 0x0c
    20ba:	ad 87       	std	Y+13, r26	; 0x0d
    20bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20be:	6b 85       	ldd	r22, Y+11	; 0x0b
    20c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    20c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    20c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    20c6:	20 e0       	ldi	r18, 0x00	; 0
    20c8:	30 e0       	ldi	r19, 0x00	; 0
    20ca:	4a ef       	ldi	r20, 0xFA	; 250
    20cc:	54 e4       	ldi	r21, 0x44	; 68
    20ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20d2:	dc 01       	movw	r26, r24
    20d4:	cb 01       	movw	r24, r22
    20d6:	8f 83       	std	Y+7, r24	; 0x07
    20d8:	98 87       	std	Y+8, r25	; 0x08
    20da:	a9 87       	std	Y+9, r26	; 0x09
    20dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20de:	6f 81       	ldd	r22, Y+7	; 0x07
    20e0:	78 85       	ldd	r23, Y+8	; 0x08
    20e2:	89 85       	ldd	r24, Y+9	; 0x09
    20e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    20e6:	20 e0       	ldi	r18, 0x00	; 0
    20e8:	30 e0       	ldi	r19, 0x00	; 0
    20ea:	40 e8       	ldi	r20, 0x80	; 128
    20ec:	5f e3       	ldi	r21, 0x3F	; 63
    20ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20f2:	88 23       	and	r24, r24
    20f4:	2c f4       	brge	.+10     	; 0x2100 <LCD_VidSendCommand+0x184>
		__ticks = 1;
    20f6:	81 e0       	ldi	r24, 0x01	; 1
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	9e 83       	std	Y+6, r25	; 0x06
    20fc:	8d 83       	std	Y+5, r24	; 0x05
    20fe:	3f c0       	rjmp	.+126    	; 0x217e <LCD_VidSendCommand+0x202>
	else if (__tmp > 65535)
    2100:	6f 81       	ldd	r22, Y+7	; 0x07
    2102:	78 85       	ldd	r23, Y+8	; 0x08
    2104:	89 85       	ldd	r24, Y+9	; 0x09
    2106:	9a 85       	ldd	r25, Y+10	; 0x0a
    2108:	20 e0       	ldi	r18, 0x00	; 0
    210a:	3f ef       	ldi	r19, 0xFF	; 255
    210c:	4f e7       	ldi	r20, 0x7F	; 127
    210e:	57 e4       	ldi	r21, 0x47	; 71
    2110:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2114:	18 16       	cp	r1, r24
    2116:	4c f5       	brge	.+82     	; 0x216a <LCD_VidSendCommand+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2118:	6b 85       	ldd	r22, Y+11	; 0x0b
    211a:	7c 85       	ldd	r23, Y+12	; 0x0c
    211c:	8d 85       	ldd	r24, Y+13	; 0x0d
    211e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2120:	20 e0       	ldi	r18, 0x00	; 0
    2122:	30 e0       	ldi	r19, 0x00	; 0
    2124:	40 e2       	ldi	r20, 0x20	; 32
    2126:	51 e4       	ldi	r21, 0x41	; 65
    2128:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    212c:	dc 01       	movw	r26, r24
    212e:	cb 01       	movw	r24, r22
    2130:	bc 01       	movw	r22, r24
    2132:	cd 01       	movw	r24, r26
    2134:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2138:	dc 01       	movw	r26, r24
    213a:	cb 01       	movw	r24, r22
    213c:	9e 83       	std	Y+6, r25	; 0x06
    213e:	8d 83       	std	Y+5, r24	; 0x05
    2140:	0f c0       	rjmp	.+30     	; 0x2160 <LCD_VidSendCommand+0x1e4>
    2142:	88 ec       	ldi	r24, 0xC8	; 200
    2144:	90 e0       	ldi	r25, 0x00	; 0
    2146:	9c 83       	std	Y+4, r25	; 0x04
    2148:	8b 83       	std	Y+3, r24	; 0x03
    214a:	8b 81       	ldd	r24, Y+3	; 0x03
    214c:	9c 81       	ldd	r25, Y+4	; 0x04
    214e:	01 97       	sbiw	r24, 0x01	; 1
    2150:	f1 f7       	brne	.-4      	; 0x214e <LCD_VidSendCommand+0x1d2>
    2152:	9c 83       	std	Y+4, r25	; 0x04
    2154:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2156:	8d 81       	ldd	r24, Y+5	; 0x05
    2158:	9e 81       	ldd	r25, Y+6	; 0x06
    215a:	01 97       	sbiw	r24, 0x01	; 1
    215c:	9e 83       	std	Y+6, r25	; 0x06
    215e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2160:	8d 81       	ldd	r24, Y+5	; 0x05
    2162:	9e 81       	ldd	r25, Y+6	; 0x06
    2164:	00 97       	sbiw	r24, 0x00	; 0
    2166:	69 f7       	brne	.-38     	; 0x2142 <LCD_VidSendCommand+0x1c6>
    2168:	14 c0       	rjmp	.+40     	; 0x2192 <LCD_VidSendCommand+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    216a:	6f 81       	ldd	r22, Y+7	; 0x07
    216c:	78 85       	ldd	r23, Y+8	; 0x08
    216e:	89 85       	ldd	r24, Y+9	; 0x09
    2170:	9a 85       	ldd	r25, Y+10	; 0x0a
    2172:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2176:	dc 01       	movw	r26, r24
    2178:	cb 01       	movw	r24, r22
    217a:	9e 83       	std	Y+6, r25	; 0x06
    217c:	8d 83       	std	Y+5, r24	; 0x05
    217e:	8d 81       	ldd	r24, Y+5	; 0x05
    2180:	9e 81       	ldd	r25, Y+6	; 0x06
    2182:	9a 83       	std	Y+2, r25	; 0x02
    2184:	89 83       	std	Y+1, r24	; 0x01
    2186:	89 81       	ldd	r24, Y+1	; 0x01
    2188:	9a 81       	ldd	r25, Y+2	; 0x02
    218a:	01 97       	sbiw	r24, 0x01	; 1
    218c:	f1 f7       	brne	.-4      	; 0x218a <LCD_VidSendCommand+0x20e>
    218e:	9a 83       	std	Y+2, r25	; 0x02
    2190:	89 83       	std	Y+1, r24	; 0x01
	DIO_VidSetPinValue(Lcopy_u8PORT,  E_copy_u8Pin,0);
	_delay_ms(2);

	_delay_ms(5);
	#endif
}
    2192:	6d 96       	adiw	r28, 0x1d	; 29
    2194:	0f b6       	in	r0, 0x3f	; 63
    2196:	f8 94       	cli
    2198:	de bf       	out	0x3e, r29	; 62
    219a:	0f be       	out	0x3f, r0	; 63
    219c:	cd bf       	out	0x3d, r28	; 61
    219e:	cf 91       	pop	r28
    21a0:	df 91       	pop	r29
    21a2:	08 95       	ret

000021a4 <LCD_VidSendString>:

void LCD_VidSendString( u8 *copy_u8string)
{
    21a4:	df 93       	push	r29
    21a6:	cf 93       	push	r28
    21a8:	00 d0       	rcall	.+0      	; 0x21aa <LCD_VidSendString+0x6>
    21aa:	0f 92       	push	r0
    21ac:	cd b7       	in	r28, 0x3d	; 61
    21ae:	de b7       	in	r29, 0x3e	; 62
    21b0:	9b 83       	std	Y+3, r25	; 0x03
    21b2:	8a 83       	std	Y+2, r24	; 0x02

	u8 i=0;
    21b4:	19 82       	std	Y+1, r1	; 0x01
    21b6:	0e c0       	rjmp	.+28     	; 0x21d4 <LCD_VidSendString+0x30>

	while(copy_u8string[i] != '\0')
	{

		LCD_VidSendData(copy_u8string[i]);
    21b8:	89 81       	ldd	r24, Y+1	; 0x01
    21ba:	28 2f       	mov	r18, r24
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	8a 81       	ldd	r24, Y+2	; 0x02
    21c0:	9b 81       	ldd	r25, Y+3	; 0x03
    21c2:	fc 01       	movw	r30, r24
    21c4:	e2 0f       	add	r30, r18
    21c6:	f3 1f       	adc	r31, r19
    21c8:	80 81       	ld	r24, Z
    21ca:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <LCD_VidSendData>
		i++;
    21ce:	89 81       	ldd	r24, Y+1	; 0x01
    21d0:	8f 5f       	subi	r24, 0xFF	; 255
    21d2:	89 83       	std	Y+1, r24	; 0x01
void LCD_VidSendString( u8 *copy_u8string)
{

	u8 i=0;

	while(copy_u8string[i] != '\0')
    21d4:	89 81       	ldd	r24, Y+1	; 0x01
    21d6:	28 2f       	mov	r18, r24
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	8a 81       	ldd	r24, Y+2	; 0x02
    21dc:	9b 81       	ldd	r25, Y+3	; 0x03
    21de:	fc 01       	movw	r30, r24
    21e0:	e2 0f       	add	r30, r18
    21e2:	f3 1f       	adc	r31, r19
    21e4:	80 81       	ld	r24, Z
    21e6:	88 23       	and	r24, r24
    21e8:	39 f7       	brne	.-50     	; 0x21b8 <LCD_VidSendString+0x14>
		LCD_VidSendData(copy_u8string[i]);
		i++;
	}


}
    21ea:	0f 90       	pop	r0
    21ec:	0f 90       	pop	r0
    21ee:	0f 90       	pop	r0
    21f0:	cf 91       	pop	r28
    21f2:	df 91       	pop	r29
    21f4:	08 95       	ret

000021f6 <LCD_VidSendNumber>:

 void LCD_VidSendNumber( u16 copy_u16number)
{
    21f6:	df 93       	push	r29
    21f8:	cf 93       	push	r28
    21fa:	cd b7       	in	r28, 0x3d	; 61
    21fc:	de b7       	in	r29, 0x3e	; 62
    21fe:	2a 97       	sbiw	r28, 0x0a	; 10
    2200:	0f b6       	in	r0, 0x3f	; 63
    2202:	f8 94       	cli
    2204:	de bf       	out	0x3e, r29	; 62
    2206:	0f be       	out	0x3f, r0	; 63
    2208:	cd bf       	out	0x3d, r28	; 61
    220a:	98 87       	std	Y+8, r25	; 0x08
    220c:	8f 83       	std	Y+7, r24	; 0x07

	if (copy_u16number==0)
    220e:	8f 81       	ldd	r24, Y+7	; 0x07
    2210:	98 85       	ldd	r25, Y+8	; 0x08
    2212:	00 97       	sbiw	r24, 0x00	; 0
    2214:	19 f4       	brne	.+6      	; 0x221c <LCD_VidSendNumber+0x26>
	{
		LCD_VidSendData('0');
    2216:	80 e3       	ldi	r24, 0x30	; 48
    2218:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <LCD_VidSendData>
	}
	s8 i=0;
    221c:	19 82       	std	Y+1, r1	; 0x01
    221e:	1f c0       	rjmp	.+62     	; 0x225e <LCD_VidSendNumber+0x68>
	u8 str_num[5];
	while(copy_u16number>0)
	{
		str_num[i]=copy_u16number%10;
    2220:	89 81       	ldd	r24, Y+1	; 0x01
    2222:	e8 2f       	mov	r30, r24
    2224:	ff 27       	eor	r31, r31
    2226:	e7 fd       	sbrc	r30, 7
    2228:	f0 95       	com	r31
    222a:	8f 81       	ldd	r24, Y+7	; 0x07
    222c:	98 85       	ldd	r25, Y+8	; 0x08
    222e:	2a e0       	ldi	r18, 0x0A	; 10
    2230:	30 e0       	ldi	r19, 0x00	; 0
    2232:	b9 01       	movw	r22, r18
    2234:	0e 94 97 13 	call	0x272e	; 0x272e <__udivmodhi4>
    2238:	28 2f       	mov	r18, r24
    223a:	ce 01       	movw	r24, r28
    223c:	02 96       	adiw	r24, 0x02	; 2
    223e:	e8 0f       	add	r30, r24
    2240:	f9 1f       	adc	r31, r25
    2242:	20 83       	st	Z, r18
		copy_u16number/=10;
    2244:	8f 81       	ldd	r24, Y+7	; 0x07
    2246:	98 85       	ldd	r25, Y+8	; 0x08
    2248:	2a e0       	ldi	r18, 0x0A	; 10
    224a:	30 e0       	ldi	r19, 0x00	; 0
    224c:	b9 01       	movw	r22, r18
    224e:	0e 94 97 13 	call	0x272e	; 0x272e <__udivmodhi4>
    2252:	cb 01       	movw	r24, r22
    2254:	98 87       	std	Y+8, r25	; 0x08
    2256:	8f 83       	std	Y+7, r24	; 0x07
		i++;
    2258:	89 81       	ldd	r24, Y+1	; 0x01
    225a:	8f 5f       	subi	r24, 0xFF	; 255
    225c:	89 83       	std	Y+1, r24	; 0x01
	{
		LCD_VidSendData('0');
	}
	s8 i=0;
	u8 str_num[5];
	while(copy_u16number>0)
    225e:	8f 81       	ldd	r24, Y+7	; 0x07
    2260:	98 85       	ldd	r25, Y+8	; 0x08
    2262:	00 97       	sbiw	r24, 0x00	; 0
    2264:	e9 f6       	brne	.-70     	; 0x2220 <LCD_VidSendNumber+0x2a>
	{
		str_num[i]=copy_u16number%10;
		copy_u16number/=10;
		i++;
	}
	i--;
    2266:	89 81       	ldd	r24, Y+1	; 0x01
    2268:	81 50       	subi	r24, 0x01	; 1
    226a:	89 83       	std	Y+1, r24	; 0x01
    226c:	7e c0       	rjmp	.+252    	; 0x236a <LCD_VidSendNumber+0x174>
	while(i>=0)
	{
		switch(str_num[i])
    226e:	89 81       	ldd	r24, Y+1	; 0x01
    2270:	28 2f       	mov	r18, r24
    2272:	33 27       	eor	r19, r19
    2274:	27 fd       	sbrc	r18, 7
    2276:	30 95       	com	r19
    2278:	ce 01       	movw	r24, r28
    227a:	02 96       	adiw	r24, 0x02	; 2
    227c:	fc 01       	movw	r30, r24
    227e:	e2 0f       	add	r30, r18
    2280:	f3 1f       	adc	r31, r19
    2282:	80 81       	ld	r24, Z
    2284:	28 2f       	mov	r18, r24
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	3a 87       	std	Y+10, r19	; 0x0a
    228a:	29 87       	std	Y+9, r18	; 0x09
    228c:	89 85       	ldd	r24, Y+9	; 0x09
    228e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2290:	84 30       	cpi	r24, 0x04	; 4
    2292:	91 05       	cpc	r25, r1
    2294:	09 f4       	brne	.+2      	; 0x2298 <LCD_VidSendNumber+0xa2>
    2296:	4f c0       	rjmp	.+158    	; 0x2336 <LCD_VidSendNumber+0x140>
    2298:	29 85       	ldd	r18, Y+9	; 0x09
    229a:	3a 85       	ldd	r19, Y+10	; 0x0a
    229c:	25 30       	cpi	r18, 0x05	; 5
    229e:	31 05       	cpc	r19, r1
    22a0:	d4 f4       	brge	.+52     	; 0x22d6 <LCD_VidSendNumber+0xe0>
    22a2:	89 85       	ldd	r24, Y+9	; 0x09
    22a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22a6:	81 30       	cpi	r24, 0x01	; 1
    22a8:	91 05       	cpc	r25, r1
    22aa:	c9 f1       	breq	.+114    	; 0x231e <LCD_VidSendNumber+0x128>
    22ac:	29 85       	ldd	r18, Y+9	; 0x09
    22ae:	3a 85       	ldd	r19, Y+10	; 0x0a
    22b0:	22 30       	cpi	r18, 0x02	; 2
    22b2:	31 05       	cpc	r19, r1
    22b4:	2c f4       	brge	.+10     	; 0x22c0 <LCD_VidSendNumber+0xca>
    22b6:	89 85       	ldd	r24, Y+9	; 0x09
    22b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ba:	00 97       	sbiw	r24, 0x00	; 0
    22bc:	61 f1       	breq	.+88     	; 0x2316 <LCD_VidSendNumber+0x120>
    22be:	52 c0       	rjmp	.+164    	; 0x2364 <LCD_VidSendNumber+0x16e>
    22c0:	29 85       	ldd	r18, Y+9	; 0x09
    22c2:	3a 85       	ldd	r19, Y+10	; 0x0a
    22c4:	22 30       	cpi	r18, 0x02	; 2
    22c6:	31 05       	cpc	r19, r1
    22c8:	71 f1       	breq	.+92     	; 0x2326 <LCD_VidSendNumber+0x130>
    22ca:	89 85       	ldd	r24, Y+9	; 0x09
    22cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ce:	83 30       	cpi	r24, 0x03	; 3
    22d0:	91 05       	cpc	r25, r1
    22d2:	69 f1       	breq	.+90     	; 0x232e <LCD_VidSendNumber+0x138>
    22d4:	47 c0       	rjmp	.+142    	; 0x2364 <LCD_VidSendNumber+0x16e>
    22d6:	29 85       	ldd	r18, Y+9	; 0x09
    22d8:	3a 85       	ldd	r19, Y+10	; 0x0a
    22da:	27 30       	cpi	r18, 0x07	; 7
    22dc:	31 05       	cpc	r19, r1
    22de:	b9 f1       	breq	.+110    	; 0x234e <LCD_VidSendNumber+0x158>
    22e0:	89 85       	ldd	r24, Y+9	; 0x09
    22e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    22e4:	88 30       	cpi	r24, 0x08	; 8
    22e6:	91 05       	cpc	r25, r1
    22e8:	5c f4       	brge	.+22     	; 0x2300 <LCD_VidSendNumber+0x10a>
    22ea:	29 85       	ldd	r18, Y+9	; 0x09
    22ec:	3a 85       	ldd	r19, Y+10	; 0x0a
    22ee:	25 30       	cpi	r18, 0x05	; 5
    22f0:	31 05       	cpc	r19, r1
    22f2:	29 f1       	breq	.+74     	; 0x233e <LCD_VidSendNumber+0x148>
    22f4:	89 85       	ldd	r24, Y+9	; 0x09
    22f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    22f8:	86 30       	cpi	r24, 0x06	; 6
    22fa:	91 05       	cpc	r25, r1
    22fc:	21 f1       	breq	.+72     	; 0x2346 <LCD_VidSendNumber+0x150>
    22fe:	32 c0       	rjmp	.+100    	; 0x2364 <LCD_VidSendNumber+0x16e>
    2300:	29 85       	ldd	r18, Y+9	; 0x09
    2302:	3a 85       	ldd	r19, Y+10	; 0x0a
    2304:	28 30       	cpi	r18, 0x08	; 8
    2306:	31 05       	cpc	r19, r1
    2308:	31 f1       	breq	.+76     	; 0x2356 <LCD_VidSendNumber+0x160>
    230a:	89 85       	ldd	r24, Y+9	; 0x09
    230c:	9a 85       	ldd	r25, Y+10	; 0x0a
    230e:	89 30       	cpi	r24, 0x09	; 9
    2310:	91 05       	cpc	r25, r1
    2312:	29 f1       	breq	.+74     	; 0x235e <LCD_VidSendNumber+0x168>
    2314:	27 c0       	rjmp	.+78     	; 0x2364 <LCD_VidSendNumber+0x16e>
		{
		case 0 : LCD_VidSendData('0');break;
    2316:	80 e3       	ldi	r24, 0x30	; 48
    2318:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <LCD_VidSendData>
    231c:	23 c0       	rjmp	.+70     	; 0x2364 <LCD_VidSendNumber+0x16e>
		case 1 : LCD_VidSendData('1');break;
    231e:	81 e3       	ldi	r24, 0x31	; 49
    2320:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <LCD_VidSendData>
    2324:	1f c0       	rjmp	.+62     	; 0x2364 <LCD_VidSendNumber+0x16e>
		case 2 : LCD_VidSendData('2');break;
    2326:	82 e3       	ldi	r24, 0x32	; 50
    2328:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <LCD_VidSendData>
    232c:	1b c0       	rjmp	.+54     	; 0x2364 <LCD_VidSendNumber+0x16e>
		case 3 : LCD_VidSendData('3');break;
    232e:	83 e3       	ldi	r24, 0x33	; 51
    2330:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <LCD_VidSendData>
    2334:	17 c0       	rjmp	.+46     	; 0x2364 <LCD_VidSendNumber+0x16e>
		case 4 : LCD_VidSendData('4');break;
    2336:	84 e3       	ldi	r24, 0x34	; 52
    2338:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <LCD_VidSendData>
    233c:	13 c0       	rjmp	.+38     	; 0x2364 <LCD_VidSendNumber+0x16e>
		case 5 : LCD_VidSendData('5');break;
    233e:	85 e3       	ldi	r24, 0x35	; 53
    2340:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <LCD_VidSendData>
    2344:	0f c0       	rjmp	.+30     	; 0x2364 <LCD_VidSendNumber+0x16e>
		case 6 : LCD_VidSendData('6');break;
    2346:	86 e3       	ldi	r24, 0x36	; 54
    2348:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <LCD_VidSendData>
    234c:	0b c0       	rjmp	.+22     	; 0x2364 <LCD_VidSendNumber+0x16e>
		case 7 : LCD_VidSendData('7');break;
    234e:	87 e3       	ldi	r24, 0x37	; 55
    2350:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <LCD_VidSendData>
    2354:	07 c0       	rjmp	.+14     	; 0x2364 <LCD_VidSendNumber+0x16e>
		case 8 : LCD_VidSendData('8');break;
    2356:	88 e3       	ldi	r24, 0x38	; 56
    2358:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <LCD_VidSendData>
    235c:	03 c0       	rjmp	.+6      	; 0x2364 <LCD_VidSendNumber+0x16e>
		case 9 : LCD_VidSendData('9');break;
    235e:	89 e3       	ldi	r24, 0x39	; 57
    2360:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <LCD_VidSendData>
		}

		i--;
    2364:	89 81       	ldd	r24, Y+1	; 0x01
    2366:	81 50       	subi	r24, 0x01	; 1
    2368:	89 83       	std	Y+1, r24	; 0x01
		str_num[i]=copy_u16number%10;
		copy_u16number/=10;
		i++;
	}
	i--;
	while(i>=0)
    236a:	89 81       	ldd	r24, Y+1	; 0x01
    236c:	88 23       	and	r24, r24
    236e:	0c f0       	brlt	.+2      	; 0x2372 <LCD_VidSendNumber+0x17c>
    2370:	7e cf       	rjmp	.-260    	; 0x226e <LCD_VidSendNumber+0x78>

		i--;
	}


}
    2372:	2a 96       	adiw	r28, 0x0a	; 10
    2374:	0f b6       	in	r0, 0x3f	; 63
    2376:	f8 94       	cli
    2378:	de bf       	out	0x3e, r29	; 62
    237a:	0f be       	out	0x3f, r0	; 63
    237c:	cd bf       	out	0x3d, r28	; 61
    237e:	cf 91       	pop	r28
    2380:	df 91       	pop	r29
    2382:	08 95       	ret

00002384 <LCD_VidSetPosition>:


void LCD_VidSetPosition(u8 raw, u8 column)
{
    2384:	df 93       	push	r29
    2386:	cf 93       	push	r28
    2388:	00 d0       	rcall	.+0      	; 0x238a <LCD_VidSetPosition+0x6>
    238a:	cd b7       	in	r28, 0x3d	; 61
    238c:	de b7       	in	r29, 0x3e	; 62
    238e:	89 83       	std	Y+1, r24	; 0x01
    2390:	6a 83       	std	Y+2, r22	; 0x02
	if(0==raw)       // raw= 0
    2392:	89 81       	ldd	r24, Y+1	; 0x01
    2394:	88 23       	and	r24, r24
    2396:	21 f4       	brne	.+8      	; 0x23a0 <LCD_VidSetPosition+0x1c>
	{
	LCD_VidSendCommand(128+column);    // 0b10000000=128 +column
    2398:	8a 81       	ldd	r24, Y+2	; 0x02
    239a:	80 58       	subi	r24, 0x80	; 128
    239c:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <LCD_VidSendCommand>
	}
	if(1==raw)
    23a0:	89 81       	ldd	r24, Y+1	; 0x01
    23a2:	81 30       	cpi	r24, 0x01	; 1
    23a4:	21 f4       	brne	.+8      	; 0x23ae <LCD_VidSetPosition+0x2a>
	{
	LCD_VidSendCommand(128+64+column);  //  // 0b10000000=128 +column+64
    23a6:	8a 81       	ldd	r24, Y+2	; 0x02
    23a8:	80 54       	subi	r24, 0x40	; 64
    23aa:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <LCD_VidSendCommand>
	                                    // 64 is the start address of row 2
	}

}
    23ae:	0f 90       	pop	r0
    23b0:	0f 90       	pop	r0
    23b2:	cf 91       	pop	r28
    23b4:	df 91       	pop	r29
    23b6:	08 95       	ret

000023b8 <LCD_VidClear>:

void LCD_VidClear(void)
{
    23b8:	df 93       	push	r29
    23ba:	cf 93       	push	r28
    23bc:	cd b7       	in	r28, 0x3d	; 61
    23be:	de b7       	in	r29, 0x3e	; 62
	LCD_VidSendCommand(1);
    23c0:	81 e0       	ldi	r24, 0x01	; 1
    23c2:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <LCD_VidSendCommand>


}
    23c6:	cf 91       	pop	r28
    23c8:	df 91       	pop	r29
    23ca:	08 95       	ret

000023cc <LCD_VidShiftRight>:

void LCD_VidShiftRight(void)
{
    23cc:	df 93       	push	r29
    23ce:	cf 93       	push	r28
    23d0:	cd b7       	in	r28, 0x3d	; 61
    23d2:	de b7       	in	r29, 0x3e	; 62
	LCD_VidSendCommand(0b00011100);
    23d4:	8c e1       	ldi	r24, 0x1C	; 28
    23d6:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <LCD_VidSendCommand>

}
    23da:	cf 91       	pop	r28
    23dc:	df 91       	pop	r29
    23de:	08 95       	ret

000023e0 <LCD_VidShiftLeft>:

void LCD_VidShiftLeft(void)
{
    23e0:	df 93       	push	r29
    23e2:	cf 93       	push	r28
    23e4:	cd b7       	in	r28, 0x3d	; 61
    23e6:	de b7       	in	r29, 0x3e	; 62
	LCD_VidSendCommand(0x18);
    23e8:	88 e1       	ldi	r24, 0x18	; 24
    23ea:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <LCD_VidSendCommand>

}
    23ee:	cf 91       	pop	r28
    23f0:	df 91       	pop	r29
    23f2:	08 95       	ret

000023f4 <LCD_voidReturnHome>:

void LCD_voidReturnHome(void)
{
    23f4:	df 93       	push	r29
    23f6:	cf 93       	push	r28
    23f8:	cd b7       	in	r28, 0x3d	; 61
    23fa:	de b7       	in	r29, 0x3e	; 62
	LCD_VidSendCommand(0x02);
    23fc:	82 e0       	ldi	r24, 0x02	; 2
    23fe:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <LCD_VidSendCommand>

}
    2402:	cf 91       	pop	r28
    2404:	df 91       	pop	r29
    2406:	08 95       	ret

00002408 <main>:
#include "DIO_interface.h"
#include "LCD_interface.h"
#include<util/delay.h>

void main()
{
    2408:	df 93       	push	r29
    240a:	cf 93       	push	r28
    240c:	cd b7       	in	r28, 0x3d	; 61
    240e:	de b7       	in	r29, 0x3e	; 62
    2410:	ae 97       	sbiw	r28, 0x2e	; 46
    2412:	0f b6       	in	r0, 0x3f	; 63
    2414:	f8 94       	cli
    2416:	de bf       	out	0x3e, r29	; 62
    2418:	0f be       	out	0x3f, r0	; 63
    241a:	cd bf       	out	0x3d, r28	; 61
	DIO_VidSetPinDirection(PORTA,PIN0,INPUT);
    241c:	80 e0       	ldi	r24, 0x00	; 0
    241e:	60 e0       	ldi	r22, 0x00	; 0
    2420:	40 e0       	ldi	r20, 0x00	; 0
    2422:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_VidSetPinDirection>
	LCD_VidInit();
    2426:	0e 94 45 0b 	call	0x168a	; 0x168a <LCD_VidInit>
	ADC_VoidInit();
    242a:	0e 94 bf 05 	call	0xb7e	; 0xb7e <ADC_VoidInit>
	ADC_VoidADCEnable();
    242e:	0e 94 0e 07 	call	0xe1c	; 0xe1c <ADC_VoidADCEnable>
    2432:	80 e0       	ldi	r24, 0x00	; 0
    2434:	90 e0       	ldi	r25, 0x00	; 0
    2436:	a8 ec       	ldi	r26, 0xC8	; 200
    2438:	b2 e4       	ldi	r27, 0x42	; 66
    243a:	8f a3       	std	Y+39, r24	; 0x27
    243c:	98 a7       	std	Y+40, r25	; 0x28
    243e:	a9 a7       	std	Y+41, r26	; 0x29
    2440:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2442:	6f a1       	ldd	r22, Y+39	; 0x27
    2444:	78 a5       	ldd	r23, Y+40	; 0x28
    2446:	89 a5       	ldd	r24, Y+41	; 0x29
    2448:	9a a5       	ldd	r25, Y+42	; 0x2a
    244a:	20 e0       	ldi	r18, 0x00	; 0
    244c:	30 e0       	ldi	r19, 0x00	; 0
    244e:	4a ef       	ldi	r20, 0xFA	; 250
    2450:	54 e4       	ldi	r21, 0x44	; 68
    2452:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2456:	dc 01       	movw	r26, r24
    2458:	cb 01       	movw	r24, r22
    245a:	8b a3       	std	Y+35, r24	; 0x23
    245c:	9c a3       	std	Y+36, r25	; 0x24
    245e:	ad a3       	std	Y+37, r26	; 0x25
    2460:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2462:	6b a1       	ldd	r22, Y+35	; 0x23
    2464:	7c a1       	ldd	r23, Y+36	; 0x24
    2466:	8d a1       	ldd	r24, Y+37	; 0x25
    2468:	9e a1       	ldd	r25, Y+38	; 0x26
    246a:	20 e0       	ldi	r18, 0x00	; 0
    246c:	30 e0       	ldi	r19, 0x00	; 0
    246e:	40 e8       	ldi	r20, 0x80	; 128
    2470:	5f e3       	ldi	r21, 0x3F	; 63
    2472:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2476:	88 23       	and	r24, r24
    2478:	2c f4       	brge	.+10     	; 0x2484 <main+0x7c>
		__ticks = 1;
    247a:	81 e0       	ldi	r24, 0x01	; 1
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	9a a3       	std	Y+34, r25	; 0x22
    2480:	89 a3       	std	Y+33, r24	; 0x21
    2482:	3f c0       	rjmp	.+126    	; 0x2502 <main+0xfa>
	else if (__tmp > 65535)
    2484:	6b a1       	ldd	r22, Y+35	; 0x23
    2486:	7c a1       	ldd	r23, Y+36	; 0x24
    2488:	8d a1       	ldd	r24, Y+37	; 0x25
    248a:	9e a1       	ldd	r25, Y+38	; 0x26
    248c:	20 e0       	ldi	r18, 0x00	; 0
    248e:	3f ef       	ldi	r19, 0xFF	; 255
    2490:	4f e7       	ldi	r20, 0x7F	; 127
    2492:	57 e4       	ldi	r21, 0x47	; 71
    2494:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2498:	18 16       	cp	r1, r24
    249a:	4c f5       	brge	.+82     	; 0x24ee <main+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    249c:	6f a1       	ldd	r22, Y+39	; 0x27
    249e:	78 a5       	ldd	r23, Y+40	; 0x28
    24a0:	89 a5       	ldd	r24, Y+41	; 0x29
    24a2:	9a a5       	ldd	r25, Y+42	; 0x2a
    24a4:	20 e0       	ldi	r18, 0x00	; 0
    24a6:	30 e0       	ldi	r19, 0x00	; 0
    24a8:	40 e2       	ldi	r20, 0x20	; 32
    24aa:	51 e4       	ldi	r21, 0x41	; 65
    24ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b0:	dc 01       	movw	r26, r24
    24b2:	cb 01       	movw	r24, r22
    24b4:	bc 01       	movw	r22, r24
    24b6:	cd 01       	movw	r24, r26
    24b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24bc:	dc 01       	movw	r26, r24
    24be:	cb 01       	movw	r24, r22
    24c0:	9a a3       	std	Y+34, r25	; 0x22
    24c2:	89 a3       	std	Y+33, r24	; 0x21
    24c4:	0f c0       	rjmp	.+30     	; 0x24e4 <main+0xdc>
    24c6:	88 ec       	ldi	r24, 0xC8	; 200
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	98 a3       	std	Y+32, r25	; 0x20
    24cc:	8f 8f       	std	Y+31, r24	; 0x1f
    24ce:	8f 8d       	ldd	r24, Y+31	; 0x1f
    24d0:	98 a1       	ldd	r25, Y+32	; 0x20
    24d2:	01 97       	sbiw	r24, 0x01	; 1
    24d4:	f1 f7       	brne	.-4      	; 0x24d2 <main+0xca>
    24d6:	98 a3       	std	Y+32, r25	; 0x20
    24d8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24da:	89 a1       	ldd	r24, Y+33	; 0x21
    24dc:	9a a1       	ldd	r25, Y+34	; 0x22
    24de:	01 97       	sbiw	r24, 0x01	; 1
    24e0:	9a a3       	std	Y+34, r25	; 0x22
    24e2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24e4:	89 a1       	ldd	r24, Y+33	; 0x21
    24e6:	9a a1       	ldd	r25, Y+34	; 0x22
    24e8:	00 97       	sbiw	r24, 0x00	; 0
    24ea:	69 f7       	brne	.-38     	; 0x24c6 <main+0xbe>
    24ec:	14 c0       	rjmp	.+40     	; 0x2516 <main+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ee:	6b a1       	ldd	r22, Y+35	; 0x23
    24f0:	7c a1       	ldd	r23, Y+36	; 0x24
    24f2:	8d a1       	ldd	r24, Y+37	; 0x25
    24f4:	9e a1       	ldd	r25, Y+38	; 0x26
    24f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24fa:	dc 01       	movw	r26, r24
    24fc:	cb 01       	movw	r24, r22
    24fe:	9a a3       	std	Y+34, r25	; 0x22
    2500:	89 a3       	std	Y+33, r24	; 0x21
    2502:	89 a1       	ldd	r24, Y+33	; 0x21
    2504:	9a a1       	ldd	r25, Y+34	; 0x22
    2506:	9e 8f       	std	Y+30, r25	; 0x1e
    2508:	8d 8f       	std	Y+29, r24	; 0x1d
    250a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    250c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    250e:	01 97       	sbiw	r24, 0x01	; 1
    2510:	f1 f7       	brne	.-4      	; 0x250e <main+0x106>
    2512:	9e 8f       	std	Y+30, r25	; 0x1e
    2514:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(100);

	u32 Digital_value=0;
    2516:	1b a6       	std	Y+43, r1	; 0x2b
    2518:	1c a6       	std	Y+44, r1	; 0x2c
    251a:	1d a6       	std	Y+45, r1	; 0x2d
    251c:	1e a6       	std	Y+46, r1	; 0x2e
    251e:	80 e0       	ldi	r24, 0x00	; 0
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	aa e7       	ldi	r26, 0x7A	; 122
    2524:	b4 e4       	ldi	r27, 0x44	; 68
    2526:	89 8f       	std	Y+25, r24	; 0x19
    2528:	9a 8f       	std	Y+26, r25	; 0x1a
    252a:	ab 8f       	std	Y+27, r26	; 0x1b
    252c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    252e:	69 8d       	ldd	r22, Y+25	; 0x19
    2530:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2532:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2534:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2536:	20 e0       	ldi	r18, 0x00	; 0
    2538:	30 e0       	ldi	r19, 0x00	; 0
    253a:	4a ef       	ldi	r20, 0xFA	; 250
    253c:	54 e4       	ldi	r21, 0x44	; 68
    253e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2542:	dc 01       	movw	r26, r24
    2544:	cb 01       	movw	r24, r22
    2546:	8d 8b       	std	Y+21, r24	; 0x15
    2548:	9e 8b       	std	Y+22, r25	; 0x16
    254a:	af 8b       	std	Y+23, r26	; 0x17
    254c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    254e:	6d 89       	ldd	r22, Y+21	; 0x15
    2550:	7e 89       	ldd	r23, Y+22	; 0x16
    2552:	8f 89       	ldd	r24, Y+23	; 0x17
    2554:	98 8d       	ldd	r25, Y+24	; 0x18
    2556:	20 e0       	ldi	r18, 0x00	; 0
    2558:	30 e0       	ldi	r19, 0x00	; 0
    255a:	40 e8       	ldi	r20, 0x80	; 128
    255c:	5f e3       	ldi	r21, 0x3F	; 63
    255e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2562:	88 23       	and	r24, r24
    2564:	2c f4       	brge	.+10     	; 0x2570 <main+0x168>
		__ticks = 1;
    2566:	81 e0       	ldi	r24, 0x01	; 1
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	9c 8b       	std	Y+20, r25	; 0x14
    256c:	8b 8b       	std	Y+19, r24	; 0x13
    256e:	3f c0       	rjmp	.+126    	; 0x25ee <main+0x1e6>
	else if (__tmp > 65535)
    2570:	6d 89       	ldd	r22, Y+21	; 0x15
    2572:	7e 89       	ldd	r23, Y+22	; 0x16
    2574:	8f 89       	ldd	r24, Y+23	; 0x17
    2576:	98 8d       	ldd	r25, Y+24	; 0x18
    2578:	20 e0       	ldi	r18, 0x00	; 0
    257a:	3f ef       	ldi	r19, 0xFF	; 255
    257c:	4f e7       	ldi	r20, 0x7F	; 127
    257e:	57 e4       	ldi	r21, 0x47	; 71
    2580:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2584:	18 16       	cp	r1, r24
    2586:	4c f5       	brge	.+82     	; 0x25da <main+0x1d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2588:	69 8d       	ldd	r22, Y+25	; 0x19
    258a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    258c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    258e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2590:	20 e0       	ldi	r18, 0x00	; 0
    2592:	30 e0       	ldi	r19, 0x00	; 0
    2594:	40 e2       	ldi	r20, 0x20	; 32
    2596:	51 e4       	ldi	r21, 0x41	; 65
    2598:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    259c:	dc 01       	movw	r26, r24
    259e:	cb 01       	movw	r24, r22
    25a0:	bc 01       	movw	r22, r24
    25a2:	cd 01       	movw	r24, r26
    25a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25a8:	dc 01       	movw	r26, r24
    25aa:	cb 01       	movw	r24, r22
    25ac:	9c 8b       	std	Y+20, r25	; 0x14
    25ae:	8b 8b       	std	Y+19, r24	; 0x13
    25b0:	0f c0       	rjmp	.+30     	; 0x25d0 <main+0x1c8>
    25b2:	88 ec       	ldi	r24, 0xC8	; 200
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	9a 8b       	std	Y+18, r25	; 0x12
    25b8:	89 8b       	std	Y+17, r24	; 0x11
    25ba:	89 89       	ldd	r24, Y+17	; 0x11
    25bc:	9a 89       	ldd	r25, Y+18	; 0x12
    25be:	01 97       	sbiw	r24, 0x01	; 1
    25c0:	f1 f7       	brne	.-4      	; 0x25be <main+0x1b6>
    25c2:	9a 8b       	std	Y+18, r25	; 0x12
    25c4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25c6:	8b 89       	ldd	r24, Y+19	; 0x13
    25c8:	9c 89       	ldd	r25, Y+20	; 0x14
    25ca:	01 97       	sbiw	r24, 0x01	; 1
    25cc:	9c 8b       	std	Y+20, r25	; 0x14
    25ce:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25d0:	8b 89       	ldd	r24, Y+19	; 0x13
    25d2:	9c 89       	ldd	r25, Y+20	; 0x14
    25d4:	00 97       	sbiw	r24, 0x00	; 0
    25d6:	69 f7       	brne	.-38     	; 0x25b2 <main+0x1aa>
    25d8:	14 c0       	rjmp	.+40     	; 0x2602 <main+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25da:	6d 89       	ldd	r22, Y+21	; 0x15
    25dc:	7e 89       	ldd	r23, Y+22	; 0x16
    25de:	8f 89       	ldd	r24, Y+23	; 0x17
    25e0:	98 8d       	ldd	r25, Y+24	; 0x18
    25e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25e6:	dc 01       	movw	r26, r24
    25e8:	cb 01       	movw	r24, r22
    25ea:	9c 8b       	std	Y+20, r25	; 0x14
    25ec:	8b 8b       	std	Y+19, r24	; 0x13
    25ee:	8b 89       	ldd	r24, Y+19	; 0x13
    25f0:	9c 89       	ldd	r25, Y+20	; 0x14
    25f2:	98 8b       	std	Y+16, r25	; 0x10
    25f4:	8f 87       	std	Y+15, r24	; 0x0f
    25f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    25f8:	98 89       	ldd	r25, Y+16	; 0x10
    25fa:	01 97       	sbiw	r24, 0x01	; 1
    25fc:	f1 f7       	brne	.-4      	; 0x25fa <main+0x1f2>
    25fe:	98 8b       	std	Y+16, r25	; 0x10
    2600:	8f 87       	std	Y+15, r24	; 0x0f
//	u32 Analog_Value=0;
	_delay_ms(1000);
	LCD_VidClear();
    2602:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <LCD_VidClear>

	while(1)
	{

		Digital_value= ADC_U16ReadDigitalValue();
    2606:	0e 94 2a 07 	call	0xe54	; 0xe54 <ADC_U16ReadDigitalValue>
    260a:	cc 01       	movw	r24, r24
    260c:	a0 e0       	ldi	r26, 0x00	; 0
    260e:	b0 e0       	ldi	r27, 0x00	; 0
    2610:	8b a7       	std	Y+43, r24	; 0x2b
    2612:	9c a7       	std	Y+44, r25	; 0x2c
    2614:	ad a7       	std	Y+45, r26	; 0x2d
    2616:	be a7       	std	Y+46, r27	; 0x2e
//		LCD_VidSetPosition(0,0);
//		LCD_VidSendString("ANALOG:");
//		LCD_VidSetPosition(0,9);
//		LCD_VidSendNumber(Analog_Value);
//		LCD_VidSetPosition(1,0);
		LCD_VidSendString("DIGITAL:");
    2618:	80 e6       	ldi	r24, 0x60	; 96
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <LCD_VidSendString>
		LCD_VidSetPosition(1,9);
    2620:	81 e0       	ldi	r24, 0x01	; 1
    2622:	69 e0       	ldi	r22, 0x09	; 9
    2624:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_VidSetPosition>
		LCD_VidSendNumber(Digital_value>>2);
    2628:	8b a5       	ldd	r24, Y+43	; 0x2b
    262a:	9c a5       	ldd	r25, Y+44	; 0x2c
    262c:	ad a5       	ldd	r26, Y+45	; 0x2d
    262e:	be a5       	ldd	r27, Y+46	; 0x2e
    2630:	b6 95       	lsr	r27
    2632:	a7 95       	ror	r26
    2634:	97 95       	ror	r25
    2636:	87 95       	ror	r24
    2638:	b6 95       	lsr	r27
    263a:	a7 95       	ror	r26
    263c:	97 95       	ror	r25
    263e:	87 95       	ror	r24
    2640:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <LCD_VidSendNumber>
    2644:	80 e0       	ldi	r24, 0x00	; 0
    2646:	90 e0       	ldi	r25, 0x00	; 0
    2648:	aa e7       	ldi	r26, 0x7A	; 122
    264a:	b4 e4       	ldi	r27, 0x44	; 68
    264c:	8b 87       	std	Y+11, r24	; 0x0b
    264e:	9c 87       	std	Y+12, r25	; 0x0c
    2650:	ad 87       	std	Y+13, r26	; 0x0d
    2652:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2654:	6b 85       	ldd	r22, Y+11	; 0x0b
    2656:	7c 85       	ldd	r23, Y+12	; 0x0c
    2658:	8d 85       	ldd	r24, Y+13	; 0x0d
    265a:	9e 85       	ldd	r25, Y+14	; 0x0e
    265c:	20 e0       	ldi	r18, 0x00	; 0
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	4a ef       	ldi	r20, 0xFA	; 250
    2662:	54 e4       	ldi	r21, 0x44	; 68
    2664:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2668:	dc 01       	movw	r26, r24
    266a:	cb 01       	movw	r24, r22
    266c:	8f 83       	std	Y+7, r24	; 0x07
    266e:	98 87       	std	Y+8, r25	; 0x08
    2670:	a9 87       	std	Y+9, r26	; 0x09
    2672:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2674:	6f 81       	ldd	r22, Y+7	; 0x07
    2676:	78 85       	ldd	r23, Y+8	; 0x08
    2678:	89 85       	ldd	r24, Y+9	; 0x09
    267a:	9a 85       	ldd	r25, Y+10	; 0x0a
    267c:	20 e0       	ldi	r18, 0x00	; 0
    267e:	30 e0       	ldi	r19, 0x00	; 0
    2680:	40 e8       	ldi	r20, 0x80	; 128
    2682:	5f e3       	ldi	r21, 0x3F	; 63
    2684:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2688:	88 23       	and	r24, r24
    268a:	2c f4       	brge	.+10     	; 0x2696 <main+0x28e>
		__ticks = 1;
    268c:	81 e0       	ldi	r24, 0x01	; 1
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	9e 83       	std	Y+6, r25	; 0x06
    2692:	8d 83       	std	Y+5, r24	; 0x05
    2694:	3f c0       	rjmp	.+126    	; 0x2714 <main+0x30c>
	else if (__tmp > 65535)
    2696:	6f 81       	ldd	r22, Y+7	; 0x07
    2698:	78 85       	ldd	r23, Y+8	; 0x08
    269a:	89 85       	ldd	r24, Y+9	; 0x09
    269c:	9a 85       	ldd	r25, Y+10	; 0x0a
    269e:	20 e0       	ldi	r18, 0x00	; 0
    26a0:	3f ef       	ldi	r19, 0xFF	; 255
    26a2:	4f e7       	ldi	r20, 0x7F	; 127
    26a4:	57 e4       	ldi	r21, 0x47	; 71
    26a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26aa:	18 16       	cp	r1, r24
    26ac:	4c f5       	brge	.+82     	; 0x2700 <main+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    26b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    26b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    26b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    26b6:	20 e0       	ldi	r18, 0x00	; 0
    26b8:	30 e0       	ldi	r19, 0x00	; 0
    26ba:	40 e2       	ldi	r20, 0x20	; 32
    26bc:	51 e4       	ldi	r21, 0x41	; 65
    26be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26c2:	dc 01       	movw	r26, r24
    26c4:	cb 01       	movw	r24, r22
    26c6:	bc 01       	movw	r22, r24
    26c8:	cd 01       	movw	r24, r26
    26ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ce:	dc 01       	movw	r26, r24
    26d0:	cb 01       	movw	r24, r22
    26d2:	9e 83       	std	Y+6, r25	; 0x06
    26d4:	8d 83       	std	Y+5, r24	; 0x05
    26d6:	0f c0       	rjmp	.+30     	; 0x26f6 <main+0x2ee>
    26d8:	88 ec       	ldi	r24, 0xC8	; 200
    26da:	90 e0       	ldi	r25, 0x00	; 0
    26dc:	9c 83       	std	Y+4, r25	; 0x04
    26de:	8b 83       	std	Y+3, r24	; 0x03
    26e0:	8b 81       	ldd	r24, Y+3	; 0x03
    26e2:	9c 81       	ldd	r25, Y+4	; 0x04
    26e4:	01 97       	sbiw	r24, 0x01	; 1
    26e6:	f1 f7       	brne	.-4      	; 0x26e4 <main+0x2dc>
    26e8:	9c 83       	std	Y+4, r25	; 0x04
    26ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ec:	8d 81       	ldd	r24, Y+5	; 0x05
    26ee:	9e 81       	ldd	r25, Y+6	; 0x06
    26f0:	01 97       	sbiw	r24, 0x01	; 1
    26f2:	9e 83       	std	Y+6, r25	; 0x06
    26f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26f6:	8d 81       	ldd	r24, Y+5	; 0x05
    26f8:	9e 81       	ldd	r25, Y+6	; 0x06
    26fa:	00 97       	sbiw	r24, 0x00	; 0
    26fc:	69 f7       	brne	.-38     	; 0x26d8 <main+0x2d0>
    26fe:	14 c0       	rjmp	.+40     	; 0x2728 <main+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2700:	6f 81       	ldd	r22, Y+7	; 0x07
    2702:	78 85       	ldd	r23, Y+8	; 0x08
    2704:	89 85       	ldd	r24, Y+9	; 0x09
    2706:	9a 85       	ldd	r25, Y+10	; 0x0a
    2708:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    270c:	dc 01       	movw	r26, r24
    270e:	cb 01       	movw	r24, r22
    2710:	9e 83       	std	Y+6, r25	; 0x06
    2712:	8d 83       	std	Y+5, r24	; 0x05
    2714:	8d 81       	ldd	r24, Y+5	; 0x05
    2716:	9e 81       	ldd	r25, Y+6	; 0x06
    2718:	9a 83       	std	Y+2, r25	; 0x02
    271a:	89 83       	std	Y+1, r24	; 0x01
    271c:	89 81       	ldd	r24, Y+1	; 0x01
    271e:	9a 81       	ldd	r25, Y+2	; 0x02
    2720:	01 97       	sbiw	r24, 0x01	; 1
    2722:	f1 f7       	brne	.-4      	; 0x2720 <main+0x318>
    2724:	9a 83       	std	Y+2, r25	; 0x02
    2726:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		LCD_VidClear();
    2728:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <LCD_VidClear>
    272c:	6c cf       	rjmp	.-296    	; 0x2606 <main+0x1fe>

0000272e <__udivmodhi4>:
    272e:	aa 1b       	sub	r26, r26
    2730:	bb 1b       	sub	r27, r27
    2732:	51 e1       	ldi	r21, 0x11	; 17
    2734:	07 c0       	rjmp	.+14     	; 0x2744 <__udivmodhi4_ep>

00002736 <__udivmodhi4_loop>:
    2736:	aa 1f       	adc	r26, r26
    2738:	bb 1f       	adc	r27, r27
    273a:	a6 17       	cp	r26, r22
    273c:	b7 07       	cpc	r27, r23
    273e:	10 f0       	brcs	.+4      	; 0x2744 <__udivmodhi4_ep>
    2740:	a6 1b       	sub	r26, r22
    2742:	b7 0b       	sbc	r27, r23

00002744 <__udivmodhi4_ep>:
    2744:	88 1f       	adc	r24, r24
    2746:	99 1f       	adc	r25, r25
    2748:	5a 95       	dec	r21
    274a:	a9 f7       	brne	.-22     	; 0x2736 <__udivmodhi4_loop>
    274c:	80 95       	com	r24
    274e:	90 95       	com	r25
    2750:	bc 01       	movw	r22, r24
    2752:	cd 01       	movw	r24, r26
    2754:	08 95       	ret

00002756 <__prologue_saves__>:
    2756:	2f 92       	push	r2
    2758:	3f 92       	push	r3
    275a:	4f 92       	push	r4
    275c:	5f 92       	push	r5
    275e:	6f 92       	push	r6
    2760:	7f 92       	push	r7
    2762:	8f 92       	push	r8
    2764:	9f 92       	push	r9
    2766:	af 92       	push	r10
    2768:	bf 92       	push	r11
    276a:	cf 92       	push	r12
    276c:	df 92       	push	r13
    276e:	ef 92       	push	r14
    2770:	ff 92       	push	r15
    2772:	0f 93       	push	r16
    2774:	1f 93       	push	r17
    2776:	cf 93       	push	r28
    2778:	df 93       	push	r29
    277a:	cd b7       	in	r28, 0x3d	; 61
    277c:	de b7       	in	r29, 0x3e	; 62
    277e:	ca 1b       	sub	r28, r26
    2780:	db 0b       	sbc	r29, r27
    2782:	0f b6       	in	r0, 0x3f	; 63
    2784:	f8 94       	cli
    2786:	de bf       	out	0x3e, r29	; 62
    2788:	0f be       	out	0x3f, r0	; 63
    278a:	cd bf       	out	0x3d, r28	; 61
    278c:	09 94       	ijmp

0000278e <__epilogue_restores__>:
    278e:	2a 88       	ldd	r2, Y+18	; 0x12
    2790:	39 88       	ldd	r3, Y+17	; 0x11
    2792:	48 88       	ldd	r4, Y+16	; 0x10
    2794:	5f 84       	ldd	r5, Y+15	; 0x0f
    2796:	6e 84       	ldd	r6, Y+14	; 0x0e
    2798:	7d 84       	ldd	r7, Y+13	; 0x0d
    279a:	8c 84       	ldd	r8, Y+12	; 0x0c
    279c:	9b 84       	ldd	r9, Y+11	; 0x0b
    279e:	aa 84       	ldd	r10, Y+10	; 0x0a
    27a0:	b9 84       	ldd	r11, Y+9	; 0x09
    27a2:	c8 84       	ldd	r12, Y+8	; 0x08
    27a4:	df 80       	ldd	r13, Y+7	; 0x07
    27a6:	ee 80       	ldd	r14, Y+6	; 0x06
    27a8:	fd 80       	ldd	r15, Y+5	; 0x05
    27aa:	0c 81       	ldd	r16, Y+4	; 0x04
    27ac:	1b 81       	ldd	r17, Y+3	; 0x03
    27ae:	aa 81       	ldd	r26, Y+2	; 0x02
    27b0:	b9 81       	ldd	r27, Y+1	; 0x01
    27b2:	ce 0f       	add	r28, r30
    27b4:	d1 1d       	adc	r29, r1
    27b6:	0f b6       	in	r0, 0x3f	; 63
    27b8:	f8 94       	cli
    27ba:	de bf       	out	0x3e, r29	; 62
    27bc:	0f be       	out	0x3f, r0	; 63
    27be:	cd bf       	out	0x3d, r28	; 61
    27c0:	ed 01       	movw	r28, r26
    27c2:	08 95       	ret

000027c4 <_exit>:
    27c4:	f8 94       	cli

000027c6 <__stop_program>:
    27c6:	ff cf       	rjmp	.-2      	; 0x27c6 <__stop_program>
