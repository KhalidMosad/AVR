
AVR_KEYPAD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000386c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000014c  00800060  0000386c  00003900  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  008001ac  008001ac  00003a4c  2**0
                  ALLOC
  3 .stab         00002790  00000000  00000000  00003a4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b9d  00000000  00000000  000061dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00006d79  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  00006f39  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  0000714d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  0000975f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0000ac2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000bf38  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  0000c118  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0000c41f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ce39  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e6       	ldi	r30, 0x6C	; 108
      68:	f8 e3       	ldi	r31, 0x38	; 56
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3a       	cpi	r26, 0xAC	; 172
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac ea       	ldi	r26, 0xAC	; 172
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3a       	cpi	r26, 0xAE	; 174
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <main>
      8a:	0c 94 34 1c 	jmp	0x3868	; 0x3868 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 fd 1b 	jmp	0x37fa	; 0x37fa <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 e8       	ldi	r26, 0x84	; 132
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 19 1c 	jmp	0x3832	; 0x3832 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 09 1c 	jmp	0x3812	; 0x3812 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 25 1c 	jmp	0x384a	; 0x384a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 09 1c 	jmp	0x3812	; 0x3812 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 25 1c 	jmp	0x384a	; 0x384a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 fd 1b 	jmp	0x37fa	; 0x37fa <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	84 e8       	ldi	r24, 0x84	; 132
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 19 1c 	jmp	0x3832	; 0x3832 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 05 1c 	jmp	0x380a	; 0x380a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	64 e8       	ldi	r22, 0x84	; 132
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 21 1c 	jmp	0x3842	; 0x3842 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 09 1c 	jmp	0x3812	; 0x3812 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 25 1c 	jmp	0x384a	; 0x384a <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 09 1c 	jmp	0x3812	; 0x3812 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 25 1c 	jmp	0x384a	; 0x384a <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 09 1c 	jmp	0x3812	; 0x3812 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 25 1c 	jmp	0x384a	; 0x384a <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 06 1c 	jmp	0x380c	; 0x380c <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 22 1c 	jmp	0x3844	; 0x3844 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 0d 1c 	jmp	0x381a	; 0x381a <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 29 1c 	jmp	0x3852	; 0x3852 <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 05 1c 	jmp	0x380a	; 0x380a <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 21 1c 	jmp	0x3842	; 0x3842 <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e4 57       	subi	r30, 0x74	; 116
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <DIO_VidSetPinDirection>:
#include"DIO_register.h"
#include"DIO_config.h"
#include"DIO_interface.h"

void DIO_VidSetPinDirection		(u8 copy_u8port, u8 copy_U8pin, u8 copy_U8state)
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
     ef2:	27 97       	sbiw	r28, 0x07	; 7
     ef4:	0f b6       	in	r0, 0x3f	; 63
     ef6:	f8 94       	cli
     ef8:	de bf       	out	0x3e, r29	; 62
     efa:	0f be       	out	0x3f, r0	; 63
     efc:	cd bf       	out	0x3d, r28	; 61
     efe:	89 83       	std	Y+1, r24	; 0x01
     f00:	6a 83       	std	Y+2, r22	; 0x02
     f02:	4b 83       	std	Y+3, r20	; 0x03
	if(OUTPUT==copy_U8state)
     f04:	8b 81       	ldd	r24, Y+3	; 0x03
     f06:	81 30       	cpi	r24, 0x01	; 1
     f08:	09 f0       	breq	.+2      	; 0xf0c <DIO_VidSetPinDirection+0x22>
     f0a:	6f c0       	rjmp	.+222    	; 0xfea <DIO_VidSetPinDirection+0x100>
	{
		switch (copy_u8port)
     f0c:	89 81       	ldd	r24, Y+1	; 0x01
     f0e:	28 2f       	mov	r18, r24
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	3f 83       	std	Y+7, r19	; 0x07
     f14:	2e 83       	std	Y+6, r18	; 0x06
     f16:	8e 81       	ldd	r24, Y+6	; 0x06
     f18:	9f 81       	ldd	r25, Y+7	; 0x07
     f1a:	81 30       	cpi	r24, 0x01	; 1
     f1c:	91 05       	cpc	r25, r1
     f1e:	49 f1       	breq	.+82     	; 0xf72 <DIO_VidSetPinDirection+0x88>
     f20:	2e 81       	ldd	r18, Y+6	; 0x06
     f22:	3f 81       	ldd	r19, Y+7	; 0x07
     f24:	22 30       	cpi	r18, 0x02	; 2
     f26:	31 05       	cpc	r19, r1
     f28:	2c f4       	brge	.+10     	; 0xf34 <DIO_VidSetPinDirection+0x4a>
     f2a:	8e 81       	ldd	r24, Y+6	; 0x06
     f2c:	9f 81       	ldd	r25, Y+7	; 0x07
     f2e:	00 97       	sbiw	r24, 0x00	; 0
     f30:	61 f0       	breq	.+24     	; 0xf4a <DIO_VidSetPinDirection+0x60>
     f32:	d2 c0       	rjmp	.+420    	; 0x10d8 <DIO_VidSetPinDirection+0x1ee>
     f34:	2e 81       	ldd	r18, Y+6	; 0x06
     f36:	3f 81       	ldd	r19, Y+7	; 0x07
     f38:	22 30       	cpi	r18, 0x02	; 2
     f3a:	31 05       	cpc	r19, r1
     f3c:	71 f1       	breq	.+92     	; 0xf9a <DIO_VidSetPinDirection+0xb0>
     f3e:	8e 81       	ldd	r24, Y+6	; 0x06
     f40:	9f 81       	ldd	r25, Y+7	; 0x07
     f42:	83 30       	cpi	r24, 0x03	; 3
     f44:	91 05       	cpc	r25, r1
     f46:	e9 f1       	breq	.+122    	; 0xfc2 <DIO_VidSetPinDirection+0xd8>
     f48:	c7 c0       	rjmp	.+398    	; 0x10d8 <DIO_VidSetPinDirection+0x1ee>
		{
			case PORTA:SET_BIT(DDRA, copy_U8pin); break;
     f4a:	aa e3       	ldi	r26, 0x3A	; 58
     f4c:	b0 e0       	ldi	r27, 0x00	; 0
     f4e:	ea e3       	ldi	r30, 0x3A	; 58
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	48 2f       	mov	r20, r24
     f56:	8a 81       	ldd	r24, Y+2	; 0x02
     f58:	28 2f       	mov	r18, r24
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	02 2e       	mov	r0, r18
     f62:	02 c0       	rjmp	.+4      	; 0xf68 <DIO_VidSetPinDirection+0x7e>
     f64:	88 0f       	add	r24, r24
     f66:	99 1f       	adc	r25, r25
     f68:	0a 94       	dec	r0
     f6a:	e2 f7       	brpl	.-8      	; 0xf64 <DIO_VidSetPinDirection+0x7a>
     f6c:	84 2b       	or	r24, r20
     f6e:	8c 93       	st	X, r24
     f70:	b3 c0       	rjmp	.+358    	; 0x10d8 <DIO_VidSetPinDirection+0x1ee>
			case PORTB:SET_BIT(DDRB, copy_U8pin); break;
     f72:	a7 e3       	ldi	r26, 0x37	; 55
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	e7 e3       	ldi	r30, 0x37	; 55
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	48 2f       	mov	r20, r24
     f7e:	8a 81       	ldd	r24, Y+2	; 0x02
     f80:	28 2f       	mov	r18, r24
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	02 2e       	mov	r0, r18
     f8a:	02 c0       	rjmp	.+4      	; 0xf90 <DIO_VidSetPinDirection+0xa6>
     f8c:	88 0f       	add	r24, r24
     f8e:	99 1f       	adc	r25, r25
     f90:	0a 94       	dec	r0
     f92:	e2 f7       	brpl	.-8      	; 0xf8c <DIO_VidSetPinDirection+0xa2>
     f94:	84 2b       	or	r24, r20
     f96:	8c 93       	st	X, r24
     f98:	9f c0       	rjmp	.+318    	; 0x10d8 <DIO_VidSetPinDirection+0x1ee>
			case PORTC:SET_BIT(DDRC, copy_U8pin); break;
     f9a:	a4 e3       	ldi	r26, 0x34	; 52
     f9c:	b0 e0       	ldi	r27, 0x00	; 0
     f9e:	e4 e3       	ldi	r30, 0x34	; 52
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	48 2f       	mov	r20, r24
     fa6:	8a 81       	ldd	r24, Y+2	; 0x02
     fa8:	28 2f       	mov	r18, r24
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	02 2e       	mov	r0, r18
     fb2:	02 c0       	rjmp	.+4      	; 0xfb8 <DIO_VidSetPinDirection+0xce>
     fb4:	88 0f       	add	r24, r24
     fb6:	99 1f       	adc	r25, r25
     fb8:	0a 94       	dec	r0
     fba:	e2 f7       	brpl	.-8      	; 0xfb4 <DIO_VidSetPinDirection+0xca>
     fbc:	84 2b       	or	r24, r20
     fbe:	8c 93       	st	X, r24
     fc0:	8b c0       	rjmp	.+278    	; 0x10d8 <DIO_VidSetPinDirection+0x1ee>
			case PORTD:SET_BIT(DDRD, copy_U8pin); break;
     fc2:	a1 e3       	ldi	r26, 0x31	; 49
     fc4:	b0 e0       	ldi	r27, 0x00	; 0
     fc6:	e1 e3       	ldi	r30, 0x31	; 49
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	48 2f       	mov	r20, r24
     fce:	8a 81       	ldd	r24, Y+2	; 0x02
     fd0:	28 2f       	mov	r18, r24
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	02 2e       	mov	r0, r18
     fda:	02 c0       	rjmp	.+4      	; 0xfe0 <DIO_VidSetPinDirection+0xf6>
     fdc:	88 0f       	add	r24, r24
     fde:	99 1f       	adc	r25, r25
     fe0:	0a 94       	dec	r0
     fe2:	e2 f7       	brpl	.-8      	; 0xfdc <DIO_VidSetPinDirection+0xf2>
     fe4:	84 2b       	or	r24, r20
     fe6:	8c 93       	st	X, r24
     fe8:	77 c0       	rjmp	.+238    	; 0x10d8 <DIO_VidSetPinDirection+0x1ee>
	
		}	
	}
	else if(INPUT==copy_U8state)
     fea:	8b 81       	ldd	r24, Y+3	; 0x03
     fec:	88 23       	and	r24, r24
     fee:	09 f0       	breq	.+2      	; 0xff2 <DIO_VidSetPinDirection+0x108>
     ff0:	73 c0       	rjmp	.+230    	; 0x10d8 <DIO_VidSetPinDirection+0x1ee>
	{
		switch(copy_u8port)
     ff2:	89 81       	ldd	r24, Y+1	; 0x01
     ff4:	28 2f       	mov	r18, r24
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	3d 83       	std	Y+5, r19	; 0x05
     ffa:	2c 83       	std	Y+4, r18	; 0x04
     ffc:	8c 81       	ldd	r24, Y+4	; 0x04
     ffe:	9d 81       	ldd	r25, Y+5	; 0x05
    1000:	81 30       	cpi	r24, 0x01	; 1
    1002:	91 05       	cpc	r25, r1
    1004:	59 f1       	breq	.+86     	; 0x105c <DIO_VidSetPinDirection+0x172>
    1006:	2c 81       	ldd	r18, Y+4	; 0x04
    1008:	3d 81       	ldd	r19, Y+5	; 0x05
    100a:	22 30       	cpi	r18, 0x02	; 2
    100c:	31 05       	cpc	r19, r1
    100e:	2c f4       	brge	.+10     	; 0x101a <DIO_VidSetPinDirection+0x130>
    1010:	8c 81       	ldd	r24, Y+4	; 0x04
    1012:	9d 81       	ldd	r25, Y+5	; 0x05
    1014:	00 97       	sbiw	r24, 0x00	; 0
    1016:	69 f0       	breq	.+26     	; 0x1032 <DIO_VidSetPinDirection+0x148>
    1018:	5f c0       	rjmp	.+190    	; 0x10d8 <DIO_VidSetPinDirection+0x1ee>
    101a:	2c 81       	ldd	r18, Y+4	; 0x04
    101c:	3d 81       	ldd	r19, Y+5	; 0x05
    101e:	22 30       	cpi	r18, 0x02	; 2
    1020:	31 05       	cpc	r19, r1
    1022:	89 f1       	breq	.+98     	; 0x1086 <DIO_VidSetPinDirection+0x19c>
    1024:	8c 81       	ldd	r24, Y+4	; 0x04
    1026:	9d 81       	ldd	r25, Y+5	; 0x05
    1028:	83 30       	cpi	r24, 0x03	; 3
    102a:	91 05       	cpc	r25, r1
    102c:	09 f4       	brne	.+2      	; 0x1030 <DIO_VidSetPinDirection+0x146>
    102e:	40 c0       	rjmp	.+128    	; 0x10b0 <DIO_VidSetPinDirection+0x1c6>
    1030:	53 c0       	rjmp	.+166    	; 0x10d8 <DIO_VidSetPinDirection+0x1ee>
		{
			case PORTA:CLR_BIT(DDRA, copy_U8pin); break;
    1032:	aa e3       	ldi	r26, 0x3A	; 58
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	ea e3       	ldi	r30, 0x3A	; 58
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	48 2f       	mov	r20, r24
    103e:	8a 81       	ldd	r24, Y+2	; 0x02
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	02 2e       	mov	r0, r18
    104a:	02 c0       	rjmp	.+4      	; 0x1050 <DIO_VidSetPinDirection+0x166>
    104c:	88 0f       	add	r24, r24
    104e:	99 1f       	adc	r25, r25
    1050:	0a 94       	dec	r0
    1052:	e2 f7       	brpl	.-8      	; 0x104c <DIO_VidSetPinDirection+0x162>
    1054:	80 95       	com	r24
    1056:	84 23       	and	r24, r20
    1058:	8c 93       	st	X, r24
    105a:	3e c0       	rjmp	.+124    	; 0x10d8 <DIO_VidSetPinDirection+0x1ee>
			case PORTB:CLR_BIT(DDRB, copy_U8pin); break;
    105c:	a7 e3       	ldi	r26, 0x37	; 55
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	e7 e3       	ldi	r30, 0x37	; 55
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	48 2f       	mov	r20, r24
    1068:	8a 81       	ldd	r24, Y+2	; 0x02
    106a:	28 2f       	mov	r18, r24
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	02 2e       	mov	r0, r18
    1074:	02 c0       	rjmp	.+4      	; 0x107a <DIO_VidSetPinDirection+0x190>
    1076:	88 0f       	add	r24, r24
    1078:	99 1f       	adc	r25, r25
    107a:	0a 94       	dec	r0
    107c:	e2 f7       	brpl	.-8      	; 0x1076 <DIO_VidSetPinDirection+0x18c>
    107e:	80 95       	com	r24
    1080:	84 23       	and	r24, r20
    1082:	8c 93       	st	X, r24
    1084:	29 c0       	rjmp	.+82     	; 0x10d8 <DIO_VidSetPinDirection+0x1ee>
		    case PORTC:CLR_BIT(DDRC, copy_U8pin); break;
    1086:	a4 e3       	ldi	r26, 0x34	; 52
    1088:	b0 e0       	ldi	r27, 0x00	; 0
    108a:	e4 e3       	ldi	r30, 0x34	; 52
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	80 81       	ld	r24, Z
    1090:	48 2f       	mov	r20, r24
    1092:	8a 81       	ldd	r24, Y+2	; 0x02
    1094:	28 2f       	mov	r18, r24
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	02 2e       	mov	r0, r18
    109e:	02 c0       	rjmp	.+4      	; 0x10a4 <DIO_VidSetPinDirection+0x1ba>
    10a0:	88 0f       	add	r24, r24
    10a2:	99 1f       	adc	r25, r25
    10a4:	0a 94       	dec	r0
    10a6:	e2 f7       	brpl	.-8      	; 0x10a0 <DIO_VidSetPinDirection+0x1b6>
    10a8:	80 95       	com	r24
    10aa:	84 23       	and	r24, r20
    10ac:	8c 93       	st	X, r24
    10ae:	14 c0       	rjmp	.+40     	; 0x10d8 <DIO_VidSetPinDirection+0x1ee>
		    case PORTD:CLR_BIT(DDRD, copy_U8pin); break;
    10b0:	a1 e3       	ldi	r26, 0x31	; 49
    10b2:	b0 e0       	ldi	r27, 0x00	; 0
    10b4:	e1 e3       	ldi	r30, 0x31	; 49
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	80 81       	ld	r24, Z
    10ba:	48 2f       	mov	r20, r24
    10bc:	8a 81       	ldd	r24, Y+2	; 0x02
    10be:	28 2f       	mov	r18, r24
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	02 2e       	mov	r0, r18
    10c8:	02 c0       	rjmp	.+4      	; 0x10ce <DIO_VidSetPinDirection+0x1e4>
    10ca:	88 0f       	add	r24, r24
    10cc:	99 1f       	adc	r25, r25
    10ce:	0a 94       	dec	r0
    10d0:	e2 f7       	brpl	.-8      	; 0x10ca <DIO_VidSetPinDirection+0x1e0>
    10d2:	80 95       	com	r24
    10d4:	84 23       	and	r24, r20
    10d6:	8c 93       	st	X, r24
	else
	{
		
	}
	
}
    10d8:	27 96       	adiw	r28, 0x07	; 7
    10da:	0f b6       	in	r0, 0x3f	; 63
    10dc:	f8 94       	cli
    10de:	de bf       	out	0x3e, r29	; 62
    10e0:	0f be       	out	0x3f, r0	; 63
    10e2:	cd bf       	out	0x3d, r28	; 61
    10e4:	cf 91       	pop	r28
    10e6:	df 91       	pop	r29
    10e8:	08 95       	ret

000010ea <DIO_VidSetPinValue>:
void DIO_VidSetPinValue			(u8 copy_u8port, u8 copy_U8pin, u8 copy_U8value)
{
    10ea:	df 93       	push	r29
    10ec:	cf 93       	push	r28
    10ee:	cd b7       	in	r28, 0x3d	; 61
    10f0:	de b7       	in	r29, 0x3e	; 62
    10f2:	27 97       	sbiw	r28, 0x07	; 7
    10f4:	0f b6       	in	r0, 0x3f	; 63
    10f6:	f8 94       	cli
    10f8:	de bf       	out	0x3e, r29	; 62
    10fa:	0f be       	out	0x3f, r0	; 63
    10fc:	cd bf       	out	0x3d, r28	; 61
    10fe:	89 83       	std	Y+1, r24	; 0x01
    1100:	6a 83       	std	Y+2, r22	; 0x02
    1102:	4b 83       	std	Y+3, r20	; 0x03
	if(HIGH==copy_U8value)
    1104:	8b 81       	ldd	r24, Y+3	; 0x03
    1106:	81 30       	cpi	r24, 0x01	; 1
    1108:	09 f0       	breq	.+2      	; 0x110c <DIO_VidSetPinValue+0x22>
    110a:	6f c0       	rjmp	.+222    	; 0x11ea <DIO_VidSetPinValue+0x100>
	{
		switch (copy_u8port)
    110c:	89 81       	ldd	r24, Y+1	; 0x01
    110e:	28 2f       	mov	r18, r24
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	3f 83       	std	Y+7, r19	; 0x07
    1114:	2e 83       	std	Y+6, r18	; 0x06
    1116:	8e 81       	ldd	r24, Y+6	; 0x06
    1118:	9f 81       	ldd	r25, Y+7	; 0x07
    111a:	81 30       	cpi	r24, 0x01	; 1
    111c:	91 05       	cpc	r25, r1
    111e:	49 f1       	breq	.+82     	; 0x1172 <DIO_VidSetPinValue+0x88>
    1120:	2e 81       	ldd	r18, Y+6	; 0x06
    1122:	3f 81       	ldd	r19, Y+7	; 0x07
    1124:	22 30       	cpi	r18, 0x02	; 2
    1126:	31 05       	cpc	r19, r1
    1128:	2c f4       	brge	.+10     	; 0x1134 <DIO_VidSetPinValue+0x4a>
    112a:	8e 81       	ldd	r24, Y+6	; 0x06
    112c:	9f 81       	ldd	r25, Y+7	; 0x07
    112e:	00 97       	sbiw	r24, 0x00	; 0
    1130:	61 f0       	breq	.+24     	; 0x114a <DIO_VidSetPinValue+0x60>
    1132:	d2 c0       	rjmp	.+420    	; 0x12d8 <DIO_VidSetPinValue+0x1ee>
    1134:	2e 81       	ldd	r18, Y+6	; 0x06
    1136:	3f 81       	ldd	r19, Y+7	; 0x07
    1138:	22 30       	cpi	r18, 0x02	; 2
    113a:	31 05       	cpc	r19, r1
    113c:	71 f1       	breq	.+92     	; 0x119a <DIO_VidSetPinValue+0xb0>
    113e:	8e 81       	ldd	r24, Y+6	; 0x06
    1140:	9f 81       	ldd	r25, Y+7	; 0x07
    1142:	83 30       	cpi	r24, 0x03	; 3
    1144:	91 05       	cpc	r25, r1
    1146:	e9 f1       	breq	.+122    	; 0x11c2 <DIO_VidSetPinValue+0xd8>
    1148:	c7 c0       	rjmp	.+398    	; 0x12d8 <DIO_VidSetPinValue+0x1ee>
		{
			case PORTA:SET_BIT(PORT_A, copy_U8pin); break;
    114a:	ab e3       	ldi	r26, 0x3B	; 59
    114c:	b0 e0       	ldi	r27, 0x00	; 0
    114e:	eb e3       	ldi	r30, 0x3B	; 59
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	48 2f       	mov	r20, r24
    1156:	8a 81       	ldd	r24, Y+2	; 0x02
    1158:	28 2f       	mov	r18, r24
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	02 2e       	mov	r0, r18
    1162:	02 c0       	rjmp	.+4      	; 0x1168 <DIO_VidSetPinValue+0x7e>
    1164:	88 0f       	add	r24, r24
    1166:	99 1f       	adc	r25, r25
    1168:	0a 94       	dec	r0
    116a:	e2 f7       	brpl	.-8      	; 0x1164 <DIO_VidSetPinValue+0x7a>
    116c:	84 2b       	or	r24, r20
    116e:	8c 93       	st	X, r24
    1170:	b3 c0       	rjmp	.+358    	; 0x12d8 <DIO_VidSetPinValue+0x1ee>
			case PORTB:SET_BIT(PORT_B, copy_U8pin); break;
    1172:	a8 e3       	ldi	r26, 0x38	; 56
    1174:	b0 e0       	ldi	r27, 0x00	; 0
    1176:	e8 e3       	ldi	r30, 0x38	; 56
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	48 2f       	mov	r20, r24
    117e:	8a 81       	ldd	r24, Y+2	; 0x02
    1180:	28 2f       	mov	r18, r24
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	02 2e       	mov	r0, r18
    118a:	02 c0       	rjmp	.+4      	; 0x1190 <DIO_VidSetPinValue+0xa6>
    118c:	88 0f       	add	r24, r24
    118e:	99 1f       	adc	r25, r25
    1190:	0a 94       	dec	r0
    1192:	e2 f7       	brpl	.-8      	; 0x118c <DIO_VidSetPinValue+0xa2>
    1194:	84 2b       	or	r24, r20
    1196:	8c 93       	st	X, r24
    1198:	9f c0       	rjmp	.+318    	; 0x12d8 <DIO_VidSetPinValue+0x1ee>
			case PORTC:SET_BIT(PORT_C, copy_U8pin); break;
    119a:	a5 e3       	ldi	r26, 0x35	; 53
    119c:	b0 e0       	ldi	r27, 0x00	; 0
    119e:	e5 e3       	ldi	r30, 0x35	; 53
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	80 81       	ld	r24, Z
    11a4:	48 2f       	mov	r20, r24
    11a6:	8a 81       	ldd	r24, Y+2	; 0x02
    11a8:	28 2f       	mov	r18, r24
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	02 2e       	mov	r0, r18
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <DIO_VidSetPinValue+0xce>
    11b4:	88 0f       	add	r24, r24
    11b6:	99 1f       	adc	r25, r25
    11b8:	0a 94       	dec	r0
    11ba:	e2 f7       	brpl	.-8      	; 0x11b4 <DIO_VidSetPinValue+0xca>
    11bc:	84 2b       	or	r24, r20
    11be:	8c 93       	st	X, r24
    11c0:	8b c0       	rjmp	.+278    	; 0x12d8 <DIO_VidSetPinValue+0x1ee>
			case PORTD:SET_BIT(PORT_D, copy_U8pin); break;
    11c2:	a2 e3       	ldi	r26, 0x32	; 50
    11c4:	b0 e0       	ldi	r27, 0x00	; 0
    11c6:	e2 e3       	ldi	r30, 0x32	; 50
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	48 2f       	mov	r20, r24
    11ce:	8a 81       	ldd	r24, Y+2	; 0x02
    11d0:	28 2f       	mov	r18, r24
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	02 2e       	mov	r0, r18
    11da:	02 c0       	rjmp	.+4      	; 0x11e0 <DIO_VidSetPinValue+0xf6>
    11dc:	88 0f       	add	r24, r24
    11de:	99 1f       	adc	r25, r25
    11e0:	0a 94       	dec	r0
    11e2:	e2 f7       	brpl	.-8      	; 0x11dc <DIO_VidSetPinValue+0xf2>
    11e4:	84 2b       	or	r24, r20
    11e6:	8c 93       	st	X, r24
    11e8:	77 c0       	rjmp	.+238    	; 0x12d8 <DIO_VidSetPinValue+0x1ee>
	
		}	
	}
	else if(LOW==copy_U8value)
    11ea:	8b 81       	ldd	r24, Y+3	; 0x03
    11ec:	88 23       	and	r24, r24
    11ee:	09 f0       	breq	.+2      	; 0x11f2 <DIO_VidSetPinValue+0x108>
    11f0:	73 c0       	rjmp	.+230    	; 0x12d8 <DIO_VidSetPinValue+0x1ee>
	{
		switch(copy_u8port)
    11f2:	89 81       	ldd	r24, Y+1	; 0x01
    11f4:	28 2f       	mov	r18, r24
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	3d 83       	std	Y+5, r19	; 0x05
    11fa:	2c 83       	std	Y+4, r18	; 0x04
    11fc:	8c 81       	ldd	r24, Y+4	; 0x04
    11fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1200:	81 30       	cpi	r24, 0x01	; 1
    1202:	91 05       	cpc	r25, r1
    1204:	59 f1       	breq	.+86     	; 0x125c <DIO_VidSetPinValue+0x172>
    1206:	2c 81       	ldd	r18, Y+4	; 0x04
    1208:	3d 81       	ldd	r19, Y+5	; 0x05
    120a:	22 30       	cpi	r18, 0x02	; 2
    120c:	31 05       	cpc	r19, r1
    120e:	2c f4       	brge	.+10     	; 0x121a <DIO_VidSetPinValue+0x130>
    1210:	8c 81       	ldd	r24, Y+4	; 0x04
    1212:	9d 81       	ldd	r25, Y+5	; 0x05
    1214:	00 97       	sbiw	r24, 0x00	; 0
    1216:	69 f0       	breq	.+26     	; 0x1232 <DIO_VidSetPinValue+0x148>
    1218:	5f c0       	rjmp	.+190    	; 0x12d8 <DIO_VidSetPinValue+0x1ee>
    121a:	2c 81       	ldd	r18, Y+4	; 0x04
    121c:	3d 81       	ldd	r19, Y+5	; 0x05
    121e:	22 30       	cpi	r18, 0x02	; 2
    1220:	31 05       	cpc	r19, r1
    1222:	89 f1       	breq	.+98     	; 0x1286 <DIO_VidSetPinValue+0x19c>
    1224:	8c 81       	ldd	r24, Y+4	; 0x04
    1226:	9d 81       	ldd	r25, Y+5	; 0x05
    1228:	83 30       	cpi	r24, 0x03	; 3
    122a:	91 05       	cpc	r25, r1
    122c:	09 f4       	brne	.+2      	; 0x1230 <DIO_VidSetPinValue+0x146>
    122e:	40 c0       	rjmp	.+128    	; 0x12b0 <DIO_VidSetPinValue+0x1c6>
    1230:	53 c0       	rjmp	.+166    	; 0x12d8 <DIO_VidSetPinValue+0x1ee>
		{
			case PORTA:CLR_BIT(PORT_A, copy_U8pin); break;
    1232:	ab e3       	ldi	r26, 0x3B	; 59
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	eb e3       	ldi	r30, 0x3B	; 59
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	48 2f       	mov	r20, r24
    123e:	8a 81       	ldd	r24, Y+2	; 0x02
    1240:	28 2f       	mov	r18, r24
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	02 2e       	mov	r0, r18
    124a:	02 c0       	rjmp	.+4      	; 0x1250 <DIO_VidSetPinValue+0x166>
    124c:	88 0f       	add	r24, r24
    124e:	99 1f       	adc	r25, r25
    1250:	0a 94       	dec	r0
    1252:	e2 f7       	brpl	.-8      	; 0x124c <DIO_VidSetPinValue+0x162>
    1254:	80 95       	com	r24
    1256:	84 23       	and	r24, r20
    1258:	8c 93       	st	X, r24
    125a:	3e c0       	rjmp	.+124    	; 0x12d8 <DIO_VidSetPinValue+0x1ee>
			case PORTB:CLR_BIT(PORT_B, copy_U8pin); break;
    125c:	a8 e3       	ldi	r26, 0x38	; 56
    125e:	b0 e0       	ldi	r27, 0x00	; 0
    1260:	e8 e3       	ldi	r30, 0x38	; 56
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	80 81       	ld	r24, Z
    1266:	48 2f       	mov	r20, r24
    1268:	8a 81       	ldd	r24, Y+2	; 0x02
    126a:	28 2f       	mov	r18, r24
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	81 e0       	ldi	r24, 0x01	; 1
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	02 2e       	mov	r0, r18
    1274:	02 c0       	rjmp	.+4      	; 0x127a <DIO_VidSetPinValue+0x190>
    1276:	88 0f       	add	r24, r24
    1278:	99 1f       	adc	r25, r25
    127a:	0a 94       	dec	r0
    127c:	e2 f7       	brpl	.-8      	; 0x1276 <DIO_VidSetPinValue+0x18c>
    127e:	80 95       	com	r24
    1280:	84 23       	and	r24, r20
    1282:	8c 93       	st	X, r24
    1284:	29 c0       	rjmp	.+82     	; 0x12d8 <DIO_VidSetPinValue+0x1ee>
		    case PORTC:CLR_BIT(PORT_C, copy_U8pin); break;
    1286:	a5 e3       	ldi	r26, 0x35	; 53
    1288:	b0 e0       	ldi	r27, 0x00	; 0
    128a:	e5 e3       	ldi	r30, 0x35	; 53
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	48 2f       	mov	r20, r24
    1292:	8a 81       	ldd	r24, Y+2	; 0x02
    1294:	28 2f       	mov	r18, r24
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	02 2e       	mov	r0, r18
    129e:	02 c0       	rjmp	.+4      	; 0x12a4 <DIO_VidSetPinValue+0x1ba>
    12a0:	88 0f       	add	r24, r24
    12a2:	99 1f       	adc	r25, r25
    12a4:	0a 94       	dec	r0
    12a6:	e2 f7       	brpl	.-8      	; 0x12a0 <DIO_VidSetPinValue+0x1b6>
    12a8:	80 95       	com	r24
    12aa:	84 23       	and	r24, r20
    12ac:	8c 93       	st	X, r24
    12ae:	14 c0       	rjmp	.+40     	; 0x12d8 <DIO_VidSetPinValue+0x1ee>
		    case PORTD:CLR_BIT(PORT_D, copy_U8pin); break;
    12b0:	a2 e3       	ldi	r26, 0x32	; 50
    12b2:	b0 e0       	ldi	r27, 0x00	; 0
    12b4:	e2 e3       	ldi	r30, 0x32	; 50
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	48 2f       	mov	r20, r24
    12bc:	8a 81       	ldd	r24, Y+2	; 0x02
    12be:	28 2f       	mov	r18, r24
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	02 2e       	mov	r0, r18
    12c8:	02 c0       	rjmp	.+4      	; 0x12ce <DIO_VidSetPinValue+0x1e4>
    12ca:	88 0f       	add	r24, r24
    12cc:	99 1f       	adc	r25, r25
    12ce:	0a 94       	dec	r0
    12d0:	e2 f7       	brpl	.-8      	; 0x12ca <DIO_VidSetPinValue+0x1e0>
    12d2:	80 95       	com	r24
    12d4:	84 23       	and	r24, r20
    12d6:	8c 93       	st	X, r24
		
	}	
	
	
	
}
    12d8:	27 96       	adiw	r28, 0x07	; 7
    12da:	0f b6       	in	r0, 0x3f	; 63
    12dc:	f8 94       	cli
    12de:	de bf       	out	0x3e, r29	; 62
    12e0:	0f be       	out	0x3f, r0	; 63
    12e2:	cd bf       	out	0x3d, r28	; 61
    12e4:	cf 91       	pop	r28
    12e6:	df 91       	pop	r29
    12e8:	08 95       	ret

000012ea <DIO_VidGetPinValue>:


u8 DIO_VidGetPinValue			(u8 copy_u8port, u8 Copy_U8Pin)
{
    12ea:	df 93       	push	r29
    12ec:	cf 93       	push	r28
    12ee:	00 d0       	rcall	.+0      	; 0x12f0 <DIO_VidGetPinValue+0x6>
    12f0:	00 d0       	rcall	.+0      	; 0x12f2 <DIO_VidGetPinValue+0x8>
    12f2:	0f 92       	push	r0
    12f4:	cd b7       	in	r28, 0x3d	; 61
    12f6:	de b7       	in	r29, 0x3e	; 62
    12f8:	8a 83       	std	Y+2, r24	; 0x02
    12fa:	6b 83       	std	Y+3, r22	; 0x03
	u8 Lcal_U8PinResult=0;
    12fc:	19 82       	std	Y+1, r1	; 0x01
	switch(copy_u8port){
    12fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1300:	28 2f       	mov	r18, r24
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	3d 83       	std	Y+5, r19	; 0x05
    1306:	2c 83       	std	Y+4, r18	; 0x04
    1308:	4c 81       	ldd	r20, Y+4	; 0x04
    130a:	5d 81       	ldd	r21, Y+5	; 0x05
    130c:	41 30       	cpi	r20, 0x01	; 1
    130e:	51 05       	cpc	r21, r1
    1310:	41 f1       	breq	.+80     	; 0x1362 <DIO_VidGetPinValue+0x78>
    1312:	8c 81       	ldd	r24, Y+4	; 0x04
    1314:	9d 81       	ldd	r25, Y+5	; 0x05
    1316:	82 30       	cpi	r24, 0x02	; 2
    1318:	91 05       	cpc	r25, r1
    131a:	34 f4       	brge	.+12     	; 0x1328 <DIO_VidGetPinValue+0x3e>
    131c:	2c 81       	ldd	r18, Y+4	; 0x04
    131e:	3d 81       	ldd	r19, Y+5	; 0x05
    1320:	21 15       	cp	r18, r1
    1322:	31 05       	cpc	r19, r1
    1324:	61 f0       	breq	.+24     	; 0x133e <DIO_VidGetPinValue+0x54>
    1326:	52 c0       	rjmp	.+164    	; 0x13cc <DIO_VidGetPinValue+0xe2>
    1328:	4c 81       	ldd	r20, Y+4	; 0x04
    132a:	5d 81       	ldd	r21, Y+5	; 0x05
    132c:	42 30       	cpi	r20, 0x02	; 2
    132e:	51 05       	cpc	r21, r1
    1330:	51 f1       	breq	.+84     	; 0x1386 <DIO_VidGetPinValue+0x9c>
    1332:	8c 81       	ldd	r24, Y+4	; 0x04
    1334:	9d 81       	ldd	r25, Y+5	; 0x05
    1336:	83 30       	cpi	r24, 0x03	; 3
    1338:	91 05       	cpc	r25, r1
    133a:	b9 f1       	breq	.+110    	; 0x13aa <DIO_VidGetPinValue+0xc0>
    133c:	47 c0       	rjmp	.+142    	; 0x13cc <DIO_VidGetPinValue+0xe2>

			case PORTA :		Lcal_U8PinResult=GET_BIT(PINA,Copy_U8Pin);	        break;
    133e:	e9 e3       	ldi	r30, 0x39	; 57
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	28 2f       	mov	r18, r24
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	8b 81       	ldd	r24, Y+3	; 0x03
    134a:	88 2f       	mov	r24, r24
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	a9 01       	movw	r20, r18
    1350:	02 c0       	rjmp	.+4      	; 0x1356 <DIO_VidGetPinValue+0x6c>
    1352:	55 95       	asr	r21
    1354:	47 95       	ror	r20
    1356:	8a 95       	dec	r24
    1358:	e2 f7       	brpl	.-8      	; 0x1352 <DIO_VidGetPinValue+0x68>
    135a:	ca 01       	movw	r24, r20
    135c:	81 70       	andi	r24, 0x01	; 1
    135e:	89 83       	std	Y+1, r24	; 0x01
    1360:	35 c0       	rjmp	.+106    	; 0x13cc <DIO_VidGetPinValue+0xe2>
			case PORTB :		Lcal_U8PinResult=GET_BIT(PINB,Copy_U8Pin); 		    break;
    1362:	e6 e3       	ldi	r30, 0x36	; 54
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	80 81       	ld	r24, Z
    1368:	28 2f       	mov	r18, r24
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	8b 81       	ldd	r24, Y+3	; 0x03
    136e:	88 2f       	mov	r24, r24
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	a9 01       	movw	r20, r18
    1374:	02 c0       	rjmp	.+4      	; 0x137a <DIO_VidGetPinValue+0x90>
    1376:	55 95       	asr	r21
    1378:	47 95       	ror	r20
    137a:	8a 95       	dec	r24
    137c:	e2 f7       	brpl	.-8      	; 0x1376 <DIO_VidGetPinValue+0x8c>
    137e:	ca 01       	movw	r24, r20
    1380:	81 70       	andi	r24, 0x01	; 1
    1382:	89 83       	std	Y+1, r24	; 0x01
    1384:	23 c0       	rjmp	.+70     	; 0x13cc <DIO_VidGetPinValue+0xe2>
			case PORTC :		Lcal_U8PinResult=GET_BIT(PINC,Copy_U8Pin);			break;
    1386:	e3 e3       	ldi	r30, 0x33	; 51
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	80 81       	ld	r24, Z
    138c:	28 2f       	mov	r18, r24
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	8b 81       	ldd	r24, Y+3	; 0x03
    1392:	88 2f       	mov	r24, r24
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	a9 01       	movw	r20, r18
    1398:	02 c0       	rjmp	.+4      	; 0x139e <DIO_VidGetPinValue+0xb4>
    139a:	55 95       	asr	r21
    139c:	47 95       	ror	r20
    139e:	8a 95       	dec	r24
    13a0:	e2 f7       	brpl	.-8      	; 0x139a <DIO_VidGetPinValue+0xb0>
    13a2:	ca 01       	movw	r24, r20
    13a4:	81 70       	andi	r24, 0x01	; 1
    13a6:	89 83       	std	Y+1, r24	; 0x01
    13a8:	11 c0       	rjmp	.+34     	; 0x13cc <DIO_VidGetPinValue+0xe2>
			case PORTD :		Lcal_U8PinResult=GET_BIT(PIND,Copy_U8Pin);			break;
    13aa:	e0 e3       	ldi	r30, 0x30	; 48
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	80 81       	ld	r24, Z
    13b0:	28 2f       	mov	r18, r24
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	8b 81       	ldd	r24, Y+3	; 0x03
    13b6:	88 2f       	mov	r24, r24
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	a9 01       	movw	r20, r18
    13bc:	02 c0       	rjmp	.+4      	; 0x13c2 <DIO_VidGetPinValue+0xd8>
    13be:	55 95       	asr	r21
    13c0:	47 95       	ror	r20
    13c2:	8a 95       	dec	r24
    13c4:	e2 f7       	brpl	.-8      	; 0x13be <DIO_VidGetPinValue+0xd4>
    13c6:	ca 01       	movw	r24, r20
    13c8:	81 70       	andi	r24, 0x01	; 1
    13ca:	89 83       	std	Y+1, r24	; 0x01

			}


return(Lcal_U8PinResult);
    13cc:	89 81       	ldd	r24, Y+1	; 0x01
	
	
}
    13ce:	0f 90       	pop	r0
    13d0:	0f 90       	pop	r0
    13d2:	0f 90       	pop	r0
    13d4:	0f 90       	pop	r0
    13d6:	0f 90       	pop	r0
    13d8:	cf 91       	pop	r28
    13da:	df 91       	pop	r29
    13dc:	08 95       	ret

000013de <DIO_VidSetPortDirection>:

void DIO_VidSetPortDirection	(u8 copy_u8port, u8 copy_U8state)
{
    13de:	df 93       	push	r29
    13e0:	cf 93       	push	r28
    13e2:	00 d0       	rcall	.+0      	; 0x13e4 <DIO_VidSetPortDirection+0x6>
    13e4:	00 d0       	rcall	.+0      	; 0x13e6 <DIO_VidSetPortDirection+0x8>
    13e6:	00 d0       	rcall	.+0      	; 0x13e8 <DIO_VidSetPortDirection+0xa>
    13e8:	cd b7       	in	r28, 0x3d	; 61
    13ea:	de b7       	in	r29, 0x3e	; 62
    13ec:	89 83       	std	Y+1, r24	; 0x01
    13ee:	6a 83       	std	Y+2, r22	; 0x02
	
	if(OUTPUT==copy_U8state)
    13f0:	8a 81       	ldd	r24, Y+2	; 0x02
    13f2:	81 30       	cpi	r24, 0x01	; 1
    13f4:	99 f5       	brne	.+102    	; 0x145c <DIO_VidSetPortDirection+0x7e>
	{
		switch (copy_u8port)
    13f6:	89 81       	ldd	r24, Y+1	; 0x01
    13f8:	28 2f       	mov	r18, r24
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	3e 83       	std	Y+6, r19	; 0x06
    13fe:	2d 83       	std	Y+5, r18	; 0x05
    1400:	8d 81       	ldd	r24, Y+5	; 0x05
    1402:	9e 81       	ldd	r25, Y+6	; 0x06
    1404:	81 30       	cpi	r24, 0x01	; 1
    1406:	91 05       	cpc	r25, r1
    1408:	d1 f0       	breq	.+52     	; 0x143e <DIO_VidSetPortDirection+0x60>
    140a:	2d 81       	ldd	r18, Y+5	; 0x05
    140c:	3e 81       	ldd	r19, Y+6	; 0x06
    140e:	22 30       	cpi	r18, 0x02	; 2
    1410:	31 05       	cpc	r19, r1
    1412:	2c f4       	brge	.+10     	; 0x141e <DIO_VidSetPortDirection+0x40>
    1414:	8d 81       	ldd	r24, Y+5	; 0x05
    1416:	9e 81       	ldd	r25, Y+6	; 0x06
    1418:	00 97       	sbiw	r24, 0x00	; 0
    141a:	61 f0       	breq	.+24     	; 0x1434 <DIO_VidSetPortDirection+0x56>
    141c:	50 c0       	rjmp	.+160    	; 0x14be <DIO_VidSetPortDirection+0xe0>
    141e:	2d 81       	ldd	r18, Y+5	; 0x05
    1420:	3e 81       	ldd	r19, Y+6	; 0x06
    1422:	22 30       	cpi	r18, 0x02	; 2
    1424:	31 05       	cpc	r19, r1
    1426:	81 f0       	breq	.+32     	; 0x1448 <DIO_VidSetPortDirection+0x6a>
    1428:	8d 81       	ldd	r24, Y+5	; 0x05
    142a:	9e 81       	ldd	r25, Y+6	; 0x06
    142c:	83 30       	cpi	r24, 0x03	; 3
    142e:	91 05       	cpc	r25, r1
    1430:	81 f0       	breq	.+32     	; 0x1452 <DIO_VidSetPortDirection+0x74>
    1432:	45 c0       	rjmp	.+138    	; 0x14be <DIO_VidSetPortDirection+0xe0>
		{
			case PORTA:DDRA= ALL_OUTPUT		; break;
    1434:	ea e3       	ldi	r30, 0x3A	; 58
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	8f ef       	ldi	r24, 0xFF	; 255
    143a:	80 83       	st	Z, r24
    143c:	40 c0       	rjmp	.+128    	; 0x14be <DIO_VidSetPortDirection+0xe0>
			case PORTB:DDRB= ALL_OUTPUT		; break;
    143e:	e7 e3       	ldi	r30, 0x37	; 55
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	8f ef       	ldi	r24, 0xFF	; 255
    1444:	80 83       	st	Z, r24
    1446:	3b c0       	rjmp	.+118    	; 0x14be <DIO_VidSetPortDirection+0xe0>
			case PORTC:DDRC= ALL_OUTPUT		; break;
    1448:	e4 e3       	ldi	r30, 0x34	; 52
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	8f ef       	ldi	r24, 0xFF	; 255
    144e:	80 83       	st	Z, r24
    1450:	36 c0       	rjmp	.+108    	; 0x14be <DIO_VidSetPortDirection+0xe0>
			case PORTD:DDRD= ALL_OUTPUT		; break;
    1452:	e1 e3       	ldi	r30, 0x31	; 49
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	8f ef       	ldi	r24, 0xFF	; 255
    1458:	80 83       	st	Z, r24
    145a:	31 c0       	rjmp	.+98     	; 0x14be <DIO_VidSetPortDirection+0xe0>
		}
	}
	else if(INPUT==copy_U8state)
    145c:	8a 81       	ldd	r24, Y+2	; 0x02
    145e:	88 23       	and	r24, r24
    1460:	71 f5       	brne	.+92     	; 0x14be <DIO_VidSetPortDirection+0xe0>
	{
		switch(copy_u8port)
    1462:	89 81       	ldd	r24, Y+1	; 0x01
    1464:	28 2f       	mov	r18, r24
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	3c 83       	std	Y+4, r19	; 0x04
    146a:	2b 83       	std	Y+3, r18	; 0x03
    146c:	8b 81       	ldd	r24, Y+3	; 0x03
    146e:	9c 81       	ldd	r25, Y+4	; 0x04
    1470:	81 30       	cpi	r24, 0x01	; 1
    1472:	91 05       	cpc	r25, r1
    1474:	c9 f0       	breq	.+50     	; 0x14a8 <DIO_VidSetPortDirection+0xca>
    1476:	2b 81       	ldd	r18, Y+3	; 0x03
    1478:	3c 81       	ldd	r19, Y+4	; 0x04
    147a:	22 30       	cpi	r18, 0x02	; 2
    147c:	31 05       	cpc	r19, r1
    147e:	2c f4       	brge	.+10     	; 0x148a <DIO_VidSetPortDirection+0xac>
    1480:	8b 81       	ldd	r24, Y+3	; 0x03
    1482:	9c 81       	ldd	r25, Y+4	; 0x04
    1484:	00 97       	sbiw	r24, 0x00	; 0
    1486:	61 f0       	breq	.+24     	; 0x14a0 <DIO_VidSetPortDirection+0xc2>
    1488:	1a c0       	rjmp	.+52     	; 0x14be <DIO_VidSetPortDirection+0xe0>
    148a:	2b 81       	ldd	r18, Y+3	; 0x03
    148c:	3c 81       	ldd	r19, Y+4	; 0x04
    148e:	22 30       	cpi	r18, 0x02	; 2
    1490:	31 05       	cpc	r19, r1
    1492:	71 f0       	breq	.+28     	; 0x14b0 <DIO_VidSetPortDirection+0xd2>
    1494:	8b 81       	ldd	r24, Y+3	; 0x03
    1496:	9c 81       	ldd	r25, Y+4	; 0x04
    1498:	83 30       	cpi	r24, 0x03	; 3
    149a:	91 05       	cpc	r25, r1
    149c:	69 f0       	breq	.+26     	; 0x14b8 <DIO_VidSetPortDirection+0xda>
    149e:	0f c0       	rjmp	.+30     	; 0x14be <DIO_VidSetPortDirection+0xe0>
		{
			case PORTA:DDRA= ALL_INPUT		; break;
    14a0:	ea e3       	ldi	r30, 0x3A	; 58
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	10 82       	st	Z, r1
    14a6:	0b c0       	rjmp	.+22     	; 0x14be <DIO_VidSetPortDirection+0xe0>
			case PORTB:DDRB= ALL_INPUT		; break;
    14a8:	e7 e3       	ldi	r30, 0x37	; 55
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	10 82       	st	Z, r1
    14ae:	07 c0       	rjmp	.+14     	; 0x14be <DIO_VidSetPortDirection+0xe0>
			case PORTC:DDRC= ALL_INPUT		; break;
    14b0:	e4 e3       	ldi	r30, 0x34	; 52
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	10 82       	st	Z, r1
    14b6:	03 c0       	rjmp	.+6      	; 0x14be <DIO_VidSetPortDirection+0xe0>
			case PORTD:DDRD= ALL_INPUT		; break;
    14b8:	e1 e3       	ldi	r30, 0x31	; 49
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	10 82       	st	Z, r1
	{

	}

	
}
    14be:	26 96       	adiw	r28, 0x06	; 6
    14c0:	0f b6       	in	r0, 0x3f	; 63
    14c2:	f8 94       	cli
    14c4:	de bf       	out	0x3e, r29	; 62
    14c6:	0f be       	out	0x3f, r0	; 63
    14c8:	cd bf       	out	0x3d, r28	; 61
    14ca:	cf 91       	pop	r28
    14cc:	df 91       	pop	r29
    14ce:	08 95       	ret

000014d0 <DIO_VidSetPortValue>:
void DIO_VidSetPortValue		(u8 copy_u8port, u8 copy_U8value)
{
    14d0:	df 93       	push	r29
    14d2:	cf 93       	push	r28
    14d4:	00 d0       	rcall	.+0      	; 0x14d6 <DIO_VidSetPortValue+0x6>
    14d6:	00 d0       	rcall	.+0      	; 0x14d8 <DIO_VidSetPortValue+0x8>
    14d8:	cd b7       	in	r28, 0x3d	; 61
    14da:	de b7       	in	r29, 0x3e	; 62
    14dc:	89 83       	std	Y+1, r24	; 0x01
    14de:	6a 83       	std	Y+2, r22	; 0x02
		
		switch (copy_u8port)
    14e0:	89 81       	ldd	r24, Y+1	; 0x01
    14e2:	28 2f       	mov	r18, r24
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	3c 83       	std	Y+4, r19	; 0x04
    14e8:	2b 83       	std	Y+3, r18	; 0x03
    14ea:	8b 81       	ldd	r24, Y+3	; 0x03
    14ec:	9c 81       	ldd	r25, Y+4	; 0x04
    14ee:	81 30       	cpi	r24, 0x01	; 1
    14f0:	91 05       	cpc	r25, r1
    14f2:	d1 f0       	breq	.+52     	; 0x1528 <DIO_VidSetPortValue+0x58>
    14f4:	2b 81       	ldd	r18, Y+3	; 0x03
    14f6:	3c 81       	ldd	r19, Y+4	; 0x04
    14f8:	22 30       	cpi	r18, 0x02	; 2
    14fa:	31 05       	cpc	r19, r1
    14fc:	2c f4       	brge	.+10     	; 0x1508 <DIO_VidSetPortValue+0x38>
    14fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1500:	9c 81       	ldd	r25, Y+4	; 0x04
    1502:	00 97       	sbiw	r24, 0x00	; 0
    1504:	61 f0       	breq	.+24     	; 0x151e <DIO_VidSetPortValue+0x4e>
    1506:	1e c0       	rjmp	.+60     	; 0x1544 <DIO_VidSetPortValue+0x74>
    1508:	2b 81       	ldd	r18, Y+3	; 0x03
    150a:	3c 81       	ldd	r19, Y+4	; 0x04
    150c:	22 30       	cpi	r18, 0x02	; 2
    150e:	31 05       	cpc	r19, r1
    1510:	81 f0       	breq	.+32     	; 0x1532 <DIO_VidSetPortValue+0x62>
    1512:	8b 81       	ldd	r24, Y+3	; 0x03
    1514:	9c 81       	ldd	r25, Y+4	; 0x04
    1516:	83 30       	cpi	r24, 0x03	; 3
    1518:	91 05       	cpc	r25, r1
    151a:	81 f0       	breq	.+32     	; 0x153c <DIO_VidSetPortValue+0x6c>
    151c:	13 c0       	rjmp	.+38     	; 0x1544 <DIO_VidSetPortValue+0x74>
		{
			case PORTA:PORT_A=copy_U8value		; break;
    151e:	eb e3       	ldi	r30, 0x3B	; 59
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	8a 81       	ldd	r24, Y+2	; 0x02
    1524:	80 83       	st	Z, r24
    1526:	0e c0       	rjmp	.+28     	; 0x1544 <DIO_VidSetPortValue+0x74>
			case PORTB:PORT_B=copy_U8value		; break;
    1528:	e8 e3       	ldi	r30, 0x38	; 56
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	8a 81       	ldd	r24, Y+2	; 0x02
    152e:	80 83       	st	Z, r24
    1530:	09 c0       	rjmp	.+18     	; 0x1544 <DIO_VidSetPortValue+0x74>
			case PORTC:PORT_C=copy_U8value		; break;
    1532:	e5 e3       	ldi	r30, 0x35	; 53
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	8a 81       	ldd	r24, Y+2	; 0x02
    1538:	80 83       	st	Z, r24
    153a:	04 c0       	rjmp	.+8      	; 0x1544 <DIO_VidSetPortValue+0x74>
			case PORTD:PORT_D=copy_U8value		; break;
    153c:	e2 e3       	ldi	r30, 0x32	; 50
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	8a 81       	ldd	r24, Y+2	; 0x02
    1542:	80 83       	st	Z, r24
		}	
	
	
	
	
}
    1544:	0f 90       	pop	r0
    1546:	0f 90       	pop	r0
    1548:	0f 90       	pop	r0
    154a:	0f 90       	pop	r0
    154c:	cf 91       	pop	r28
    154e:	df 91       	pop	r29
    1550:	08 95       	ret

00001552 <DIO_VidTogglePin>:

void DIO_VidTogglePin			(u8 copy_u8port, u8 copy_U8pin)
{
    1552:	df 93       	push	r29
    1554:	cf 93       	push	r28
    1556:	00 d0       	rcall	.+0      	; 0x1558 <DIO_VidTogglePin+0x6>
    1558:	00 d0       	rcall	.+0      	; 0x155a <DIO_VidTogglePin+0x8>
    155a:	cd b7       	in	r28, 0x3d	; 61
    155c:	de b7       	in	r29, 0x3e	; 62
    155e:	89 83       	std	Y+1, r24	; 0x01
    1560:	6a 83       	std	Y+2, r22	; 0x02

		switch (copy_u8port)
    1562:	89 81       	ldd	r24, Y+1	; 0x01
    1564:	28 2f       	mov	r18, r24
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	3c 83       	std	Y+4, r19	; 0x04
    156a:	2b 83       	std	Y+3, r18	; 0x03
    156c:	8b 81       	ldd	r24, Y+3	; 0x03
    156e:	9c 81       	ldd	r25, Y+4	; 0x04
    1570:	81 30       	cpi	r24, 0x01	; 1
    1572:	91 05       	cpc	r25, r1
    1574:	49 f1       	breq	.+82     	; 0x15c8 <DIO_VidTogglePin+0x76>
    1576:	2b 81       	ldd	r18, Y+3	; 0x03
    1578:	3c 81       	ldd	r19, Y+4	; 0x04
    157a:	22 30       	cpi	r18, 0x02	; 2
    157c:	31 05       	cpc	r19, r1
    157e:	2c f4       	brge	.+10     	; 0x158a <DIO_VidTogglePin+0x38>
    1580:	8b 81       	ldd	r24, Y+3	; 0x03
    1582:	9c 81       	ldd	r25, Y+4	; 0x04
    1584:	00 97       	sbiw	r24, 0x00	; 0
    1586:	61 f0       	breq	.+24     	; 0x15a0 <DIO_VidTogglePin+0x4e>
    1588:	5a c0       	rjmp	.+180    	; 0x163e <DIO_VidTogglePin+0xec>
    158a:	2b 81       	ldd	r18, Y+3	; 0x03
    158c:	3c 81       	ldd	r19, Y+4	; 0x04
    158e:	22 30       	cpi	r18, 0x02	; 2
    1590:	31 05       	cpc	r19, r1
    1592:	71 f1       	breq	.+92     	; 0x15f0 <DIO_VidTogglePin+0x9e>
    1594:	8b 81       	ldd	r24, Y+3	; 0x03
    1596:	9c 81       	ldd	r25, Y+4	; 0x04
    1598:	83 30       	cpi	r24, 0x03	; 3
    159a:	91 05       	cpc	r25, r1
    159c:	e9 f1       	breq	.+122    	; 0x1618 <DIO_VidTogglePin+0xc6>
    159e:	4f c0       	rjmp	.+158    	; 0x163e <DIO_VidTogglePin+0xec>
		{
					case PORTA:TOG_BIT(PORT_A, copy_U8pin); break;
    15a0:	ab e3       	ldi	r26, 0x3B	; 59
    15a2:	b0 e0       	ldi	r27, 0x00	; 0
    15a4:	eb e3       	ldi	r30, 0x3B	; 59
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	48 2f       	mov	r20, r24
    15ac:	8a 81       	ldd	r24, Y+2	; 0x02
    15ae:	28 2f       	mov	r18, r24
    15b0:	30 e0       	ldi	r19, 0x00	; 0
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	02 2e       	mov	r0, r18
    15b8:	02 c0       	rjmp	.+4      	; 0x15be <DIO_VidTogglePin+0x6c>
    15ba:	88 0f       	add	r24, r24
    15bc:	99 1f       	adc	r25, r25
    15be:	0a 94       	dec	r0
    15c0:	e2 f7       	brpl	.-8      	; 0x15ba <DIO_VidTogglePin+0x68>
    15c2:	84 27       	eor	r24, r20
    15c4:	8c 93       	st	X, r24
    15c6:	3b c0       	rjmp	.+118    	; 0x163e <DIO_VidTogglePin+0xec>
					case PORTB:TOG_BIT(PORT_B, copy_U8pin); break;
    15c8:	a8 e3       	ldi	r26, 0x38	; 56
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	e8 e3       	ldi	r30, 0x38	; 56
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	48 2f       	mov	r20, r24
    15d4:	8a 81       	ldd	r24, Y+2	; 0x02
    15d6:	28 2f       	mov	r18, r24
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	02 2e       	mov	r0, r18
    15e0:	02 c0       	rjmp	.+4      	; 0x15e6 <DIO_VidTogglePin+0x94>
    15e2:	88 0f       	add	r24, r24
    15e4:	99 1f       	adc	r25, r25
    15e6:	0a 94       	dec	r0
    15e8:	e2 f7       	brpl	.-8      	; 0x15e2 <DIO_VidTogglePin+0x90>
    15ea:	84 27       	eor	r24, r20
    15ec:	8c 93       	st	X, r24
    15ee:	27 c0       	rjmp	.+78     	; 0x163e <DIO_VidTogglePin+0xec>
					case PORTC:TOG_BIT(PORT_C, copy_U8pin); break;
    15f0:	a5 e3       	ldi	r26, 0x35	; 53
    15f2:	b0 e0       	ldi	r27, 0x00	; 0
    15f4:	e5 e3       	ldi	r30, 0x35	; 53
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	80 81       	ld	r24, Z
    15fa:	48 2f       	mov	r20, r24
    15fc:	8a 81       	ldd	r24, Y+2	; 0x02
    15fe:	28 2f       	mov	r18, r24
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	02 2e       	mov	r0, r18
    1608:	02 c0       	rjmp	.+4      	; 0x160e <DIO_VidTogglePin+0xbc>
    160a:	88 0f       	add	r24, r24
    160c:	99 1f       	adc	r25, r25
    160e:	0a 94       	dec	r0
    1610:	e2 f7       	brpl	.-8      	; 0x160a <DIO_VidTogglePin+0xb8>
    1612:	84 27       	eor	r24, r20
    1614:	8c 93       	st	X, r24
    1616:	13 c0       	rjmp	.+38     	; 0x163e <DIO_VidTogglePin+0xec>
					case PORTD:TOG_BIT(PORT_D, copy_U8pin); break;
    1618:	a2 e3       	ldi	r26, 0x32	; 50
    161a:	b0 e0       	ldi	r27, 0x00	; 0
    161c:	e2 e3       	ldi	r30, 0x32	; 50
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	80 81       	ld	r24, Z
    1622:	48 2f       	mov	r20, r24
    1624:	8a 81       	ldd	r24, Y+2	; 0x02
    1626:	28 2f       	mov	r18, r24
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	02 2e       	mov	r0, r18
    1630:	02 c0       	rjmp	.+4      	; 0x1636 <DIO_VidTogglePin+0xe4>
    1632:	88 0f       	add	r24, r24
    1634:	99 1f       	adc	r25, r25
    1636:	0a 94       	dec	r0
    1638:	e2 f7       	brpl	.-8      	; 0x1632 <DIO_VidTogglePin+0xe0>
    163a:	84 27       	eor	r24, r20
    163c:	8c 93       	st	X, r24
		}

}
    163e:	0f 90       	pop	r0
    1640:	0f 90       	pop	r0
    1642:	0f 90       	pop	r0
    1644:	0f 90       	pop	r0
    1646:	cf 91       	pop	r28
    1648:	df 91       	pop	r29
    164a:	08 95       	ret

0000164c <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 copy_u8port)
{
    164c:	df 93       	push	r29
    164e:	cf 93       	push	r28
    1650:	00 d0       	rcall	.+0      	; 0x1652 <DIO_u8GetPortValue+0x6>
    1652:	00 d0       	rcall	.+0      	; 0x1654 <DIO_u8GetPortValue+0x8>
    1654:	cd b7       	in	r28, 0x3d	; 61
    1656:	de b7       	in	r29, 0x3e	; 62
    1658:	8a 83       	std	Y+2, r24	; 0x02
		u8 Lcal_U8PortResult=0;
    165a:	19 82       	std	Y+1, r1	; 0x01
	switch(copy_u8port){
    165c:	8a 81       	ldd	r24, Y+2	; 0x02
    165e:	28 2f       	mov	r18, r24
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	3c 83       	std	Y+4, r19	; 0x04
    1664:	2b 83       	std	Y+3, r18	; 0x03
    1666:	8b 81       	ldd	r24, Y+3	; 0x03
    1668:	9c 81       	ldd	r25, Y+4	; 0x04
    166a:	81 30       	cpi	r24, 0x01	; 1
    166c:	91 05       	cpc	r25, r1
    166e:	d1 f0       	breq	.+52     	; 0x16a4 <DIO_u8GetPortValue+0x58>
    1670:	2b 81       	ldd	r18, Y+3	; 0x03
    1672:	3c 81       	ldd	r19, Y+4	; 0x04
    1674:	22 30       	cpi	r18, 0x02	; 2
    1676:	31 05       	cpc	r19, r1
    1678:	2c f4       	brge	.+10     	; 0x1684 <DIO_u8GetPortValue+0x38>
    167a:	8b 81       	ldd	r24, Y+3	; 0x03
    167c:	9c 81       	ldd	r25, Y+4	; 0x04
    167e:	00 97       	sbiw	r24, 0x00	; 0
    1680:	61 f0       	breq	.+24     	; 0x169a <DIO_u8GetPortValue+0x4e>
    1682:	1e c0       	rjmp	.+60     	; 0x16c0 <DIO_u8GetPortValue+0x74>
    1684:	2b 81       	ldd	r18, Y+3	; 0x03
    1686:	3c 81       	ldd	r19, Y+4	; 0x04
    1688:	22 30       	cpi	r18, 0x02	; 2
    168a:	31 05       	cpc	r19, r1
    168c:	81 f0       	breq	.+32     	; 0x16ae <DIO_u8GetPortValue+0x62>
    168e:	8b 81       	ldd	r24, Y+3	; 0x03
    1690:	9c 81       	ldd	r25, Y+4	; 0x04
    1692:	83 30       	cpi	r24, 0x03	; 3
    1694:	91 05       	cpc	r25, r1
    1696:	81 f0       	breq	.+32     	; 0x16b8 <DIO_u8GetPortValue+0x6c>
    1698:	13 c0       	rjmp	.+38     	; 0x16c0 <DIO_u8GetPortValue+0x74>

			case PORTA :	Lcal_U8PortResult=PINA;	        break;
    169a:	e9 e3       	ldi	r30, 0x39	; 57
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	80 81       	ld	r24, Z
    16a0:	89 83       	std	Y+1, r24	; 0x01
    16a2:	0e c0       	rjmp	.+28     	; 0x16c0 <DIO_u8GetPortValue+0x74>
			case PORTB :	Lcal_U8PortResult=PINB; 		    break;
    16a4:	e6 e3       	ldi	r30, 0x36	; 54
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	80 81       	ld	r24, Z
    16aa:	89 83       	std	Y+1, r24	; 0x01
    16ac:	09 c0       	rjmp	.+18     	; 0x16c0 <DIO_u8GetPortValue+0x74>
			case PORTC :	Lcal_U8PortResult=PINC;			break;
    16ae:	e3 e3       	ldi	r30, 0x33	; 51
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	80 81       	ld	r24, Z
    16b4:	89 83       	std	Y+1, r24	; 0x01
    16b6:	04 c0       	rjmp	.+8      	; 0x16c0 <DIO_u8GetPortValue+0x74>
			case PORTD :	Lcal_U8PortResult=PIND;			break;
    16b8:	e0 e3       	ldi	r30, 0x30	; 48
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	80 81       	ld	r24, Z
    16be:	89 83       	std	Y+1, r24	; 0x01

			}


return(Lcal_U8PortResult);
    16c0:	89 81       	ldd	r24, Y+1	; 0x01
	
	
}
    16c2:	0f 90       	pop	r0
    16c4:	0f 90       	pop	r0
    16c6:	0f 90       	pop	r0
    16c8:	0f 90       	pop	r0
    16ca:	cf 91       	pop	r28
    16cc:	df 91       	pop	r29
    16ce:	08 95       	ret

000016d0 <Keypad_VoidInit>:
								{'4','5','6','*'},
								{'1','2','3','-'},
								{'Q','0','=','+'}};

void Keypad_VoidInit(void)
{
    16d0:	df 93       	push	r29
    16d2:	cf 93       	push	r28
    16d4:	cd b7       	in	r28, 0x3d	; 61
    16d6:	de b7       	in	r29, 0x3e	; 62
	
	DIO_VidSetPinDirection(COLS_ROWSPORT,COLS0,OUTPUT);
    16d8:	81 e0       	ldi	r24, 0x01	; 1
    16da:	60 e0       	ldi	r22, 0x00	; 0
    16dc:	41 e0       	ldi	r20, 0x01	; 1
    16de:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(COLS_ROWSPORT,COLS1,OUTPUT);
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	61 e0       	ldi	r22, 0x01	; 1
    16e6:	41 e0       	ldi	r20, 0x01	; 1
    16e8:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(COLS_ROWSPORT,COLS2,OUTPUT);
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	62 e0       	ldi	r22, 0x02	; 2
    16f0:	41 e0       	ldi	r20, 0x01	; 1
    16f2:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(COLS_ROWSPORT,COLS3,OUTPUT);
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	63 e0       	ldi	r22, 0x03	; 3
    16fa:	41 e0       	ldi	r20, 0x01	; 1
    16fc:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_VidSetPinDirection>

	DIO_VidSetPinDirection(COLS_ROWSPORT,ROW0,INPUT);
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	64 e0       	ldi	r22, 0x04	; 4
    1704:	40 e0       	ldi	r20, 0x00	; 0
    1706:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(COLS_ROWSPORT,ROW1,INPUT);
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	65 e0       	ldi	r22, 0x05	; 5
    170e:	40 e0       	ldi	r20, 0x00	; 0
    1710:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(COLS_ROWSPORT,ROW2,INPUT);
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	66 e0       	ldi	r22, 0x06	; 6
    1718:	40 e0       	ldi	r20, 0x00	; 0
    171a:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(COLS_ROWSPORT,ROW3,INPUT);
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	67 e0       	ldi	r22, 0x07	; 7
    1722:	40 e0       	ldi	r20, 0x00	; 0
    1724:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_VidSetPinDirection>
	DIO_VidSetPinValue(COLS_ROWSPORT,ROW0 ,HIGH);
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	64 e0       	ldi	r22, 0x04	; 4
    172c:	41 e0       	ldi	r20, 0x01	; 1
    172e:	0e 94 75 08 	call	0x10ea	; 0x10ea <DIO_VidSetPinValue>
	DIO_VidSetPinValue(COLS_ROWSPORT,ROW1 ,HIGH);
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	65 e0       	ldi	r22, 0x05	; 5
    1736:	41 e0       	ldi	r20, 0x01	; 1
    1738:	0e 94 75 08 	call	0x10ea	; 0x10ea <DIO_VidSetPinValue>
	DIO_VidSetPinValue(COLS_ROWSPORT,ROW2 ,HIGH);
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	66 e0       	ldi	r22, 0x06	; 6
    1740:	41 e0       	ldi	r20, 0x01	; 1
    1742:	0e 94 75 08 	call	0x10ea	; 0x10ea <DIO_VidSetPinValue>
  	DIO_VidSetPinValue(COLS_ROWSPORT,ROW3 ,HIGH);
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	67 e0       	ldi	r22, 0x07	; 7
    174a:	41 e0       	ldi	r20, 0x01	; 1
    174c:	0e 94 75 08 	call	0x10ea	; 0x10ea <DIO_VidSetPinValue>

	DIO_VidSetPinValue(COLS_ROWSPORT,COLS0,HIGH);
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	60 e0       	ldi	r22, 0x00	; 0
    1754:	41 e0       	ldi	r20, 0x01	; 1
    1756:	0e 94 75 08 	call	0x10ea	; 0x10ea <DIO_VidSetPinValue>
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS1,HIGH);
    175a:	81 e0       	ldi	r24, 0x01	; 1
    175c:	61 e0       	ldi	r22, 0x01	; 1
    175e:	41 e0       	ldi	r20, 0x01	; 1
    1760:	0e 94 75 08 	call	0x10ea	; 0x10ea <DIO_VidSetPinValue>
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS2,HIGH);
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	62 e0       	ldi	r22, 0x02	; 2
    1768:	41 e0       	ldi	r20, 0x01	; 1
    176a:	0e 94 75 08 	call	0x10ea	; 0x10ea <DIO_VidSetPinValue>
  	DIO_VidSetPinValue(COLS_ROWSPORT,COLS3,HIGH);
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	63 e0       	ldi	r22, 0x03	; 3
    1772:	41 e0       	ldi	r20, 0x01	; 1
    1774:	0e 94 75 08 	call	0x10ea	; 0x10ea <DIO_VidSetPinValue>


}
    1778:	cf 91       	pop	r28
    177a:	df 91       	pop	r29
    177c:	08 95       	ret

0000177e <Keypad_U8ReadPin>:

u8 Keypad_U8ReadPin(void)
{
    177e:	df 93       	push	r29
    1780:	cf 93       	push	r28
    1782:	cd b7       	in	r28, 0x3d	; 61
    1784:	de b7       	in	r29, 0x3e	; 62
    1786:	61 97       	sbiw	r28, 0x11	; 17
    1788:	0f b6       	in	r0, 0x3f	; 63
    178a:	f8 94       	cli
    178c:	de bf       	out	0x3e, r29	; 62
    178e:	0f be       	out	0x3f, r0	; 63
    1790:	cd bf       	out	0x3d, r28	; 61

	DIO_VidSetPinValue(COLS_ROWSPORT,ROW0 ,HIGH);
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	64 e0       	ldi	r22, 0x04	; 4
    1796:	41 e0       	ldi	r20, 0x01	; 1
    1798:	0e 94 75 08 	call	0x10ea	; 0x10ea <DIO_VidSetPinValue>
	DIO_VidSetPinValue(COLS_ROWSPORT,ROW1 ,HIGH);
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	65 e0       	ldi	r22, 0x05	; 5
    17a0:	41 e0       	ldi	r20, 0x01	; 1
    17a2:	0e 94 75 08 	call	0x10ea	; 0x10ea <DIO_VidSetPinValue>
	DIO_VidSetPinValue(COLS_ROWSPORT,ROW2 ,HIGH);
    17a6:	81 e0       	ldi	r24, 0x01	; 1
    17a8:	66 e0       	ldi	r22, 0x06	; 6
    17aa:	41 e0       	ldi	r20, 0x01	; 1
    17ac:	0e 94 75 08 	call	0x10ea	; 0x10ea <DIO_VidSetPinValue>
  	DIO_VidSetPinValue(COLS_ROWSPORT,ROW3 ,HIGH);
    17b0:	81 e0       	ldi	r24, 0x01	; 1
    17b2:	67 e0       	ldi	r22, 0x07	; 7
    17b4:	41 e0       	ldi	r20, 0x01	; 1
    17b6:	0e 94 75 08 	call	0x10ea	; 0x10ea <DIO_VidSetPinValue>

	u8 pressdkey=DEFAULT_KEY;
    17ba:	83 e4       	ldi	r24, 0x43	; 67
    17bc:	89 8b       	std	Y+17, r24	; 0x11
	u8 col=0,row=0;
    17be:	18 8a       	std	Y+16, r1	; 0x10
    17c0:	1f 86       	std	Y+15, r1	; 0x0f

	for(row=0;row<=3;row++)
    17c2:	1f 86       	std	Y+15, r1	; 0x0f
    17c4:	ad c0       	rjmp	.+346    	; 0x1920 <Keypad_U8ReadPin+0x1a2>
	{
		DIO_VidSetPinValue(COLS_ROWSPORT,row,LOW);
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	6f 85       	ldd	r22, Y+15	; 0x0f
    17ca:	40 e0       	ldi	r20, 0x00	; 0
    17cc:	0e 94 75 08 	call	0x10ea	; 0x10ea <DIO_VidSetPinValue>

		for(col=0;col<=3;col++)
    17d0:	18 8a       	std	Y+16, r1	; 0x10
    17d2:	9a c0       	rjmp	.+308    	; 0x1908 <Keypad_U8ReadPin+0x18a>
		{
			if(DIO_VidGetPinValue(COLS_ROWSPORT,col+ROWSHIFT)==0)
    17d4:	88 89       	ldd	r24, Y+16	; 0x10
    17d6:	98 2f       	mov	r25, r24
    17d8:	9c 5f       	subi	r25, 0xFC	; 252
    17da:	81 e0       	ldi	r24, 0x01	; 1
    17dc:	69 2f       	mov	r22, r25
    17de:	0e 94 75 09 	call	0x12ea	; 0x12ea <DIO_VidGetPinValue>
    17e2:	88 23       	and	r24, r24
    17e4:	09 f0       	breq	.+2      	; 0x17e8 <Keypad_U8ReadPin+0x6a>
    17e6:	8d c0       	rjmp	.+282    	; 0x1902 <Keypad_U8ReadPin+0x184>
			{
				pressdkey=	array_keypad[row][col];
    17e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    17ea:	48 2f       	mov	r20, r24
    17ec:	50 e0       	ldi	r21, 0x00	; 0
    17ee:	88 89       	ldd	r24, Y+16	; 0x10
    17f0:	28 2f       	mov	r18, r24
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	ca 01       	movw	r24, r20
    17f6:	88 0f       	add	r24, r24
    17f8:	99 1f       	adc	r25, r25
    17fa:	88 0f       	add	r24, r24
    17fc:	99 1f       	adc	r25, r25
    17fe:	82 0f       	add	r24, r18
    1800:	93 1f       	adc	r25, r19
    1802:	fc 01       	movw	r30, r24
    1804:	e4 57       	subi	r30, 0x74	; 116
    1806:	fe 4f       	sbci	r31, 0xFE	; 254
    1808:	80 81       	ld	r24, Z
    180a:	89 8b       	std	Y+17, r24	; 0x11
				while(DIO_VidGetPinValue(COLS_ROWSPORT,col+ROWSHIFT)==0);
    180c:	88 89       	ldd	r24, Y+16	; 0x10
    180e:	98 2f       	mov	r25, r24
    1810:	9c 5f       	subi	r25, 0xFC	; 252
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	69 2f       	mov	r22, r25
    1816:	0e 94 75 09 	call	0x12ea	; 0x12ea <DIO_VidGetPinValue>
    181a:	88 23       	and	r24, r24
    181c:	b9 f3       	breq	.-18     	; 0x180c <Keypad_U8ReadPin+0x8e>
    181e:	80 e0       	ldi	r24, 0x00	; 0
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	a0 e2       	ldi	r26, 0x20	; 32
    1824:	b1 e4       	ldi	r27, 0x41	; 65
    1826:	8b 87       	std	Y+11, r24	; 0x0b
    1828:	9c 87       	std	Y+12, r25	; 0x0c
    182a:	ad 87       	std	Y+13, r26	; 0x0d
    182c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    182e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1830:	7c 85       	ldd	r23, Y+12	; 0x0c
    1832:	8d 85       	ldd	r24, Y+13	; 0x0d
    1834:	9e 85       	ldd	r25, Y+14	; 0x0e
    1836:	20 e0       	ldi	r18, 0x00	; 0
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	4a ef       	ldi	r20, 0xFA	; 250
    183c:	54 e4       	ldi	r21, 0x44	; 68
    183e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1842:	dc 01       	movw	r26, r24
    1844:	cb 01       	movw	r24, r22
    1846:	8f 83       	std	Y+7, r24	; 0x07
    1848:	98 87       	std	Y+8, r25	; 0x08
    184a:	a9 87       	std	Y+9, r26	; 0x09
    184c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    184e:	6f 81       	ldd	r22, Y+7	; 0x07
    1850:	78 85       	ldd	r23, Y+8	; 0x08
    1852:	89 85       	ldd	r24, Y+9	; 0x09
    1854:	9a 85       	ldd	r25, Y+10	; 0x0a
    1856:	20 e0       	ldi	r18, 0x00	; 0
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	40 e8       	ldi	r20, 0x80	; 128
    185c:	5f e3       	ldi	r21, 0x3F	; 63
    185e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1862:	88 23       	and	r24, r24
    1864:	2c f4       	brge	.+10     	; 0x1870 <Keypad_U8ReadPin+0xf2>
		__ticks = 1;
    1866:	81 e0       	ldi	r24, 0x01	; 1
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	9e 83       	std	Y+6, r25	; 0x06
    186c:	8d 83       	std	Y+5, r24	; 0x05
    186e:	3f c0       	rjmp	.+126    	; 0x18ee <Keypad_U8ReadPin+0x170>
	else if (__tmp > 65535)
    1870:	6f 81       	ldd	r22, Y+7	; 0x07
    1872:	78 85       	ldd	r23, Y+8	; 0x08
    1874:	89 85       	ldd	r24, Y+9	; 0x09
    1876:	9a 85       	ldd	r25, Y+10	; 0x0a
    1878:	20 e0       	ldi	r18, 0x00	; 0
    187a:	3f ef       	ldi	r19, 0xFF	; 255
    187c:	4f e7       	ldi	r20, 0x7F	; 127
    187e:	57 e4       	ldi	r21, 0x47	; 71
    1880:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1884:	18 16       	cp	r1, r24
    1886:	4c f5       	brge	.+82     	; 0x18da <Keypad_U8ReadPin+0x15c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1888:	6b 85       	ldd	r22, Y+11	; 0x0b
    188a:	7c 85       	ldd	r23, Y+12	; 0x0c
    188c:	8d 85       	ldd	r24, Y+13	; 0x0d
    188e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1890:	20 e0       	ldi	r18, 0x00	; 0
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	40 e2       	ldi	r20, 0x20	; 32
    1896:	51 e4       	ldi	r21, 0x41	; 65
    1898:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    189c:	dc 01       	movw	r26, r24
    189e:	cb 01       	movw	r24, r22
    18a0:	bc 01       	movw	r22, r24
    18a2:	cd 01       	movw	r24, r26
    18a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18a8:	dc 01       	movw	r26, r24
    18aa:	cb 01       	movw	r24, r22
    18ac:	9e 83       	std	Y+6, r25	; 0x06
    18ae:	8d 83       	std	Y+5, r24	; 0x05
    18b0:	0f c0       	rjmp	.+30     	; 0x18d0 <Keypad_U8ReadPin+0x152>
    18b2:	88 ec       	ldi	r24, 0xC8	; 200
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	9c 83       	std	Y+4, r25	; 0x04
    18b8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18ba:	8b 81       	ldd	r24, Y+3	; 0x03
    18bc:	9c 81       	ldd	r25, Y+4	; 0x04
    18be:	01 97       	sbiw	r24, 0x01	; 1
    18c0:	f1 f7       	brne	.-4      	; 0x18be <Keypad_U8ReadPin+0x140>
    18c2:	9c 83       	std	Y+4, r25	; 0x04
    18c4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18c6:	8d 81       	ldd	r24, Y+5	; 0x05
    18c8:	9e 81       	ldd	r25, Y+6	; 0x06
    18ca:	01 97       	sbiw	r24, 0x01	; 1
    18cc:	9e 83       	std	Y+6, r25	; 0x06
    18ce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18d0:	8d 81       	ldd	r24, Y+5	; 0x05
    18d2:	9e 81       	ldd	r25, Y+6	; 0x06
    18d4:	00 97       	sbiw	r24, 0x00	; 0
    18d6:	69 f7       	brne	.-38     	; 0x18b2 <Keypad_U8ReadPin+0x134>
    18d8:	14 c0       	rjmp	.+40     	; 0x1902 <Keypad_U8ReadPin+0x184>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18da:	6f 81       	ldd	r22, Y+7	; 0x07
    18dc:	78 85       	ldd	r23, Y+8	; 0x08
    18de:	89 85       	ldd	r24, Y+9	; 0x09
    18e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    18e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18e6:	dc 01       	movw	r26, r24
    18e8:	cb 01       	movw	r24, r22
    18ea:	9e 83       	std	Y+6, r25	; 0x06
    18ec:	8d 83       	std	Y+5, r24	; 0x05
    18ee:	8d 81       	ldd	r24, Y+5	; 0x05
    18f0:	9e 81       	ldd	r25, Y+6	; 0x06
    18f2:	9a 83       	std	Y+2, r25	; 0x02
    18f4:	89 83       	std	Y+1, r24	; 0x01
    18f6:	89 81       	ldd	r24, Y+1	; 0x01
    18f8:	9a 81       	ldd	r25, Y+2	; 0x02
    18fa:	01 97       	sbiw	r24, 0x01	; 1
    18fc:	f1 f7       	brne	.-4      	; 0x18fa <Keypad_U8ReadPin+0x17c>
    18fe:	9a 83       	std	Y+2, r25	; 0x02
    1900:	89 83       	std	Y+1, r24	; 0x01

	for(row=0;row<=3;row++)
	{
		DIO_VidSetPinValue(COLS_ROWSPORT,row,LOW);

		for(col=0;col<=3;col++)
    1902:	88 89       	ldd	r24, Y+16	; 0x10
    1904:	8f 5f       	subi	r24, 0xFF	; 255
    1906:	88 8b       	std	Y+16, r24	; 0x10
    1908:	88 89       	ldd	r24, Y+16	; 0x10
    190a:	84 30       	cpi	r24, 0x04	; 4
    190c:	08 f4       	brcc	.+2      	; 0x1910 <Keypad_U8ReadPin+0x192>
    190e:	62 cf       	rjmp	.-316    	; 0x17d4 <Keypad_U8ReadPin+0x56>
				pressdkey=	array_keypad[row][col];
				while(DIO_VidGetPinValue(COLS_ROWSPORT,col+ROWSHIFT)==0);
				_delay_ms(10);
			}
		}
		DIO_VidSetPinValue(COLS_ROWSPORT,row,HIGH);
    1910:	81 e0       	ldi	r24, 0x01	; 1
    1912:	6f 85       	ldd	r22, Y+15	; 0x0f
    1914:	41 e0       	ldi	r20, 0x01	; 1
    1916:	0e 94 75 08 	call	0x10ea	; 0x10ea <DIO_VidSetPinValue>
  	DIO_VidSetPinValue(COLS_ROWSPORT,ROW3 ,HIGH);

	u8 pressdkey=DEFAULT_KEY;
	u8 col=0,row=0;

	for(row=0;row<=3;row++)
    191a:	8f 85       	ldd	r24, Y+15	; 0x0f
    191c:	8f 5f       	subi	r24, 0xFF	; 255
    191e:	8f 87       	std	Y+15, r24	; 0x0f
    1920:	8f 85       	ldd	r24, Y+15	; 0x0f
    1922:	84 30       	cpi	r24, 0x04	; 4
    1924:	08 f4       	brcc	.+2      	; 0x1928 <Keypad_U8ReadPin+0x1aa>
    1926:	4f cf       	rjmp	.-354    	; 0x17c6 <Keypad_U8ReadPin+0x48>
			}
		}
		DIO_VidSetPinValue(COLS_ROWSPORT,row,HIGH);
	}

return pressdkey;
    1928:	89 89       	ldd	r24, Y+17	; 0x11
	
}
    192a:	61 96       	adiw	r28, 0x11	; 17
    192c:	0f b6       	in	r0, 0x3f	; 63
    192e:	f8 94       	cli
    1930:	de bf       	out	0x3e, r29	; 62
    1932:	0f be       	out	0x3f, r0	; 63
    1934:	cd bf       	out	0x3d, r28	; 61
    1936:	cf 91       	pop	r28
    1938:	df 91       	pop	r29
    193a:	08 95       	ret

0000193c <Keypad_U8ReadPin1>:

u8 Keypad_U8ReadPin1(void)
{
    193c:	df 93       	push	r29
    193e:	cf 93       	push	r28
    1940:	cd b7       	in	r28, 0x3d	; 61
    1942:	de b7       	in	r29, 0x3e	; 62
    1944:	ea 97       	sbiw	r28, 0x3a	; 58
    1946:	0f b6       	in	r0, 0x3f	; 63
    1948:	f8 94       	cli
    194a:	de bf       	out	0x3e, r29	; 62
    194c:	0f be       	out	0x3f, r0	; 63
    194e:	cd bf       	out	0x3d, r28	; 61
	u8 row, pressdkey=0;
    1950:	19 ae       	std	Y+57, r1	; 0x39
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS0,LOW);
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	60 e0       	ldi	r22, 0x00	; 0
    1956:	40 e0       	ldi	r20, 0x00	; 0
    1958:	0e 94 75 08 	call	0x10ea	; 0x10ea <DIO_VidSetPinValue>
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS1,HIGH);
    195c:	81 e0       	ldi	r24, 0x01	; 1
    195e:	61 e0       	ldi	r22, 0x01	; 1
    1960:	41 e0       	ldi	r20, 0x01	; 1
    1962:	0e 94 75 08 	call	0x10ea	; 0x10ea <DIO_VidSetPinValue>
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS2,HIGH);
    1966:	81 e0       	ldi	r24, 0x01	; 1
    1968:	62 e0       	ldi	r22, 0x02	; 2
    196a:	41 e0       	ldi	r20, 0x01	; 1
    196c:	0e 94 75 08 	call	0x10ea	; 0x10ea <DIO_VidSetPinValue>
  	DIO_VidSetPinValue(COLS_ROWSPORT,COLS3,HIGH);
    1970:	81 e0       	ldi	r24, 0x01	; 1
    1972:	63 e0       	ldi	r22, 0x03	; 3
    1974:	41 e0       	ldi	r20, 0x01	; 1
    1976:	0e 94 75 08 	call	0x10ea	; 0x10ea <DIO_VidSetPinValue>
	for(row=4;row<=7;row++)
    197a:	84 e0       	ldi	r24, 0x04	; 4
    197c:	8a af       	std	Y+58, r24	; 0x3a
    197e:	8d c0       	rjmp	.+282    	; 0x1a9a <Keypad_U8ReadPin1+0x15e>
	{
		if(DIO_VidGetPinValue(COLS_ROWSPORT,row)==0)
    1980:	81 e0       	ldi	r24, 0x01	; 1
    1982:	6a ad       	ldd	r22, Y+58	; 0x3a
    1984:	0e 94 75 09 	call	0x12ea	; 0x12ea <DIO_VidGetPinValue>
    1988:	88 23       	and	r24, r24
    198a:	61 f4       	brne	.+24     	; 0x19a4 <Keypad_U8ReadPin1+0x68>
		{
			pressdkey=	array_keypad[row][COLS0];
    198c:	8a ad       	ldd	r24, Y+58	; 0x3a
    198e:	88 2f       	mov	r24, r24
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	88 0f       	add	r24, r24
    1994:	99 1f       	adc	r25, r25
    1996:	88 0f       	add	r24, r24
    1998:	99 1f       	adc	r25, r25
    199a:	fc 01       	movw	r30, r24
    199c:	e4 57       	subi	r30, 0x74	; 116
    199e:	fe 4f       	sbci	r31, 0xFE	; 254
    19a0:	80 81       	ld	r24, Z
    19a2:	89 af       	std	Y+57, r24	; 0x39
		}
		while(DIO_VidGetPinValue(COLS_ROWSPORT,row)==0);
    19a4:	81 e0       	ldi	r24, 0x01	; 1
    19a6:	6a ad       	ldd	r22, Y+58	; 0x3a
    19a8:	0e 94 75 09 	call	0x12ea	; 0x12ea <DIO_VidGetPinValue>
    19ac:	88 23       	and	r24, r24
    19ae:	d1 f3       	breq	.-12     	; 0x19a4 <Keypad_U8ReadPin1+0x68>
    19b0:	80 e0       	ldi	r24, 0x00	; 0
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	a0 ea       	ldi	r26, 0xA0	; 160
    19b6:	b0 e4       	ldi	r27, 0x40	; 64
    19b8:	8d ab       	std	Y+53, r24	; 0x35
    19ba:	9e ab       	std	Y+54, r25	; 0x36
    19bc:	af ab       	std	Y+55, r26	; 0x37
    19be:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19c0:	6d a9       	ldd	r22, Y+53	; 0x35
    19c2:	7e a9       	ldd	r23, Y+54	; 0x36
    19c4:	8f a9       	ldd	r24, Y+55	; 0x37
    19c6:	98 ad       	ldd	r25, Y+56	; 0x38
    19c8:	20 e0       	ldi	r18, 0x00	; 0
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	4a ef       	ldi	r20, 0xFA	; 250
    19ce:	54 e4       	ldi	r21, 0x44	; 68
    19d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19d4:	dc 01       	movw	r26, r24
    19d6:	cb 01       	movw	r24, r22
    19d8:	89 ab       	std	Y+49, r24	; 0x31
    19da:	9a ab       	std	Y+50, r25	; 0x32
    19dc:	ab ab       	std	Y+51, r26	; 0x33
    19de:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    19e0:	69 a9       	ldd	r22, Y+49	; 0x31
    19e2:	7a a9       	ldd	r23, Y+50	; 0x32
    19e4:	8b a9       	ldd	r24, Y+51	; 0x33
    19e6:	9c a9       	ldd	r25, Y+52	; 0x34
    19e8:	20 e0       	ldi	r18, 0x00	; 0
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	40 e8       	ldi	r20, 0x80	; 128
    19ee:	5f e3       	ldi	r21, 0x3F	; 63
    19f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19f4:	88 23       	and	r24, r24
    19f6:	2c f4       	brge	.+10     	; 0x1a02 <Keypad_U8ReadPin1+0xc6>
		__ticks = 1;
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	98 ab       	std	Y+48, r25	; 0x30
    19fe:	8f a7       	std	Y+47, r24	; 0x2f
    1a00:	3f c0       	rjmp	.+126    	; 0x1a80 <Keypad_U8ReadPin1+0x144>
	else if (__tmp > 65535)
    1a02:	69 a9       	ldd	r22, Y+49	; 0x31
    1a04:	7a a9       	ldd	r23, Y+50	; 0x32
    1a06:	8b a9       	ldd	r24, Y+51	; 0x33
    1a08:	9c a9       	ldd	r25, Y+52	; 0x34
    1a0a:	20 e0       	ldi	r18, 0x00	; 0
    1a0c:	3f ef       	ldi	r19, 0xFF	; 255
    1a0e:	4f e7       	ldi	r20, 0x7F	; 127
    1a10:	57 e4       	ldi	r21, 0x47	; 71
    1a12:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a16:	18 16       	cp	r1, r24
    1a18:	4c f5       	brge	.+82     	; 0x1a6c <Keypad_U8ReadPin1+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a1a:	6d a9       	ldd	r22, Y+53	; 0x35
    1a1c:	7e a9       	ldd	r23, Y+54	; 0x36
    1a1e:	8f a9       	ldd	r24, Y+55	; 0x37
    1a20:	98 ad       	ldd	r25, Y+56	; 0x38
    1a22:	20 e0       	ldi	r18, 0x00	; 0
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	40 e2       	ldi	r20, 0x20	; 32
    1a28:	51 e4       	ldi	r21, 0x41	; 65
    1a2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a2e:	dc 01       	movw	r26, r24
    1a30:	cb 01       	movw	r24, r22
    1a32:	bc 01       	movw	r22, r24
    1a34:	cd 01       	movw	r24, r26
    1a36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a3a:	dc 01       	movw	r26, r24
    1a3c:	cb 01       	movw	r24, r22
    1a3e:	98 ab       	std	Y+48, r25	; 0x30
    1a40:	8f a7       	std	Y+47, r24	; 0x2f
    1a42:	0f c0       	rjmp	.+30     	; 0x1a62 <Keypad_U8ReadPin1+0x126>
    1a44:	88 ec       	ldi	r24, 0xC8	; 200
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	9e a7       	std	Y+46, r25	; 0x2e
    1a4a:	8d a7       	std	Y+45, r24	; 0x2d
    1a4c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a4e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a50:	01 97       	sbiw	r24, 0x01	; 1
    1a52:	f1 f7       	brne	.-4      	; 0x1a50 <Keypad_U8ReadPin1+0x114>
    1a54:	9e a7       	std	Y+46, r25	; 0x2e
    1a56:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a58:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a5a:	98 a9       	ldd	r25, Y+48	; 0x30
    1a5c:	01 97       	sbiw	r24, 0x01	; 1
    1a5e:	98 ab       	std	Y+48, r25	; 0x30
    1a60:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a62:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a64:	98 a9       	ldd	r25, Y+48	; 0x30
    1a66:	00 97       	sbiw	r24, 0x00	; 0
    1a68:	69 f7       	brne	.-38     	; 0x1a44 <Keypad_U8ReadPin1+0x108>
    1a6a:	14 c0       	rjmp	.+40     	; 0x1a94 <Keypad_U8ReadPin1+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a6c:	69 a9       	ldd	r22, Y+49	; 0x31
    1a6e:	7a a9       	ldd	r23, Y+50	; 0x32
    1a70:	8b a9       	ldd	r24, Y+51	; 0x33
    1a72:	9c a9       	ldd	r25, Y+52	; 0x34
    1a74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a78:	dc 01       	movw	r26, r24
    1a7a:	cb 01       	movw	r24, r22
    1a7c:	98 ab       	std	Y+48, r25	; 0x30
    1a7e:	8f a7       	std	Y+47, r24	; 0x2f
    1a80:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a82:	98 a9       	ldd	r25, Y+48	; 0x30
    1a84:	9c a7       	std	Y+44, r25	; 0x2c
    1a86:	8b a7       	std	Y+43, r24	; 0x2b
    1a88:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a8a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a8c:	01 97       	sbiw	r24, 0x01	; 1
    1a8e:	f1 f7       	brne	.-4      	; 0x1a8c <Keypad_U8ReadPin1+0x150>
    1a90:	9c a7       	std	Y+44, r25	; 0x2c
    1a92:	8b a7       	std	Y+43, r24	; 0x2b
	u8 row, pressdkey=0;
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS0,LOW);
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS1,HIGH);
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS2,HIGH);
  	DIO_VidSetPinValue(COLS_ROWSPORT,COLS3,HIGH);
	for(row=4;row<=7;row++)
    1a94:	8a ad       	ldd	r24, Y+58	; 0x3a
    1a96:	8f 5f       	subi	r24, 0xFF	; 255
    1a98:	8a af       	std	Y+58, r24	; 0x3a
    1a9a:	8a ad       	ldd	r24, Y+58	; 0x3a
    1a9c:	88 30       	cpi	r24, 0x08	; 8
    1a9e:	08 f4       	brcc	.+2      	; 0x1aa2 <Keypad_U8ReadPin1+0x166>
    1aa0:	6f cf       	rjmp	.-290    	; 0x1980 <Keypad_U8ReadPin1+0x44>
			pressdkey=	array_keypad[row][COLS0];
		}
		while(DIO_VidGetPinValue(COLS_ROWSPORT,row)==0);
		_delay_ms(5);
	}
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS0,HIGH);
    1aa2:	81 e0       	ldi	r24, 0x01	; 1
    1aa4:	60 e0       	ldi	r22, 0x00	; 0
    1aa6:	41 e0       	ldi	r20, 0x01	; 1
    1aa8:	0e 94 75 08 	call	0x10ea	; 0x10ea <DIO_VidSetPinValue>
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS1,LOW );
    1aac:	81 e0       	ldi	r24, 0x01	; 1
    1aae:	61 e0       	ldi	r22, 0x01	; 1
    1ab0:	40 e0       	ldi	r20, 0x00	; 0
    1ab2:	0e 94 75 08 	call	0x10ea	; 0x10ea <DIO_VidSetPinValue>
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS2,HIGH);
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	62 e0       	ldi	r22, 0x02	; 2
    1aba:	41 e0       	ldi	r20, 0x01	; 1
    1abc:	0e 94 75 08 	call	0x10ea	; 0x10ea <DIO_VidSetPinValue>
  	DIO_VidSetPinValue(COLS_ROWSPORT,COLS3,HIGH);
    1ac0:	81 e0       	ldi	r24, 0x01	; 1
    1ac2:	63 e0       	ldi	r22, 0x03	; 3
    1ac4:	41 e0       	ldi	r20, 0x01	; 1
    1ac6:	0e 94 75 08 	call	0x10ea	; 0x10ea <DIO_VidSetPinValue>
	for(row=4;row<=7;row++)
    1aca:	84 e0       	ldi	r24, 0x04	; 4
    1acc:	8a af       	std	Y+58, r24	; 0x3a
    1ace:	8d c0       	rjmp	.+282    	; 0x1bea <Keypad_U8ReadPin1+0x2ae>
	{
		if(DIO_VidGetPinValue(COLS_ROWSPORT,row)==0)
    1ad0:	81 e0       	ldi	r24, 0x01	; 1
    1ad2:	6a ad       	ldd	r22, Y+58	; 0x3a
    1ad4:	0e 94 75 09 	call	0x12ea	; 0x12ea <DIO_VidGetPinValue>
    1ad8:	88 23       	and	r24, r24
    1ada:	61 f4       	brne	.+24     	; 0x1af4 <Keypad_U8ReadPin1+0x1b8>
		{
			pressdkey=	array_keypad[row][COLS1];
    1adc:	8a ad       	ldd	r24, Y+58	; 0x3a
    1ade:	88 2f       	mov	r24, r24
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	88 0f       	add	r24, r24
    1ae4:	99 1f       	adc	r25, r25
    1ae6:	88 0f       	add	r24, r24
    1ae8:	99 1f       	adc	r25, r25
    1aea:	fc 01       	movw	r30, r24
    1aec:	e3 57       	subi	r30, 0x73	; 115
    1aee:	fe 4f       	sbci	r31, 0xFE	; 254
    1af0:	80 81       	ld	r24, Z
    1af2:	89 af       	std	Y+57, r24	; 0x39
		}
		while(DIO_VidGetPinValue(COLS_ROWSPORT,row)==0);
    1af4:	81 e0       	ldi	r24, 0x01	; 1
    1af6:	6a ad       	ldd	r22, Y+58	; 0x3a
    1af8:	0e 94 75 09 	call	0x12ea	; 0x12ea <DIO_VidGetPinValue>
    1afc:	88 23       	and	r24, r24
    1afe:	d1 f3       	breq	.-12     	; 0x1af4 <Keypad_U8ReadPin1+0x1b8>
    1b00:	80 e0       	ldi	r24, 0x00	; 0
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	a0 ea       	ldi	r26, 0xA0	; 160
    1b06:	b0 e4       	ldi	r27, 0x40	; 64
    1b08:	8f a3       	std	Y+39, r24	; 0x27
    1b0a:	98 a7       	std	Y+40, r25	; 0x28
    1b0c:	a9 a7       	std	Y+41, r26	; 0x29
    1b0e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b10:	6f a1       	ldd	r22, Y+39	; 0x27
    1b12:	78 a5       	ldd	r23, Y+40	; 0x28
    1b14:	89 a5       	ldd	r24, Y+41	; 0x29
    1b16:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b18:	20 e0       	ldi	r18, 0x00	; 0
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	4a ef       	ldi	r20, 0xFA	; 250
    1b1e:	54 e4       	ldi	r21, 0x44	; 68
    1b20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b24:	dc 01       	movw	r26, r24
    1b26:	cb 01       	movw	r24, r22
    1b28:	8b a3       	std	Y+35, r24	; 0x23
    1b2a:	9c a3       	std	Y+36, r25	; 0x24
    1b2c:	ad a3       	std	Y+37, r26	; 0x25
    1b2e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b30:	6b a1       	ldd	r22, Y+35	; 0x23
    1b32:	7c a1       	ldd	r23, Y+36	; 0x24
    1b34:	8d a1       	ldd	r24, Y+37	; 0x25
    1b36:	9e a1       	ldd	r25, Y+38	; 0x26
    1b38:	20 e0       	ldi	r18, 0x00	; 0
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	40 e8       	ldi	r20, 0x80	; 128
    1b3e:	5f e3       	ldi	r21, 0x3F	; 63
    1b40:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b44:	88 23       	and	r24, r24
    1b46:	2c f4       	brge	.+10     	; 0x1b52 <Keypad_U8ReadPin1+0x216>
		__ticks = 1;
    1b48:	81 e0       	ldi	r24, 0x01	; 1
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	9a a3       	std	Y+34, r25	; 0x22
    1b4e:	89 a3       	std	Y+33, r24	; 0x21
    1b50:	3f c0       	rjmp	.+126    	; 0x1bd0 <Keypad_U8ReadPin1+0x294>
	else if (__tmp > 65535)
    1b52:	6b a1       	ldd	r22, Y+35	; 0x23
    1b54:	7c a1       	ldd	r23, Y+36	; 0x24
    1b56:	8d a1       	ldd	r24, Y+37	; 0x25
    1b58:	9e a1       	ldd	r25, Y+38	; 0x26
    1b5a:	20 e0       	ldi	r18, 0x00	; 0
    1b5c:	3f ef       	ldi	r19, 0xFF	; 255
    1b5e:	4f e7       	ldi	r20, 0x7F	; 127
    1b60:	57 e4       	ldi	r21, 0x47	; 71
    1b62:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b66:	18 16       	cp	r1, r24
    1b68:	4c f5       	brge	.+82     	; 0x1bbc <Keypad_U8ReadPin1+0x280>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b6a:	6f a1       	ldd	r22, Y+39	; 0x27
    1b6c:	78 a5       	ldd	r23, Y+40	; 0x28
    1b6e:	89 a5       	ldd	r24, Y+41	; 0x29
    1b70:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b72:	20 e0       	ldi	r18, 0x00	; 0
    1b74:	30 e0       	ldi	r19, 0x00	; 0
    1b76:	40 e2       	ldi	r20, 0x20	; 32
    1b78:	51 e4       	ldi	r21, 0x41	; 65
    1b7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b7e:	dc 01       	movw	r26, r24
    1b80:	cb 01       	movw	r24, r22
    1b82:	bc 01       	movw	r22, r24
    1b84:	cd 01       	movw	r24, r26
    1b86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b8a:	dc 01       	movw	r26, r24
    1b8c:	cb 01       	movw	r24, r22
    1b8e:	9a a3       	std	Y+34, r25	; 0x22
    1b90:	89 a3       	std	Y+33, r24	; 0x21
    1b92:	0f c0       	rjmp	.+30     	; 0x1bb2 <Keypad_U8ReadPin1+0x276>
    1b94:	88 ec       	ldi	r24, 0xC8	; 200
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	98 a3       	std	Y+32, r25	; 0x20
    1b9a:	8f 8f       	std	Y+31, r24	; 0x1f
    1b9c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b9e:	98 a1       	ldd	r25, Y+32	; 0x20
    1ba0:	01 97       	sbiw	r24, 0x01	; 1
    1ba2:	f1 f7       	brne	.-4      	; 0x1ba0 <Keypad_U8ReadPin1+0x264>
    1ba4:	98 a3       	std	Y+32, r25	; 0x20
    1ba6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ba8:	89 a1       	ldd	r24, Y+33	; 0x21
    1baa:	9a a1       	ldd	r25, Y+34	; 0x22
    1bac:	01 97       	sbiw	r24, 0x01	; 1
    1bae:	9a a3       	std	Y+34, r25	; 0x22
    1bb0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bb2:	89 a1       	ldd	r24, Y+33	; 0x21
    1bb4:	9a a1       	ldd	r25, Y+34	; 0x22
    1bb6:	00 97       	sbiw	r24, 0x00	; 0
    1bb8:	69 f7       	brne	.-38     	; 0x1b94 <Keypad_U8ReadPin1+0x258>
    1bba:	14 c0       	rjmp	.+40     	; 0x1be4 <Keypad_U8ReadPin1+0x2a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bbc:	6b a1       	ldd	r22, Y+35	; 0x23
    1bbe:	7c a1       	ldd	r23, Y+36	; 0x24
    1bc0:	8d a1       	ldd	r24, Y+37	; 0x25
    1bc2:	9e a1       	ldd	r25, Y+38	; 0x26
    1bc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bc8:	dc 01       	movw	r26, r24
    1bca:	cb 01       	movw	r24, r22
    1bcc:	9a a3       	std	Y+34, r25	; 0x22
    1bce:	89 a3       	std	Y+33, r24	; 0x21
    1bd0:	89 a1       	ldd	r24, Y+33	; 0x21
    1bd2:	9a a1       	ldd	r25, Y+34	; 0x22
    1bd4:	9e 8f       	std	Y+30, r25	; 0x1e
    1bd6:	8d 8f       	std	Y+29, r24	; 0x1d
    1bd8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bda:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1bdc:	01 97       	sbiw	r24, 0x01	; 1
    1bde:	f1 f7       	brne	.-4      	; 0x1bdc <Keypad_U8ReadPin1+0x2a0>
    1be0:	9e 8f       	std	Y+30, r25	; 0x1e
    1be2:	8d 8f       	std	Y+29, r24	; 0x1d
	}
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS0,HIGH);
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS1,LOW );
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS2,HIGH);
  	DIO_VidSetPinValue(COLS_ROWSPORT,COLS3,HIGH);
	for(row=4;row<=7;row++)
    1be4:	8a ad       	ldd	r24, Y+58	; 0x3a
    1be6:	8f 5f       	subi	r24, 0xFF	; 255
    1be8:	8a af       	std	Y+58, r24	; 0x3a
    1bea:	8a ad       	ldd	r24, Y+58	; 0x3a
    1bec:	88 30       	cpi	r24, 0x08	; 8
    1bee:	08 f4       	brcc	.+2      	; 0x1bf2 <Keypad_U8ReadPin1+0x2b6>
    1bf0:	6f cf       	rjmp	.-290    	; 0x1ad0 <Keypad_U8ReadPin1+0x194>
			pressdkey=	array_keypad[row][COLS1];
		}
		while(DIO_VidGetPinValue(COLS_ROWSPORT,row)==0);
		_delay_ms(5);
	}
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS0,HIGH);
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	60 e0       	ldi	r22, 0x00	; 0
    1bf6:	41 e0       	ldi	r20, 0x01	; 1
    1bf8:	0e 94 75 08 	call	0x10ea	; 0x10ea <DIO_VidSetPinValue>
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS1,HIGH);
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	61 e0       	ldi	r22, 0x01	; 1
    1c00:	41 e0       	ldi	r20, 0x01	; 1
    1c02:	0e 94 75 08 	call	0x10ea	; 0x10ea <DIO_VidSetPinValue>
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS2,LOW );
    1c06:	81 e0       	ldi	r24, 0x01	; 1
    1c08:	62 e0       	ldi	r22, 0x02	; 2
    1c0a:	40 e0       	ldi	r20, 0x00	; 0
    1c0c:	0e 94 75 08 	call	0x10ea	; 0x10ea <DIO_VidSetPinValue>
  	DIO_VidSetPinValue(COLS_ROWSPORT,COLS3,HIGH);
    1c10:	81 e0       	ldi	r24, 0x01	; 1
    1c12:	63 e0       	ldi	r22, 0x03	; 3
    1c14:	41 e0       	ldi	r20, 0x01	; 1
    1c16:	0e 94 75 08 	call	0x10ea	; 0x10ea <DIO_VidSetPinValue>
	for(row=4;row<=7;row++)
    1c1a:	84 e0       	ldi	r24, 0x04	; 4
    1c1c:	8a af       	std	Y+58, r24	; 0x3a
    1c1e:	8e c0       	rjmp	.+284    	; 0x1d3c <Keypad_U8ReadPin1+0x400>
	{
		if(DIO_VidGetPinValue(COLS_ROWSPORT,row)==0)
    1c20:	81 e0       	ldi	r24, 0x01	; 1
    1c22:	6a ad       	ldd	r22, Y+58	; 0x3a
    1c24:	0e 94 75 09 	call	0x12ea	; 0x12ea <DIO_VidGetPinValue>
    1c28:	88 23       	and	r24, r24
    1c2a:	69 f4       	brne	.+26     	; 0x1c46 <Keypad_U8ReadPin1+0x30a>
		{
			pressdkey=	array_keypad[row][COLS2];
    1c2c:	8a ad       	ldd	r24, Y+58	; 0x3a
    1c2e:	88 2f       	mov	r24, r24
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	88 0f       	add	r24, r24
    1c34:	99 1f       	adc	r25, r25
    1c36:	01 96       	adiw	r24, 0x01	; 1
    1c38:	88 0f       	add	r24, r24
    1c3a:	99 1f       	adc	r25, r25
    1c3c:	fc 01       	movw	r30, r24
    1c3e:	e4 57       	subi	r30, 0x74	; 116
    1c40:	fe 4f       	sbci	r31, 0xFE	; 254
    1c42:	80 81       	ld	r24, Z
    1c44:	89 af       	std	Y+57, r24	; 0x39
		}
		while(DIO_VidGetPinValue(COLS_ROWSPORT,row)==0);
    1c46:	81 e0       	ldi	r24, 0x01	; 1
    1c48:	6a ad       	ldd	r22, Y+58	; 0x3a
    1c4a:	0e 94 75 09 	call	0x12ea	; 0x12ea <DIO_VidGetPinValue>
    1c4e:	88 23       	and	r24, r24
    1c50:	d1 f3       	breq	.-12     	; 0x1c46 <Keypad_U8ReadPin1+0x30a>
    1c52:	80 e0       	ldi	r24, 0x00	; 0
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	a0 ea       	ldi	r26, 0xA0	; 160
    1c58:	b0 e4       	ldi	r27, 0x40	; 64
    1c5a:	89 8f       	std	Y+25, r24	; 0x19
    1c5c:	9a 8f       	std	Y+26, r25	; 0x1a
    1c5e:	ab 8f       	std	Y+27, r26	; 0x1b
    1c60:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c62:	69 8d       	ldd	r22, Y+25	; 0x19
    1c64:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c66:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c68:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c6a:	20 e0       	ldi	r18, 0x00	; 0
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	4a ef       	ldi	r20, 0xFA	; 250
    1c70:	54 e4       	ldi	r21, 0x44	; 68
    1c72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c76:	dc 01       	movw	r26, r24
    1c78:	cb 01       	movw	r24, r22
    1c7a:	8d 8b       	std	Y+21, r24	; 0x15
    1c7c:	9e 8b       	std	Y+22, r25	; 0x16
    1c7e:	af 8b       	std	Y+23, r26	; 0x17
    1c80:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c82:	6d 89       	ldd	r22, Y+21	; 0x15
    1c84:	7e 89       	ldd	r23, Y+22	; 0x16
    1c86:	8f 89       	ldd	r24, Y+23	; 0x17
    1c88:	98 8d       	ldd	r25, Y+24	; 0x18
    1c8a:	20 e0       	ldi	r18, 0x00	; 0
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	40 e8       	ldi	r20, 0x80	; 128
    1c90:	5f e3       	ldi	r21, 0x3F	; 63
    1c92:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c96:	88 23       	and	r24, r24
    1c98:	2c f4       	brge	.+10     	; 0x1ca4 <Keypad_U8ReadPin1+0x368>
		__ticks = 1;
    1c9a:	81 e0       	ldi	r24, 0x01	; 1
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	9c 8b       	std	Y+20, r25	; 0x14
    1ca0:	8b 8b       	std	Y+19, r24	; 0x13
    1ca2:	3f c0       	rjmp	.+126    	; 0x1d22 <Keypad_U8ReadPin1+0x3e6>
	else if (__tmp > 65535)
    1ca4:	6d 89       	ldd	r22, Y+21	; 0x15
    1ca6:	7e 89       	ldd	r23, Y+22	; 0x16
    1ca8:	8f 89       	ldd	r24, Y+23	; 0x17
    1caa:	98 8d       	ldd	r25, Y+24	; 0x18
    1cac:	20 e0       	ldi	r18, 0x00	; 0
    1cae:	3f ef       	ldi	r19, 0xFF	; 255
    1cb0:	4f e7       	ldi	r20, 0x7F	; 127
    1cb2:	57 e4       	ldi	r21, 0x47	; 71
    1cb4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cb8:	18 16       	cp	r1, r24
    1cba:	4c f5       	brge	.+82     	; 0x1d0e <Keypad_U8ReadPin1+0x3d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cbc:	69 8d       	ldd	r22, Y+25	; 0x19
    1cbe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cc0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cc2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cc4:	20 e0       	ldi	r18, 0x00	; 0
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	40 e2       	ldi	r20, 0x20	; 32
    1cca:	51 e4       	ldi	r21, 0x41	; 65
    1ccc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd0:	dc 01       	movw	r26, r24
    1cd2:	cb 01       	movw	r24, r22
    1cd4:	bc 01       	movw	r22, r24
    1cd6:	cd 01       	movw	r24, r26
    1cd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cdc:	dc 01       	movw	r26, r24
    1cde:	cb 01       	movw	r24, r22
    1ce0:	9c 8b       	std	Y+20, r25	; 0x14
    1ce2:	8b 8b       	std	Y+19, r24	; 0x13
    1ce4:	0f c0       	rjmp	.+30     	; 0x1d04 <Keypad_U8ReadPin1+0x3c8>
    1ce6:	88 ec       	ldi	r24, 0xC8	; 200
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	9a 8b       	std	Y+18, r25	; 0x12
    1cec:	89 8b       	std	Y+17, r24	; 0x11
    1cee:	89 89       	ldd	r24, Y+17	; 0x11
    1cf0:	9a 89       	ldd	r25, Y+18	; 0x12
    1cf2:	01 97       	sbiw	r24, 0x01	; 1
    1cf4:	f1 f7       	brne	.-4      	; 0x1cf2 <Keypad_U8ReadPin1+0x3b6>
    1cf6:	9a 8b       	std	Y+18, r25	; 0x12
    1cf8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cfa:	8b 89       	ldd	r24, Y+19	; 0x13
    1cfc:	9c 89       	ldd	r25, Y+20	; 0x14
    1cfe:	01 97       	sbiw	r24, 0x01	; 1
    1d00:	9c 8b       	std	Y+20, r25	; 0x14
    1d02:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d04:	8b 89       	ldd	r24, Y+19	; 0x13
    1d06:	9c 89       	ldd	r25, Y+20	; 0x14
    1d08:	00 97       	sbiw	r24, 0x00	; 0
    1d0a:	69 f7       	brne	.-38     	; 0x1ce6 <Keypad_U8ReadPin1+0x3aa>
    1d0c:	14 c0       	rjmp	.+40     	; 0x1d36 <Keypad_U8ReadPin1+0x3fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d0e:	6d 89       	ldd	r22, Y+21	; 0x15
    1d10:	7e 89       	ldd	r23, Y+22	; 0x16
    1d12:	8f 89       	ldd	r24, Y+23	; 0x17
    1d14:	98 8d       	ldd	r25, Y+24	; 0x18
    1d16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d1a:	dc 01       	movw	r26, r24
    1d1c:	cb 01       	movw	r24, r22
    1d1e:	9c 8b       	std	Y+20, r25	; 0x14
    1d20:	8b 8b       	std	Y+19, r24	; 0x13
    1d22:	8b 89       	ldd	r24, Y+19	; 0x13
    1d24:	9c 89       	ldd	r25, Y+20	; 0x14
    1d26:	98 8b       	std	Y+16, r25	; 0x10
    1d28:	8f 87       	std	Y+15, r24	; 0x0f
    1d2a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d2c:	98 89       	ldd	r25, Y+16	; 0x10
    1d2e:	01 97       	sbiw	r24, 0x01	; 1
    1d30:	f1 f7       	brne	.-4      	; 0x1d2e <Keypad_U8ReadPin1+0x3f2>
    1d32:	98 8b       	std	Y+16, r25	; 0x10
    1d34:	8f 87       	std	Y+15, r24	; 0x0f
	}
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS0,HIGH);
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS1,HIGH);
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS2,LOW );
  	DIO_VidSetPinValue(COLS_ROWSPORT,COLS3,HIGH);
	for(row=4;row<=7;row++)
    1d36:	8a ad       	ldd	r24, Y+58	; 0x3a
    1d38:	8f 5f       	subi	r24, 0xFF	; 255
    1d3a:	8a af       	std	Y+58, r24	; 0x3a
    1d3c:	8a ad       	ldd	r24, Y+58	; 0x3a
    1d3e:	88 30       	cpi	r24, 0x08	; 8
    1d40:	08 f4       	brcc	.+2      	; 0x1d44 <Keypad_U8ReadPin1+0x408>
    1d42:	6e cf       	rjmp	.-292    	; 0x1c20 <Keypad_U8ReadPin1+0x2e4>
			pressdkey=	array_keypad[row][COLS2];
		}
		while(DIO_VidGetPinValue(COLS_ROWSPORT,row)==0);
		_delay_ms(5);
	}
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS0,HIGH);
    1d44:	81 e0       	ldi	r24, 0x01	; 1
    1d46:	60 e0       	ldi	r22, 0x00	; 0
    1d48:	41 e0       	ldi	r20, 0x01	; 1
    1d4a:	0e 94 75 08 	call	0x10ea	; 0x10ea <DIO_VidSetPinValue>
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS1,HIGH);
    1d4e:	81 e0       	ldi	r24, 0x01	; 1
    1d50:	61 e0       	ldi	r22, 0x01	; 1
    1d52:	41 e0       	ldi	r20, 0x01	; 1
    1d54:	0e 94 75 08 	call	0x10ea	; 0x10ea <DIO_VidSetPinValue>
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS2,HIGH);
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	62 e0       	ldi	r22, 0x02	; 2
    1d5c:	41 e0       	ldi	r20, 0x01	; 1
    1d5e:	0e 94 75 08 	call	0x10ea	; 0x10ea <DIO_VidSetPinValue>
  	DIO_VidSetPinValue(COLS_ROWSPORT,COLS3,LOW );
    1d62:	81 e0       	ldi	r24, 0x01	; 1
    1d64:	63 e0       	ldi	r22, 0x03	; 3
    1d66:	40 e0       	ldi	r20, 0x00	; 0
    1d68:	0e 94 75 08 	call	0x10ea	; 0x10ea <DIO_VidSetPinValue>
	for(row=4;row<=7;row++)
    1d6c:	84 e0       	ldi	r24, 0x04	; 4
    1d6e:	8a af       	std	Y+58, r24	; 0x3a
    1d70:	8d c0       	rjmp	.+282    	; 0x1e8c <Keypad_U8ReadPin1+0x550>
	{
		if(DIO_VidGetPinValue(COLS_ROWSPORT,row)==0)
    1d72:	81 e0       	ldi	r24, 0x01	; 1
    1d74:	6a ad       	ldd	r22, Y+58	; 0x3a
    1d76:	0e 94 75 09 	call	0x12ea	; 0x12ea <DIO_VidGetPinValue>
    1d7a:	88 23       	and	r24, r24
    1d7c:	61 f4       	brne	.+24     	; 0x1d96 <Keypad_U8ReadPin1+0x45a>
		{
			pressdkey=	array_keypad[row][COLS3];
    1d7e:	8a ad       	ldd	r24, Y+58	; 0x3a
    1d80:	88 2f       	mov	r24, r24
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	88 0f       	add	r24, r24
    1d86:	99 1f       	adc	r25, r25
    1d88:	88 0f       	add	r24, r24
    1d8a:	99 1f       	adc	r25, r25
    1d8c:	fc 01       	movw	r30, r24
    1d8e:	e1 57       	subi	r30, 0x71	; 113
    1d90:	fe 4f       	sbci	r31, 0xFE	; 254
    1d92:	80 81       	ld	r24, Z
    1d94:	89 af       	std	Y+57, r24	; 0x39
		}
		while(DIO_VidGetPinValue(COLS_ROWSPORT,row)==0);
    1d96:	81 e0       	ldi	r24, 0x01	; 1
    1d98:	6a ad       	ldd	r22, Y+58	; 0x3a
    1d9a:	0e 94 75 09 	call	0x12ea	; 0x12ea <DIO_VidGetPinValue>
    1d9e:	88 23       	and	r24, r24
    1da0:	d1 f3       	breq	.-12     	; 0x1d96 <Keypad_U8ReadPin1+0x45a>
    1da2:	80 e0       	ldi	r24, 0x00	; 0
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	a0 ea       	ldi	r26, 0xA0	; 160
    1da8:	b0 e4       	ldi	r27, 0x40	; 64
    1daa:	8b 87       	std	Y+11, r24	; 0x0b
    1dac:	9c 87       	std	Y+12, r25	; 0x0c
    1dae:	ad 87       	std	Y+13, r26	; 0x0d
    1db0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1db2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1db4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1db6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1db8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dba:	20 e0       	ldi	r18, 0x00	; 0
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	4a ef       	ldi	r20, 0xFA	; 250
    1dc0:	54 e4       	ldi	r21, 0x44	; 68
    1dc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc6:	dc 01       	movw	r26, r24
    1dc8:	cb 01       	movw	r24, r22
    1dca:	8f 83       	std	Y+7, r24	; 0x07
    1dcc:	98 87       	std	Y+8, r25	; 0x08
    1dce:	a9 87       	std	Y+9, r26	; 0x09
    1dd0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dd2:	6f 81       	ldd	r22, Y+7	; 0x07
    1dd4:	78 85       	ldd	r23, Y+8	; 0x08
    1dd6:	89 85       	ldd	r24, Y+9	; 0x09
    1dd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dda:	20 e0       	ldi	r18, 0x00	; 0
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	40 e8       	ldi	r20, 0x80	; 128
    1de0:	5f e3       	ldi	r21, 0x3F	; 63
    1de2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1de6:	88 23       	and	r24, r24
    1de8:	2c f4       	brge	.+10     	; 0x1df4 <Keypad_U8ReadPin1+0x4b8>
		__ticks = 1;
    1dea:	81 e0       	ldi	r24, 0x01	; 1
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	9e 83       	std	Y+6, r25	; 0x06
    1df0:	8d 83       	std	Y+5, r24	; 0x05
    1df2:	3f c0       	rjmp	.+126    	; 0x1e72 <Keypad_U8ReadPin1+0x536>
	else if (__tmp > 65535)
    1df4:	6f 81       	ldd	r22, Y+7	; 0x07
    1df6:	78 85       	ldd	r23, Y+8	; 0x08
    1df8:	89 85       	ldd	r24, Y+9	; 0x09
    1dfa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dfc:	20 e0       	ldi	r18, 0x00	; 0
    1dfe:	3f ef       	ldi	r19, 0xFF	; 255
    1e00:	4f e7       	ldi	r20, 0x7F	; 127
    1e02:	57 e4       	ldi	r21, 0x47	; 71
    1e04:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e08:	18 16       	cp	r1, r24
    1e0a:	4c f5       	brge	.+82     	; 0x1e5e <Keypad_U8ReadPin1+0x522>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e10:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e12:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e14:	20 e0       	ldi	r18, 0x00	; 0
    1e16:	30 e0       	ldi	r19, 0x00	; 0
    1e18:	40 e2       	ldi	r20, 0x20	; 32
    1e1a:	51 e4       	ldi	r21, 0x41	; 65
    1e1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e20:	dc 01       	movw	r26, r24
    1e22:	cb 01       	movw	r24, r22
    1e24:	bc 01       	movw	r22, r24
    1e26:	cd 01       	movw	r24, r26
    1e28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e2c:	dc 01       	movw	r26, r24
    1e2e:	cb 01       	movw	r24, r22
    1e30:	9e 83       	std	Y+6, r25	; 0x06
    1e32:	8d 83       	std	Y+5, r24	; 0x05
    1e34:	0f c0       	rjmp	.+30     	; 0x1e54 <Keypad_U8ReadPin1+0x518>
    1e36:	88 ec       	ldi	r24, 0xC8	; 200
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	9c 83       	std	Y+4, r25	; 0x04
    1e3c:	8b 83       	std	Y+3, r24	; 0x03
    1e3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e40:	9c 81       	ldd	r25, Y+4	; 0x04
    1e42:	01 97       	sbiw	r24, 0x01	; 1
    1e44:	f1 f7       	brne	.-4      	; 0x1e42 <Keypad_U8ReadPin1+0x506>
    1e46:	9c 83       	std	Y+4, r25	; 0x04
    1e48:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e4e:	01 97       	sbiw	r24, 0x01	; 1
    1e50:	9e 83       	std	Y+6, r25	; 0x06
    1e52:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e54:	8d 81       	ldd	r24, Y+5	; 0x05
    1e56:	9e 81       	ldd	r25, Y+6	; 0x06
    1e58:	00 97       	sbiw	r24, 0x00	; 0
    1e5a:	69 f7       	brne	.-38     	; 0x1e36 <Keypad_U8ReadPin1+0x4fa>
    1e5c:	14 c0       	rjmp	.+40     	; 0x1e86 <Keypad_U8ReadPin1+0x54a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e5e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e60:	78 85       	ldd	r23, Y+8	; 0x08
    1e62:	89 85       	ldd	r24, Y+9	; 0x09
    1e64:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e6a:	dc 01       	movw	r26, r24
    1e6c:	cb 01       	movw	r24, r22
    1e6e:	9e 83       	std	Y+6, r25	; 0x06
    1e70:	8d 83       	std	Y+5, r24	; 0x05
    1e72:	8d 81       	ldd	r24, Y+5	; 0x05
    1e74:	9e 81       	ldd	r25, Y+6	; 0x06
    1e76:	9a 83       	std	Y+2, r25	; 0x02
    1e78:	89 83       	std	Y+1, r24	; 0x01
    1e7a:	89 81       	ldd	r24, Y+1	; 0x01
    1e7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e7e:	01 97       	sbiw	r24, 0x01	; 1
    1e80:	f1 f7       	brne	.-4      	; 0x1e7e <Keypad_U8ReadPin1+0x542>
    1e82:	9a 83       	std	Y+2, r25	; 0x02
    1e84:	89 83       	std	Y+1, r24	; 0x01
	}
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS0,HIGH);
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS1,HIGH);
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS2,HIGH);
  	DIO_VidSetPinValue(COLS_ROWSPORT,COLS3,LOW );
	for(row=4;row<=7;row++)
    1e86:	8a ad       	ldd	r24, Y+58	; 0x3a
    1e88:	8f 5f       	subi	r24, 0xFF	; 255
    1e8a:	8a af       	std	Y+58, r24	; 0x3a
    1e8c:	8a ad       	ldd	r24, Y+58	; 0x3a
    1e8e:	88 30       	cpi	r24, 0x08	; 8
    1e90:	08 f4       	brcc	.+2      	; 0x1e94 <Keypad_U8ReadPin1+0x558>
    1e92:	6f cf       	rjmp	.-290    	; 0x1d72 <Keypad_U8ReadPin1+0x436>
		}
		while(DIO_VidGetPinValue(COLS_ROWSPORT,row)==0);
		_delay_ms(5);
	}

	return pressdkey;
    1e94:	89 ad       	ldd	r24, Y+57	; 0x39


}
    1e96:	ea 96       	adiw	r28, 0x3a	; 58
    1e98:	0f b6       	in	r0, 0x3f	; 63
    1e9a:	f8 94       	cli
    1e9c:	de bf       	out	0x3e, r29	; 62
    1e9e:	0f be       	out	0x3f, r0	; 63
    1ea0:	cd bf       	out	0x3d, r28	; 61
    1ea2:	cf 91       	pop	r28
    1ea4:	df 91       	pop	r29
    1ea6:	08 95       	ret

00001ea8 <LCD_VidInit>:
#include "LCD_configure.h"
#include "LCD_private.h"
#include<avr/delay.h>

void LCD_VidInit(void)
{
    1ea8:	0f 93       	push	r16
    1eaa:	1f 93       	push	r17
    1eac:	df 93       	push	r29
    1eae:	cf 93       	push	r28
    1eb0:	cd b7       	in	r28, 0x3d	; 61
    1eb2:	de b7       	in	r29, 0x3e	; 62
    1eb4:	c0 57       	subi	r28, 0x70	; 112
    1eb6:	d0 40       	sbci	r29, 0x00	; 0
    1eb8:	0f b6       	in	r0, 0x3f	; 63
    1eba:	f8 94       	cli
    1ebc:	de bf       	out	0x3e, r29	; 62
    1ebe:	0f be       	out	0x3f, r0	; 63
    1ec0:	cd bf       	out	0x3d, r28	; 61
    1ec2:	fe 01       	movw	r30, r28
    1ec4:	e3 59       	subi	r30, 0x93	; 147
    1ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec8:	80 e0       	ldi	r24, 0x00	; 0
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	a0 e7       	ldi	r26, 0x70	; 112
    1ece:	b2 e4       	ldi	r27, 0x42	; 66
    1ed0:	80 83       	st	Z, r24
    1ed2:	91 83       	std	Z+1, r25	; 0x01
    1ed4:	a2 83       	std	Z+2, r26	; 0x02
    1ed6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ed8:	8e 01       	movw	r16, r28
    1eda:	07 59       	subi	r16, 0x97	; 151
    1edc:	1f 4f       	sbci	r17, 0xFF	; 255
    1ede:	fe 01       	movw	r30, r28
    1ee0:	e3 59       	subi	r30, 0x93	; 147
    1ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee4:	60 81       	ld	r22, Z
    1ee6:	71 81       	ldd	r23, Z+1	; 0x01
    1ee8:	82 81       	ldd	r24, Z+2	; 0x02
    1eea:	93 81       	ldd	r25, Z+3	; 0x03
    1eec:	20 e0       	ldi	r18, 0x00	; 0
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	4a ef       	ldi	r20, 0xFA	; 250
    1ef2:	54 e4       	ldi	r21, 0x44	; 68
    1ef4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef8:	dc 01       	movw	r26, r24
    1efa:	cb 01       	movw	r24, r22
    1efc:	f8 01       	movw	r30, r16
    1efe:	80 83       	st	Z, r24
    1f00:	91 83       	std	Z+1, r25	; 0x01
    1f02:	a2 83       	std	Z+2, r26	; 0x02
    1f04:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f06:	fe 01       	movw	r30, r28
    1f08:	e7 59       	subi	r30, 0x97	; 151
    1f0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0c:	60 81       	ld	r22, Z
    1f0e:	71 81       	ldd	r23, Z+1	; 0x01
    1f10:	82 81       	ldd	r24, Z+2	; 0x02
    1f12:	93 81       	ldd	r25, Z+3	; 0x03
    1f14:	20 e0       	ldi	r18, 0x00	; 0
    1f16:	30 e0       	ldi	r19, 0x00	; 0
    1f18:	40 e8       	ldi	r20, 0x80	; 128
    1f1a:	5f e3       	ldi	r21, 0x3F	; 63
    1f1c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f20:	88 23       	and	r24, r24
    1f22:	44 f4       	brge	.+16     	; 0x1f34 <LCD_VidInit+0x8c>
		__ticks = 1;
    1f24:	fe 01       	movw	r30, r28
    1f26:	e9 59       	subi	r30, 0x99	; 153
    1f28:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2a:	81 e0       	ldi	r24, 0x01	; 1
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	91 83       	std	Z+1, r25	; 0x01
    1f30:	80 83       	st	Z, r24
    1f32:	64 c0       	rjmp	.+200    	; 0x1ffc <LCD_VidInit+0x154>
	else if (__tmp > 65535)
    1f34:	fe 01       	movw	r30, r28
    1f36:	e7 59       	subi	r30, 0x97	; 151
    1f38:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3a:	60 81       	ld	r22, Z
    1f3c:	71 81       	ldd	r23, Z+1	; 0x01
    1f3e:	82 81       	ldd	r24, Z+2	; 0x02
    1f40:	93 81       	ldd	r25, Z+3	; 0x03
    1f42:	20 e0       	ldi	r18, 0x00	; 0
    1f44:	3f ef       	ldi	r19, 0xFF	; 255
    1f46:	4f e7       	ldi	r20, 0x7F	; 127
    1f48:	57 e4       	ldi	r21, 0x47	; 71
    1f4a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f4e:	18 16       	cp	r1, r24
    1f50:	0c f0       	brlt	.+2      	; 0x1f54 <LCD_VidInit+0xac>
    1f52:	43 c0       	rjmp	.+134    	; 0x1fda <LCD_VidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f54:	fe 01       	movw	r30, r28
    1f56:	e3 59       	subi	r30, 0x93	; 147
    1f58:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5a:	60 81       	ld	r22, Z
    1f5c:	71 81       	ldd	r23, Z+1	; 0x01
    1f5e:	82 81       	ldd	r24, Z+2	; 0x02
    1f60:	93 81       	ldd	r25, Z+3	; 0x03
    1f62:	20 e0       	ldi	r18, 0x00	; 0
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	40 e2       	ldi	r20, 0x20	; 32
    1f68:	51 e4       	ldi	r21, 0x41	; 65
    1f6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f6e:	dc 01       	movw	r26, r24
    1f70:	cb 01       	movw	r24, r22
    1f72:	8e 01       	movw	r16, r28
    1f74:	09 59       	subi	r16, 0x99	; 153
    1f76:	1f 4f       	sbci	r17, 0xFF	; 255
    1f78:	bc 01       	movw	r22, r24
    1f7a:	cd 01       	movw	r24, r26
    1f7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f80:	dc 01       	movw	r26, r24
    1f82:	cb 01       	movw	r24, r22
    1f84:	f8 01       	movw	r30, r16
    1f86:	91 83       	std	Z+1, r25	; 0x01
    1f88:	80 83       	st	Z, r24
    1f8a:	1f c0       	rjmp	.+62     	; 0x1fca <LCD_VidInit+0x122>
    1f8c:	fe 01       	movw	r30, r28
    1f8e:	eb 59       	subi	r30, 0x9B	; 155
    1f90:	ff 4f       	sbci	r31, 0xFF	; 255
    1f92:	88 ec       	ldi	r24, 0xC8	; 200
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	91 83       	std	Z+1, r25	; 0x01
    1f98:	80 83       	st	Z, r24
    1f9a:	fe 01       	movw	r30, r28
    1f9c:	eb 59       	subi	r30, 0x9B	; 155
    1f9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa0:	80 81       	ld	r24, Z
    1fa2:	91 81       	ldd	r25, Z+1	; 0x01
    1fa4:	01 97       	sbiw	r24, 0x01	; 1
    1fa6:	f1 f7       	brne	.-4      	; 0x1fa4 <LCD_VidInit+0xfc>
    1fa8:	fe 01       	movw	r30, r28
    1faa:	eb 59       	subi	r30, 0x9B	; 155
    1fac:	ff 4f       	sbci	r31, 0xFF	; 255
    1fae:	91 83       	std	Z+1, r25	; 0x01
    1fb0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fb2:	de 01       	movw	r26, r28
    1fb4:	a9 59       	subi	r26, 0x99	; 153
    1fb6:	bf 4f       	sbci	r27, 0xFF	; 255
    1fb8:	fe 01       	movw	r30, r28
    1fba:	e9 59       	subi	r30, 0x99	; 153
    1fbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fbe:	80 81       	ld	r24, Z
    1fc0:	91 81       	ldd	r25, Z+1	; 0x01
    1fc2:	01 97       	sbiw	r24, 0x01	; 1
    1fc4:	11 96       	adiw	r26, 0x01	; 1
    1fc6:	9c 93       	st	X, r25
    1fc8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fca:	fe 01       	movw	r30, r28
    1fcc:	e9 59       	subi	r30, 0x99	; 153
    1fce:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd0:	80 81       	ld	r24, Z
    1fd2:	91 81       	ldd	r25, Z+1	; 0x01
    1fd4:	00 97       	sbiw	r24, 0x00	; 0
    1fd6:	d1 f6       	brne	.-76     	; 0x1f8c <LCD_VidInit+0xe4>
    1fd8:	27 c0       	rjmp	.+78     	; 0x2028 <LCD_VidInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fda:	8e 01       	movw	r16, r28
    1fdc:	09 59       	subi	r16, 0x99	; 153
    1fde:	1f 4f       	sbci	r17, 0xFF	; 255
    1fe0:	fe 01       	movw	r30, r28
    1fe2:	e7 59       	subi	r30, 0x97	; 151
    1fe4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe6:	60 81       	ld	r22, Z
    1fe8:	71 81       	ldd	r23, Z+1	; 0x01
    1fea:	82 81       	ldd	r24, Z+2	; 0x02
    1fec:	93 81       	ldd	r25, Z+3	; 0x03
    1fee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ff2:	dc 01       	movw	r26, r24
    1ff4:	cb 01       	movw	r24, r22
    1ff6:	f8 01       	movw	r30, r16
    1ff8:	91 83       	std	Z+1, r25	; 0x01
    1ffa:	80 83       	st	Z, r24
    1ffc:	de 01       	movw	r26, r28
    1ffe:	ad 59       	subi	r26, 0x9D	; 157
    2000:	bf 4f       	sbci	r27, 0xFF	; 255
    2002:	fe 01       	movw	r30, r28
    2004:	e9 59       	subi	r30, 0x99	; 153
    2006:	ff 4f       	sbci	r31, 0xFF	; 255
    2008:	80 81       	ld	r24, Z
    200a:	91 81       	ldd	r25, Z+1	; 0x01
    200c:	8d 93       	st	X+, r24
    200e:	9c 93       	st	X, r25
    2010:	fe 01       	movw	r30, r28
    2012:	ed 59       	subi	r30, 0x9D	; 157
    2014:	ff 4f       	sbci	r31, 0xFF	; 255
    2016:	80 81       	ld	r24, Z
    2018:	91 81       	ldd	r25, Z+1	; 0x01
    201a:	01 97       	sbiw	r24, 0x01	; 1
    201c:	f1 f7       	brne	.-4      	; 0x201a <LCD_VidInit+0x172>
    201e:	fe 01       	movw	r30, r28
    2020:	ed 59       	subi	r30, 0x9D	; 157
    2022:	ff 4f       	sbci	r31, 0xFF	; 255
    2024:	91 83       	std	Z+1, r25	; 0x01
    2026:	80 83       	st	Z, r24
	_delay_ms(1);


	#elif LCD_Mode==FOUR_BIT
	_delay_ms(60);
	DIO_VidSetPinDirection	( Lcopy_u8PORT,RS_copy_u8Pin, OUTPUT);
    2028:	80 e0       	ldi	r24, 0x00	; 0
    202a:	60 e0       	ldi	r22, 0x00	; 0
    202c:	41 e0       	ldi	r20, 0x01	; 1
    202e:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection	( Lcopy_u8PORT,R_w_copy_u8Pin,OUTPUT);
    2032:	80 e0       	ldi	r24, 0x00	; 0
    2034:	61 e0       	ldi	r22, 0x01	; 1
    2036:	41 e0       	ldi	r20, 0x01	; 1
    2038:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection	( Lcopy_u8PORT,E_copy_u8Pin,  OUTPUT);
    203c:	80 e0       	ldi	r24, 0x00	; 0
    203e:	62 e0       	ldi	r22, 0x02	; 2
    2040:	41 e0       	ldi	r20, 0x01	; 1
    2042:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_VidSetPinDirection>
    2046:	fe 01       	movw	r30, r28
    2048:	e1 5a       	subi	r30, 0xA1	; 161
    204a:	ff 4f       	sbci	r31, 0xFF	; 255
    204c:	80 e0       	ldi	r24, 0x00	; 0
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	a0 e8       	ldi	r26, 0x80	; 128
    2052:	bf e3       	ldi	r27, 0x3F	; 63
    2054:	80 83       	st	Z, r24
    2056:	91 83       	std	Z+1, r25	; 0x01
    2058:	a2 83       	std	Z+2, r26	; 0x02
    205a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    205c:	8e 01       	movw	r16, r28
    205e:	05 5a       	subi	r16, 0xA5	; 165
    2060:	1f 4f       	sbci	r17, 0xFF	; 255
    2062:	fe 01       	movw	r30, r28
    2064:	e1 5a       	subi	r30, 0xA1	; 161
    2066:	ff 4f       	sbci	r31, 0xFF	; 255
    2068:	60 81       	ld	r22, Z
    206a:	71 81       	ldd	r23, Z+1	; 0x01
    206c:	82 81       	ldd	r24, Z+2	; 0x02
    206e:	93 81       	ldd	r25, Z+3	; 0x03
    2070:	20 e0       	ldi	r18, 0x00	; 0
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	4a ef       	ldi	r20, 0xFA	; 250
    2076:	54 e4       	ldi	r21, 0x44	; 68
    2078:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    207c:	dc 01       	movw	r26, r24
    207e:	cb 01       	movw	r24, r22
    2080:	f8 01       	movw	r30, r16
    2082:	80 83       	st	Z, r24
    2084:	91 83       	std	Z+1, r25	; 0x01
    2086:	a2 83       	std	Z+2, r26	; 0x02
    2088:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    208a:	fe 01       	movw	r30, r28
    208c:	e5 5a       	subi	r30, 0xA5	; 165
    208e:	ff 4f       	sbci	r31, 0xFF	; 255
    2090:	60 81       	ld	r22, Z
    2092:	71 81       	ldd	r23, Z+1	; 0x01
    2094:	82 81       	ldd	r24, Z+2	; 0x02
    2096:	93 81       	ldd	r25, Z+3	; 0x03
    2098:	20 e0       	ldi	r18, 0x00	; 0
    209a:	30 e0       	ldi	r19, 0x00	; 0
    209c:	40 e8       	ldi	r20, 0x80	; 128
    209e:	5f e3       	ldi	r21, 0x3F	; 63
    20a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20a4:	88 23       	and	r24, r24
    20a6:	44 f4       	brge	.+16     	; 0x20b8 <LCD_VidInit+0x210>
		__ticks = 1;
    20a8:	fe 01       	movw	r30, r28
    20aa:	e7 5a       	subi	r30, 0xA7	; 167
    20ac:	ff 4f       	sbci	r31, 0xFF	; 255
    20ae:	81 e0       	ldi	r24, 0x01	; 1
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	91 83       	std	Z+1, r25	; 0x01
    20b4:	80 83       	st	Z, r24
    20b6:	64 c0       	rjmp	.+200    	; 0x2180 <LCD_VidInit+0x2d8>
	else if (__tmp > 65535)
    20b8:	fe 01       	movw	r30, r28
    20ba:	e5 5a       	subi	r30, 0xA5	; 165
    20bc:	ff 4f       	sbci	r31, 0xFF	; 255
    20be:	60 81       	ld	r22, Z
    20c0:	71 81       	ldd	r23, Z+1	; 0x01
    20c2:	82 81       	ldd	r24, Z+2	; 0x02
    20c4:	93 81       	ldd	r25, Z+3	; 0x03
    20c6:	20 e0       	ldi	r18, 0x00	; 0
    20c8:	3f ef       	ldi	r19, 0xFF	; 255
    20ca:	4f e7       	ldi	r20, 0x7F	; 127
    20cc:	57 e4       	ldi	r21, 0x47	; 71
    20ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20d2:	18 16       	cp	r1, r24
    20d4:	0c f0       	brlt	.+2      	; 0x20d8 <LCD_VidInit+0x230>
    20d6:	43 c0       	rjmp	.+134    	; 0x215e <LCD_VidInit+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20d8:	fe 01       	movw	r30, r28
    20da:	e1 5a       	subi	r30, 0xA1	; 161
    20dc:	ff 4f       	sbci	r31, 0xFF	; 255
    20de:	60 81       	ld	r22, Z
    20e0:	71 81       	ldd	r23, Z+1	; 0x01
    20e2:	82 81       	ldd	r24, Z+2	; 0x02
    20e4:	93 81       	ldd	r25, Z+3	; 0x03
    20e6:	20 e0       	ldi	r18, 0x00	; 0
    20e8:	30 e0       	ldi	r19, 0x00	; 0
    20ea:	40 e2       	ldi	r20, 0x20	; 32
    20ec:	51 e4       	ldi	r21, 0x41	; 65
    20ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f2:	dc 01       	movw	r26, r24
    20f4:	cb 01       	movw	r24, r22
    20f6:	8e 01       	movw	r16, r28
    20f8:	07 5a       	subi	r16, 0xA7	; 167
    20fa:	1f 4f       	sbci	r17, 0xFF	; 255
    20fc:	bc 01       	movw	r22, r24
    20fe:	cd 01       	movw	r24, r26
    2100:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2104:	dc 01       	movw	r26, r24
    2106:	cb 01       	movw	r24, r22
    2108:	f8 01       	movw	r30, r16
    210a:	91 83       	std	Z+1, r25	; 0x01
    210c:	80 83       	st	Z, r24
    210e:	1f c0       	rjmp	.+62     	; 0x214e <LCD_VidInit+0x2a6>
    2110:	fe 01       	movw	r30, r28
    2112:	e9 5a       	subi	r30, 0xA9	; 169
    2114:	ff 4f       	sbci	r31, 0xFF	; 255
    2116:	88 ec       	ldi	r24, 0xC8	; 200
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	91 83       	std	Z+1, r25	; 0x01
    211c:	80 83       	st	Z, r24
    211e:	fe 01       	movw	r30, r28
    2120:	e9 5a       	subi	r30, 0xA9	; 169
    2122:	ff 4f       	sbci	r31, 0xFF	; 255
    2124:	80 81       	ld	r24, Z
    2126:	91 81       	ldd	r25, Z+1	; 0x01
    2128:	01 97       	sbiw	r24, 0x01	; 1
    212a:	f1 f7       	brne	.-4      	; 0x2128 <LCD_VidInit+0x280>
    212c:	fe 01       	movw	r30, r28
    212e:	e9 5a       	subi	r30, 0xA9	; 169
    2130:	ff 4f       	sbci	r31, 0xFF	; 255
    2132:	91 83       	std	Z+1, r25	; 0x01
    2134:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2136:	de 01       	movw	r26, r28
    2138:	a7 5a       	subi	r26, 0xA7	; 167
    213a:	bf 4f       	sbci	r27, 0xFF	; 255
    213c:	fe 01       	movw	r30, r28
    213e:	e7 5a       	subi	r30, 0xA7	; 167
    2140:	ff 4f       	sbci	r31, 0xFF	; 255
    2142:	80 81       	ld	r24, Z
    2144:	91 81       	ldd	r25, Z+1	; 0x01
    2146:	01 97       	sbiw	r24, 0x01	; 1
    2148:	11 96       	adiw	r26, 0x01	; 1
    214a:	9c 93       	st	X, r25
    214c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    214e:	fe 01       	movw	r30, r28
    2150:	e7 5a       	subi	r30, 0xA7	; 167
    2152:	ff 4f       	sbci	r31, 0xFF	; 255
    2154:	80 81       	ld	r24, Z
    2156:	91 81       	ldd	r25, Z+1	; 0x01
    2158:	00 97       	sbiw	r24, 0x00	; 0
    215a:	d1 f6       	brne	.-76     	; 0x2110 <LCD_VidInit+0x268>
    215c:	27 c0       	rjmp	.+78     	; 0x21ac <LCD_VidInit+0x304>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    215e:	8e 01       	movw	r16, r28
    2160:	07 5a       	subi	r16, 0xA7	; 167
    2162:	1f 4f       	sbci	r17, 0xFF	; 255
    2164:	fe 01       	movw	r30, r28
    2166:	e5 5a       	subi	r30, 0xA5	; 165
    2168:	ff 4f       	sbci	r31, 0xFF	; 255
    216a:	60 81       	ld	r22, Z
    216c:	71 81       	ldd	r23, Z+1	; 0x01
    216e:	82 81       	ldd	r24, Z+2	; 0x02
    2170:	93 81       	ldd	r25, Z+3	; 0x03
    2172:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2176:	dc 01       	movw	r26, r24
    2178:	cb 01       	movw	r24, r22
    217a:	f8 01       	movw	r30, r16
    217c:	91 83       	std	Z+1, r25	; 0x01
    217e:	80 83       	st	Z, r24
    2180:	de 01       	movw	r26, r28
    2182:	ab 5a       	subi	r26, 0xAB	; 171
    2184:	bf 4f       	sbci	r27, 0xFF	; 255
    2186:	fe 01       	movw	r30, r28
    2188:	e7 5a       	subi	r30, 0xA7	; 167
    218a:	ff 4f       	sbci	r31, 0xFF	; 255
    218c:	80 81       	ld	r24, Z
    218e:	91 81       	ldd	r25, Z+1	; 0x01
    2190:	8d 93       	st	X+, r24
    2192:	9c 93       	st	X, r25
    2194:	fe 01       	movw	r30, r28
    2196:	eb 5a       	subi	r30, 0xAB	; 171
    2198:	ff 4f       	sbci	r31, 0xFF	; 255
    219a:	80 81       	ld	r24, Z
    219c:	91 81       	ldd	r25, Z+1	; 0x01
    219e:	01 97       	sbiw	r24, 0x01	; 1
    21a0:	f1 f7       	brne	.-4      	; 0x219e <LCD_VidInit+0x2f6>
    21a2:	fe 01       	movw	r30, r28
    21a4:	eb 5a       	subi	r30, 0xAB	; 171
    21a6:	ff 4f       	sbci	r31, 0xFF	; 255
    21a8:	91 83       	std	Z+1, r25	; 0x01
    21aa:	80 83       	st	Z, r24
	_delay_ms(1);
	DIO_VidSetPortDirection	( LDcopy_u8PORT,OUTPUT);
    21ac:	82 e0       	ldi	r24, 0x02	; 2
    21ae:	61 e0       	ldi	r22, 0x01	; 1
    21b0:	0e 94 ef 09 	call	0x13de	; 0x13de <DIO_VidSetPortDirection>
	LCD_VidSendCommand(0x33);
    21b4:	83 e3       	ldi	r24, 0x33	; 51
    21b6:	0e 94 09 16 	call	0x2c12	; 0x2c12 <LCD_VidSendCommand>
    21ba:	fe 01       	movw	r30, r28
    21bc:	ef 5a       	subi	r30, 0xAF	; 175
    21be:	ff 4f       	sbci	r31, 0xFF	; 255
    21c0:	80 e0       	ldi	r24, 0x00	; 0
    21c2:	90 e0       	ldi	r25, 0x00	; 0
    21c4:	a0 e0       	ldi	r26, 0x00	; 0
    21c6:	b0 e4       	ldi	r27, 0x40	; 64
    21c8:	80 83       	st	Z, r24
    21ca:	91 83       	std	Z+1, r25	; 0x01
    21cc:	a2 83       	std	Z+2, r26	; 0x02
    21ce:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21d0:	8e 01       	movw	r16, r28
    21d2:	03 5b       	subi	r16, 0xB3	; 179
    21d4:	1f 4f       	sbci	r17, 0xFF	; 255
    21d6:	fe 01       	movw	r30, r28
    21d8:	ef 5a       	subi	r30, 0xAF	; 175
    21da:	ff 4f       	sbci	r31, 0xFF	; 255
    21dc:	60 81       	ld	r22, Z
    21de:	71 81       	ldd	r23, Z+1	; 0x01
    21e0:	82 81       	ldd	r24, Z+2	; 0x02
    21e2:	93 81       	ldd	r25, Z+3	; 0x03
    21e4:	20 e0       	ldi	r18, 0x00	; 0
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	4a ef       	ldi	r20, 0xFA	; 250
    21ea:	54 e4       	ldi	r21, 0x44	; 68
    21ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21f0:	dc 01       	movw	r26, r24
    21f2:	cb 01       	movw	r24, r22
    21f4:	f8 01       	movw	r30, r16
    21f6:	80 83       	st	Z, r24
    21f8:	91 83       	std	Z+1, r25	; 0x01
    21fa:	a2 83       	std	Z+2, r26	; 0x02
    21fc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21fe:	fe 01       	movw	r30, r28
    2200:	e3 5b       	subi	r30, 0xB3	; 179
    2202:	ff 4f       	sbci	r31, 0xFF	; 255
    2204:	60 81       	ld	r22, Z
    2206:	71 81       	ldd	r23, Z+1	; 0x01
    2208:	82 81       	ldd	r24, Z+2	; 0x02
    220a:	93 81       	ldd	r25, Z+3	; 0x03
    220c:	20 e0       	ldi	r18, 0x00	; 0
    220e:	30 e0       	ldi	r19, 0x00	; 0
    2210:	40 e8       	ldi	r20, 0x80	; 128
    2212:	5f e3       	ldi	r21, 0x3F	; 63
    2214:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2218:	88 23       	and	r24, r24
    221a:	44 f4       	brge	.+16     	; 0x222c <LCD_VidInit+0x384>
		__ticks = 1;
    221c:	fe 01       	movw	r30, r28
    221e:	e5 5b       	subi	r30, 0xB5	; 181
    2220:	ff 4f       	sbci	r31, 0xFF	; 255
    2222:	81 e0       	ldi	r24, 0x01	; 1
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	91 83       	std	Z+1, r25	; 0x01
    2228:	80 83       	st	Z, r24
    222a:	64 c0       	rjmp	.+200    	; 0x22f4 <LCD_VidInit+0x44c>
	else if (__tmp > 65535)
    222c:	fe 01       	movw	r30, r28
    222e:	e3 5b       	subi	r30, 0xB3	; 179
    2230:	ff 4f       	sbci	r31, 0xFF	; 255
    2232:	60 81       	ld	r22, Z
    2234:	71 81       	ldd	r23, Z+1	; 0x01
    2236:	82 81       	ldd	r24, Z+2	; 0x02
    2238:	93 81       	ldd	r25, Z+3	; 0x03
    223a:	20 e0       	ldi	r18, 0x00	; 0
    223c:	3f ef       	ldi	r19, 0xFF	; 255
    223e:	4f e7       	ldi	r20, 0x7F	; 127
    2240:	57 e4       	ldi	r21, 0x47	; 71
    2242:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2246:	18 16       	cp	r1, r24
    2248:	0c f0       	brlt	.+2      	; 0x224c <LCD_VidInit+0x3a4>
    224a:	43 c0       	rjmp	.+134    	; 0x22d2 <LCD_VidInit+0x42a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    224c:	fe 01       	movw	r30, r28
    224e:	ef 5a       	subi	r30, 0xAF	; 175
    2250:	ff 4f       	sbci	r31, 0xFF	; 255
    2252:	60 81       	ld	r22, Z
    2254:	71 81       	ldd	r23, Z+1	; 0x01
    2256:	82 81       	ldd	r24, Z+2	; 0x02
    2258:	93 81       	ldd	r25, Z+3	; 0x03
    225a:	20 e0       	ldi	r18, 0x00	; 0
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	40 e2       	ldi	r20, 0x20	; 32
    2260:	51 e4       	ldi	r21, 0x41	; 65
    2262:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2266:	dc 01       	movw	r26, r24
    2268:	cb 01       	movw	r24, r22
    226a:	8e 01       	movw	r16, r28
    226c:	05 5b       	subi	r16, 0xB5	; 181
    226e:	1f 4f       	sbci	r17, 0xFF	; 255
    2270:	bc 01       	movw	r22, r24
    2272:	cd 01       	movw	r24, r26
    2274:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2278:	dc 01       	movw	r26, r24
    227a:	cb 01       	movw	r24, r22
    227c:	f8 01       	movw	r30, r16
    227e:	91 83       	std	Z+1, r25	; 0x01
    2280:	80 83       	st	Z, r24
    2282:	1f c0       	rjmp	.+62     	; 0x22c2 <LCD_VidInit+0x41a>
    2284:	fe 01       	movw	r30, r28
    2286:	e7 5b       	subi	r30, 0xB7	; 183
    2288:	ff 4f       	sbci	r31, 0xFF	; 255
    228a:	88 ec       	ldi	r24, 0xC8	; 200
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	91 83       	std	Z+1, r25	; 0x01
    2290:	80 83       	st	Z, r24
    2292:	fe 01       	movw	r30, r28
    2294:	e7 5b       	subi	r30, 0xB7	; 183
    2296:	ff 4f       	sbci	r31, 0xFF	; 255
    2298:	80 81       	ld	r24, Z
    229a:	91 81       	ldd	r25, Z+1	; 0x01
    229c:	01 97       	sbiw	r24, 0x01	; 1
    229e:	f1 f7       	brne	.-4      	; 0x229c <LCD_VidInit+0x3f4>
    22a0:	fe 01       	movw	r30, r28
    22a2:	e7 5b       	subi	r30, 0xB7	; 183
    22a4:	ff 4f       	sbci	r31, 0xFF	; 255
    22a6:	91 83       	std	Z+1, r25	; 0x01
    22a8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22aa:	de 01       	movw	r26, r28
    22ac:	a5 5b       	subi	r26, 0xB5	; 181
    22ae:	bf 4f       	sbci	r27, 0xFF	; 255
    22b0:	fe 01       	movw	r30, r28
    22b2:	e5 5b       	subi	r30, 0xB5	; 181
    22b4:	ff 4f       	sbci	r31, 0xFF	; 255
    22b6:	80 81       	ld	r24, Z
    22b8:	91 81       	ldd	r25, Z+1	; 0x01
    22ba:	01 97       	sbiw	r24, 0x01	; 1
    22bc:	11 96       	adiw	r26, 0x01	; 1
    22be:	9c 93       	st	X, r25
    22c0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22c2:	fe 01       	movw	r30, r28
    22c4:	e5 5b       	subi	r30, 0xB5	; 181
    22c6:	ff 4f       	sbci	r31, 0xFF	; 255
    22c8:	80 81       	ld	r24, Z
    22ca:	91 81       	ldd	r25, Z+1	; 0x01
    22cc:	00 97       	sbiw	r24, 0x00	; 0
    22ce:	d1 f6       	brne	.-76     	; 0x2284 <LCD_VidInit+0x3dc>
    22d0:	27 c0       	rjmp	.+78     	; 0x2320 <LCD_VidInit+0x478>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22d2:	8e 01       	movw	r16, r28
    22d4:	05 5b       	subi	r16, 0xB5	; 181
    22d6:	1f 4f       	sbci	r17, 0xFF	; 255
    22d8:	fe 01       	movw	r30, r28
    22da:	e3 5b       	subi	r30, 0xB3	; 179
    22dc:	ff 4f       	sbci	r31, 0xFF	; 255
    22de:	60 81       	ld	r22, Z
    22e0:	71 81       	ldd	r23, Z+1	; 0x01
    22e2:	82 81       	ldd	r24, Z+2	; 0x02
    22e4:	93 81       	ldd	r25, Z+3	; 0x03
    22e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ea:	dc 01       	movw	r26, r24
    22ec:	cb 01       	movw	r24, r22
    22ee:	f8 01       	movw	r30, r16
    22f0:	91 83       	std	Z+1, r25	; 0x01
    22f2:	80 83       	st	Z, r24
    22f4:	de 01       	movw	r26, r28
    22f6:	a9 5b       	subi	r26, 0xB9	; 185
    22f8:	bf 4f       	sbci	r27, 0xFF	; 255
    22fa:	fe 01       	movw	r30, r28
    22fc:	e5 5b       	subi	r30, 0xB5	; 181
    22fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2300:	80 81       	ld	r24, Z
    2302:	91 81       	ldd	r25, Z+1	; 0x01
    2304:	8d 93       	st	X+, r24
    2306:	9c 93       	st	X, r25
    2308:	fe 01       	movw	r30, r28
    230a:	e9 5b       	subi	r30, 0xB9	; 185
    230c:	ff 4f       	sbci	r31, 0xFF	; 255
    230e:	80 81       	ld	r24, Z
    2310:	91 81       	ldd	r25, Z+1	; 0x01
    2312:	01 97       	sbiw	r24, 0x01	; 1
    2314:	f1 f7       	brne	.-4      	; 0x2312 <LCD_VidInit+0x46a>
    2316:	fe 01       	movw	r30, r28
    2318:	e9 5b       	subi	r30, 0xB9	; 185
    231a:	ff 4f       	sbci	r31, 0xFF	; 255
    231c:	91 83       	std	Z+1, r25	; 0x01
    231e:	80 83       	st	Z, r24
	_delay_ms(2);
	LCD_VidSendCommand(0x32);	/* Send for 4 bit initialization of LCD  */
    2320:	82 e3       	ldi	r24, 0x32	; 50
    2322:	0e 94 09 16 	call	0x2c12	; 0x2c12 <LCD_VidSendCommand>
    2326:	fe 01       	movw	r30, r28
    2328:	ed 5b       	subi	r30, 0xBD	; 189
    232a:	ff 4f       	sbci	r31, 0xFF	; 255
    232c:	80 e0       	ldi	r24, 0x00	; 0
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	a0 e0       	ldi	r26, 0x00	; 0
    2332:	b0 e4       	ldi	r27, 0x40	; 64
    2334:	80 83       	st	Z, r24
    2336:	91 83       	std	Z+1, r25	; 0x01
    2338:	a2 83       	std	Z+2, r26	; 0x02
    233a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    233c:	8e 01       	movw	r16, r28
    233e:	01 5c       	subi	r16, 0xC1	; 193
    2340:	1f 4f       	sbci	r17, 0xFF	; 255
    2342:	fe 01       	movw	r30, r28
    2344:	ed 5b       	subi	r30, 0xBD	; 189
    2346:	ff 4f       	sbci	r31, 0xFF	; 255
    2348:	60 81       	ld	r22, Z
    234a:	71 81       	ldd	r23, Z+1	; 0x01
    234c:	82 81       	ldd	r24, Z+2	; 0x02
    234e:	93 81       	ldd	r25, Z+3	; 0x03
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	4a ef       	ldi	r20, 0xFA	; 250
    2356:	54 e4       	ldi	r21, 0x44	; 68
    2358:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    235c:	dc 01       	movw	r26, r24
    235e:	cb 01       	movw	r24, r22
    2360:	f8 01       	movw	r30, r16
    2362:	80 83       	st	Z, r24
    2364:	91 83       	std	Z+1, r25	; 0x01
    2366:	a2 83       	std	Z+2, r26	; 0x02
    2368:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    236a:	fe 01       	movw	r30, r28
    236c:	ff 96       	adiw	r30, 0x3f	; 63
    236e:	60 81       	ld	r22, Z
    2370:	71 81       	ldd	r23, Z+1	; 0x01
    2372:	82 81       	ldd	r24, Z+2	; 0x02
    2374:	93 81       	ldd	r25, Z+3	; 0x03
    2376:	20 e0       	ldi	r18, 0x00	; 0
    2378:	30 e0       	ldi	r19, 0x00	; 0
    237a:	40 e8       	ldi	r20, 0x80	; 128
    237c:	5f e3       	ldi	r21, 0x3F	; 63
    237e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2382:	88 23       	and	r24, r24
    2384:	2c f4       	brge	.+10     	; 0x2390 <LCD_VidInit+0x4e8>
		__ticks = 1;
    2386:	81 e0       	ldi	r24, 0x01	; 1
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	9e af       	std	Y+62, r25	; 0x3e
    238c:	8d af       	std	Y+61, r24	; 0x3d
    238e:	46 c0       	rjmp	.+140    	; 0x241c <LCD_VidInit+0x574>
	else if (__tmp > 65535)
    2390:	fe 01       	movw	r30, r28
    2392:	ff 96       	adiw	r30, 0x3f	; 63
    2394:	60 81       	ld	r22, Z
    2396:	71 81       	ldd	r23, Z+1	; 0x01
    2398:	82 81       	ldd	r24, Z+2	; 0x02
    239a:	93 81       	ldd	r25, Z+3	; 0x03
    239c:	20 e0       	ldi	r18, 0x00	; 0
    239e:	3f ef       	ldi	r19, 0xFF	; 255
    23a0:	4f e7       	ldi	r20, 0x7F	; 127
    23a2:	57 e4       	ldi	r21, 0x47	; 71
    23a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23a8:	18 16       	cp	r1, r24
    23aa:	64 f5       	brge	.+88     	; 0x2404 <LCD_VidInit+0x55c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ac:	fe 01       	movw	r30, r28
    23ae:	ed 5b       	subi	r30, 0xBD	; 189
    23b0:	ff 4f       	sbci	r31, 0xFF	; 255
    23b2:	60 81       	ld	r22, Z
    23b4:	71 81       	ldd	r23, Z+1	; 0x01
    23b6:	82 81       	ldd	r24, Z+2	; 0x02
    23b8:	93 81       	ldd	r25, Z+3	; 0x03
    23ba:	20 e0       	ldi	r18, 0x00	; 0
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	40 e2       	ldi	r20, 0x20	; 32
    23c0:	51 e4       	ldi	r21, 0x41	; 65
    23c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c6:	dc 01       	movw	r26, r24
    23c8:	cb 01       	movw	r24, r22
    23ca:	bc 01       	movw	r22, r24
    23cc:	cd 01       	movw	r24, r26
    23ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d2:	dc 01       	movw	r26, r24
    23d4:	cb 01       	movw	r24, r22
    23d6:	9e af       	std	Y+62, r25	; 0x3e
    23d8:	8d af       	std	Y+61, r24	; 0x3d
    23da:	0f c0       	rjmp	.+30     	; 0x23fa <LCD_VidInit+0x552>
    23dc:	88 ec       	ldi	r24, 0xC8	; 200
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	9c af       	std	Y+60, r25	; 0x3c
    23e2:	8b af       	std	Y+59, r24	; 0x3b
    23e4:	8b ad       	ldd	r24, Y+59	; 0x3b
    23e6:	9c ad       	ldd	r25, Y+60	; 0x3c
    23e8:	01 97       	sbiw	r24, 0x01	; 1
    23ea:	f1 f7       	brne	.-4      	; 0x23e8 <LCD_VidInit+0x540>
    23ec:	9c af       	std	Y+60, r25	; 0x3c
    23ee:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23f0:	8d ad       	ldd	r24, Y+61	; 0x3d
    23f2:	9e ad       	ldd	r25, Y+62	; 0x3e
    23f4:	01 97       	sbiw	r24, 0x01	; 1
    23f6:	9e af       	std	Y+62, r25	; 0x3e
    23f8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23fa:	8d ad       	ldd	r24, Y+61	; 0x3d
    23fc:	9e ad       	ldd	r25, Y+62	; 0x3e
    23fe:	00 97       	sbiw	r24, 0x00	; 0
    2400:	69 f7       	brne	.-38     	; 0x23dc <LCD_VidInit+0x534>
    2402:	16 c0       	rjmp	.+44     	; 0x2430 <LCD_VidInit+0x588>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2404:	fe 01       	movw	r30, r28
    2406:	ff 96       	adiw	r30, 0x3f	; 63
    2408:	60 81       	ld	r22, Z
    240a:	71 81       	ldd	r23, Z+1	; 0x01
    240c:	82 81       	ldd	r24, Z+2	; 0x02
    240e:	93 81       	ldd	r25, Z+3	; 0x03
    2410:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2414:	dc 01       	movw	r26, r24
    2416:	cb 01       	movw	r24, r22
    2418:	9e af       	std	Y+62, r25	; 0x3e
    241a:	8d af       	std	Y+61, r24	; 0x3d
    241c:	8d ad       	ldd	r24, Y+61	; 0x3d
    241e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2420:	9a af       	std	Y+58, r25	; 0x3a
    2422:	89 af       	std	Y+57, r24	; 0x39
    2424:	89 ad       	ldd	r24, Y+57	; 0x39
    2426:	9a ad       	ldd	r25, Y+58	; 0x3a
    2428:	01 97       	sbiw	r24, 0x01	; 1
    242a:	f1 f7       	brne	.-4      	; 0x2428 <LCD_VidInit+0x580>
    242c:	9a af       	std	Y+58, r25	; 0x3a
    242e:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(2);
	LCD_VidSendCommand(0x28);	/* 2 line, 5*7 matrix in 4-bit mode */
    2430:	88 e2       	ldi	r24, 0x28	; 40
    2432:	0e 94 09 16 	call	0x2c12	; 0x2c12 <LCD_VidSendCommand>
    2436:	80 e0       	ldi	r24, 0x00	; 0
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	a0 e0       	ldi	r26, 0x00	; 0
    243c:	b0 e4       	ldi	r27, 0x40	; 64
    243e:	8d ab       	std	Y+53, r24	; 0x35
    2440:	9e ab       	std	Y+54, r25	; 0x36
    2442:	af ab       	std	Y+55, r26	; 0x37
    2444:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2446:	6d a9       	ldd	r22, Y+53	; 0x35
    2448:	7e a9       	ldd	r23, Y+54	; 0x36
    244a:	8f a9       	ldd	r24, Y+55	; 0x37
    244c:	98 ad       	ldd	r25, Y+56	; 0x38
    244e:	20 e0       	ldi	r18, 0x00	; 0
    2450:	30 e0       	ldi	r19, 0x00	; 0
    2452:	4a ef       	ldi	r20, 0xFA	; 250
    2454:	54 e4       	ldi	r21, 0x44	; 68
    2456:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    245a:	dc 01       	movw	r26, r24
    245c:	cb 01       	movw	r24, r22
    245e:	89 ab       	std	Y+49, r24	; 0x31
    2460:	9a ab       	std	Y+50, r25	; 0x32
    2462:	ab ab       	std	Y+51, r26	; 0x33
    2464:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2466:	69 a9       	ldd	r22, Y+49	; 0x31
    2468:	7a a9       	ldd	r23, Y+50	; 0x32
    246a:	8b a9       	ldd	r24, Y+51	; 0x33
    246c:	9c a9       	ldd	r25, Y+52	; 0x34
    246e:	20 e0       	ldi	r18, 0x00	; 0
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	40 e8       	ldi	r20, 0x80	; 128
    2474:	5f e3       	ldi	r21, 0x3F	; 63
    2476:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    247a:	88 23       	and	r24, r24
    247c:	2c f4       	brge	.+10     	; 0x2488 <LCD_VidInit+0x5e0>
		__ticks = 1;
    247e:	81 e0       	ldi	r24, 0x01	; 1
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	98 ab       	std	Y+48, r25	; 0x30
    2484:	8f a7       	std	Y+47, r24	; 0x2f
    2486:	3f c0       	rjmp	.+126    	; 0x2506 <LCD_VidInit+0x65e>
	else if (__tmp > 65535)
    2488:	69 a9       	ldd	r22, Y+49	; 0x31
    248a:	7a a9       	ldd	r23, Y+50	; 0x32
    248c:	8b a9       	ldd	r24, Y+51	; 0x33
    248e:	9c a9       	ldd	r25, Y+52	; 0x34
    2490:	20 e0       	ldi	r18, 0x00	; 0
    2492:	3f ef       	ldi	r19, 0xFF	; 255
    2494:	4f e7       	ldi	r20, 0x7F	; 127
    2496:	57 e4       	ldi	r21, 0x47	; 71
    2498:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    249c:	18 16       	cp	r1, r24
    249e:	4c f5       	brge	.+82     	; 0x24f2 <LCD_VidInit+0x64a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24a0:	6d a9       	ldd	r22, Y+53	; 0x35
    24a2:	7e a9       	ldd	r23, Y+54	; 0x36
    24a4:	8f a9       	ldd	r24, Y+55	; 0x37
    24a6:	98 ad       	ldd	r25, Y+56	; 0x38
    24a8:	20 e0       	ldi	r18, 0x00	; 0
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	40 e2       	ldi	r20, 0x20	; 32
    24ae:	51 e4       	ldi	r21, 0x41	; 65
    24b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b4:	dc 01       	movw	r26, r24
    24b6:	cb 01       	movw	r24, r22
    24b8:	bc 01       	movw	r22, r24
    24ba:	cd 01       	movw	r24, r26
    24bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c0:	dc 01       	movw	r26, r24
    24c2:	cb 01       	movw	r24, r22
    24c4:	98 ab       	std	Y+48, r25	; 0x30
    24c6:	8f a7       	std	Y+47, r24	; 0x2f
    24c8:	0f c0       	rjmp	.+30     	; 0x24e8 <LCD_VidInit+0x640>
    24ca:	88 ec       	ldi	r24, 0xC8	; 200
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	9e a7       	std	Y+46, r25	; 0x2e
    24d0:	8d a7       	std	Y+45, r24	; 0x2d
    24d2:	8d a5       	ldd	r24, Y+45	; 0x2d
    24d4:	9e a5       	ldd	r25, Y+46	; 0x2e
    24d6:	01 97       	sbiw	r24, 0x01	; 1
    24d8:	f1 f7       	brne	.-4      	; 0x24d6 <LCD_VidInit+0x62e>
    24da:	9e a7       	std	Y+46, r25	; 0x2e
    24dc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24de:	8f a5       	ldd	r24, Y+47	; 0x2f
    24e0:	98 a9       	ldd	r25, Y+48	; 0x30
    24e2:	01 97       	sbiw	r24, 0x01	; 1
    24e4:	98 ab       	std	Y+48, r25	; 0x30
    24e6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    24ea:	98 a9       	ldd	r25, Y+48	; 0x30
    24ec:	00 97       	sbiw	r24, 0x00	; 0
    24ee:	69 f7       	brne	.-38     	; 0x24ca <LCD_VidInit+0x622>
    24f0:	14 c0       	rjmp	.+40     	; 0x251a <LCD_VidInit+0x672>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24f2:	69 a9       	ldd	r22, Y+49	; 0x31
    24f4:	7a a9       	ldd	r23, Y+50	; 0x32
    24f6:	8b a9       	ldd	r24, Y+51	; 0x33
    24f8:	9c a9       	ldd	r25, Y+52	; 0x34
    24fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24fe:	dc 01       	movw	r26, r24
    2500:	cb 01       	movw	r24, r22
    2502:	98 ab       	std	Y+48, r25	; 0x30
    2504:	8f a7       	std	Y+47, r24	; 0x2f
    2506:	8f a5       	ldd	r24, Y+47	; 0x2f
    2508:	98 a9       	ldd	r25, Y+48	; 0x30
    250a:	9c a7       	std	Y+44, r25	; 0x2c
    250c:	8b a7       	std	Y+43, r24	; 0x2b
    250e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2510:	9c a5       	ldd	r25, Y+44	; 0x2c
    2512:	01 97       	sbiw	r24, 0x01	; 1
    2514:	f1 f7       	brne	.-4      	; 0x2512 <LCD_VidInit+0x66a>
    2516:	9c a7       	std	Y+44, r25	; 0x2c
    2518:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	LCD_VidSendCommand(0x0c);	/* Display on cursor off */
    251a:	8c e0       	ldi	r24, 0x0C	; 12
    251c:	0e 94 09 16 	call	0x2c12	; 0x2c12 <LCD_VidSendCommand>
    2520:	80 e0       	ldi	r24, 0x00	; 0
    2522:	90 e0       	ldi	r25, 0x00	; 0
    2524:	a0 e0       	ldi	r26, 0x00	; 0
    2526:	b0 e4       	ldi	r27, 0x40	; 64
    2528:	8f a3       	std	Y+39, r24	; 0x27
    252a:	98 a7       	std	Y+40, r25	; 0x28
    252c:	a9 a7       	std	Y+41, r26	; 0x29
    252e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2530:	6f a1       	ldd	r22, Y+39	; 0x27
    2532:	78 a5       	ldd	r23, Y+40	; 0x28
    2534:	89 a5       	ldd	r24, Y+41	; 0x29
    2536:	9a a5       	ldd	r25, Y+42	; 0x2a
    2538:	20 e0       	ldi	r18, 0x00	; 0
    253a:	30 e0       	ldi	r19, 0x00	; 0
    253c:	4a ef       	ldi	r20, 0xFA	; 250
    253e:	54 e4       	ldi	r21, 0x44	; 68
    2540:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2544:	dc 01       	movw	r26, r24
    2546:	cb 01       	movw	r24, r22
    2548:	8b a3       	std	Y+35, r24	; 0x23
    254a:	9c a3       	std	Y+36, r25	; 0x24
    254c:	ad a3       	std	Y+37, r26	; 0x25
    254e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2550:	6b a1       	ldd	r22, Y+35	; 0x23
    2552:	7c a1       	ldd	r23, Y+36	; 0x24
    2554:	8d a1       	ldd	r24, Y+37	; 0x25
    2556:	9e a1       	ldd	r25, Y+38	; 0x26
    2558:	20 e0       	ldi	r18, 0x00	; 0
    255a:	30 e0       	ldi	r19, 0x00	; 0
    255c:	40 e8       	ldi	r20, 0x80	; 128
    255e:	5f e3       	ldi	r21, 0x3F	; 63
    2560:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2564:	88 23       	and	r24, r24
    2566:	2c f4       	brge	.+10     	; 0x2572 <LCD_VidInit+0x6ca>
		__ticks = 1;
    2568:	81 e0       	ldi	r24, 0x01	; 1
    256a:	90 e0       	ldi	r25, 0x00	; 0
    256c:	9a a3       	std	Y+34, r25	; 0x22
    256e:	89 a3       	std	Y+33, r24	; 0x21
    2570:	3f c0       	rjmp	.+126    	; 0x25f0 <LCD_VidInit+0x748>
	else if (__tmp > 65535)
    2572:	6b a1       	ldd	r22, Y+35	; 0x23
    2574:	7c a1       	ldd	r23, Y+36	; 0x24
    2576:	8d a1       	ldd	r24, Y+37	; 0x25
    2578:	9e a1       	ldd	r25, Y+38	; 0x26
    257a:	20 e0       	ldi	r18, 0x00	; 0
    257c:	3f ef       	ldi	r19, 0xFF	; 255
    257e:	4f e7       	ldi	r20, 0x7F	; 127
    2580:	57 e4       	ldi	r21, 0x47	; 71
    2582:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2586:	18 16       	cp	r1, r24
    2588:	4c f5       	brge	.+82     	; 0x25dc <LCD_VidInit+0x734>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    258a:	6f a1       	ldd	r22, Y+39	; 0x27
    258c:	78 a5       	ldd	r23, Y+40	; 0x28
    258e:	89 a5       	ldd	r24, Y+41	; 0x29
    2590:	9a a5       	ldd	r25, Y+42	; 0x2a
    2592:	20 e0       	ldi	r18, 0x00	; 0
    2594:	30 e0       	ldi	r19, 0x00	; 0
    2596:	40 e2       	ldi	r20, 0x20	; 32
    2598:	51 e4       	ldi	r21, 0x41	; 65
    259a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    259e:	dc 01       	movw	r26, r24
    25a0:	cb 01       	movw	r24, r22
    25a2:	bc 01       	movw	r22, r24
    25a4:	cd 01       	movw	r24, r26
    25a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25aa:	dc 01       	movw	r26, r24
    25ac:	cb 01       	movw	r24, r22
    25ae:	9a a3       	std	Y+34, r25	; 0x22
    25b0:	89 a3       	std	Y+33, r24	; 0x21
    25b2:	0f c0       	rjmp	.+30     	; 0x25d2 <LCD_VidInit+0x72a>
    25b4:	88 ec       	ldi	r24, 0xC8	; 200
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	98 a3       	std	Y+32, r25	; 0x20
    25ba:	8f 8f       	std	Y+31, r24	; 0x1f
    25bc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25be:	98 a1       	ldd	r25, Y+32	; 0x20
    25c0:	01 97       	sbiw	r24, 0x01	; 1
    25c2:	f1 f7       	brne	.-4      	; 0x25c0 <LCD_VidInit+0x718>
    25c4:	98 a3       	std	Y+32, r25	; 0x20
    25c6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25c8:	89 a1       	ldd	r24, Y+33	; 0x21
    25ca:	9a a1       	ldd	r25, Y+34	; 0x22
    25cc:	01 97       	sbiw	r24, 0x01	; 1
    25ce:	9a a3       	std	Y+34, r25	; 0x22
    25d0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25d2:	89 a1       	ldd	r24, Y+33	; 0x21
    25d4:	9a a1       	ldd	r25, Y+34	; 0x22
    25d6:	00 97       	sbiw	r24, 0x00	; 0
    25d8:	69 f7       	brne	.-38     	; 0x25b4 <LCD_VidInit+0x70c>
    25da:	14 c0       	rjmp	.+40     	; 0x2604 <LCD_VidInit+0x75c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25dc:	6b a1       	ldd	r22, Y+35	; 0x23
    25de:	7c a1       	ldd	r23, Y+36	; 0x24
    25e0:	8d a1       	ldd	r24, Y+37	; 0x25
    25e2:	9e a1       	ldd	r25, Y+38	; 0x26
    25e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25e8:	dc 01       	movw	r26, r24
    25ea:	cb 01       	movw	r24, r22
    25ec:	9a a3       	std	Y+34, r25	; 0x22
    25ee:	89 a3       	std	Y+33, r24	; 0x21
    25f0:	89 a1       	ldd	r24, Y+33	; 0x21
    25f2:	9a a1       	ldd	r25, Y+34	; 0x22
    25f4:	9e 8f       	std	Y+30, r25	; 0x1e
    25f6:	8d 8f       	std	Y+29, r24	; 0x1d
    25f8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25fa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25fc:	01 97       	sbiw	r24, 0x01	; 1
    25fe:	f1 f7       	brne	.-4      	; 0x25fc <LCD_VidInit+0x754>
    2600:	9e 8f       	std	Y+30, r25	; 0x1e
    2602:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	LCD_VidSendCommand(0x06);	/* Increment cursor (shift cursor to right) */
    2604:	86 e0       	ldi	r24, 0x06	; 6
    2606:	0e 94 09 16 	call	0x2c12	; 0x2c12 <LCD_VidSendCommand>
    260a:	80 e0       	ldi	r24, 0x00	; 0
    260c:	90 e0       	ldi	r25, 0x00	; 0
    260e:	a0 e0       	ldi	r26, 0x00	; 0
    2610:	b0 e4       	ldi	r27, 0x40	; 64
    2612:	89 8f       	std	Y+25, r24	; 0x19
    2614:	9a 8f       	std	Y+26, r25	; 0x1a
    2616:	ab 8f       	std	Y+27, r26	; 0x1b
    2618:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    261a:	69 8d       	ldd	r22, Y+25	; 0x19
    261c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    261e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2620:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2622:	20 e0       	ldi	r18, 0x00	; 0
    2624:	30 e0       	ldi	r19, 0x00	; 0
    2626:	4a ef       	ldi	r20, 0xFA	; 250
    2628:	54 e4       	ldi	r21, 0x44	; 68
    262a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    262e:	dc 01       	movw	r26, r24
    2630:	cb 01       	movw	r24, r22
    2632:	8d 8b       	std	Y+21, r24	; 0x15
    2634:	9e 8b       	std	Y+22, r25	; 0x16
    2636:	af 8b       	std	Y+23, r26	; 0x17
    2638:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    263a:	6d 89       	ldd	r22, Y+21	; 0x15
    263c:	7e 89       	ldd	r23, Y+22	; 0x16
    263e:	8f 89       	ldd	r24, Y+23	; 0x17
    2640:	98 8d       	ldd	r25, Y+24	; 0x18
    2642:	20 e0       	ldi	r18, 0x00	; 0
    2644:	30 e0       	ldi	r19, 0x00	; 0
    2646:	40 e8       	ldi	r20, 0x80	; 128
    2648:	5f e3       	ldi	r21, 0x3F	; 63
    264a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    264e:	88 23       	and	r24, r24
    2650:	2c f4       	brge	.+10     	; 0x265c <LCD_VidInit+0x7b4>
		__ticks = 1;
    2652:	81 e0       	ldi	r24, 0x01	; 1
    2654:	90 e0       	ldi	r25, 0x00	; 0
    2656:	9c 8b       	std	Y+20, r25	; 0x14
    2658:	8b 8b       	std	Y+19, r24	; 0x13
    265a:	3f c0       	rjmp	.+126    	; 0x26da <LCD_VidInit+0x832>
	else if (__tmp > 65535)
    265c:	6d 89       	ldd	r22, Y+21	; 0x15
    265e:	7e 89       	ldd	r23, Y+22	; 0x16
    2660:	8f 89       	ldd	r24, Y+23	; 0x17
    2662:	98 8d       	ldd	r25, Y+24	; 0x18
    2664:	20 e0       	ldi	r18, 0x00	; 0
    2666:	3f ef       	ldi	r19, 0xFF	; 255
    2668:	4f e7       	ldi	r20, 0x7F	; 127
    266a:	57 e4       	ldi	r21, 0x47	; 71
    266c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2670:	18 16       	cp	r1, r24
    2672:	4c f5       	brge	.+82     	; 0x26c6 <LCD_VidInit+0x81e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2674:	69 8d       	ldd	r22, Y+25	; 0x19
    2676:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2678:	8b 8d       	ldd	r24, Y+27	; 0x1b
    267a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    267c:	20 e0       	ldi	r18, 0x00	; 0
    267e:	30 e0       	ldi	r19, 0x00	; 0
    2680:	40 e2       	ldi	r20, 0x20	; 32
    2682:	51 e4       	ldi	r21, 0x41	; 65
    2684:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2688:	dc 01       	movw	r26, r24
    268a:	cb 01       	movw	r24, r22
    268c:	bc 01       	movw	r22, r24
    268e:	cd 01       	movw	r24, r26
    2690:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2694:	dc 01       	movw	r26, r24
    2696:	cb 01       	movw	r24, r22
    2698:	9c 8b       	std	Y+20, r25	; 0x14
    269a:	8b 8b       	std	Y+19, r24	; 0x13
    269c:	0f c0       	rjmp	.+30     	; 0x26bc <LCD_VidInit+0x814>
    269e:	88 ec       	ldi	r24, 0xC8	; 200
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	9a 8b       	std	Y+18, r25	; 0x12
    26a4:	89 8b       	std	Y+17, r24	; 0x11
    26a6:	89 89       	ldd	r24, Y+17	; 0x11
    26a8:	9a 89       	ldd	r25, Y+18	; 0x12
    26aa:	01 97       	sbiw	r24, 0x01	; 1
    26ac:	f1 f7       	brne	.-4      	; 0x26aa <LCD_VidInit+0x802>
    26ae:	9a 8b       	std	Y+18, r25	; 0x12
    26b0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26b2:	8b 89       	ldd	r24, Y+19	; 0x13
    26b4:	9c 89       	ldd	r25, Y+20	; 0x14
    26b6:	01 97       	sbiw	r24, 0x01	; 1
    26b8:	9c 8b       	std	Y+20, r25	; 0x14
    26ba:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26bc:	8b 89       	ldd	r24, Y+19	; 0x13
    26be:	9c 89       	ldd	r25, Y+20	; 0x14
    26c0:	00 97       	sbiw	r24, 0x00	; 0
    26c2:	69 f7       	brne	.-38     	; 0x269e <LCD_VidInit+0x7f6>
    26c4:	14 c0       	rjmp	.+40     	; 0x26ee <LCD_VidInit+0x846>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26c6:	6d 89       	ldd	r22, Y+21	; 0x15
    26c8:	7e 89       	ldd	r23, Y+22	; 0x16
    26ca:	8f 89       	ldd	r24, Y+23	; 0x17
    26cc:	98 8d       	ldd	r25, Y+24	; 0x18
    26ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26d2:	dc 01       	movw	r26, r24
    26d4:	cb 01       	movw	r24, r22
    26d6:	9c 8b       	std	Y+20, r25	; 0x14
    26d8:	8b 8b       	std	Y+19, r24	; 0x13
    26da:	8b 89       	ldd	r24, Y+19	; 0x13
    26dc:	9c 89       	ldd	r25, Y+20	; 0x14
    26de:	98 8b       	std	Y+16, r25	; 0x10
    26e0:	8f 87       	std	Y+15, r24	; 0x0f
    26e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    26e4:	98 89       	ldd	r25, Y+16	; 0x10
    26e6:	01 97       	sbiw	r24, 0x01	; 1
    26e8:	f1 f7       	brne	.-4      	; 0x26e6 <LCD_VidInit+0x83e>
    26ea:	98 8b       	std	Y+16, r25	; 0x10
    26ec:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	LCD_VidSendCommand(0x01);	/* Clear display screen */
    26ee:	81 e0       	ldi	r24, 0x01	; 1
    26f0:	0e 94 09 16 	call	0x2c12	; 0x2c12 <LCD_VidSendCommand>
    26f4:	80 e0       	ldi	r24, 0x00	; 0
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	a0 e0       	ldi	r26, 0x00	; 0
    26fa:	b0 e4       	ldi	r27, 0x40	; 64
    26fc:	8b 87       	std	Y+11, r24	; 0x0b
    26fe:	9c 87       	std	Y+12, r25	; 0x0c
    2700:	ad 87       	std	Y+13, r26	; 0x0d
    2702:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2704:	6b 85       	ldd	r22, Y+11	; 0x0b
    2706:	7c 85       	ldd	r23, Y+12	; 0x0c
    2708:	8d 85       	ldd	r24, Y+13	; 0x0d
    270a:	9e 85       	ldd	r25, Y+14	; 0x0e
    270c:	20 e0       	ldi	r18, 0x00	; 0
    270e:	30 e0       	ldi	r19, 0x00	; 0
    2710:	4a ef       	ldi	r20, 0xFA	; 250
    2712:	54 e4       	ldi	r21, 0x44	; 68
    2714:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2718:	dc 01       	movw	r26, r24
    271a:	cb 01       	movw	r24, r22
    271c:	8f 83       	std	Y+7, r24	; 0x07
    271e:	98 87       	std	Y+8, r25	; 0x08
    2720:	a9 87       	std	Y+9, r26	; 0x09
    2722:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2724:	6f 81       	ldd	r22, Y+7	; 0x07
    2726:	78 85       	ldd	r23, Y+8	; 0x08
    2728:	89 85       	ldd	r24, Y+9	; 0x09
    272a:	9a 85       	ldd	r25, Y+10	; 0x0a
    272c:	20 e0       	ldi	r18, 0x00	; 0
    272e:	30 e0       	ldi	r19, 0x00	; 0
    2730:	40 e8       	ldi	r20, 0x80	; 128
    2732:	5f e3       	ldi	r21, 0x3F	; 63
    2734:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2738:	88 23       	and	r24, r24
    273a:	2c f4       	brge	.+10     	; 0x2746 <LCD_VidInit+0x89e>
		__ticks = 1;
    273c:	81 e0       	ldi	r24, 0x01	; 1
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	9e 83       	std	Y+6, r25	; 0x06
    2742:	8d 83       	std	Y+5, r24	; 0x05
    2744:	3f c0       	rjmp	.+126    	; 0x27c4 <LCD_VidInit+0x91c>
	else if (__tmp > 65535)
    2746:	6f 81       	ldd	r22, Y+7	; 0x07
    2748:	78 85       	ldd	r23, Y+8	; 0x08
    274a:	89 85       	ldd	r24, Y+9	; 0x09
    274c:	9a 85       	ldd	r25, Y+10	; 0x0a
    274e:	20 e0       	ldi	r18, 0x00	; 0
    2750:	3f ef       	ldi	r19, 0xFF	; 255
    2752:	4f e7       	ldi	r20, 0x7F	; 127
    2754:	57 e4       	ldi	r21, 0x47	; 71
    2756:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    275a:	18 16       	cp	r1, r24
    275c:	4c f5       	brge	.+82     	; 0x27b0 <LCD_VidInit+0x908>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    275e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2760:	7c 85       	ldd	r23, Y+12	; 0x0c
    2762:	8d 85       	ldd	r24, Y+13	; 0x0d
    2764:	9e 85       	ldd	r25, Y+14	; 0x0e
    2766:	20 e0       	ldi	r18, 0x00	; 0
    2768:	30 e0       	ldi	r19, 0x00	; 0
    276a:	40 e2       	ldi	r20, 0x20	; 32
    276c:	51 e4       	ldi	r21, 0x41	; 65
    276e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2772:	dc 01       	movw	r26, r24
    2774:	cb 01       	movw	r24, r22
    2776:	bc 01       	movw	r22, r24
    2778:	cd 01       	movw	r24, r26
    277a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    277e:	dc 01       	movw	r26, r24
    2780:	cb 01       	movw	r24, r22
    2782:	9e 83       	std	Y+6, r25	; 0x06
    2784:	8d 83       	std	Y+5, r24	; 0x05
    2786:	0f c0       	rjmp	.+30     	; 0x27a6 <LCD_VidInit+0x8fe>
    2788:	88 ec       	ldi	r24, 0xC8	; 200
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	9c 83       	std	Y+4, r25	; 0x04
    278e:	8b 83       	std	Y+3, r24	; 0x03
    2790:	8b 81       	ldd	r24, Y+3	; 0x03
    2792:	9c 81       	ldd	r25, Y+4	; 0x04
    2794:	01 97       	sbiw	r24, 0x01	; 1
    2796:	f1 f7       	brne	.-4      	; 0x2794 <LCD_VidInit+0x8ec>
    2798:	9c 83       	std	Y+4, r25	; 0x04
    279a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    279c:	8d 81       	ldd	r24, Y+5	; 0x05
    279e:	9e 81       	ldd	r25, Y+6	; 0x06
    27a0:	01 97       	sbiw	r24, 0x01	; 1
    27a2:	9e 83       	std	Y+6, r25	; 0x06
    27a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27a6:	8d 81       	ldd	r24, Y+5	; 0x05
    27a8:	9e 81       	ldd	r25, Y+6	; 0x06
    27aa:	00 97       	sbiw	r24, 0x00	; 0
    27ac:	69 f7       	brne	.-38     	; 0x2788 <LCD_VidInit+0x8e0>
    27ae:	14 c0       	rjmp	.+40     	; 0x27d8 <LCD_VidInit+0x930>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27b0:	6f 81       	ldd	r22, Y+7	; 0x07
    27b2:	78 85       	ldd	r23, Y+8	; 0x08
    27b4:	89 85       	ldd	r24, Y+9	; 0x09
    27b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    27b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27bc:	dc 01       	movw	r26, r24
    27be:	cb 01       	movw	r24, r22
    27c0:	9e 83       	std	Y+6, r25	; 0x06
    27c2:	8d 83       	std	Y+5, r24	; 0x05
    27c4:	8d 81       	ldd	r24, Y+5	; 0x05
    27c6:	9e 81       	ldd	r25, Y+6	; 0x06
    27c8:	9a 83       	std	Y+2, r25	; 0x02
    27ca:	89 83       	std	Y+1, r24	; 0x01
    27cc:	89 81       	ldd	r24, Y+1	; 0x01
    27ce:	9a 81       	ldd	r25, Y+2	; 0x02
    27d0:	01 97       	sbiw	r24, 0x01	; 1
    27d2:	f1 f7       	brne	.-4      	; 0x27d0 <LCD_VidInit+0x928>
    27d4:	9a 83       	std	Y+2, r25	; 0x02
    27d6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

	#endif
}
    27d8:	c0 59       	subi	r28, 0x90	; 144
    27da:	df 4f       	sbci	r29, 0xFF	; 255
    27dc:	0f b6       	in	r0, 0x3f	; 63
    27de:	f8 94       	cli
    27e0:	de bf       	out	0x3e, r29	; 62
    27e2:	0f be       	out	0x3f, r0	; 63
    27e4:	cd bf       	out	0x3d, r28	; 61
    27e6:	cf 91       	pop	r28
    27e8:	df 91       	pop	r29
    27ea:	1f 91       	pop	r17
    27ec:	0f 91       	pop	r16
    27ee:	08 95       	ret

000027f0 <LCD_VidSendData>:

void LCD_VidSendData(u8 copy_u8data)
{
    27f0:	df 93       	push	r29
    27f2:	cf 93       	push	r28
    27f4:	cd b7       	in	r28, 0x3d	; 61
    27f6:	de b7       	in	r29, 0x3e	; 62
    27f8:	e9 97       	sbiw	r28, 0x39	; 57
    27fa:	0f b6       	in	r0, 0x3f	; 63
    27fc:	f8 94       	cli
    27fe:	de bf       	out	0x3e, r29	; 62
    2800:	0f be       	out	0x3f, r0	; 63
    2802:	cd bf       	out	0x3d, r28	; 61
    2804:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(1);
		DIO_VidSetPinValue(Lcopy_u8PORT,  E_copy_u8Pin,0);   // E=0 Display Command
        _delay_ms(1);
		
	#elif LCD_Mode==FOUR_BIT
		DIO_VidSetPortValue(LDcopy_u8PORT,(LDcopy_u8PORT & 0x0F)|(copy_u8data & 0xF0));
    2806:	89 ad       	ldd	r24, Y+57	; 0x39
    2808:	80 7f       	andi	r24, 0xF0	; 240
    280a:	82 60       	ori	r24, 0x02	; 2
    280c:	98 2f       	mov	r25, r24
    280e:	82 e0       	ldi	r24, 0x02	; 2
    2810:	69 2f       	mov	r22, r25
    2812:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <DIO_VidSetPortValue>
		DIO_VidSetPinValue(Lcopy_u8PORT,  RS_copy_u8Pin,1);
    2816:	80 e0       	ldi	r24, 0x00	; 0
    2818:	60 e0       	ldi	r22, 0x00	; 0
    281a:	41 e0       	ldi	r20, 0x01	; 1
    281c:	0e 94 75 08 	call	0x10ea	; 0x10ea <DIO_VidSetPinValue>
		DIO_VidSetPinValue(Lcopy_u8PORT,  R_w_copy_u8Pin,0);
    2820:	80 e0       	ldi	r24, 0x00	; 0
    2822:	61 e0       	ldi	r22, 0x01	; 1
    2824:	40 e0       	ldi	r20, 0x00	; 0
    2826:	0e 94 75 08 	call	0x10ea	; 0x10ea <DIO_VidSetPinValue>
		DIO_VidSetPinValue(Lcopy_u8PORT,  E_copy_u8Pin,1);  // E=1; Upload Command
    282a:	80 e0       	ldi	r24, 0x00	; 0
    282c:	62 e0       	ldi	r22, 0x02	; 2
    282e:	41 e0       	ldi	r20, 0x01	; 1
    2830:	0e 94 75 08 	call	0x10ea	; 0x10ea <DIO_VidSetPinValue>
    2834:	80 e0       	ldi	r24, 0x00	; 0
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	a0 e0       	ldi	r26, 0x00	; 0
    283a:	b0 e4       	ldi	r27, 0x40	; 64
    283c:	8d ab       	std	Y+53, r24	; 0x35
    283e:	9e ab       	std	Y+54, r25	; 0x36
    2840:	af ab       	std	Y+55, r26	; 0x37
    2842:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2844:	6d a9       	ldd	r22, Y+53	; 0x35
    2846:	7e a9       	ldd	r23, Y+54	; 0x36
    2848:	8f a9       	ldd	r24, Y+55	; 0x37
    284a:	98 ad       	ldd	r25, Y+56	; 0x38
    284c:	20 e0       	ldi	r18, 0x00	; 0
    284e:	30 e0       	ldi	r19, 0x00	; 0
    2850:	4a ef       	ldi	r20, 0xFA	; 250
    2852:	54 e4       	ldi	r21, 0x44	; 68
    2854:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2858:	dc 01       	movw	r26, r24
    285a:	cb 01       	movw	r24, r22
    285c:	89 ab       	std	Y+49, r24	; 0x31
    285e:	9a ab       	std	Y+50, r25	; 0x32
    2860:	ab ab       	std	Y+51, r26	; 0x33
    2862:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2864:	69 a9       	ldd	r22, Y+49	; 0x31
    2866:	7a a9       	ldd	r23, Y+50	; 0x32
    2868:	8b a9       	ldd	r24, Y+51	; 0x33
    286a:	9c a9       	ldd	r25, Y+52	; 0x34
    286c:	20 e0       	ldi	r18, 0x00	; 0
    286e:	30 e0       	ldi	r19, 0x00	; 0
    2870:	40 e8       	ldi	r20, 0x80	; 128
    2872:	5f e3       	ldi	r21, 0x3F	; 63
    2874:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2878:	88 23       	and	r24, r24
    287a:	2c f4       	brge	.+10     	; 0x2886 <LCD_VidSendData+0x96>
		__ticks = 1;
    287c:	81 e0       	ldi	r24, 0x01	; 1
    287e:	90 e0       	ldi	r25, 0x00	; 0
    2880:	98 ab       	std	Y+48, r25	; 0x30
    2882:	8f a7       	std	Y+47, r24	; 0x2f
    2884:	3f c0       	rjmp	.+126    	; 0x2904 <LCD_VidSendData+0x114>
	else if (__tmp > 65535)
    2886:	69 a9       	ldd	r22, Y+49	; 0x31
    2888:	7a a9       	ldd	r23, Y+50	; 0x32
    288a:	8b a9       	ldd	r24, Y+51	; 0x33
    288c:	9c a9       	ldd	r25, Y+52	; 0x34
    288e:	20 e0       	ldi	r18, 0x00	; 0
    2890:	3f ef       	ldi	r19, 0xFF	; 255
    2892:	4f e7       	ldi	r20, 0x7F	; 127
    2894:	57 e4       	ldi	r21, 0x47	; 71
    2896:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    289a:	18 16       	cp	r1, r24
    289c:	4c f5       	brge	.+82     	; 0x28f0 <LCD_VidSendData+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    289e:	6d a9       	ldd	r22, Y+53	; 0x35
    28a0:	7e a9       	ldd	r23, Y+54	; 0x36
    28a2:	8f a9       	ldd	r24, Y+55	; 0x37
    28a4:	98 ad       	ldd	r25, Y+56	; 0x38
    28a6:	20 e0       	ldi	r18, 0x00	; 0
    28a8:	30 e0       	ldi	r19, 0x00	; 0
    28aa:	40 e2       	ldi	r20, 0x20	; 32
    28ac:	51 e4       	ldi	r21, 0x41	; 65
    28ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28b2:	dc 01       	movw	r26, r24
    28b4:	cb 01       	movw	r24, r22
    28b6:	bc 01       	movw	r22, r24
    28b8:	cd 01       	movw	r24, r26
    28ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28be:	dc 01       	movw	r26, r24
    28c0:	cb 01       	movw	r24, r22
    28c2:	98 ab       	std	Y+48, r25	; 0x30
    28c4:	8f a7       	std	Y+47, r24	; 0x2f
    28c6:	0f c0       	rjmp	.+30     	; 0x28e6 <LCD_VidSendData+0xf6>
    28c8:	88 ec       	ldi	r24, 0xC8	; 200
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	9e a7       	std	Y+46, r25	; 0x2e
    28ce:	8d a7       	std	Y+45, r24	; 0x2d
    28d0:	8d a5       	ldd	r24, Y+45	; 0x2d
    28d2:	9e a5       	ldd	r25, Y+46	; 0x2e
    28d4:	01 97       	sbiw	r24, 0x01	; 1
    28d6:	f1 f7       	brne	.-4      	; 0x28d4 <LCD_VidSendData+0xe4>
    28d8:	9e a7       	std	Y+46, r25	; 0x2e
    28da:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    28de:	98 a9       	ldd	r25, Y+48	; 0x30
    28e0:	01 97       	sbiw	r24, 0x01	; 1
    28e2:	98 ab       	std	Y+48, r25	; 0x30
    28e4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    28e8:	98 a9       	ldd	r25, Y+48	; 0x30
    28ea:	00 97       	sbiw	r24, 0x00	; 0
    28ec:	69 f7       	brne	.-38     	; 0x28c8 <LCD_VidSendData+0xd8>
    28ee:	14 c0       	rjmp	.+40     	; 0x2918 <LCD_VidSendData+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28f0:	69 a9       	ldd	r22, Y+49	; 0x31
    28f2:	7a a9       	ldd	r23, Y+50	; 0x32
    28f4:	8b a9       	ldd	r24, Y+51	; 0x33
    28f6:	9c a9       	ldd	r25, Y+52	; 0x34
    28f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28fc:	dc 01       	movw	r26, r24
    28fe:	cb 01       	movw	r24, r22
    2900:	98 ab       	std	Y+48, r25	; 0x30
    2902:	8f a7       	std	Y+47, r24	; 0x2f
    2904:	8f a5       	ldd	r24, Y+47	; 0x2f
    2906:	98 a9       	ldd	r25, Y+48	; 0x30
    2908:	9c a7       	std	Y+44, r25	; 0x2c
    290a:	8b a7       	std	Y+43, r24	; 0x2b
    290c:	8b a5       	ldd	r24, Y+43	; 0x2b
    290e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2910:	01 97       	sbiw	r24, 0x01	; 1
    2912:	f1 f7       	brne	.-4      	; 0x2910 <LCD_VidSendData+0x120>
    2914:	9c a7       	std	Y+44, r25	; 0x2c
    2916:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(2);
		DIO_VidSetPinValue(Lcopy_u8PORT,  E_copy_u8Pin,0);   // E=0 Display Command
    2918:	80 e0       	ldi	r24, 0x00	; 0
    291a:	62 e0       	ldi	r22, 0x02	; 2
    291c:	40 e0       	ldi	r20, 0x00	; 0
    291e:	0e 94 75 08 	call	0x10ea	; 0x10ea <DIO_VidSetPinValue>
    2922:	80 e0       	ldi	r24, 0x00	; 0
    2924:	90 e0       	ldi	r25, 0x00	; 0
    2926:	a0 e0       	ldi	r26, 0x00	; 0
    2928:	b0 e4       	ldi	r27, 0x40	; 64
    292a:	8f a3       	std	Y+39, r24	; 0x27
    292c:	98 a7       	std	Y+40, r25	; 0x28
    292e:	a9 a7       	std	Y+41, r26	; 0x29
    2930:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2932:	6f a1       	ldd	r22, Y+39	; 0x27
    2934:	78 a5       	ldd	r23, Y+40	; 0x28
    2936:	89 a5       	ldd	r24, Y+41	; 0x29
    2938:	9a a5       	ldd	r25, Y+42	; 0x2a
    293a:	20 e0       	ldi	r18, 0x00	; 0
    293c:	30 e0       	ldi	r19, 0x00	; 0
    293e:	4a ef       	ldi	r20, 0xFA	; 250
    2940:	54 e4       	ldi	r21, 0x44	; 68
    2942:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2946:	dc 01       	movw	r26, r24
    2948:	cb 01       	movw	r24, r22
    294a:	8b a3       	std	Y+35, r24	; 0x23
    294c:	9c a3       	std	Y+36, r25	; 0x24
    294e:	ad a3       	std	Y+37, r26	; 0x25
    2950:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2952:	6b a1       	ldd	r22, Y+35	; 0x23
    2954:	7c a1       	ldd	r23, Y+36	; 0x24
    2956:	8d a1       	ldd	r24, Y+37	; 0x25
    2958:	9e a1       	ldd	r25, Y+38	; 0x26
    295a:	20 e0       	ldi	r18, 0x00	; 0
    295c:	30 e0       	ldi	r19, 0x00	; 0
    295e:	40 e8       	ldi	r20, 0x80	; 128
    2960:	5f e3       	ldi	r21, 0x3F	; 63
    2962:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2966:	88 23       	and	r24, r24
    2968:	2c f4       	brge	.+10     	; 0x2974 <LCD_VidSendData+0x184>
		__ticks = 1;
    296a:	81 e0       	ldi	r24, 0x01	; 1
    296c:	90 e0       	ldi	r25, 0x00	; 0
    296e:	9a a3       	std	Y+34, r25	; 0x22
    2970:	89 a3       	std	Y+33, r24	; 0x21
    2972:	3f c0       	rjmp	.+126    	; 0x29f2 <LCD_VidSendData+0x202>
	else if (__tmp > 65535)
    2974:	6b a1       	ldd	r22, Y+35	; 0x23
    2976:	7c a1       	ldd	r23, Y+36	; 0x24
    2978:	8d a1       	ldd	r24, Y+37	; 0x25
    297a:	9e a1       	ldd	r25, Y+38	; 0x26
    297c:	20 e0       	ldi	r18, 0x00	; 0
    297e:	3f ef       	ldi	r19, 0xFF	; 255
    2980:	4f e7       	ldi	r20, 0x7F	; 127
    2982:	57 e4       	ldi	r21, 0x47	; 71
    2984:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2988:	18 16       	cp	r1, r24
    298a:	4c f5       	brge	.+82     	; 0x29de <LCD_VidSendData+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    298c:	6f a1       	ldd	r22, Y+39	; 0x27
    298e:	78 a5       	ldd	r23, Y+40	; 0x28
    2990:	89 a5       	ldd	r24, Y+41	; 0x29
    2992:	9a a5       	ldd	r25, Y+42	; 0x2a
    2994:	20 e0       	ldi	r18, 0x00	; 0
    2996:	30 e0       	ldi	r19, 0x00	; 0
    2998:	40 e2       	ldi	r20, 0x20	; 32
    299a:	51 e4       	ldi	r21, 0x41	; 65
    299c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29a0:	dc 01       	movw	r26, r24
    29a2:	cb 01       	movw	r24, r22
    29a4:	bc 01       	movw	r22, r24
    29a6:	cd 01       	movw	r24, r26
    29a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ac:	dc 01       	movw	r26, r24
    29ae:	cb 01       	movw	r24, r22
    29b0:	9a a3       	std	Y+34, r25	; 0x22
    29b2:	89 a3       	std	Y+33, r24	; 0x21
    29b4:	0f c0       	rjmp	.+30     	; 0x29d4 <LCD_VidSendData+0x1e4>
    29b6:	88 ec       	ldi	r24, 0xC8	; 200
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	98 a3       	std	Y+32, r25	; 0x20
    29bc:	8f 8f       	std	Y+31, r24	; 0x1f
    29be:	8f 8d       	ldd	r24, Y+31	; 0x1f
    29c0:	98 a1       	ldd	r25, Y+32	; 0x20
    29c2:	01 97       	sbiw	r24, 0x01	; 1
    29c4:	f1 f7       	brne	.-4      	; 0x29c2 <LCD_VidSendData+0x1d2>
    29c6:	98 a3       	std	Y+32, r25	; 0x20
    29c8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29ca:	89 a1       	ldd	r24, Y+33	; 0x21
    29cc:	9a a1       	ldd	r25, Y+34	; 0x22
    29ce:	01 97       	sbiw	r24, 0x01	; 1
    29d0:	9a a3       	std	Y+34, r25	; 0x22
    29d2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29d4:	89 a1       	ldd	r24, Y+33	; 0x21
    29d6:	9a a1       	ldd	r25, Y+34	; 0x22
    29d8:	00 97       	sbiw	r24, 0x00	; 0
    29da:	69 f7       	brne	.-38     	; 0x29b6 <LCD_VidSendData+0x1c6>
    29dc:	14 c0       	rjmp	.+40     	; 0x2a06 <LCD_VidSendData+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29de:	6b a1       	ldd	r22, Y+35	; 0x23
    29e0:	7c a1       	ldd	r23, Y+36	; 0x24
    29e2:	8d a1       	ldd	r24, Y+37	; 0x25
    29e4:	9e a1       	ldd	r25, Y+38	; 0x26
    29e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ea:	dc 01       	movw	r26, r24
    29ec:	cb 01       	movw	r24, r22
    29ee:	9a a3       	std	Y+34, r25	; 0x22
    29f0:	89 a3       	std	Y+33, r24	; 0x21
    29f2:	89 a1       	ldd	r24, Y+33	; 0x21
    29f4:	9a a1       	ldd	r25, Y+34	; 0x22
    29f6:	9e 8f       	std	Y+30, r25	; 0x1e
    29f8:	8d 8f       	std	Y+29, r24	; 0x1d
    29fa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29fc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    29fe:	01 97       	sbiw	r24, 0x01	; 1
    2a00:	f1 f7       	brne	.-4      	; 0x29fe <LCD_VidSendData+0x20e>
    2a02:	9e 8f       	std	Y+30, r25	; 0x1e
    2a04:	8d 8f       	std	Y+29, r24	; 0x1d

		_delay_ms(2);

		DIO_VidSetPortValue(LDcopy_u8PORT,(LDcopy_u8PORT& 0x0F)|(copy_u8data<<4));
    2a06:	89 ad       	ldd	r24, Y+57	; 0x39
    2a08:	88 2f       	mov	r24, r24
    2a0a:	90 e0       	ldi	r25, 0x00	; 0
    2a0c:	82 95       	swap	r24
    2a0e:	92 95       	swap	r25
    2a10:	90 7f       	andi	r25, 0xF0	; 240
    2a12:	98 27       	eor	r25, r24
    2a14:	80 7f       	andi	r24, 0xF0	; 240
    2a16:	98 27       	eor	r25, r24
    2a18:	82 60       	ori	r24, 0x02	; 2
    2a1a:	98 2f       	mov	r25, r24
    2a1c:	82 e0       	ldi	r24, 0x02	; 2
    2a1e:	69 2f       	mov	r22, r25
    2a20:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <DIO_VidSetPortValue>
		DIO_VidSetPinValue(Lcopy_u8PORT,  E_copy_u8Pin,1);  // E=1; Upload Command
    2a24:	80 e0       	ldi	r24, 0x00	; 0
    2a26:	62 e0       	ldi	r22, 0x02	; 2
    2a28:	41 e0       	ldi	r20, 0x01	; 1
    2a2a:	0e 94 75 08 	call	0x10ea	; 0x10ea <DIO_VidSetPinValue>
    2a2e:	80 e0       	ldi	r24, 0x00	; 0
    2a30:	90 e0       	ldi	r25, 0x00	; 0
    2a32:	a0 e0       	ldi	r26, 0x00	; 0
    2a34:	b0 e4       	ldi	r27, 0x40	; 64
    2a36:	89 8f       	std	Y+25, r24	; 0x19
    2a38:	9a 8f       	std	Y+26, r25	; 0x1a
    2a3a:	ab 8f       	std	Y+27, r26	; 0x1b
    2a3c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a3e:	69 8d       	ldd	r22, Y+25	; 0x19
    2a40:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a42:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a44:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a46:	20 e0       	ldi	r18, 0x00	; 0
    2a48:	30 e0       	ldi	r19, 0x00	; 0
    2a4a:	4a ef       	ldi	r20, 0xFA	; 250
    2a4c:	54 e4       	ldi	r21, 0x44	; 68
    2a4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a52:	dc 01       	movw	r26, r24
    2a54:	cb 01       	movw	r24, r22
    2a56:	8d 8b       	std	Y+21, r24	; 0x15
    2a58:	9e 8b       	std	Y+22, r25	; 0x16
    2a5a:	af 8b       	std	Y+23, r26	; 0x17
    2a5c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a5e:	6d 89       	ldd	r22, Y+21	; 0x15
    2a60:	7e 89       	ldd	r23, Y+22	; 0x16
    2a62:	8f 89       	ldd	r24, Y+23	; 0x17
    2a64:	98 8d       	ldd	r25, Y+24	; 0x18
    2a66:	20 e0       	ldi	r18, 0x00	; 0
    2a68:	30 e0       	ldi	r19, 0x00	; 0
    2a6a:	40 e8       	ldi	r20, 0x80	; 128
    2a6c:	5f e3       	ldi	r21, 0x3F	; 63
    2a6e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a72:	88 23       	and	r24, r24
    2a74:	2c f4       	brge	.+10     	; 0x2a80 <LCD_VidSendData+0x290>
		__ticks = 1;
    2a76:	81 e0       	ldi	r24, 0x01	; 1
    2a78:	90 e0       	ldi	r25, 0x00	; 0
    2a7a:	9c 8b       	std	Y+20, r25	; 0x14
    2a7c:	8b 8b       	std	Y+19, r24	; 0x13
    2a7e:	3f c0       	rjmp	.+126    	; 0x2afe <LCD_VidSendData+0x30e>
	else if (__tmp > 65535)
    2a80:	6d 89       	ldd	r22, Y+21	; 0x15
    2a82:	7e 89       	ldd	r23, Y+22	; 0x16
    2a84:	8f 89       	ldd	r24, Y+23	; 0x17
    2a86:	98 8d       	ldd	r25, Y+24	; 0x18
    2a88:	20 e0       	ldi	r18, 0x00	; 0
    2a8a:	3f ef       	ldi	r19, 0xFF	; 255
    2a8c:	4f e7       	ldi	r20, 0x7F	; 127
    2a8e:	57 e4       	ldi	r21, 0x47	; 71
    2a90:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a94:	18 16       	cp	r1, r24
    2a96:	4c f5       	brge	.+82     	; 0x2aea <LCD_VidSendData+0x2fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a98:	69 8d       	ldd	r22, Y+25	; 0x19
    2a9a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a9c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a9e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2aa0:	20 e0       	ldi	r18, 0x00	; 0
    2aa2:	30 e0       	ldi	r19, 0x00	; 0
    2aa4:	40 e2       	ldi	r20, 0x20	; 32
    2aa6:	51 e4       	ldi	r21, 0x41	; 65
    2aa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aac:	dc 01       	movw	r26, r24
    2aae:	cb 01       	movw	r24, r22
    2ab0:	bc 01       	movw	r22, r24
    2ab2:	cd 01       	movw	r24, r26
    2ab4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ab8:	dc 01       	movw	r26, r24
    2aba:	cb 01       	movw	r24, r22
    2abc:	9c 8b       	std	Y+20, r25	; 0x14
    2abe:	8b 8b       	std	Y+19, r24	; 0x13
    2ac0:	0f c0       	rjmp	.+30     	; 0x2ae0 <LCD_VidSendData+0x2f0>
    2ac2:	88 ec       	ldi	r24, 0xC8	; 200
    2ac4:	90 e0       	ldi	r25, 0x00	; 0
    2ac6:	9a 8b       	std	Y+18, r25	; 0x12
    2ac8:	89 8b       	std	Y+17, r24	; 0x11
    2aca:	89 89       	ldd	r24, Y+17	; 0x11
    2acc:	9a 89       	ldd	r25, Y+18	; 0x12
    2ace:	01 97       	sbiw	r24, 0x01	; 1
    2ad0:	f1 f7       	brne	.-4      	; 0x2ace <LCD_VidSendData+0x2de>
    2ad2:	9a 8b       	std	Y+18, r25	; 0x12
    2ad4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ad6:	8b 89       	ldd	r24, Y+19	; 0x13
    2ad8:	9c 89       	ldd	r25, Y+20	; 0x14
    2ada:	01 97       	sbiw	r24, 0x01	; 1
    2adc:	9c 8b       	std	Y+20, r25	; 0x14
    2ade:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ae0:	8b 89       	ldd	r24, Y+19	; 0x13
    2ae2:	9c 89       	ldd	r25, Y+20	; 0x14
    2ae4:	00 97       	sbiw	r24, 0x00	; 0
    2ae6:	69 f7       	brne	.-38     	; 0x2ac2 <LCD_VidSendData+0x2d2>
    2ae8:	14 c0       	rjmp	.+40     	; 0x2b12 <LCD_VidSendData+0x322>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aea:	6d 89       	ldd	r22, Y+21	; 0x15
    2aec:	7e 89       	ldd	r23, Y+22	; 0x16
    2aee:	8f 89       	ldd	r24, Y+23	; 0x17
    2af0:	98 8d       	ldd	r25, Y+24	; 0x18
    2af2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2af6:	dc 01       	movw	r26, r24
    2af8:	cb 01       	movw	r24, r22
    2afa:	9c 8b       	std	Y+20, r25	; 0x14
    2afc:	8b 8b       	std	Y+19, r24	; 0x13
    2afe:	8b 89       	ldd	r24, Y+19	; 0x13
    2b00:	9c 89       	ldd	r25, Y+20	; 0x14
    2b02:	98 8b       	std	Y+16, r25	; 0x10
    2b04:	8f 87       	std	Y+15, r24	; 0x0f
    2b06:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b08:	98 89       	ldd	r25, Y+16	; 0x10
    2b0a:	01 97       	sbiw	r24, 0x01	; 1
    2b0c:	f1 f7       	brne	.-4      	; 0x2b0a <LCD_VidSendData+0x31a>
    2b0e:	98 8b       	std	Y+16, r25	; 0x10
    2b10:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2);
		DIO_VidSetPinValue(Lcopy_u8PORT,  E_copy_u8Pin,0);   // E=0 Display Command
    2b12:	80 e0       	ldi	r24, 0x00	; 0
    2b14:	62 e0       	ldi	r22, 0x02	; 2
    2b16:	40 e0       	ldi	r20, 0x00	; 0
    2b18:	0e 94 75 08 	call	0x10ea	; 0x10ea <DIO_VidSetPinValue>
    2b1c:	80 e0       	ldi	r24, 0x00	; 0
    2b1e:	90 e0       	ldi	r25, 0x00	; 0
    2b20:	a0 e0       	ldi	r26, 0x00	; 0
    2b22:	b0 e4       	ldi	r27, 0x40	; 64
    2b24:	8b 87       	std	Y+11, r24	; 0x0b
    2b26:	9c 87       	std	Y+12, r25	; 0x0c
    2b28:	ad 87       	std	Y+13, r26	; 0x0d
    2b2a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b30:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b32:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b34:	20 e0       	ldi	r18, 0x00	; 0
    2b36:	30 e0       	ldi	r19, 0x00	; 0
    2b38:	4a ef       	ldi	r20, 0xFA	; 250
    2b3a:	54 e4       	ldi	r21, 0x44	; 68
    2b3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b40:	dc 01       	movw	r26, r24
    2b42:	cb 01       	movw	r24, r22
    2b44:	8f 83       	std	Y+7, r24	; 0x07
    2b46:	98 87       	std	Y+8, r25	; 0x08
    2b48:	a9 87       	std	Y+9, r26	; 0x09
    2b4a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b4c:	6f 81       	ldd	r22, Y+7	; 0x07
    2b4e:	78 85       	ldd	r23, Y+8	; 0x08
    2b50:	89 85       	ldd	r24, Y+9	; 0x09
    2b52:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b54:	20 e0       	ldi	r18, 0x00	; 0
    2b56:	30 e0       	ldi	r19, 0x00	; 0
    2b58:	40 e8       	ldi	r20, 0x80	; 128
    2b5a:	5f e3       	ldi	r21, 0x3F	; 63
    2b5c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b60:	88 23       	and	r24, r24
    2b62:	2c f4       	brge	.+10     	; 0x2b6e <LCD_VidSendData+0x37e>
		__ticks = 1;
    2b64:	81 e0       	ldi	r24, 0x01	; 1
    2b66:	90 e0       	ldi	r25, 0x00	; 0
    2b68:	9e 83       	std	Y+6, r25	; 0x06
    2b6a:	8d 83       	std	Y+5, r24	; 0x05
    2b6c:	3f c0       	rjmp	.+126    	; 0x2bec <LCD_VidSendData+0x3fc>
	else if (__tmp > 65535)
    2b6e:	6f 81       	ldd	r22, Y+7	; 0x07
    2b70:	78 85       	ldd	r23, Y+8	; 0x08
    2b72:	89 85       	ldd	r24, Y+9	; 0x09
    2b74:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b76:	20 e0       	ldi	r18, 0x00	; 0
    2b78:	3f ef       	ldi	r19, 0xFF	; 255
    2b7a:	4f e7       	ldi	r20, 0x7F	; 127
    2b7c:	57 e4       	ldi	r21, 0x47	; 71
    2b7e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b82:	18 16       	cp	r1, r24
    2b84:	4c f5       	brge	.+82     	; 0x2bd8 <LCD_VidSendData+0x3e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b86:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b88:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b8e:	20 e0       	ldi	r18, 0x00	; 0
    2b90:	30 e0       	ldi	r19, 0x00	; 0
    2b92:	40 e2       	ldi	r20, 0x20	; 32
    2b94:	51 e4       	ldi	r21, 0x41	; 65
    2b96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b9a:	dc 01       	movw	r26, r24
    2b9c:	cb 01       	movw	r24, r22
    2b9e:	bc 01       	movw	r22, r24
    2ba0:	cd 01       	movw	r24, r26
    2ba2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ba6:	dc 01       	movw	r26, r24
    2ba8:	cb 01       	movw	r24, r22
    2baa:	9e 83       	std	Y+6, r25	; 0x06
    2bac:	8d 83       	std	Y+5, r24	; 0x05
    2bae:	0f c0       	rjmp	.+30     	; 0x2bce <LCD_VidSendData+0x3de>
    2bb0:	88 ec       	ldi	r24, 0xC8	; 200
    2bb2:	90 e0       	ldi	r25, 0x00	; 0
    2bb4:	9c 83       	std	Y+4, r25	; 0x04
    2bb6:	8b 83       	std	Y+3, r24	; 0x03
    2bb8:	8b 81       	ldd	r24, Y+3	; 0x03
    2bba:	9c 81       	ldd	r25, Y+4	; 0x04
    2bbc:	01 97       	sbiw	r24, 0x01	; 1
    2bbe:	f1 f7       	brne	.-4      	; 0x2bbc <LCD_VidSendData+0x3cc>
    2bc0:	9c 83       	std	Y+4, r25	; 0x04
    2bc2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bc4:	8d 81       	ldd	r24, Y+5	; 0x05
    2bc6:	9e 81       	ldd	r25, Y+6	; 0x06
    2bc8:	01 97       	sbiw	r24, 0x01	; 1
    2bca:	9e 83       	std	Y+6, r25	; 0x06
    2bcc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bce:	8d 81       	ldd	r24, Y+5	; 0x05
    2bd0:	9e 81       	ldd	r25, Y+6	; 0x06
    2bd2:	00 97       	sbiw	r24, 0x00	; 0
    2bd4:	69 f7       	brne	.-38     	; 0x2bb0 <LCD_VidSendData+0x3c0>
    2bd6:	14 c0       	rjmp	.+40     	; 0x2c00 <LCD_VidSendData+0x410>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bd8:	6f 81       	ldd	r22, Y+7	; 0x07
    2bda:	78 85       	ldd	r23, Y+8	; 0x08
    2bdc:	89 85       	ldd	r24, Y+9	; 0x09
    2bde:	9a 85       	ldd	r25, Y+10	; 0x0a
    2be0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2be4:	dc 01       	movw	r26, r24
    2be6:	cb 01       	movw	r24, r22
    2be8:	9e 83       	std	Y+6, r25	; 0x06
    2bea:	8d 83       	std	Y+5, r24	; 0x05
    2bec:	8d 81       	ldd	r24, Y+5	; 0x05
    2bee:	9e 81       	ldd	r25, Y+6	; 0x06
    2bf0:	9a 83       	std	Y+2, r25	; 0x02
    2bf2:	89 83       	std	Y+1, r24	; 0x01
    2bf4:	89 81       	ldd	r24, Y+1	; 0x01
    2bf6:	9a 81       	ldd	r25, Y+2	; 0x02
    2bf8:	01 97       	sbiw	r24, 0x01	; 1
    2bfa:	f1 f7       	brne	.-4      	; 0x2bf8 <LCD_VidSendData+0x408>
    2bfc:	9a 83       	std	Y+2, r25	; 0x02
    2bfe:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);

	#endif
}
    2c00:	e9 96       	adiw	r28, 0x39	; 57
    2c02:	0f b6       	in	r0, 0x3f	; 63
    2c04:	f8 94       	cli
    2c06:	de bf       	out	0x3e, r29	; 62
    2c08:	0f be       	out	0x3f, r0	; 63
    2c0a:	cd bf       	out	0x3d, r28	; 61
    2c0c:	cf 91       	pop	r28
    2c0e:	df 91       	pop	r29
    2c10:	08 95       	ret

00002c12 <LCD_VidSendCommand>:

void LCD_VidSendCommand(u8 copy_u8command)
{
    2c12:	0f 93       	push	r16
    2c14:	1f 93       	push	r17
    2c16:	df 93       	push	r29
    2c18:	cf 93       	push	r28
    2c1a:	cd b7       	in	r28, 0x3d	; 61
    2c1c:	de b7       	in	r29, 0x3e	; 62
    2c1e:	c7 54       	subi	r28, 0x47	; 71
    2c20:	d0 40       	sbci	r29, 0x00	; 0
    2c22:	0f b6       	in	r0, 0x3f	; 63
    2c24:	f8 94       	cli
    2c26:	de bf       	out	0x3e, r29	; 62
    2c28:	0f be       	out	0x3f, r0	; 63
    2c2a:	cd bf       	out	0x3d, r28	; 61
    2c2c:	fe 01       	movw	r30, r28
    2c2e:	e9 5b       	subi	r30, 0xB9	; 185
    2c30:	ff 4f       	sbci	r31, 0xFF	; 255
    2c32:	80 83       	st	Z, r24
	_delay_ms(2);
	
	
	
	#elif LCD_Mode==FOUR_BIT
	DIO_VidSetPortValue(LDcopy_u8PORT,(LDcopy_u8PORT& 0x0F)|(copy_u8command&0xF0));
    2c34:	fe 01       	movw	r30, r28
    2c36:	e9 5b       	subi	r30, 0xB9	; 185
    2c38:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3a:	80 81       	ld	r24, Z
    2c3c:	80 7f       	andi	r24, 0xF0	; 240
    2c3e:	82 60       	ori	r24, 0x02	; 2
    2c40:	98 2f       	mov	r25, r24
    2c42:	82 e0       	ldi	r24, 0x02	; 2
    2c44:	69 2f       	mov	r22, r25
    2c46:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <DIO_VidSetPortValue>
	DIO_VidSetPinValue(Lcopy_u8PORT,  RS_copy_u8Pin,0);
    2c4a:	80 e0       	ldi	r24, 0x00	; 0
    2c4c:	60 e0       	ldi	r22, 0x00	; 0
    2c4e:	40 e0       	ldi	r20, 0x00	; 0
    2c50:	0e 94 75 08 	call	0x10ea	; 0x10ea <DIO_VidSetPinValue>
	DIO_VidSetPinValue(Lcopy_u8PORT,  R_w_copy_u8Pin,0);
    2c54:	80 e0       	ldi	r24, 0x00	; 0
    2c56:	61 e0       	ldi	r22, 0x01	; 1
    2c58:	40 e0       	ldi	r20, 0x00	; 0
    2c5a:	0e 94 75 08 	call	0x10ea	; 0x10ea <DIO_VidSetPinValue>
	DIO_VidSetPinValue(Lcopy_u8PORT,  E_copy_u8Pin,1);
    2c5e:	80 e0       	ldi	r24, 0x00	; 0
    2c60:	62 e0       	ldi	r22, 0x02	; 2
    2c62:	41 e0       	ldi	r20, 0x01	; 1
    2c64:	0e 94 75 08 	call	0x10ea	; 0x10ea <DIO_VidSetPinValue>
    2c68:	fe 01       	movw	r30, r28
    2c6a:	ed 5b       	subi	r30, 0xBD	; 189
    2c6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c6e:	80 e0       	ldi	r24, 0x00	; 0
    2c70:	90 e0       	ldi	r25, 0x00	; 0
    2c72:	a0 e0       	ldi	r26, 0x00	; 0
    2c74:	b0 e4       	ldi	r27, 0x40	; 64
    2c76:	80 83       	st	Z, r24
    2c78:	91 83       	std	Z+1, r25	; 0x01
    2c7a:	a2 83       	std	Z+2, r26	; 0x02
    2c7c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c7e:	8e 01       	movw	r16, r28
    2c80:	01 5c       	subi	r16, 0xC1	; 193
    2c82:	1f 4f       	sbci	r17, 0xFF	; 255
    2c84:	fe 01       	movw	r30, r28
    2c86:	ed 5b       	subi	r30, 0xBD	; 189
    2c88:	ff 4f       	sbci	r31, 0xFF	; 255
    2c8a:	60 81       	ld	r22, Z
    2c8c:	71 81       	ldd	r23, Z+1	; 0x01
    2c8e:	82 81       	ldd	r24, Z+2	; 0x02
    2c90:	93 81       	ldd	r25, Z+3	; 0x03
    2c92:	20 e0       	ldi	r18, 0x00	; 0
    2c94:	30 e0       	ldi	r19, 0x00	; 0
    2c96:	4a ef       	ldi	r20, 0xFA	; 250
    2c98:	54 e4       	ldi	r21, 0x44	; 68
    2c9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c9e:	dc 01       	movw	r26, r24
    2ca0:	cb 01       	movw	r24, r22
    2ca2:	f8 01       	movw	r30, r16
    2ca4:	80 83       	st	Z, r24
    2ca6:	91 83       	std	Z+1, r25	; 0x01
    2ca8:	a2 83       	std	Z+2, r26	; 0x02
    2caa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2cac:	fe 01       	movw	r30, r28
    2cae:	ff 96       	adiw	r30, 0x3f	; 63
    2cb0:	60 81       	ld	r22, Z
    2cb2:	71 81       	ldd	r23, Z+1	; 0x01
    2cb4:	82 81       	ldd	r24, Z+2	; 0x02
    2cb6:	93 81       	ldd	r25, Z+3	; 0x03
    2cb8:	20 e0       	ldi	r18, 0x00	; 0
    2cba:	30 e0       	ldi	r19, 0x00	; 0
    2cbc:	40 e8       	ldi	r20, 0x80	; 128
    2cbe:	5f e3       	ldi	r21, 0x3F	; 63
    2cc0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cc4:	88 23       	and	r24, r24
    2cc6:	2c f4       	brge	.+10     	; 0x2cd2 <LCD_VidSendCommand+0xc0>
		__ticks = 1;
    2cc8:	81 e0       	ldi	r24, 0x01	; 1
    2cca:	90 e0       	ldi	r25, 0x00	; 0
    2ccc:	9e af       	std	Y+62, r25	; 0x3e
    2cce:	8d af       	std	Y+61, r24	; 0x3d
    2cd0:	46 c0       	rjmp	.+140    	; 0x2d5e <LCD_VidSendCommand+0x14c>
	else if (__tmp > 65535)
    2cd2:	fe 01       	movw	r30, r28
    2cd4:	ff 96       	adiw	r30, 0x3f	; 63
    2cd6:	60 81       	ld	r22, Z
    2cd8:	71 81       	ldd	r23, Z+1	; 0x01
    2cda:	82 81       	ldd	r24, Z+2	; 0x02
    2cdc:	93 81       	ldd	r25, Z+3	; 0x03
    2cde:	20 e0       	ldi	r18, 0x00	; 0
    2ce0:	3f ef       	ldi	r19, 0xFF	; 255
    2ce2:	4f e7       	ldi	r20, 0x7F	; 127
    2ce4:	57 e4       	ldi	r21, 0x47	; 71
    2ce6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cea:	18 16       	cp	r1, r24
    2cec:	64 f5       	brge	.+88     	; 0x2d46 <LCD_VidSendCommand+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cee:	fe 01       	movw	r30, r28
    2cf0:	ed 5b       	subi	r30, 0xBD	; 189
    2cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf4:	60 81       	ld	r22, Z
    2cf6:	71 81       	ldd	r23, Z+1	; 0x01
    2cf8:	82 81       	ldd	r24, Z+2	; 0x02
    2cfa:	93 81       	ldd	r25, Z+3	; 0x03
    2cfc:	20 e0       	ldi	r18, 0x00	; 0
    2cfe:	30 e0       	ldi	r19, 0x00	; 0
    2d00:	40 e2       	ldi	r20, 0x20	; 32
    2d02:	51 e4       	ldi	r21, 0x41	; 65
    2d04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d08:	dc 01       	movw	r26, r24
    2d0a:	cb 01       	movw	r24, r22
    2d0c:	bc 01       	movw	r22, r24
    2d0e:	cd 01       	movw	r24, r26
    2d10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d14:	dc 01       	movw	r26, r24
    2d16:	cb 01       	movw	r24, r22
    2d18:	9e af       	std	Y+62, r25	; 0x3e
    2d1a:	8d af       	std	Y+61, r24	; 0x3d
    2d1c:	0f c0       	rjmp	.+30     	; 0x2d3c <LCD_VidSendCommand+0x12a>
    2d1e:	88 ec       	ldi	r24, 0xC8	; 200
    2d20:	90 e0       	ldi	r25, 0x00	; 0
    2d22:	9c af       	std	Y+60, r25	; 0x3c
    2d24:	8b af       	std	Y+59, r24	; 0x3b
    2d26:	8b ad       	ldd	r24, Y+59	; 0x3b
    2d28:	9c ad       	ldd	r25, Y+60	; 0x3c
    2d2a:	01 97       	sbiw	r24, 0x01	; 1
    2d2c:	f1 f7       	brne	.-4      	; 0x2d2a <LCD_VidSendCommand+0x118>
    2d2e:	9c af       	std	Y+60, r25	; 0x3c
    2d30:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d32:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d34:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d36:	01 97       	sbiw	r24, 0x01	; 1
    2d38:	9e af       	std	Y+62, r25	; 0x3e
    2d3a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d3c:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d3e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d40:	00 97       	sbiw	r24, 0x00	; 0
    2d42:	69 f7       	brne	.-38     	; 0x2d1e <LCD_VidSendCommand+0x10c>
    2d44:	16 c0       	rjmp	.+44     	; 0x2d72 <LCD_VidSendCommand+0x160>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d46:	fe 01       	movw	r30, r28
    2d48:	ff 96       	adiw	r30, 0x3f	; 63
    2d4a:	60 81       	ld	r22, Z
    2d4c:	71 81       	ldd	r23, Z+1	; 0x01
    2d4e:	82 81       	ldd	r24, Z+2	; 0x02
    2d50:	93 81       	ldd	r25, Z+3	; 0x03
    2d52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d56:	dc 01       	movw	r26, r24
    2d58:	cb 01       	movw	r24, r22
    2d5a:	9e af       	std	Y+62, r25	; 0x3e
    2d5c:	8d af       	std	Y+61, r24	; 0x3d
    2d5e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d60:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d62:	9a af       	std	Y+58, r25	; 0x3a
    2d64:	89 af       	std	Y+57, r24	; 0x39
    2d66:	89 ad       	ldd	r24, Y+57	; 0x39
    2d68:	9a ad       	ldd	r25, Y+58	; 0x3a
    2d6a:	01 97       	sbiw	r24, 0x01	; 1
    2d6c:	f1 f7       	brne	.-4      	; 0x2d6a <LCD_VidSendCommand+0x158>
    2d6e:	9a af       	std	Y+58, r25	; 0x3a
    2d70:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(2);
	DIO_VidSetPinValue(Lcopy_u8PORT,  E_copy_u8Pin,0);
    2d72:	80 e0       	ldi	r24, 0x00	; 0
    2d74:	62 e0       	ldi	r22, 0x02	; 2
    2d76:	40 e0       	ldi	r20, 0x00	; 0
    2d78:	0e 94 75 08 	call	0x10ea	; 0x10ea <DIO_VidSetPinValue>
    2d7c:	80 e0       	ldi	r24, 0x00	; 0
    2d7e:	90 e0       	ldi	r25, 0x00	; 0
    2d80:	a0 e0       	ldi	r26, 0x00	; 0
    2d82:	b0 e4       	ldi	r27, 0x40	; 64
    2d84:	8d ab       	std	Y+53, r24	; 0x35
    2d86:	9e ab       	std	Y+54, r25	; 0x36
    2d88:	af ab       	std	Y+55, r26	; 0x37
    2d8a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d8c:	6d a9       	ldd	r22, Y+53	; 0x35
    2d8e:	7e a9       	ldd	r23, Y+54	; 0x36
    2d90:	8f a9       	ldd	r24, Y+55	; 0x37
    2d92:	98 ad       	ldd	r25, Y+56	; 0x38
    2d94:	20 e0       	ldi	r18, 0x00	; 0
    2d96:	30 e0       	ldi	r19, 0x00	; 0
    2d98:	4a ef       	ldi	r20, 0xFA	; 250
    2d9a:	54 e4       	ldi	r21, 0x44	; 68
    2d9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2da0:	dc 01       	movw	r26, r24
    2da2:	cb 01       	movw	r24, r22
    2da4:	89 ab       	std	Y+49, r24	; 0x31
    2da6:	9a ab       	std	Y+50, r25	; 0x32
    2da8:	ab ab       	std	Y+51, r26	; 0x33
    2daa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2dac:	69 a9       	ldd	r22, Y+49	; 0x31
    2dae:	7a a9       	ldd	r23, Y+50	; 0x32
    2db0:	8b a9       	ldd	r24, Y+51	; 0x33
    2db2:	9c a9       	ldd	r25, Y+52	; 0x34
    2db4:	20 e0       	ldi	r18, 0x00	; 0
    2db6:	30 e0       	ldi	r19, 0x00	; 0
    2db8:	40 e8       	ldi	r20, 0x80	; 128
    2dba:	5f e3       	ldi	r21, 0x3F	; 63
    2dbc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2dc0:	88 23       	and	r24, r24
    2dc2:	2c f4       	brge	.+10     	; 0x2dce <LCD_VidSendCommand+0x1bc>
		__ticks = 1;
    2dc4:	81 e0       	ldi	r24, 0x01	; 1
    2dc6:	90 e0       	ldi	r25, 0x00	; 0
    2dc8:	98 ab       	std	Y+48, r25	; 0x30
    2dca:	8f a7       	std	Y+47, r24	; 0x2f
    2dcc:	3f c0       	rjmp	.+126    	; 0x2e4c <LCD_VidSendCommand+0x23a>
	else if (__tmp > 65535)
    2dce:	69 a9       	ldd	r22, Y+49	; 0x31
    2dd0:	7a a9       	ldd	r23, Y+50	; 0x32
    2dd2:	8b a9       	ldd	r24, Y+51	; 0x33
    2dd4:	9c a9       	ldd	r25, Y+52	; 0x34
    2dd6:	20 e0       	ldi	r18, 0x00	; 0
    2dd8:	3f ef       	ldi	r19, 0xFF	; 255
    2dda:	4f e7       	ldi	r20, 0x7F	; 127
    2ddc:	57 e4       	ldi	r21, 0x47	; 71
    2dde:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2de2:	18 16       	cp	r1, r24
    2de4:	4c f5       	brge	.+82     	; 0x2e38 <LCD_VidSendCommand+0x226>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2de6:	6d a9       	ldd	r22, Y+53	; 0x35
    2de8:	7e a9       	ldd	r23, Y+54	; 0x36
    2dea:	8f a9       	ldd	r24, Y+55	; 0x37
    2dec:	98 ad       	ldd	r25, Y+56	; 0x38
    2dee:	20 e0       	ldi	r18, 0x00	; 0
    2df0:	30 e0       	ldi	r19, 0x00	; 0
    2df2:	40 e2       	ldi	r20, 0x20	; 32
    2df4:	51 e4       	ldi	r21, 0x41	; 65
    2df6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dfa:	dc 01       	movw	r26, r24
    2dfc:	cb 01       	movw	r24, r22
    2dfe:	bc 01       	movw	r22, r24
    2e00:	cd 01       	movw	r24, r26
    2e02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e06:	dc 01       	movw	r26, r24
    2e08:	cb 01       	movw	r24, r22
    2e0a:	98 ab       	std	Y+48, r25	; 0x30
    2e0c:	8f a7       	std	Y+47, r24	; 0x2f
    2e0e:	0f c0       	rjmp	.+30     	; 0x2e2e <LCD_VidSendCommand+0x21c>
    2e10:	88 ec       	ldi	r24, 0xC8	; 200
    2e12:	90 e0       	ldi	r25, 0x00	; 0
    2e14:	9e a7       	std	Y+46, r25	; 0x2e
    2e16:	8d a7       	std	Y+45, r24	; 0x2d
    2e18:	8d a5       	ldd	r24, Y+45	; 0x2d
    2e1a:	9e a5       	ldd	r25, Y+46	; 0x2e
    2e1c:	01 97       	sbiw	r24, 0x01	; 1
    2e1e:	f1 f7       	brne	.-4      	; 0x2e1c <LCD_VidSendCommand+0x20a>
    2e20:	9e a7       	std	Y+46, r25	; 0x2e
    2e22:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e24:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e26:	98 a9       	ldd	r25, Y+48	; 0x30
    2e28:	01 97       	sbiw	r24, 0x01	; 1
    2e2a:	98 ab       	std	Y+48, r25	; 0x30
    2e2c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e2e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e30:	98 a9       	ldd	r25, Y+48	; 0x30
    2e32:	00 97       	sbiw	r24, 0x00	; 0
    2e34:	69 f7       	brne	.-38     	; 0x2e10 <LCD_VidSendCommand+0x1fe>
    2e36:	14 c0       	rjmp	.+40     	; 0x2e60 <LCD_VidSendCommand+0x24e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e38:	69 a9       	ldd	r22, Y+49	; 0x31
    2e3a:	7a a9       	ldd	r23, Y+50	; 0x32
    2e3c:	8b a9       	ldd	r24, Y+51	; 0x33
    2e3e:	9c a9       	ldd	r25, Y+52	; 0x34
    2e40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e44:	dc 01       	movw	r26, r24
    2e46:	cb 01       	movw	r24, r22
    2e48:	98 ab       	std	Y+48, r25	; 0x30
    2e4a:	8f a7       	std	Y+47, r24	; 0x2f
    2e4c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e4e:	98 a9       	ldd	r25, Y+48	; 0x30
    2e50:	9c a7       	std	Y+44, r25	; 0x2c
    2e52:	8b a7       	std	Y+43, r24	; 0x2b
    2e54:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e56:	9c a5       	ldd	r25, Y+44	; 0x2c
    2e58:	01 97       	sbiw	r24, 0x01	; 1
    2e5a:	f1 f7       	brne	.-4      	; 0x2e58 <LCD_VidSendCommand+0x246>
    2e5c:	9c a7       	std	Y+44, r25	; 0x2c
    2e5e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	DIO_VidSetPortValue(LDcopy_u8PORT,(LDcopy_u8PORT& 0x0F)|(copy_u8command<<4)); /* Sending lower cmnds */
    2e60:	fe 01       	movw	r30, r28
    2e62:	e9 5b       	subi	r30, 0xB9	; 185
    2e64:	ff 4f       	sbci	r31, 0xFF	; 255
    2e66:	80 81       	ld	r24, Z
    2e68:	88 2f       	mov	r24, r24
    2e6a:	90 e0       	ldi	r25, 0x00	; 0
    2e6c:	82 95       	swap	r24
    2e6e:	92 95       	swap	r25
    2e70:	90 7f       	andi	r25, 0xF0	; 240
    2e72:	98 27       	eor	r25, r24
    2e74:	80 7f       	andi	r24, 0xF0	; 240
    2e76:	98 27       	eor	r25, r24
    2e78:	82 60       	ori	r24, 0x02	; 2
    2e7a:	98 2f       	mov	r25, r24
    2e7c:	82 e0       	ldi	r24, 0x02	; 2
    2e7e:	69 2f       	mov	r22, r25
    2e80:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <DIO_VidSetPortValue>
	DIO_VidSetPinValue(Lcopy_u8PORT,  E_copy_u8Pin,1);
    2e84:	80 e0       	ldi	r24, 0x00	; 0
    2e86:	62 e0       	ldi	r22, 0x02	; 2
    2e88:	41 e0       	ldi	r20, 0x01	; 1
    2e8a:	0e 94 75 08 	call	0x10ea	; 0x10ea <DIO_VidSetPinValue>
    2e8e:	80 e0       	ldi	r24, 0x00	; 0
    2e90:	90 e0       	ldi	r25, 0x00	; 0
    2e92:	a0 e0       	ldi	r26, 0x00	; 0
    2e94:	b0 e4       	ldi	r27, 0x40	; 64
    2e96:	8f a3       	std	Y+39, r24	; 0x27
    2e98:	98 a7       	std	Y+40, r25	; 0x28
    2e9a:	a9 a7       	std	Y+41, r26	; 0x29
    2e9c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e9e:	6f a1       	ldd	r22, Y+39	; 0x27
    2ea0:	78 a5       	ldd	r23, Y+40	; 0x28
    2ea2:	89 a5       	ldd	r24, Y+41	; 0x29
    2ea4:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ea6:	20 e0       	ldi	r18, 0x00	; 0
    2ea8:	30 e0       	ldi	r19, 0x00	; 0
    2eaa:	4a ef       	ldi	r20, 0xFA	; 250
    2eac:	54 e4       	ldi	r21, 0x44	; 68
    2eae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eb2:	dc 01       	movw	r26, r24
    2eb4:	cb 01       	movw	r24, r22
    2eb6:	8b a3       	std	Y+35, r24	; 0x23
    2eb8:	9c a3       	std	Y+36, r25	; 0x24
    2eba:	ad a3       	std	Y+37, r26	; 0x25
    2ebc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2ebe:	6b a1       	ldd	r22, Y+35	; 0x23
    2ec0:	7c a1       	ldd	r23, Y+36	; 0x24
    2ec2:	8d a1       	ldd	r24, Y+37	; 0x25
    2ec4:	9e a1       	ldd	r25, Y+38	; 0x26
    2ec6:	20 e0       	ldi	r18, 0x00	; 0
    2ec8:	30 e0       	ldi	r19, 0x00	; 0
    2eca:	40 e8       	ldi	r20, 0x80	; 128
    2ecc:	5f e3       	ldi	r21, 0x3F	; 63
    2ece:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ed2:	88 23       	and	r24, r24
    2ed4:	2c f4       	brge	.+10     	; 0x2ee0 <LCD_VidSendCommand+0x2ce>
		__ticks = 1;
    2ed6:	81 e0       	ldi	r24, 0x01	; 1
    2ed8:	90 e0       	ldi	r25, 0x00	; 0
    2eda:	9a a3       	std	Y+34, r25	; 0x22
    2edc:	89 a3       	std	Y+33, r24	; 0x21
    2ede:	3f c0       	rjmp	.+126    	; 0x2f5e <LCD_VidSendCommand+0x34c>
	else if (__tmp > 65535)
    2ee0:	6b a1       	ldd	r22, Y+35	; 0x23
    2ee2:	7c a1       	ldd	r23, Y+36	; 0x24
    2ee4:	8d a1       	ldd	r24, Y+37	; 0x25
    2ee6:	9e a1       	ldd	r25, Y+38	; 0x26
    2ee8:	20 e0       	ldi	r18, 0x00	; 0
    2eea:	3f ef       	ldi	r19, 0xFF	; 255
    2eec:	4f e7       	ldi	r20, 0x7F	; 127
    2eee:	57 e4       	ldi	r21, 0x47	; 71
    2ef0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ef4:	18 16       	cp	r1, r24
    2ef6:	4c f5       	brge	.+82     	; 0x2f4a <LCD_VidSendCommand+0x338>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ef8:	6f a1       	ldd	r22, Y+39	; 0x27
    2efa:	78 a5       	ldd	r23, Y+40	; 0x28
    2efc:	89 a5       	ldd	r24, Y+41	; 0x29
    2efe:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f00:	20 e0       	ldi	r18, 0x00	; 0
    2f02:	30 e0       	ldi	r19, 0x00	; 0
    2f04:	40 e2       	ldi	r20, 0x20	; 32
    2f06:	51 e4       	ldi	r21, 0x41	; 65
    2f08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f0c:	dc 01       	movw	r26, r24
    2f0e:	cb 01       	movw	r24, r22
    2f10:	bc 01       	movw	r22, r24
    2f12:	cd 01       	movw	r24, r26
    2f14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f18:	dc 01       	movw	r26, r24
    2f1a:	cb 01       	movw	r24, r22
    2f1c:	9a a3       	std	Y+34, r25	; 0x22
    2f1e:	89 a3       	std	Y+33, r24	; 0x21
    2f20:	0f c0       	rjmp	.+30     	; 0x2f40 <LCD_VidSendCommand+0x32e>
    2f22:	88 ec       	ldi	r24, 0xC8	; 200
    2f24:	90 e0       	ldi	r25, 0x00	; 0
    2f26:	98 a3       	std	Y+32, r25	; 0x20
    2f28:	8f 8f       	std	Y+31, r24	; 0x1f
    2f2a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f2c:	98 a1       	ldd	r25, Y+32	; 0x20
    2f2e:	01 97       	sbiw	r24, 0x01	; 1
    2f30:	f1 f7       	brne	.-4      	; 0x2f2e <LCD_VidSendCommand+0x31c>
    2f32:	98 a3       	std	Y+32, r25	; 0x20
    2f34:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f36:	89 a1       	ldd	r24, Y+33	; 0x21
    2f38:	9a a1       	ldd	r25, Y+34	; 0x22
    2f3a:	01 97       	sbiw	r24, 0x01	; 1
    2f3c:	9a a3       	std	Y+34, r25	; 0x22
    2f3e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f40:	89 a1       	ldd	r24, Y+33	; 0x21
    2f42:	9a a1       	ldd	r25, Y+34	; 0x22
    2f44:	00 97       	sbiw	r24, 0x00	; 0
    2f46:	69 f7       	brne	.-38     	; 0x2f22 <LCD_VidSendCommand+0x310>
    2f48:	14 c0       	rjmp	.+40     	; 0x2f72 <LCD_VidSendCommand+0x360>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f4a:	6b a1       	ldd	r22, Y+35	; 0x23
    2f4c:	7c a1       	ldd	r23, Y+36	; 0x24
    2f4e:	8d a1       	ldd	r24, Y+37	; 0x25
    2f50:	9e a1       	ldd	r25, Y+38	; 0x26
    2f52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f56:	dc 01       	movw	r26, r24
    2f58:	cb 01       	movw	r24, r22
    2f5a:	9a a3       	std	Y+34, r25	; 0x22
    2f5c:	89 a3       	std	Y+33, r24	; 0x21
    2f5e:	89 a1       	ldd	r24, Y+33	; 0x21
    2f60:	9a a1       	ldd	r25, Y+34	; 0x22
    2f62:	9e 8f       	std	Y+30, r25	; 0x1e
    2f64:	8d 8f       	std	Y+29, r24	; 0x1d
    2f66:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f68:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f6a:	01 97       	sbiw	r24, 0x01	; 1
    2f6c:	f1 f7       	brne	.-4      	; 0x2f6a <LCD_VidSendCommand+0x358>
    2f6e:	9e 8f       	std	Y+30, r25	; 0x1e
    2f70:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	DIO_VidSetPinValue(Lcopy_u8PORT,  E_copy_u8Pin,0);
    2f72:	80 e0       	ldi	r24, 0x00	; 0
    2f74:	62 e0       	ldi	r22, 0x02	; 2
    2f76:	40 e0       	ldi	r20, 0x00	; 0
    2f78:	0e 94 75 08 	call	0x10ea	; 0x10ea <DIO_VidSetPinValue>
    2f7c:	80 e0       	ldi	r24, 0x00	; 0
    2f7e:	90 e0       	ldi	r25, 0x00	; 0
    2f80:	a0 e0       	ldi	r26, 0x00	; 0
    2f82:	b0 e4       	ldi	r27, 0x40	; 64
    2f84:	89 8f       	std	Y+25, r24	; 0x19
    2f86:	9a 8f       	std	Y+26, r25	; 0x1a
    2f88:	ab 8f       	std	Y+27, r26	; 0x1b
    2f8a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f8c:	69 8d       	ldd	r22, Y+25	; 0x19
    2f8e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f90:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f92:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f94:	20 e0       	ldi	r18, 0x00	; 0
    2f96:	30 e0       	ldi	r19, 0x00	; 0
    2f98:	4a ef       	ldi	r20, 0xFA	; 250
    2f9a:	54 e4       	ldi	r21, 0x44	; 68
    2f9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fa0:	dc 01       	movw	r26, r24
    2fa2:	cb 01       	movw	r24, r22
    2fa4:	8d 8b       	std	Y+21, r24	; 0x15
    2fa6:	9e 8b       	std	Y+22, r25	; 0x16
    2fa8:	af 8b       	std	Y+23, r26	; 0x17
    2faa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2fac:	6d 89       	ldd	r22, Y+21	; 0x15
    2fae:	7e 89       	ldd	r23, Y+22	; 0x16
    2fb0:	8f 89       	ldd	r24, Y+23	; 0x17
    2fb2:	98 8d       	ldd	r25, Y+24	; 0x18
    2fb4:	20 e0       	ldi	r18, 0x00	; 0
    2fb6:	30 e0       	ldi	r19, 0x00	; 0
    2fb8:	40 e8       	ldi	r20, 0x80	; 128
    2fba:	5f e3       	ldi	r21, 0x3F	; 63
    2fbc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fc0:	88 23       	and	r24, r24
    2fc2:	2c f4       	brge	.+10     	; 0x2fce <LCD_VidSendCommand+0x3bc>
		__ticks = 1;
    2fc4:	81 e0       	ldi	r24, 0x01	; 1
    2fc6:	90 e0       	ldi	r25, 0x00	; 0
    2fc8:	9c 8b       	std	Y+20, r25	; 0x14
    2fca:	8b 8b       	std	Y+19, r24	; 0x13
    2fcc:	3f c0       	rjmp	.+126    	; 0x304c <LCD_VidSendCommand+0x43a>
	else if (__tmp > 65535)
    2fce:	6d 89       	ldd	r22, Y+21	; 0x15
    2fd0:	7e 89       	ldd	r23, Y+22	; 0x16
    2fd2:	8f 89       	ldd	r24, Y+23	; 0x17
    2fd4:	98 8d       	ldd	r25, Y+24	; 0x18
    2fd6:	20 e0       	ldi	r18, 0x00	; 0
    2fd8:	3f ef       	ldi	r19, 0xFF	; 255
    2fda:	4f e7       	ldi	r20, 0x7F	; 127
    2fdc:	57 e4       	ldi	r21, 0x47	; 71
    2fde:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fe2:	18 16       	cp	r1, r24
    2fe4:	4c f5       	brge	.+82     	; 0x3038 <LCD_VidSendCommand+0x426>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fe6:	69 8d       	ldd	r22, Y+25	; 0x19
    2fe8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fee:	20 e0       	ldi	r18, 0x00	; 0
    2ff0:	30 e0       	ldi	r19, 0x00	; 0
    2ff2:	40 e2       	ldi	r20, 0x20	; 32
    2ff4:	51 e4       	ldi	r21, 0x41	; 65
    2ff6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ffa:	dc 01       	movw	r26, r24
    2ffc:	cb 01       	movw	r24, r22
    2ffe:	bc 01       	movw	r22, r24
    3000:	cd 01       	movw	r24, r26
    3002:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3006:	dc 01       	movw	r26, r24
    3008:	cb 01       	movw	r24, r22
    300a:	9c 8b       	std	Y+20, r25	; 0x14
    300c:	8b 8b       	std	Y+19, r24	; 0x13
    300e:	0f c0       	rjmp	.+30     	; 0x302e <LCD_VidSendCommand+0x41c>
    3010:	88 ec       	ldi	r24, 0xC8	; 200
    3012:	90 e0       	ldi	r25, 0x00	; 0
    3014:	9a 8b       	std	Y+18, r25	; 0x12
    3016:	89 8b       	std	Y+17, r24	; 0x11
    3018:	89 89       	ldd	r24, Y+17	; 0x11
    301a:	9a 89       	ldd	r25, Y+18	; 0x12
    301c:	01 97       	sbiw	r24, 0x01	; 1
    301e:	f1 f7       	brne	.-4      	; 0x301c <LCD_VidSendCommand+0x40a>
    3020:	9a 8b       	std	Y+18, r25	; 0x12
    3022:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3024:	8b 89       	ldd	r24, Y+19	; 0x13
    3026:	9c 89       	ldd	r25, Y+20	; 0x14
    3028:	01 97       	sbiw	r24, 0x01	; 1
    302a:	9c 8b       	std	Y+20, r25	; 0x14
    302c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    302e:	8b 89       	ldd	r24, Y+19	; 0x13
    3030:	9c 89       	ldd	r25, Y+20	; 0x14
    3032:	00 97       	sbiw	r24, 0x00	; 0
    3034:	69 f7       	brne	.-38     	; 0x3010 <LCD_VidSendCommand+0x3fe>
    3036:	14 c0       	rjmp	.+40     	; 0x3060 <LCD_VidSendCommand+0x44e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3038:	6d 89       	ldd	r22, Y+21	; 0x15
    303a:	7e 89       	ldd	r23, Y+22	; 0x16
    303c:	8f 89       	ldd	r24, Y+23	; 0x17
    303e:	98 8d       	ldd	r25, Y+24	; 0x18
    3040:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3044:	dc 01       	movw	r26, r24
    3046:	cb 01       	movw	r24, r22
    3048:	9c 8b       	std	Y+20, r25	; 0x14
    304a:	8b 8b       	std	Y+19, r24	; 0x13
    304c:	8b 89       	ldd	r24, Y+19	; 0x13
    304e:	9c 89       	ldd	r25, Y+20	; 0x14
    3050:	98 8b       	std	Y+16, r25	; 0x10
    3052:	8f 87       	std	Y+15, r24	; 0x0f
    3054:	8f 85       	ldd	r24, Y+15	; 0x0f
    3056:	98 89       	ldd	r25, Y+16	; 0x10
    3058:	01 97       	sbiw	r24, 0x01	; 1
    305a:	f1 f7       	brne	.-4      	; 0x3058 <LCD_VidSendCommand+0x446>
    305c:	98 8b       	std	Y+16, r25	; 0x10
    305e:	8f 87       	std	Y+15, r24	; 0x0f
    3060:	80 e0       	ldi	r24, 0x00	; 0
    3062:	90 e0       	ldi	r25, 0x00	; 0
    3064:	a0 ea       	ldi	r26, 0xA0	; 160
    3066:	b0 e4       	ldi	r27, 0x40	; 64
    3068:	8b 87       	std	Y+11, r24	; 0x0b
    306a:	9c 87       	std	Y+12, r25	; 0x0c
    306c:	ad 87       	std	Y+13, r26	; 0x0d
    306e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3070:	6b 85       	ldd	r22, Y+11	; 0x0b
    3072:	7c 85       	ldd	r23, Y+12	; 0x0c
    3074:	8d 85       	ldd	r24, Y+13	; 0x0d
    3076:	9e 85       	ldd	r25, Y+14	; 0x0e
    3078:	20 e0       	ldi	r18, 0x00	; 0
    307a:	30 e0       	ldi	r19, 0x00	; 0
    307c:	4a ef       	ldi	r20, 0xFA	; 250
    307e:	54 e4       	ldi	r21, 0x44	; 68
    3080:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3084:	dc 01       	movw	r26, r24
    3086:	cb 01       	movw	r24, r22
    3088:	8f 83       	std	Y+7, r24	; 0x07
    308a:	98 87       	std	Y+8, r25	; 0x08
    308c:	a9 87       	std	Y+9, r26	; 0x09
    308e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3090:	6f 81       	ldd	r22, Y+7	; 0x07
    3092:	78 85       	ldd	r23, Y+8	; 0x08
    3094:	89 85       	ldd	r24, Y+9	; 0x09
    3096:	9a 85       	ldd	r25, Y+10	; 0x0a
    3098:	20 e0       	ldi	r18, 0x00	; 0
    309a:	30 e0       	ldi	r19, 0x00	; 0
    309c:	40 e8       	ldi	r20, 0x80	; 128
    309e:	5f e3       	ldi	r21, 0x3F	; 63
    30a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30a4:	88 23       	and	r24, r24
    30a6:	2c f4       	brge	.+10     	; 0x30b2 <LCD_VidSendCommand+0x4a0>
		__ticks = 1;
    30a8:	81 e0       	ldi	r24, 0x01	; 1
    30aa:	90 e0       	ldi	r25, 0x00	; 0
    30ac:	9e 83       	std	Y+6, r25	; 0x06
    30ae:	8d 83       	std	Y+5, r24	; 0x05
    30b0:	3f c0       	rjmp	.+126    	; 0x3130 <LCD_VidSendCommand+0x51e>
	else if (__tmp > 65535)
    30b2:	6f 81       	ldd	r22, Y+7	; 0x07
    30b4:	78 85       	ldd	r23, Y+8	; 0x08
    30b6:	89 85       	ldd	r24, Y+9	; 0x09
    30b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    30ba:	20 e0       	ldi	r18, 0x00	; 0
    30bc:	3f ef       	ldi	r19, 0xFF	; 255
    30be:	4f e7       	ldi	r20, 0x7F	; 127
    30c0:	57 e4       	ldi	r21, 0x47	; 71
    30c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30c6:	18 16       	cp	r1, r24
    30c8:	4c f5       	brge	.+82     	; 0x311c <LCD_VidSendCommand+0x50a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    30cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    30ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    30d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    30d2:	20 e0       	ldi	r18, 0x00	; 0
    30d4:	30 e0       	ldi	r19, 0x00	; 0
    30d6:	40 e2       	ldi	r20, 0x20	; 32
    30d8:	51 e4       	ldi	r21, 0x41	; 65
    30da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30de:	dc 01       	movw	r26, r24
    30e0:	cb 01       	movw	r24, r22
    30e2:	bc 01       	movw	r22, r24
    30e4:	cd 01       	movw	r24, r26
    30e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ea:	dc 01       	movw	r26, r24
    30ec:	cb 01       	movw	r24, r22
    30ee:	9e 83       	std	Y+6, r25	; 0x06
    30f0:	8d 83       	std	Y+5, r24	; 0x05
    30f2:	0f c0       	rjmp	.+30     	; 0x3112 <LCD_VidSendCommand+0x500>
    30f4:	88 ec       	ldi	r24, 0xC8	; 200
    30f6:	90 e0       	ldi	r25, 0x00	; 0
    30f8:	9c 83       	std	Y+4, r25	; 0x04
    30fa:	8b 83       	std	Y+3, r24	; 0x03
    30fc:	8b 81       	ldd	r24, Y+3	; 0x03
    30fe:	9c 81       	ldd	r25, Y+4	; 0x04
    3100:	01 97       	sbiw	r24, 0x01	; 1
    3102:	f1 f7       	brne	.-4      	; 0x3100 <LCD_VidSendCommand+0x4ee>
    3104:	9c 83       	std	Y+4, r25	; 0x04
    3106:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3108:	8d 81       	ldd	r24, Y+5	; 0x05
    310a:	9e 81       	ldd	r25, Y+6	; 0x06
    310c:	01 97       	sbiw	r24, 0x01	; 1
    310e:	9e 83       	std	Y+6, r25	; 0x06
    3110:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3112:	8d 81       	ldd	r24, Y+5	; 0x05
    3114:	9e 81       	ldd	r25, Y+6	; 0x06
    3116:	00 97       	sbiw	r24, 0x00	; 0
    3118:	69 f7       	brne	.-38     	; 0x30f4 <LCD_VidSendCommand+0x4e2>
    311a:	14 c0       	rjmp	.+40     	; 0x3144 <LCD_VidSendCommand+0x532>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    311c:	6f 81       	ldd	r22, Y+7	; 0x07
    311e:	78 85       	ldd	r23, Y+8	; 0x08
    3120:	89 85       	ldd	r24, Y+9	; 0x09
    3122:	9a 85       	ldd	r25, Y+10	; 0x0a
    3124:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3128:	dc 01       	movw	r26, r24
    312a:	cb 01       	movw	r24, r22
    312c:	9e 83       	std	Y+6, r25	; 0x06
    312e:	8d 83       	std	Y+5, r24	; 0x05
    3130:	8d 81       	ldd	r24, Y+5	; 0x05
    3132:	9e 81       	ldd	r25, Y+6	; 0x06
    3134:	9a 83       	std	Y+2, r25	; 0x02
    3136:	89 83       	std	Y+1, r24	; 0x01
    3138:	89 81       	ldd	r24, Y+1	; 0x01
    313a:	9a 81       	ldd	r25, Y+2	; 0x02
    313c:	01 97       	sbiw	r24, 0x01	; 1
    313e:	f1 f7       	brne	.-4      	; 0x313c <LCD_VidSendCommand+0x52a>
    3140:	9a 83       	std	Y+2, r25	; 0x02
    3142:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

	_delay_ms(5);
	#endif
}
    3144:	c9 5b       	subi	r28, 0xB9	; 185
    3146:	df 4f       	sbci	r29, 0xFF	; 255
    3148:	0f b6       	in	r0, 0x3f	; 63
    314a:	f8 94       	cli
    314c:	de bf       	out	0x3e, r29	; 62
    314e:	0f be       	out	0x3f, r0	; 63
    3150:	cd bf       	out	0x3d, r28	; 61
    3152:	cf 91       	pop	r28
    3154:	df 91       	pop	r29
    3156:	1f 91       	pop	r17
    3158:	0f 91       	pop	r16
    315a:	08 95       	ret

0000315c <LCD_VidSendString>:

void LCD_VidSendString( u8 *copy_u8string)
{
    315c:	df 93       	push	r29
    315e:	cf 93       	push	r28
    3160:	00 d0       	rcall	.+0      	; 0x3162 <LCD_VidSendString+0x6>
    3162:	0f 92       	push	r0
    3164:	cd b7       	in	r28, 0x3d	; 61
    3166:	de b7       	in	r29, 0x3e	; 62
    3168:	9b 83       	std	Y+3, r25	; 0x03
    316a:	8a 83       	std	Y+2, r24	; 0x02

	u8 i=0;
    316c:	19 82       	std	Y+1, r1	; 0x01
    316e:	0e c0       	rjmp	.+28     	; 0x318c <LCD_VidSendString+0x30>

	while(copy_u8string[i] != '\0')
	{

		LCD_VidSendData(copy_u8string[i]);
    3170:	89 81       	ldd	r24, Y+1	; 0x01
    3172:	28 2f       	mov	r18, r24
    3174:	30 e0       	ldi	r19, 0x00	; 0
    3176:	8a 81       	ldd	r24, Y+2	; 0x02
    3178:	9b 81       	ldd	r25, Y+3	; 0x03
    317a:	fc 01       	movw	r30, r24
    317c:	e2 0f       	add	r30, r18
    317e:	f3 1f       	adc	r31, r19
    3180:	80 81       	ld	r24, Z
    3182:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <LCD_VidSendData>
		i++;
    3186:	89 81       	ldd	r24, Y+1	; 0x01
    3188:	8f 5f       	subi	r24, 0xFF	; 255
    318a:	89 83       	std	Y+1, r24	; 0x01
void LCD_VidSendString( u8 *copy_u8string)
{

	u8 i=0;

	while(copy_u8string[i] != '\0')
    318c:	89 81       	ldd	r24, Y+1	; 0x01
    318e:	28 2f       	mov	r18, r24
    3190:	30 e0       	ldi	r19, 0x00	; 0
    3192:	8a 81       	ldd	r24, Y+2	; 0x02
    3194:	9b 81       	ldd	r25, Y+3	; 0x03
    3196:	fc 01       	movw	r30, r24
    3198:	e2 0f       	add	r30, r18
    319a:	f3 1f       	adc	r31, r19
    319c:	80 81       	ld	r24, Z
    319e:	88 23       	and	r24, r24
    31a0:	39 f7       	brne	.-50     	; 0x3170 <LCD_VidSendString+0x14>
		LCD_VidSendData(copy_u8string[i]);
		i++;
	}


}
    31a2:	0f 90       	pop	r0
    31a4:	0f 90       	pop	r0
    31a6:	0f 90       	pop	r0
    31a8:	cf 91       	pop	r28
    31aa:	df 91       	pop	r29
    31ac:	08 95       	ret

000031ae <LCD_VidSendNumber>:

 void LCD_VidSendNumber( u8 copy_u16number)
{
    31ae:	df 93       	push	r29
    31b0:	cf 93       	push	r28
    31b2:	cd b7       	in	r28, 0x3d	; 61
    31b4:	de b7       	in	r29, 0x3e	; 62
    31b6:	29 97       	sbiw	r28, 0x09	; 9
    31b8:	0f b6       	in	r0, 0x3f	; 63
    31ba:	f8 94       	cli
    31bc:	de bf       	out	0x3e, r29	; 62
    31be:	0f be       	out	0x3f, r0	; 63
    31c0:	cd bf       	out	0x3d, r28	; 61
    31c2:	8f 83       	std	Y+7, r24	; 0x07

	if (copy_u16number==0)
    31c4:	8f 81       	ldd	r24, Y+7	; 0x07
    31c6:	88 23       	and	r24, r24
    31c8:	19 f4       	brne	.+6      	; 0x31d0 <LCD_VidSendNumber+0x22>
	{
		LCD_VidSendData('0');
    31ca:	80 e3       	ldi	r24, 0x30	; 48
    31cc:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <LCD_VidSendData>
	}
	s8 i=0;
    31d0:	19 82       	std	Y+1, r1	; 0x01
    31d2:	1b c0       	rjmp	.+54     	; 0x320a <LCD_VidSendNumber+0x5c>
	u8 str_num[5];
	while(copy_u16number>0)
	{
		str_num[i]=copy_u16number%10;
    31d4:	89 81       	ldd	r24, Y+1	; 0x01
    31d6:	48 2f       	mov	r20, r24
    31d8:	55 27       	eor	r21, r21
    31da:	47 fd       	sbrc	r20, 7
    31dc:	50 95       	com	r21
    31de:	8f 81       	ldd	r24, Y+7	; 0x07
    31e0:	9a e0       	ldi	r25, 0x0A	; 10
    31e2:	69 2f       	mov	r22, r25
    31e4:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <__udivmodqi4>
    31e8:	89 2f       	mov	r24, r25
    31ea:	28 2f       	mov	r18, r24
    31ec:	ce 01       	movw	r24, r28
    31ee:	02 96       	adiw	r24, 0x02	; 2
    31f0:	fc 01       	movw	r30, r24
    31f2:	e4 0f       	add	r30, r20
    31f4:	f5 1f       	adc	r31, r21
    31f6:	20 83       	st	Z, r18
		copy_u16number/=10;
    31f8:	8f 81       	ldd	r24, Y+7	; 0x07
    31fa:	9a e0       	ldi	r25, 0x0A	; 10
    31fc:	69 2f       	mov	r22, r25
    31fe:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <__udivmodqi4>
    3202:	8f 83       	std	Y+7, r24	; 0x07
		i++;
    3204:	89 81       	ldd	r24, Y+1	; 0x01
    3206:	8f 5f       	subi	r24, 0xFF	; 255
    3208:	89 83       	std	Y+1, r24	; 0x01
	{
		LCD_VidSendData('0');
	}
	s8 i=0;
	u8 str_num[5];
	while(copy_u16number>0)
    320a:	8f 81       	ldd	r24, Y+7	; 0x07
    320c:	88 23       	and	r24, r24
    320e:	11 f7       	brne	.-60     	; 0x31d4 <LCD_VidSendNumber+0x26>
	{
		str_num[i]=copy_u16number%10;
		copy_u16number/=10;
		i++;
	}
	i--;
    3210:	89 81       	ldd	r24, Y+1	; 0x01
    3212:	81 50       	subi	r24, 0x01	; 1
    3214:	89 83       	std	Y+1, r24	; 0x01
    3216:	7e c0       	rjmp	.+252    	; 0x3314 <LCD_VidSendNumber+0x166>
	while(i>=0)
	{
		switch(str_num[i])
    3218:	89 81       	ldd	r24, Y+1	; 0x01
    321a:	28 2f       	mov	r18, r24
    321c:	33 27       	eor	r19, r19
    321e:	27 fd       	sbrc	r18, 7
    3220:	30 95       	com	r19
    3222:	ce 01       	movw	r24, r28
    3224:	02 96       	adiw	r24, 0x02	; 2
    3226:	fc 01       	movw	r30, r24
    3228:	e2 0f       	add	r30, r18
    322a:	f3 1f       	adc	r31, r19
    322c:	80 81       	ld	r24, Z
    322e:	28 2f       	mov	r18, r24
    3230:	30 e0       	ldi	r19, 0x00	; 0
    3232:	39 87       	std	Y+9, r19	; 0x09
    3234:	28 87       	std	Y+8, r18	; 0x08
    3236:	88 85       	ldd	r24, Y+8	; 0x08
    3238:	99 85       	ldd	r25, Y+9	; 0x09
    323a:	84 30       	cpi	r24, 0x04	; 4
    323c:	91 05       	cpc	r25, r1
    323e:	09 f4       	brne	.+2      	; 0x3242 <LCD_VidSendNumber+0x94>
    3240:	4f c0       	rjmp	.+158    	; 0x32e0 <LCD_VidSendNumber+0x132>
    3242:	28 85       	ldd	r18, Y+8	; 0x08
    3244:	39 85       	ldd	r19, Y+9	; 0x09
    3246:	25 30       	cpi	r18, 0x05	; 5
    3248:	31 05       	cpc	r19, r1
    324a:	d4 f4       	brge	.+52     	; 0x3280 <LCD_VidSendNumber+0xd2>
    324c:	88 85       	ldd	r24, Y+8	; 0x08
    324e:	99 85       	ldd	r25, Y+9	; 0x09
    3250:	81 30       	cpi	r24, 0x01	; 1
    3252:	91 05       	cpc	r25, r1
    3254:	c9 f1       	breq	.+114    	; 0x32c8 <LCD_VidSendNumber+0x11a>
    3256:	28 85       	ldd	r18, Y+8	; 0x08
    3258:	39 85       	ldd	r19, Y+9	; 0x09
    325a:	22 30       	cpi	r18, 0x02	; 2
    325c:	31 05       	cpc	r19, r1
    325e:	2c f4       	brge	.+10     	; 0x326a <LCD_VidSendNumber+0xbc>
    3260:	88 85       	ldd	r24, Y+8	; 0x08
    3262:	99 85       	ldd	r25, Y+9	; 0x09
    3264:	00 97       	sbiw	r24, 0x00	; 0
    3266:	61 f1       	breq	.+88     	; 0x32c0 <LCD_VidSendNumber+0x112>
    3268:	52 c0       	rjmp	.+164    	; 0x330e <LCD_VidSendNumber+0x160>
    326a:	28 85       	ldd	r18, Y+8	; 0x08
    326c:	39 85       	ldd	r19, Y+9	; 0x09
    326e:	22 30       	cpi	r18, 0x02	; 2
    3270:	31 05       	cpc	r19, r1
    3272:	71 f1       	breq	.+92     	; 0x32d0 <LCD_VidSendNumber+0x122>
    3274:	88 85       	ldd	r24, Y+8	; 0x08
    3276:	99 85       	ldd	r25, Y+9	; 0x09
    3278:	83 30       	cpi	r24, 0x03	; 3
    327a:	91 05       	cpc	r25, r1
    327c:	69 f1       	breq	.+90     	; 0x32d8 <LCD_VidSendNumber+0x12a>
    327e:	47 c0       	rjmp	.+142    	; 0x330e <LCD_VidSendNumber+0x160>
    3280:	28 85       	ldd	r18, Y+8	; 0x08
    3282:	39 85       	ldd	r19, Y+9	; 0x09
    3284:	27 30       	cpi	r18, 0x07	; 7
    3286:	31 05       	cpc	r19, r1
    3288:	b9 f1       	breq	.+110    	; 0x32f8 <LCD_VidSendNumber+0x14a>
    328a:	88 85       	ldd	r24, Y+8	; 0x08
    328c:	99 85       	ldd	r25, Y+9	; 0x09
    328e:	88 30       	cpi	r24, 0x08	; 8
    3290:	91 05       	cpc	r25, r1
    3292:	5c f4       	brge	.+22     	; 0x32aa <LCD_VidSendNumber+0xfc>
    3294:	28 85       	ldd	r18, Y+8	; 0x08
    3296:	39 85       	ldd	r19, Y+9	; 0x09
    3298:	25 30       	cpi	r18, 0x05	; 5
    329a:	31 05       	cpc	r19, r1
    329c:	29 f1       	breq	.+74     	; 0x32e8 <LCD_VidSendNumber+0x13a>
    329e:	88 85       	ldd	r24, Y+8	; 0x08
    32a0:	99 85       	ldd	r25, Y+9	; 0x09
    32a2:	86 30       	cpi	r24, 0x06	; 6
    32a4:	91 05       	cpc	r25, r1
    32a6:	21 f1       	breq	.+72     	; 0x32f0 <LCD_VidSendNumber+0x142>
    32a8:	32 c0       	rjmp	.+100    	; 0x330e <LCD_VidSendNumber+0x160>
    32aa:	28 85       	ldd	r18, Y+8	; 0x08
    32ac:	39 85       	ldd	r19, Y+9	; 0x09
    32ae:	28 30       	cpi	r18, 0x08	; 8
    32b0:	31 05       	cpc	r19, r1
    32b2:	31 f1       	breq	.+76     	; 0x3300 <LCD_VidSendNumber+0x152>
    32b4:	88 85       	ldd	r24, Y+8	; 0x08
    32b6:	99 85       	ldd	r25, Y+9	; 0x09
    32b8:	89 30       	cpi	r24, 0x09	; 9
    32ba:	91 05       	cpc	r25, r1
    32bc:	29 f1       	breq	.+74     	; 0x3308 <LCD_VidSendNumber+0x15a>
    32be:	27 c0       	rjmp	.+78     	; 0x330e <LCD_VidSendNumber+0x160>
		{
		case 0 : LCD_VidSendData('0');break;
    32c0:	80 e3       	ldi	r24, 0x30	; 48
    32c2:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <LCD_VidSendData>
    32c6:	23 c0       	rjmp	.+70     	; 0x330e <LCD_VidSendNumber+0x160>
		case 1 : LCD_VidSendData('1');break;
    32c8:	81 e3       	ldi	r24, 0x31	; 49
    32ca:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <LCD_VidSendData>
    32ce:	1f c0       	rjmp	.+62     	; 0x330e <LCD_VidSendNumber+0x160>
		case 2 : LCD_VidSendData('2');break;
    32d0:	82 e3       	ldi	r24, 0x32	; 50
    32d2:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <LCD_VidSendData>
    32d6:	1b c0       	rjmp	.+54     	; 0x330e <LCD_VidSendNumber+0x160>
		case 3 : LCD_VidSendData('3');break;
    32d8:	83 e3       	ldi	r24, 0x33	; 51
    32da:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <LCD_VidSendData>
    32de:	17 c0       	rjmp	.+46     	; 0x330e <LCD_VidSendNumber+0x160>
		case 4 : LCD_VidSendData('4');break;
    32e0:	84 e3       	ldi	r24, 0x34	; 52
    32e2:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <LCD_VidSendData>
    32e6:	13 c0       	rjmp	.+38     	; 0x330e <LCD_VidSendNumber+0x160>
		case 5 : LCD_VidSendData('5');break;
    32e8:	85 e3       	ldi	r24, 0x35	; 53
    32ea:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <LCD_VidSendData>
    32ee:	0f c0       	rjmp	.+30     	; 0x330e <LCD_VidSendNumber+0x160>
		case 6 : LCD_VidSendData('6');break;
    32f0:	86 e3       	ldi	r24, 0x36	; 54
    32f2:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <LCD_VidSendData>
    32f6:	0b c0       	rjmp	.+22     	; 0x330e <LCD_VidSendNumber+0x160>
		case 7 : LCD_VidSendData('7');break;
    32f8:	87 e3       	ldi	r24, 0x37	; 55
    32fa:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <LCD_VidSendData>
    32fe:	07 c0       	rjmp	.+14     	; 0x330e <LCD_VidSendNumber+0x160>
		case 8 : LCD_VidSendData('8');break;
    3300:	88 e3       	ldi	r24, 0x38	; 56
    3302:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <LCD_VidSendData>
    3306:	03 c0       	rjmp	.+6      	; 0x330e <LCD_VidSendNumber+0x160>
		case 9 : LCD_VidSendData('9');break;
    3308:	89 e3       	ldi	r24, 0x39	; 57
    330a:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <LCD_VidSendData>
		}

		i--;
    330e:	89 81       	ldd	r24, Y+1	; 0x01
    3310:	81 50       	subi	r24, 0x01	; 1
    3312:	89 83       	std	Y+1, r24	; 0x01
		str_num[i]=copy_u16number%10;
		copy_u16number/=10;
		i++;
	}
	i--;
	while(i>=0)
    3314:	89 81       	ldd	r24, Y+1	; 0x01
    3316:	88 23       	and	r24, r24
    3318:	0c f0       	brlt	.+2      	; 0x331c <LCD_VidSendNumber+0x16e>
    331a:	7e cf       	rjmp	.-260    	; 0x3218 <LCD_VidSendNumber+0x6a>

		i--;
	}


}
    331c:	29 96       	adiw	r28, 0x09	; 9
    331e:	0f b6       	in	r0, 0x3f	; 63
    3320:	f8 94       	cli
    3322:	de bf       	out	0x3e, r29	; 62
    3324:	0f be       	out	0x3f, r0	; 63
    3326:	cd bf       	out	0x3d, r28	; 61
    3328:	cf 91       	pop	r28
    332a:	df 91       	pop	r29
    332c:	08 95       	ret

0000332e <LCD_VidSetPosition>:


void LCD_VidSetPosition(u8 raw, u8 column)
{
    332e:	df 93       	push	r29
    3330:	cf 93       	push	r28
    3332:	00 d0       	rcall	.+0      	; 0x3334 <LCD_VidSetPosition+0x6>
    3334:	cd b7       	in	r28, 0x3d	; 61
    3336:	de b7       	in	r29, 0x3e	; 62
    3338:	89 83       	std	Y+1, r24	; 0x01
    333a:	6a 83       	std	Y+2, r22	; 0x02
	if(0==raw)       // raw= 0
    333c:	89 81       	ldd	r24, Y+1	; 0x01
    333e:	88 23       	and	r24, r24
    3340:	21 f4       	brne	.+8      	; 0x334a <LCD_VidSetPosition+0x1c>
	{
	LCD_VidSendCommand(128+column);    // 0b10000000=128 +column
    3342:	8a 81       	ldd	r24, Y+2	; 0x02
    3344:	80 58       	subi	r24, 0x80	; 128
    3346:	0e 94 09 16 	call	0x2c12	; 0x2c12 <LCD_VidSendCommand>
	}
	if(1==raw)
    334a:	89 81       	ldd	r24, Y+1	; 0x01
    334c:	81 30       	cpi	r24, 0x01	; 1
    334e:	21 f4       	brne	.+8      	; 0x3358 <LCD_VidSetPosition+0x2a>
	{
	LCD_VidSendCommand(128+64+column);  //  // 0b10000000=128 +column+64
    3350:	8a 81       	ldd	r24, Y+2	; 0x02
    3352:	80 54       	subi	r24, 0x40	; 64
    3354:	0e 94 09 16 	call	0x2c12	; 0x2c12 <LCD_VidSendCommand>
	                                    // 64 is the start address of row 2
	}

}
    3358:	0f 90       	pop	r0
    335a:	0f 90       	pop	r0
    335c:	cf 91       	pop	r28
    335e:	df 91       	pop	r29
    3360:	08 95       	ret

00003362 <LCD_VidClear>:

void LCD_VidClear(void)
{
    3362:	df 93       	push	r29
    3364:	cf 93       	push	r28
    3366:	cd b7       	in	r28, 0x3d	; 61
    3368:	de b7       	in	r29, 0x3e	; 62
	LCD_VidSendCommand(1);
    336a:	81 e0       	ldi	r24, 0x01	; 1
    336c:	0e 94 09 16 	call	0x2c12	; 0x2c12 <LCD_VidSendCommand>


}
    3370:	cf 91       	pop	r28
    3372:	df 91       	pop	r29
    3374:	08 95       	ret

00003376 <LCD_VidShiftRight>:

void LCD_VidShiftRight(void)
{
    3376:	df 93       	push	r29
    3378:	cf 93       	push	r28
    337a:	cd b7       	in	r28, 0x3d	; 61
    337c:	de b7       	in	r29, 0x3e	; 62
	LCD_VidSendCommand(0b00011100);
    337e:	8c e1       	ldi	r24, 0x1C	; 28
    3380:	0e 94 09 16 	call	0x2c12	; 0x2c12 <LCD_VidSendCommand>

}
    3384:	cf 91       	pop	r28
    3386:	df 91       	pop	r29
    3388:	08 95       	ret

0000338a <LCD_VidShiftLeft>:

void LCD_VidShiftLeft(void)
{
    338a:	df 93       	push	r29
    338c:	cf 93       	push	r28
    338e:	cd b7       	in	r28, 0x3d	; 61
    3390:	de b7       	in	r29, 0x3e	; 62
	LCD_VidSendCommand(0x18);
    3392:	88 e1       	ldi	r24, 0x18	; 24
    3394:	0e 94 09 16 	call	0x2c12	; 0x2c12 <LCD_VidSendCommand>

}
    3398:	cf 91       	pop	r28
    339a:	df 91       	pop	r29
    339c:	08 95       	ret

0000339e <LCD_voidReturnHome>:

void LCD_voidReturnHome(void)
{
    339e:	df 93       	push	r29
    33a0:	cf 93       	push	r28
    33a2:	cd b7       	in	r28, 0x3d	; 61
    33a4:	de b7       	in	r29, 0x3e	; 62
	LCD_VidSendCommand(0x02);
    33a6:	82 e0       	ldi	r24, 0x02	; 2
    33a8:	0e 94 09 16 	call	0x2c12	; 0x2c12 <LCD_VidSendCommand>

}
    33ac:	cf 91       	pop	r28
    33ae:	df 91       	pop	r29
    33b0:	08 95       	ret

000033b2 <main>:
#include "LCD_Interface.h"
#include "Keypad_interface.h"
#include "avr/delay.h"

void main()
{
    33b2:	ef 92       	push	r14
    33b4:	ff 92       	push	r15
    33b6:	0f 93       	push	r16
    33b8:	1f 93       	push	r17
    33ba:	df 93       	push	r29
    33bc:	cf 93       	push	r28
    33be:	cd b7       	in	r28, 0x3d	; 61
    33c0:	de b7       	in	r29, 0x3e	; 62
    33c2:	e4 97       	sbiw	r28, 0x34	; 52
    33c4:	0f b6       	in	r0, 0x3f	; 63
    33c6:	f8 94       	cli
    33c8:	de bf       	out	0x3e, r29	; 62
    33ca:	0f be       	out	0x3f, r0	; 63
    33cc:	cd bf       	out	0x3d, r28	; 61
	LCD_VidInit();
    33ce:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <LCD_VidInit>

	Keypad_VoidInit();
    33d2:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <Keypad_VoidInit>

	LCD_VidSendString("Simple Calculator");
    33d6:	80 e6       	ldi	r24, 0x60	; 96
    33d8:	90 e0       	ldi	r25, 0x00	; 0
    33da:	0e 94 ae 18 	call	0x315c	; 0x315c <LCD_VidSendString>
	LCD_VidSetPosition(1,1);
    33de:	81 e0       	ldi	r24, 0x01	; 1
    33e0:	90 e0       	ldi	r25, 0x00	; 0
    33e2:	61 e0       	ldi	r22, 0x01	; 1
    33e4:	70 e0       	ldi	r23, 0x00	; 0
    33e6:	0e 94 97 19 	call	0x332e	; 0x332e <LCD_VidSetPosition>
	LCD_VidSendString("OP1");
    33ea:	82 e7       	ldi	r24, 0x72	; 114
    33ec:	90 e0       	ldi	r25, 0x00	; 0
    33ee:	0e 94 ae 18 	call	0x315c	; 0x315c <LCD_VidSendString>
	LCD_VidSetPosition(1,4);
    33f2:	81 e0       	ldi	r24, 0x01	; 1
    33f4:	90 e0       	ldi	r25, 0x00	; 0
    33f6:	64 e0       	ldi	r22, 0x04	; 4
    33f8:	70 e0       	ldi	r23, 0x00	; 0
    33fa:	0e 94 97 19 	call	0x332e	; 0x332e <LCD_VidSetPosition>
	u8 x;
	while(1)
	{
		x= Keypad_U8ReadPin();
    33fe:	0e 94 bf 0b 	call	0x177e	; 0x177e <Keypad_U8ReadPin>
    3402:	8a ab       	std	Y+50, r24	; 0x32

		if(x != DEFAULT_KEY)
    3404:	8a a9       	ldd	r24, Y+50	; 0x32
    3406:	83 34       	cpi	r24, 0x43	; 67
    3408:	d1 f3       	breq	.-12     	; 0x33fe <main+0x4c>
		{
			x=x-'0';
    340a:	8a a9       	ldd	r24, Y+50	; 0x32
    340c:	80 53       	subi	r24, 0x30	; 48
    340e:	8a ab       	std	Y+50, r24	; 0x32
			LCD_VidSendNumber(x);
    3410:	8a a9       	ldd	r24, Y+50	; 0x32
    3412:	0e 94 d7 18 	call	0x31ae	; 0x31ae <LCD_VidSendNumber>
    3416:	80 e0       	ldi	r24, 0x00	; 0
    3418:	90 e0       	ldi	r25, 0x00	; 0
    341a:	aa ef       	ldi	r26, 0xFA	; 250
    341c:	b3 e4       	ldi	r27, 0x43	; 67
    341e:	8f a3       	std	Y+39, r24	; 0x27
    3420:	98 a7       	std	Y+40, r25	; 0x28
    3422:	a9 a7       	std	Y+41, r26	; 0x29
    3424:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3426:	6f a1       	ldd	r22, Y+39	; 0x27
    3428:	78 a5       	ldd	r23, Y+40	; 0x28
    342a:	89 a5       	ldd	r24, Y+41	; 0x29
    342c:	9a a5       	ldd	r25, Y+42	; 0x2a
    342e:	20 e0       	ldi	r18, 0x00	; 0
    3430:	30 e0       	ldi	r19, 0x00	; 0
    3432:	4a ef       	ldi	r20, 0xFA	; 250
    3434:	54 e4       	ldi	r21, 0x44	; 68
    3436:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    343a:	dc 01       	movw	r26, r24
    343c:	cb 01       	movw	r24, r22
    343e:	8b a3       	std	Y+35, r24	; 0x23
    3440:	9c a3       	std	Y+36, r25	; 0x24
    3442:	ad a3       	std	Y+37, r26	; 0x25
    3444:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3446:	6b a1       	ldd	r22, Y+35	; 0x23
    3448:	7c a1       	ldd	r23, Y+36	; 0x24
    344a:	8d a1       	ldd	r24, Y+37	; 0x25
    344c:	9e a1       	ldd	r25, Y+38	; 0x26
    344e:	20 e0       	ldi	r18, 0x00	; 0
    3450:	30 e0       	ldi	r19, 0x00	; 0
    3452:	40 e8       	ldi	r20, 0x80	; 128
    3454:	5f e3       	ldi	r21, 0x3F	; 63
    3456:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    345a:	88 23       	and	r24, r24
    345c:	2c f4       	brge	.+10     	; 0x3468 <main+0xb6>
		__ticks = 1;
    345e:	81 e0       	ldi	r24, 0x01	; 1
    3460:	90 e0       	ldi	r25, 0x00	; 0
    3462:	9a a3       	std	Y+34, r25	; 0x22
    3464:	89 a3       	std	Y+33, r24	; 0x21
    3466:	3f c0       	rjmp	.+126    	; 0x34e6 <main+0x134>
	else if (__tmp > 65535)
    3468:	6b a1       	ldd	r22, Y+35	; 0x23
    346a:	7c a1       	ldd	r23, Y+36	; 0x24
    346c:	8d a1       	ldd	r24, Y+37	; 0x25
    346e:	9e a1       	ldd	r25, Y+38	; 0x26
    3470:	20 e0       	ldi	r18, 0x00	; 0
    3472:	3f ef       	ldi	r19, 0xFF	; 255
    3474:	4f e7       	ldi	r20, 0x7F	; 127
    3476:	57 e4       	ldi	r21, 0x47	; 71
    3478:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    347c:	18 16       	cp	r1, r24
    347e:	4c f5       	brge	.+82     	; 0x34d2 <main+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3480:	6f a1       	ldd	r22, Y+39	; 0x27
    3482:	78 a5       	ldd	r23, Y+40	; 0x28
    3484:	89 a5       	ldd	r24, Y+41	; 0x29
    3486:	9a a5       	ldd	r25, Y+42	; 0x2a
    3488:	20 e0       	ldi	r18, 0x00	; 0
    348a:	30 e0       	ldi	r19, 0x00	; 0
    348c:	40 e2       	ldi	r20, 0x20	; 32
    348e:	51 e4       	ldi	r21, 0x41	; 65
    3490:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3494:	dc 01       	movw	r26, r24
    3496:	cb 01       	movw	r24, r22
    3498:	bc 01       	movw	r22, r24
    349a:	cd 01       	movw	r24, r26
    349c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34a0:	dc 01       	movw	r26, r24
    34a2:	cb 01       	movw	r24, r22
    34a4:	9a a3       	std	Y+34, r25	; 0x22
    34a6:	89 a3       	std	Y+33, r24	; 0x21
    34a8:	0f c0       	rjmp	.+30     	; 0x34c8 <main+0x116>
    34aa:	88 ec       	ldi	r24, 0xC8	; 200
    34ac:	90 e0       	ldi	r25, 0x00	; 0
    34ae:	98 a3       	std	Y+32, r25	; 0x20
    34b0:	8f 8f       	std	Y+31, r24	; 0x1f
    34b2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    34b4:	98 a1       	ldd	r25, Y+32	; 0x20
    34b6:	01 97       	sbiw	r24, 0x01	; 1
    34b8:	f1 f7       	brne	.-4      	; 0x34b6 <main+0x104>
    34ba:	98 a3       	std	Y+32, r25	; 0x20
    34bc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34be:	89 a1       	ldd	r24, Y+33	; 0x21
    34c0:	9a a1       	ldd	r25, Y+34	; 0x22
    34c2:	01 97       	sbiw	r24, 0x01	; 1
    34c4:	9a a3       	std	Y+34, r25	; 0x22
    34c6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34c8:	89 a1       	ldd	r24, Y+33	; 0x21
    34ca:	9a a1       	ldd	r25, Y+34	; 0x22
    34cc:	00 97       	sbiw	r24, 0x00	; 0
    34ce:	69 f7       	brne	.-38     	; 0x34aa <main+0xf8>
    34d0:	14 c0       	rjmp	.+40     	; 0x34fa <main+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34d2:	6b a1       	ldd	r22, Y+35	; 0x23
    34d4:	7c a1       	ldd	r23, Y+36	; 0x24
    34d6:	8d a1       	ldd	r24, Y+37	; 0x25
    34d8:	9e a1       	ldd	r25, Y+38	; 0x26
    34da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34de:	dc 01       	movw	r26, r24
    34e0:	cb 01       	movw	r24, r22
    34e2:	9a a3       	std	Y+34, r25	; 0x22
    34e4:	89 a3       	std	Y+33, r24	; 0x21
    34e6:	89 a1       	ldd	r24, Y+33	; 0x21
    34e8:	9a a1       	ldd	r25, Y+34	; 0x22
    34ea:	9e 8f       	std	Y+30, r25	; 0x1e
    34ec:	8d 8f       	std	Y+29, r24	; 0x1d
    34ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    34f0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    34f2:	01 97       	sbiw	r24, 0x01	; 1
    34f4:	f1 f7       	brne	.-4      	; 0x34f2 <main+0x140>
    34f6:	9e 8f       	std	Y+30, r25	; 0x1e
    34f8:	8d 8f       	std	Y+29, r24	; 0x1d
			break;
		}

	}
	_delay_ms(500);
	LCD_VidClear();
    34fa:	0e 94 b1 19 	call	0x3362	; 0x3362 <LCD_VidClear>
	LCD_VidSendString("OP2");
    34fe:	86 e7       	ldi	r24, 0x76	; 118
    3500:	90 e0       	ldi	r25, 0x00	; 0
    3502:	0e 94 ae 18 	call	0x315c	; 0x315c <LCD_VidSendString>
	LCD_VidSetPosition(0,4);
    3506:	80 e0       	ldi	r24, 0x00	; 0
    3508:	90 e0       	ldi	r25, 0x00	; 0
    350a:	64 e0       	ldi	r22, 0x04	; 4
    350c:	70 e0       	ldi	r23, 0x00	; 0
    350e:	0e 94 97 19 	call	0x332e	; 0x332e <LCD_VidSetPosition>
	u8 Y;
	while(1)
	{
		Y= Keypad_U8ReadPin();
    3512:	0e 94 bf 0b 	call	0x177e	; 0x177e <Keypad_U8ReadPin>
    3516:	89 ab       	std	Y+49, r24	; 0x31

		if(Y != DEFAULT_KEY)
    3518:	89 a9       	ldd	r24, Y+49	; 0x31
    351a:	83 34       	cpi	r24, 0x43	; 67
    351c:	d1 f3       	breq	.-12     	; 0x3512 <main+0x160>
		{
			Y= Y-'0';
    351e:	89 a9       	ldd	r24, Y+49	; 0x31
    3520:	80 53       	subi	r24, 0x30	; 48
    3522:	89 ab       	std	Y+49, r24	; 0x31
			LCD_VidSendNumber(Y);
    3524:	89 a9       	ldd	r24, Y+49	; 0x31
    3526:	0e 94 d7 18 	call	0x31ae	; 0x31ae <LCD_VidSendNumber>
    352a:	80 e0       	ldi	r24, 0x00	; 0
    352c:	90 e0       	ldi	r25, 0x00	; 0
    352e:	aa ef       	ldi	r26, 0xFA	; 250
    3530:	b3 e4       	ldi	r27, 0x43	; 67
    3532:	89 8f       	std	Y+25, r24	; 0x19
    3534:	9a 8f       	std	Y+26, r25	; 0x1a
    3536:	ab 8f       	std	Y+27, r26	; 0x1b
    3538:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    353a:	69 8d       	ldd	r22, Y+25	; 0x19
    353c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    353e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3540:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3542:	20 e0       	ldi	r18, 0x00	; 0
    3544:	30 e0       	ldi	r19, 0x00	; 0
    3546:	4a ef       	ldi	r20, 0xFA	; 250
    3548:	54 e4       	ldi	r21, 0x44	; 68
    354a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    354e:	dc 01       	movw	r26, r24
    3550:	cb 01       	movw	r24, r22
    3552:	8d 8b       	std	Y+21, r24	; 0x15
    3554:	9e 8b       	std	Y+22, r25	; 0x16
    3556:	af 8b       	std	Y+23, r26	; 0x17
    3558:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    355a:	6d 89       	ldd	r22, Y+21	; 0x15
    355c:	7e 89       	ldd	r23, Y+22	; 0x16
    355e:	8f 89       	ldd	r24, Y+23	; 0x17
    3560:	98 8d       	ldd	r25, Y+24	; 0x18
    3562:	20 e0       	ldi	r18, 0x00	; 0
    3564:	30 e0       	ldi	r19, 0x00	; 0
    3566:	40 e8       	ldi	r20, 0x80	; 128
    3568:	5f e3       	ldi	r21, 0x3F	; 63
    356a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    356e:	88 23       	and	r24, r24
    3570:	2c f4       	brge	.+10     	; 0x357c <main+0x1ca>
		__ticks = 1;
    3572:	81 e0       	ldi	r24, 0x01	; 1
    3574:	90 e0       	ldi	r25, 0x00	; 0
    3576:	9c 8b       	std	Y+20, r25	; 0x14
    3578:	8b 8b       	std	Y+19, r24	; 0x13
    357a:	3f c0       	rjmp	.+126    	; 0x35fa <main+0x248>
	else if (__tmp > 65535)
    357c:	6d 89       	ldd	r22, Y+21	; 0x15
    357e:	7e 89       	ldd	r23, Y+22	; 0x16
    3580:	8f 89       	ldd	r24, Y+23	; 0x17
    3582:	98 8d       	ldd	r25, Y+24	; 0x18
    3584:	20 e0       	ldi	r18, 0x00	; 0
    3586:	3f ef       	ldi	r19, 0xFF	; 255
    3588:	4f e7       	ldi	r20, 0x7F	; 127
    358a:	57 e4       	ldi	r21, 0x47	; 71
    358c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3590:	18 16       	cp	r1, r24
    3592:	4c f5       	brge	.+82     	; 0x35e6 <main+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3594:	69 8d       	ldd	r22, Y+25	; 0x19
    3596:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3598:	8b 8d       	ldd	r24, Y+27	; 0x1b
    359a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    359c:	20 e0       	ldi	r18, 0x00	; 0
    359e:	30 e0       	ldi	r19, 0x00	; 0
    35a0:	40 e2       	ldi	r20, 0x20	; 32
    35a2:	51 e4       	ldi	r21, 0x41	; 65
    35a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35a8:	dc 01       	movw	r26, r24
    35aa:	cb 01       	movw	r24, r22
    35ac:	bc 01       	movw	r22, r24
    35ae:	cd 01       	movw	r24, r26
    35b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35b4:	dc 01       	movw	r26, r24
    35b6:	cb 01       	movw	r24, r22
    35b8:	9c 8b       	std	Y+20, r25	; 0x14
    35ba:	8b 8b       	std	Y+19, r24	; 0x13
    35bc:	0f c0       	rjmp	.+30     	; 0x35dc <main+0x22a>
    35be:	88 ec       	ldi	r24, 0xC8	; 200
    35c0:	90 e0       	ldi	r25, 0x00	; 0
    35c2:	9a 8b       	std	Y+18, r25	; 0x12
    35c4:	89 8b       	std	Y+17, r24	; 0x11
    35c6:	89 89       	ldd	r24, Y+17	; 0x11
    35c8:	9a 89       	ldd	r25, Y+18	; 0x12
    35ca:	01 97       	sbiw	r24, 0x01	; 1
    35cc:	f1 f7       	brne	.-4      	; 0x35ca <main+0x218>
    35ce:	9a 8b       	std	Y+18, r25	; 0x12
    35d0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35d2:	8b 89       	ldd	r24, Y+19	; 0x13
    35d4:	9c 89       	ldd	r25, Y+20	; 0x14
    35d6:	01 97       	sbiw	r24, 0x01	; 1
    35d8:	9c 8b       	std	Y+20, r25	; 0x14
    35da:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35dc:	8b 89       	ldd	r24, Y+19	; 0x13
    35de:	9c 89       	ldd	r25, Y+20	; 0x14
    35e0:	00 97       	sbiw	r24, 0x00	; 0
    35e2:	69 f7       	brne	.-38     	; 0x35be <main+0x20c>
    35e4:	14 c0       	rjmp	.+40     	; 0x360e <main+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35e6:	6d 89       	ldd	r22, Y+21	; 0x15
    35e8:	7e 89       	ldd	r23, Y+22	; 0x16
    35ea:	8f 89       	ldd	r24, Y+23	; 0x17
    35ec:	98 8d       	ldd	r25, Y+24	; 0x18
    35ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35f2:	dc 01       	movw	r26, r24
    35f4:	cb 01       	movw	r24, r22
    35f6:	9c 8b       	std	Y+20, r25	; 0x14
    35f8:	8b 8b       	std	Y+19, r24	; 0x13
    35fa:	8b 89       	ldd	r24, Y+19	; 0x13
    35fc:	9c 89       	ldd	r25, Y+20	; 0x14
    35fe:	98 8b       	std	Y+16, r25	; 0x10
    3600:	8f 87       	std	Y+15, r24	; 0x0f
    3602:	8f 85       	ldd	r24, Y+15	; 0x0f
    3604:	98 89       	ldd	r25, Y+16	; 0x10
    3606:	01 97       	sbiw	r24, 0x01	; 1
    3608:	f1 f7       	brne	.-4      	; 0x3606 <main+0x254>
    360a:	98 8b       	std	Y+16, r25	; 0x10
    360c:	8f 87       	std	Y+15, r24	; 0x0f
			break;
		}

	}
	_delay_ms(500);
	LCD_VidClear();
    360e:	0e 94 b1 19 	call	0x3362	; 0x3362 <LCD_VidClear>

	LCD_VidSendString("OPERATION");
    3612:	8a e7       	ldi	r24, 0x7A	; 122
    3614:	90 e0       	ldi	r25, 0x00	; 0
    3616:	0e 94 ae 18 	call	0x315c	; 0x315c <LCD_VidSendString>
	u8 Op;
	while(1)
	{
		Op= Keypad_U8ReadPin();
    361a:	0e 94 bf 0b 	call	0x177e	; 0x177e <Keypad_U8ReadPin>
    361e:	88 ab       	std	Y+48, r24	; 0x30

		if(Op != DEFAULT_KEY)
    3620:	88 a9       	ldd	r24, Y+48	; 0x30
    3622:	83 34       	cpi	r24, 0x43	; 67
    3624:	d1 f3       	breq	.-12     	; 0x361a <main+0x268>
		{
			LCD_VidSendData(Op);
    3626:	88 a9       	ldd	r24, Y+48	; 0x30
    3628:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <LCD_VidSendData>
    362c:	80 e0       	ldi	r24, 0x00	; 0
    362e:	90 e0       	ldi	r25, 0x00	; 0
    3630:	aa ef       	ldi	r26, 0xFA	; 250
    3632:	b3 e4       	ldi	r27, 0x43	; 67
    3634:	8b 87       	std	Y+11, r24	; 0x0b
    3636:	9c 87       	std	Y+12, r25	; 0x0c
    3638:	ad 87       	std	Y+13, r26	; 0x0d
    363a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    363c:	6b 85       	ldd	r22, Y+11	; 0x0b
    363e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3640:	8d 85       	ldd	r24, Y+13	; 0x0d
    3642:	9e 85       	ldd	r25, Y+14	; 0x0e
    3644:	20 e0       	ldi	r18, 0x00	; 0
    3646:	30 e0       	ldi	r19, 0x00	; 0
    3648:	4a ef       	ldi	r20, 0xFA	; 250
    364a:	54 e4       	ldi	r21, 0x44	; 68
    364c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3650:	dc 01       	movw	r26, r24
    3652:	cb 01       	movw	r24, r22
    3654:	8f 83       	std	Y+7, r24	; 0x07
    3656:	98 87       	std	Y+8, r25	; 0x08
    3658:	a9 87       	std	Y+9, r26	; 0x09
    365a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    365c:	6f 81       	ldd	r22, Y+7	; 0x07
    365e:	78 85       	ldd	r23, Y+8	; 0x08
    3660:	89 85       	ldd	r24, Y+9	; 0x09
    3662:	9a 85       	ldd	r25, Y+10	; 0x0a
    3664:	20 e0       	ldi	r18, 0x00	; 0
    3666:	30 e0       	ldi	r19, 0x00	; 0
    3668:	40 e8       	ldi	r20, 0x80	; 128
    366a:	5f e3       	ldi	r21, 0x3F	; 63
    366c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3670:	88 23       	and	r24, r24
    3672:	2c f4       	brge	.+10     	; 0x367e <main+0x2cc>
		__ticks = 1;
    3674:	81 e0       	ldi	r24, 0x01	; 1
    3676:	90 e0       	ldi	r25, 0x00	; 0
    3678:	9e 83       	std	Y+6, r25	; 0x06
    367a:	8d 83       	std	Y+5, r24	; 0x05
    367c:	3f c0       	rjmp	.+126    	; 0x36fc <main+0x34a>
	else if (__tmp > 65535)
    367e:	6f 81       	ldd	r22, Y+7	; 0x07
    3680:	78 85       	ldd	r23, Y+8	; 0x08
    3682:	89 85       	ldd	r24, Y+9	; 0x09
    3684:	9a 85       	ldd	r25, Y+10	; 0x0a
    3686:	20 e0       	ldi	r18, 0x00	; 0
    3688:	3f ef       	ldi	r19, 0xFF	; 255
    368a:	4f e7       	ldi	r20, 0x7F	; 127
    368c:	57 e4       	ldi	r21, 0x47	; 71
    368e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3692:	18 16       	cp	r1, r24
    3694:	4c f5       	brge	.+82     	; 0x36e8 <main+0x336>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3696:	6b 85       	ldd	r22, Y+11	; 0x0b
    3698:	7c 85       	ldd	r23, Y+12	; 0x0c
    369a:	8d 85       	ldd	r24, Y+13	; 0x0d
    369c:	9e 85       	ldd	r25, Y+14	; 0x0e
    369e:	20 e0       	ldi	r18, 0x00	; 0
    36a0:	30 e0       	ldi	r19, 0x00	; 0
    36a2:	40 e2       	ldi	r20, 0x20	; 32
    36a4:	51 e4       	ldi	r21, 0x41	; 65
    36a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36aa:	dc 01       	movw	r26, r24
    36ac:	cb 01       	movw	r24, r22
    36ae:	bc 01       	movw	r22, r24
    36b0:	cd 01       	movw	r24, r26
    36b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36b6:	dc 01       	movw	r26, r24
    36b8:	cb 01       	movw	r24, r22
    36ba:	9e 83       	std	Y+6, r25	; 0x06
    36bc:	8d 83       	std	Y+5, r24	; 0x05
    36be:	0f c0       	rjmp	.+30     	; 0x36de <main+0x32c>
    36c0:	88 ec       	ldi	r24, 0xC8	; 200
    36c2:	90 e0       	ldi	r25, 0x00	; 0
    36c4:	9c 83       	std	Y+4, r25	; 0x04
    36c6:	8b 83       	std	Y+3, r24	; 0x03
    36c8:	8b 81       	ldd	r24, Y+3	; 0x03
    36ca:	9c 81       	ldd	r25, Y+4	; 0x04
    36cc:	01 97       	sbiw	r24, 0x01	; 1
    36ce:	f1 f7       	brne	.-4      	; 0x36cc <main+0x31a>
    36d0:	9c 83       	std	Y+4, r25	; 0x04
    36d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36d4:	8d 81       	ldd	r24, Y+5	; 0x05
    36d6:	9e 81       	ldd	r25, Y+6	; 0x06
    36d8:	01 97       	sbiw	r24, 0x01	; 1
    36da:	9e 83       	std	Y+6, r25	; 0x06
    36dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36de:	8d 81       	ldd	r24, Y+5	; 0x05
    36e0:	9e 81       	ldd	r25, Y+6	; 0x06
    36e2:	00 97       	sbiw	r24, 0x00	; 0
    36e4:	69 f7       	brne	.-38     	; 0x36c0 <main+0x30e>
    36e6:	14 c0       	rjmp	.+40     	; 0x3710 <main+0x35e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36e8:	6f 81       	ldd	r22, Y+7	; 0x07
    36ea:	78 85       	ldd	r23, Y+8	; 0x08
    36ec:	89 85       	ldd	r24, Y+9	; 0x09
    36ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    36f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36f4:	dc 01       	movw	r26, r24
    36f6:	cb 01       	movw	r24, r22
    36f8:	9e 83       	std	Y+6, r25	; 0x06
    36fa:	8d 83       	std	Y+5, r24	; 0x05
    36fc:	8d 81       	ldd	r24, Y+5	; 0x05
    36fe:	9e 81       	ldd	r25, Y+6	; 0x06
    3700:	9a 83       	std	Y+2, r25	; 0x02
    3702:	89 83       	std	Y+1, r24	; 0x01
    3704:	89 81       	ldd	r24, Y+1	; 0x01
    3706:	9a 81       	ldd	r25, Y+2	; 0x02
    3708:	01 97       	sbiw	r24, 0x01	; 1
    370a:	f1 f7       	brne	.-4      	; 0x3708 <main+0x356>
    370c:	9a 83       	std	Y+2, r25	; 0x02
    370e:	89 83       	std	Y+1, r24	; 0x01
			break;
		}

	}
	_delay_ms(500);
	LCD_VidClear();
    3710:	0e 94 b1 19 	call	0x3362	; 0x3362 <LCD_VidClear>

	u8 Sum;
	float sum;
	switch (Op)
    3714:	88 a9       	ldd	r24, Y+48	; 0x30
    3716:	28 2f       	mov	r18, r24
    3718:	30 e0       	ldi	r19, 0x00	; 0
    371a:	3c ab       	std	Y+52, r19	; 0x34
    371c:	2b ab       	std	Y+51, r18	; 0x33
    371e:	8b a9       	ldd	r24, Y+51	; 0x33
    3720:	9c a9       	ldd	r25, Y+52	; 0x34
    3722:	8b 32       	cpi	r24, 0x2B	; 43
    3724:	91 05       	cpc	r25, r1
    3726:	b1 f0       	breq	.+44     	; 0x3754 <main+0x3a2>
    3728:	2b a9       	ldd	r18, Y+51	; 0x33
    372a:	3c a9       	ldd	r19, Y+52	; 0x34
    372c:	2c 32       	cpi	r18, 0x2C	; 44
    372e:	31 05       	cpc	r19, r1
    3730:	34 f4       	brge	.+12     	; 0x373e <main+0x38c>
    3732:	8b a9       	ldd	r24, Y+51	; 0x33
    3734:	9c a9       	ldd	r25, Y+52	; 0x34
    3736:	8a 32       	cpi	r24, 0x2A	; 42
    3738:	91 05       	cpc	r25, r1
    373a:	e1 f0       	breq	.+56     	; 0x3774 <main+0x3c2>
    373c:	51 c0       	rjmp	.+162    	; 0x37e0 <main+0x42e>
    373e:	2b a9       	ldd	r18, Y+51	; 0x33
    3740:	3c a9       	ldd	r19, Y+52	; 0x34
    3742:	2d 32       	cpi	r18, 0x2D	; 45
    3744:	31 05       	cpc	r19, r1
    3746:	71 f0       	breq	.+28     	; 0x3764 <main+0x3b2>
    3748:	8b a9       	ldd	r24, Y+51	; 0x33
    374a:	9c a9       	ldd	r25, Y+52	; 0x34
    374c:	8f 32       	cpi	r24, 0x2F	; 47
    374e:	91 05       	cpc	r25, r1
    3750:	d9 f0       	breq	.+54     	; 0x3788 <main+0x3d6>
    3752:	46 c0       	rjmp	.+140    	; 0x37e0 <main+0x42e>
	{
	case '+':
		Sum= x+Y;
    3754:	8a a9       	ldd	r24, Y+50	; 0x32
    3756:	99 a9       	ldd	r25, Y+49	; 0x31
    3758:	89 0f       	add	r24, r25
    375a:	8f a7       	std	Y+47, r24	; 0x2f
		LCD_VidSendNumber(Sum);
    375c:	8f a5       	ldd	r24, Y+47	; 0x2f
    375e:	0e 94 d7 18 	call	0x31ae	; 0x31ae <LCD_VidSendNumber>
    3762:	3e c0       	rjmp	.+124    	; 0x37e0 <main+0x42e>
		break;
	case '-':
		Sum= x-Y;
    3764:	8a a9       	ldd	r24, Y+50	; 0x32
    3766:	99 a9       	ldd	r25, Y+49	; 0x31
    3768:	89 1b       	sub	r24, r25
    376a:	8f a7       	std	Y+47, r24	; 0x2f

		LCD_VidSendNumber(Sum);
    376c:	8f a5       	ldd	r24, Y+47	; 0x2f
    376e:	0e 94 d7 18 	call	0x31ae	; 0x31ae <LCD_VidSendNumber>
    3772:	36 c0       	rjmp	.+108    	; 0x37e0 <main+0x42e>
		break;
	case '*':
		Sum= x*Y;
    3774:	8a a9       	ldd	r24, Y+50	; 0x32
    3776:	99 a9       	ldd	r25, Y+49	; 0x31
    3778:	89 9f       	mul	r24, r25
    377a:	80 2d       	mov	r24, r0
    377c:	11 24       	eor	r1, r1
    377e:	8f a7       	std	Y+47, r24	; 0x2f
		LCD_VidSendNumber(Sum);
    3780:	8f a5       	ldd	r24, Y+47	; 0x2f
    3782:	0e 94 d7 18 	call	0x31ae	; 0x31ae <LCD_VidSendNumber>
    3786:	2c c0       	rjmp	.+88     	; 0x37e0 <main+0x42e>
		break;
	case '/':

		sum = (float)x/Y;
    3788:	8a a9       	ldd	r24, Y+50	; 0x32
    378a:	88 2f       	mov	r24, r24
    378c:	90 e0       	ldi	r25, 0x00	; 0
    378e:	a0 e0       	ldi	r26, 0x00	; 0
    3790:	b0 e0       	ldi	r27, 0x00	; 0
    3792:	bc 01       	movw	r22, r24
    3794:	cd 01       	movw	r24, r26
    3796:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    379a:	7b 01       	movw	r14, r22
    379c:	8c 01       	movw	r16, r24
    379e:	89 a9       	ldd	r24, Y+49	; 0x31
    37a0:	88 2f       	mov	r24, r24
    37a2:	90 e0       	ldi	r25, 0x00	; 0
    37a4:	aa 27       	eor	r26, r26
    37a6:	97 fd       	sbrc	r25, 7
    37a8:	a0 95       	com	r26
    37aa:	ba 2f       	mov	r27, r26
    37ac:	bc 01       	movw	r22, r24
    37ae:	cd 01       	movw	r24, r26
    37b0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    37b4:	9b 01       	movw	r18, r22
    37b6:	ac 01       	movw	r20, r24
    37b8:	c8 01       	movw	r24, r16
    37ba:	b7 01       	movw	r22, r14
    37bc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    37c0:	dc 01       	movw	r26, r24
    37c2:	cb 01       	movw	r24, r22
    37c4:	8b a7       	std	Y+43, r24	; 0x2b
    37c6:	9c a7       	std	Y+44, r25	; 0x2c
    37c8:	ad a7       	std	Y+45, r26	; 0x2d
    37ca:	be a7       	std	Y+46, r27	; 0x2e
		LCD_VidSendNumber(sum);
    37cc:	6b a5       	ldd	r22, Y+43	; 0x2b
    37ce:	7c a5       	ldd	r23, Y+44	; 0x2c
    37d0:	8d a5       	ldd	r24, Y+45	; 0x2d
    37d2:	9e a5       	ldd	r25, Y+46	; 0x2e
    37d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37d8:	dc 01       	movw	r26, r24
    37da:	cb 01       	movw	r24, r22
    37dc:	0e 94 d7 18 	call	0x31ae	; 0x31ae <LCD_VidSendNumber>
    37e0:	ff cf       	rjmp	.-2      	; 0x37e0 <main+0x42e>

000037e2 <__udivmodqi4>:
    37e2:	99 1b       	sub	r25, r25
    37e4:	79 e0       	ldi	r23, 0x09	; 9
    37e6:	04 c0       	rjmp	.+8      	; 0x37f0 <__udivmodqi4_ep>

000037e8 <__udivmodqi4_loop>:
    37e8:	99 1f       	adc	r25, r25
    37ea:	96 17       	cp	r25, r22
    37ec:	08 f0       	brcs	.+2      	; 0x37f0 <__udivmodqi4_ep>
    37ee:	96 1b       	sub	r25, r22

000037f0 <__udivmodqi4_ep>:
    37f0:	88 1f       	adc	r24, r24
    37f2:	7a 95       	dec	r23
    37f4:	c9 f7       	brne	.-14     	; 0x37e8 <__udivmodqi4_loop>
    37f6:	80 95       	com	r24
    37f8:	08 95       	ret

000037fa <__prologue_saves__>:
    37fa:	2f 92       	push	r2
    37fc:	3f 92       	push	r3
    37fe:	4f 92       	push	r4
    3800:	5f 92       	push	r5
    3802:	6f 92       	push	r6
    3804:	7f 92       	push	r7
    3806:	8f 92       	push	r8
    3808:	9f 92       	push	r9
    380a:	af 92       	push	r10
    380c:	bf 92       	push	r11
    380e:	cf 92       	push	r12
    3810:	df 92       	push	r13
    3812:	ef 92       	push	r14
    3814:	ff 92       	push	r15
    3816:	0f 93       	push	r16
    3818:	1f 93       	push	r17
    381a:	cf 93       	push	r28
    381c:	df 93       	push	r29
    381e:	cd b7       	in	r28, 0x3d	; 61
    3820:	de b7       	in	r29, 0x3e	; 62
    3822:	ca 1b       	sub	r28, r26
    3824:	db 0b       	sbc	r29, r27
    3826:	0f b6       	in	r0, 0x3f	; 63
    3828:	f8 94       	cli
    382a:	de bf       	out	0x3e, r29	; 62
    382c:	0f be       	out	0x3f, r0	; 63
    382e:	cd bf       	out	0x3d, r28	; 61
    3830:	09 94       	ijmp

00003832 <__epilogue_restores__>:
    3832:	2a 88       	ldd	r2, Y+18	; 0x12
    3834:	39 88       	ldd	r3, Y+17	; 0x11
    3836:	48 88       	ldd	r4, Y+16	; 0x10
    3838:	5f 84       	ldd	r5, Y+15	; 0x0f
    383a:	6e 84       	ldd	r6, Y+14	; 0x0e
    383c:	7d 84       	ldd	r7, Y+13	; 0x0d
    383e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3840:	9b 84       	ldd	r9, Y+11	; 0x0b
    3842:	aa 84       	ldd	r10, Y+10	; 0x0a
    3844:	b9 84       	ldd	r11, Y+9	; 0x09
    3846:	c8 84       	ldd	r12, Y+8	; 0x08
    3848:	df 80       	ldd	r13, Y+7	; 0x07
    384a:	ee 80       	ldd	r14, Y+6	; 0x06
    384c:	fd 80       	ldd	r15, Y+5	; 0x05
    384e:	0c 81       	ldd	r16, Y+4	; 0x04
    3850:	1b 81       	ldd	r17, Y+3	; 0x03
    3852:	aa 81       	ldd	r26, Y+2	; 0x02
    3854:	b9 81       	ldd	r27, Y+1	; 0x01
    3856:	ce 0f       	add	r28, r30
    3858:	d1 1d       	adc	r29, r1
    385a:	0f b6       	in	r0, 0x3f	; 63
    385c:	f8 94       	cli
    385e:	de bf       	out	0x3e, r29	; 62
    3860:	0f be       	out	0x3f, r0	; 63
    3862:	cd bf       	out	0x3d, r28	; 61
    3864:	ed 01       	movw	r28, r26
    3866:	08 95       	ret

00003868 <_exit>:
    3868:	f8 94       	cli

0000386a <__stop_program>:
    386a:	ff cf       	rjmp	.-2      	; 0x386a <__stop_program>
