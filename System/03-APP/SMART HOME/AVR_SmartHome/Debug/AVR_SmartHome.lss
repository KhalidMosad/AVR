
AVR_SmartHome.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004284  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009a  00800060  00004284  00004318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  008000fa  008000fa  000043b2  2**0
                  ALLOC
  3 .stab         000032ac  00000000  00000000  000043b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001037  00000000  00000000  00007660  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008697  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000087d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008947  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a590  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b47b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c228  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c388  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c615  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cde3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 42 07 	jmp	0xe84	; 0xe84 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e8       	ldi	r30, 0x84	; 132
      68:	f2 e4       	ldi	r31, 0x42	; 66
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3f       	cpi	r26, 0xFA	; 250
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa ef       	ldi	r26, 0xFA	; 250
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 30       	cpi	r26, 0x00	; 0
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ba 1a 	call	0x3574	; 0x3574 <main>
      8a:	0c 94 40 21 	jmp	0x4280	; 0x4280 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 68 1e 	jmp	0x3cd0	; 0x3cd0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 ed       	ldi	r26, 0xD1	; 209
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 84 1e 	jmp	0x3d08	; 0x3d08 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 74 1e 	jmp	0x3ce8	; 0x3ce8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 90 1e 	jmp	0x3d20	; 0x3d20 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 74 1e 	jmp	0x3ce8	; 0x3ce8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 90 1e 	jmp	0x3d20	; 0x3d20 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 68 1e 	jmp	0x3cd0	; 0x3cd0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 ed       	ldi	r24, 0xD1	; 209
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 84 1e 	jmp	0x3d08	; 0x3d08 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 74 1e 	jmp	0x3ce8	; 0x3ce8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 90 1e 	jmp	0x3d20	; 0x3d20 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 74 1e 	jmp	0x3ce8	; 0x3ce8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 90 1e 	jmp	0x3d20	; 0x3d20 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 74 1e 	jmp	0x3ce8	; 0x3ce8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 90 1e 	jmp	0x3d20	; 0x3d20 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 78 1e 	jmp	0x3cf0	; 0x3cf0 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 94 1e 	jmp	0x3d28	; 0x3d28 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GIE_voidEnable>:


u8 SPCR_Help;

void GIE_voidEnable(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	// GIE
	SET_BIT(SREG,GIE);
     b4e:	af e5       	ldi	r26, 0x5F	; 95
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	ef e5       	ldi	r30, 0x5F	; 95
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 68       	ori	r24, 0x80	; 128
     b5a:	8c 93       	st	X, r24
}
     b5c:	cf 91       	pop	r28
     b5e:	df 91       	pop	r29
     b60:	08 95       	ret

00000b62 <GIE_voidDisable>:

void GIE_voidDisable(void)
{
     b62:	df 93       	push	r29
     b64:	cf 93       	push	r28
     b66:	cd b7       	in	r28, 0x3d	; 61
     b68:	de b7       	in	r29, 0x3e	; 62
	// GIE
	CLR_BIT(SREG,GIE);
     b6a:	af e5       	ldi	r26, 0x5F	; 95
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	ef e5       	ldi	r30, 0x5F	; 95
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8f 77       	andi	r24, 0x7F	; 127
     b76:	8c 93       	st	X, r24
}
     b78:	cf 91       	pop	r28
     b7a:	df 91       	pop	r29
     b7c:	08 95       	ret

00000b7e <ADC_VoidInit>:

void ADC_VoidInit(void)
{
     b7e:	df 93       	push	r29
     b80:	cf 93       	push	r28
     b82:	cd b7       	in	r28, 0x3d	; 61
     b84:	de b7       	in	r29, 0x3e	; 62
		SET_BIT(ADMUX,REFS0);		
	#elif VREF_S== RESERVED
		SET_BIT(ADMUX,REFS1);
		CLR_BIT(ADMUX,REFS0);
	#elif VREF_S==INTERNAL_2_56
		SET_BIT(ADMUX,REFS1);
     b86:	a7 e2       	ldi	r26, 0x27	; 39
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e7 e2       	ldi	r30, 0x27	; 39
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	80 68       	ori	r24, 0x80	; 128
     b92:	8c 93       	st	X, r24
		SET_BIT(ADMUX,REFS0);
     b94:	a7 e2       	ldi	r26, 0x27	; 39
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e7 e2       	ldi	r30, 0x27	; 39
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	80 64       	ori	r24, 0x40	; 64
     ba0:	8c 93       	st	X, r24
	#endif

	#if ADC_DATA_ADJUST==ADJUST_RIGHT
		CLR_BIT(ADMUX,ADLAR);
     ba2:	a7 e2       	ldi	r26, 0x27	; 39
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e7 e2       	ldi	r30, 0x27	; 39
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	8f 7d       	andi	r24, 0xDF	; 223
     bae:	8c 93       	st	X, r24
	#elif ADC_DATA_ADJUST==ADJUST_LEFT		
		SET_BIT(ADMUX,ADLAR);		
	#endif

	#if INT_OP == DISABLE
		CLR_BIT(ADCSRA,ADIE);
     bb0:	a6 e2       	ldi	r26, 0x26	; 38
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	e6 e2       	ldi	r30, 0x26	; 38
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	87 7f       	andi	r24, 0xF7	; 247
     bbc:	8c 93       	st	X, r24
		GIE_voidEnable();	
		SET_BIT(ADCSRA,ADIE);		
	#endif
	
	#if ADC_CHANNEL == ADC_C0
		CLR_BIT(ADMUX,MUX0);
     bbe:	a7 e2       	ldi	r26, 0x27	; 39
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e7 e2       	ldi	r30, 0x27	; 39
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	8e 7f       	andi	r24, 0xFE	; 254
     bca:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX1);
     bcc:	a7 e2       	ldi	r26, 0x27	; 39
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	e7 e2       	ldi	r30, 0x27	; 39
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	8d 7f       	andi	r24, 0xFD	; 253
     bd8:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX2);
     bda:	a7 e2       	ldi	r26, 0x27	; 39
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	e7 e2       	ldi	r30, 0x27	; 39
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	8b 7f       	andi	r24, 0xFB	; 251
     be6:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX3);
     be8:	a7 e2       	ldi	r26, 0x27	; 39
     bea:	b0 e0       	ldi	r27, 0x00	; 0
     bec:	e7 e2       	ldi	r30, 0x27	; 39
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	80 81       	ld	r24, Z
     bf2:	87 7f       	andi	r24, 0xF7	; 247
     bf4:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX4);
     bf6:	a7 e2       	ldi	r26, 0x27	; 39
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	e7 e2       	ldi	r30, 0x27	; 39
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	8f 7e       	andi	r24, 0xEF	; 239
     c02:	8c 93       	st	X, r24
	#elif CLOCK_RATE== F_64
		CLR_BIT(ADCSRA,ADPS0);
		SET_BIT(ADCSRA,ADPS1);
		SET_BIT(ADCSRA,ADPS2);
	#elif CLOCK_RATE== F_128
		SET_BIT(ADCSRA,ADPS0);
     c04:	a6 e2       	ldi	r26, 0x26	; 38
     c06:	b0 e0       	ldi	r27, 0x00	; 0
     c08:	e6 e2       	ldi	r30, 0x26	; 38
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	81 60       	ori	r24, 0x01	; 1
     c10:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS1);
     c12:	a6 e2       	ldi	r26, 0x26	; 38
     c14:	b0 e0       	ldi	r27, 0x00	; 0
     c16:	e6 e2       	ldi	r30, 0x26	; 38
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	80 81       	ld	r24, Z
     c1c:	82 60       	ori	r24, 0x02	; 2
     c1e:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS2);
     c20:	a6 e2       	ldi	r26, 0x26	; 38
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	e6 e2       	ldi	r30, 0x26	; 38
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	80 81       	ld	r24, Z
     c2a:	84 60       	ori	r24, 0x04	; 4
     c2c:	8c 93       	st	X, r24
	#endif

	


}
     c2e:	cf 91       	pop	r28
     c30:	df 91       	pop	r29
     c32:	08 95       	ret

00000c34 <ADC_VoidSelect_channel>:

void ADC_VoidSelect_channel(u8 Copy_Channel)
{
     c34:	df 93       	push	r29
     c36:	cf 93       	push	r28
     c38:	00 d0       	rcall	.+0      	; 0xc3a <ADC_VoidSelect_channel+0x6>
     c3a:	0f 92       	push	r0
     c3c:	cd b7       	in	r28, 0x3d	; 61
     c3e:	de b7       	in	r29, 0x3e	; 62
     c40:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(ADMUX,MUX4);
     c42:	a7 e2       	ldi	r26, 0x27	; 39
     c44:	b0 e0       	ldi	r27, 0x00	; 0
     c46:	e7 e2       	ldi	r30, 0x27	; 39
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	80 81       	ld	r24, Z
     c4c:	8f 7e       	andi	r24, 0xEF	; 239
     c4e:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,MUX3);
     c50:	a7 e2       	ldi	r26, 0x27	; 39
     c52:	b0 e0       	ldi	r27, 0x00	; 0
     c54:	e7 e2       	ldi	r30, 0x27	; 39
     c56:	f0 e0       	ldi	r31, 0x00	; 0
     c58:	80 81       	ld	r24, Z
     c5a:	87 7f       	andi	r24, 0xF7	; 247
     c5c:	8c 93       	st	X, r24


	switch(Copy_Channel)
     c5e:	89 81       	ldd	r24, Y+1	; 0x01
     c60:	28 2f       	mov	r18, r24
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	3b 83       	std	Y+3, r19	; 0x03
     c66:	2a 83       	std	Y+2, r18	; 0x02
     c68:	8a 81       	ldd	r24, Y+2	; 0x02
     c6a:	9b 81       	ldd	r25, Y+3	; 0x03
     c6c:	83 30       	cpi	r24, 0x03	; 3
     c6e:	91 05       	cpc	r25, r1
     c70:	09 f4       	brne	.+2      	; 0xc74 <ADC_VoidSelect_channel+0x40>
     c72:	61 c0       	rjmp	.+194    	; 0xd36 <ADC_VoidSelect_channel+0x102>
     c74:	2a 81       	ldd	r18, Y+2	; 0x02
     c76:	3b 81       	ldd	r19, Y+3	; 0x03
     c78:	24 30       	cpi	r18, 0x04	; 4
     c7a:	31 05       	cpc	r19, r1
     c7c:	7c f4       	brge	.+30     	; 0xc9c <ADC_VoidSelect_channel+0x68>
     c7e:	8a 81       	ldd	r24, Y+2	; 0x02
     c80:	9b 81       	ldd	r25, Y+3	; 0x03
     c82:	81 30       	cpi	r24, 0x01	; 1
     c84:	91 05       	cpc	r25, r1
     c86:	59 f1       	breq	.+86     	; 0xcde <ADC_VoidSelect_channel+0xaa>
     c88:	2a 81       	ldd	r18, Y+2	; 0x02
     c8a:	3b 81       	ldd	r19, Y+3	; 0x03
     c8c:	22 30       	cpi	r18, 0x02	; 2
     c8e:	31 05       	cpc	r19, r1
     c90:	e4 f5       	brge	.+120    	; 0xd0a <ADC_VoidSelect_channel+0xd6>
     c92:	8a 81       	ldd	r24, Y+2	; 0x02
     c94:	9b 81       	ldd	r25, Y+3	; 0x03
     c96:	00 97       	sbiw	r24, 0x00	; 0
     c98:	d1 f0       	breq	.+52     	; 0xcce <ADC_VoidSelect_channel+0x9a>
     c9a:	ba c0       	rjmp	.+372    	; 0xe10 <ADC_VoidSelect_channel+0x1dc>
     c9c:	2a 81       	ldd	r18, Y+2	; 0x02
     c9e:	3b 81       	ldd	r19, Y+3	; 0x03
     ca0:	25 30       	cpi	r18, 0x05	; 5
     ca2:	31 05       	cpc	r19, r1
     ca4:	09 f4       	brne	.+2      	; 0xca8 <ADC_VoidSelect_channel+0x74>
     ca6:	73 c0       	rjmp	.+230    	; 0xd8e <ADC_VoidSelect_channel+0x15a>
     ca8:	8a 81       	ldd	r24, Y+2	; 0x02
     caa:	9b 81       	ldd	r25, Y+3	; 0x03
     cac:	85 30       	cpi	r24, 0x05	; 5
     cae:	91 05       	cpc	r25, r1
     cb0:	0c f4       	brge	.+2      	; 0xcb4 <ADC_VoidSelect_channel+0x80>
     cb2:	57 c0       	rjmp	.+174    	; 0xd62 <ADC_VoidSelect_channel+0x12e>
     cb4:	2a 81       	ldd	r18, Y+2	; 0x02
     cb6:	3b 81       	ldd	r19, Y+3	; 0x03
     cb8:	26 30       	cpi	r18, 0x06	; 6
     cba:	31 05       	cpc	r19, r1
     cbc:	09 f4       	brne	.+2      	; 0xcc0 <ADC_VoidSelect_channel+0x8c>
     cbe:	7d c0       	rjmp	.+250    	; 0xdba <ADC_VoidSelect_channel+0x186>
     cc0:	8a 81       	ldd	r24, Y+2	; 0x02
     cc2:	9b 81       	ldd	r25, Y+3	; 0x03
     cc4:	87 30       	cpi	r24, 0x07	; 7
     cc6:	91 05       	cpc	r25, r1
     cc8:	09 f4       	brne	.+2      	; 0xccc <ADC_VoidSelect_channel+0x98>
     cca:	8d c0       	rjmp	.+282    	; 0xde6 <ADC_VoidSelect_channel+0x1b2>
     ccc:	a1 c0       	rjmp	.+322    	; 0xe10 <ADC_VoidSelect_channel+0x1dc>
	{	case ADC_C0 : ADMUX&=0B11100000; break;  // choose channel
     cce:	a7 e2       	ldi	r26, 0x27	; 39
     cd0:	b0 e0       	ldi	r27, 0x00	; 0
     cd2:	e7 e2       	ldi	r30, 0x27	; 39
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	80 81       	ld	r24, Z
     cd8:	80 7e       	andi	r24, 0xE0	; 224
     cda:	8c 93       	st	X, r24
     cdc:	99 c0       	rjmp	.+306    	; 0xe10 <ADC_VoidSelect_channel+0x1dc>
		case ADC_C1 :SET_BIT(ADMUX,MUX0);CLR_BIT(ADMUX,MUX1);CLR_BIT(ADMUX,MUX2); break;
     cde:	a7 e2       	ldi	r26, 0x27	; 39
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e7 e2       	ldi	r30, 0x27	; 39
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	81 60       	ori	r24, 0x01	; 1
     cea:	8c 93       	st	X, r24
     cec:	a7 e2       	ldi	r26, 0x27	; 39
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e7 e2       	ldi	r30, 0x27	; 39
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	8d 7f       	andi	r24, 0xFD	; 253
     cf8:	8c 93       	st	X, r24
     cfa:	a7 e2       	ldi	r26, 0x27	; 39
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e7 e2       	ldi	r30, 0x27	; 39
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	8b 7f       	andi	r24, 0xFB	; 251
     d06:	8c 93       	st	X, r24
     d08:	83 c0       	rjmp	.+262    	; 0xe10 <ADC_VoidSelect_channel+0x1dc>
		case ADC_C2 :CLR_BIT(ADMUX,MUX0);SET_BIT(ADMUX,MUX1);CLR_BIT(ADMUX,MUX2); break;
     d0a:	a7 e2       	ldi	r26, 0x27	; 39
     d0c:	b0 e0       	ldi	r27, 0x00	; 0
     d0e:	e7 e2       	ldi	r30, 0x27	; 39
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	80 81       	ld	r24, Z
     d14:	8e 7f       	andi	r24, 0xFE	; 254
     d16:	8c 93       	st	X, r24
     d18:	a7 e2       	ldi	r26, 0x27	; 39
     d1a:	b0 e0       	ldi	r27, 0x00	; 0
     d1c:	e7 e2       	ldi	r30, 0x27	; 39
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	80 81       	ld	r24, Z
     d22:	82 60       	ori	r24, 0x02	; 2
     d24:	8c 93       	st	X, r24
     d26:	a7 e2       	ldi	r26, 0x27	; 39
     d28:	b0 e0       	ldi	r27, 0x00	; 0
     d2a:	e7 e2       	ldi	r30, 0x27	; 39
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	8b 7f       	andi	r24, 0xFB	; 251
     d32:	8c 93       	st	X, r24
     d34:	6d c0       	rjmp	.+218    	; 0xe10 <ADC_VoidSelect_channel+0x1dc>
		case ADC_C3 :CLR_BIT(ADMUX,MUX0);SET_BIT(ADMUX,MUX1);SET_BIT(ADMUX,MUX2); break;
     d36:	a7 e2       	ldi	r26, 0x27	; 39
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	e7 e2       	ldi	r30, 0x27	; 39
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	8e 7f       	andi	r24, 0xFE	; 254
     d42:	8c 93       	st	X, r24
     d44:	a7 e2       	ldi	r26, 0x27	; 39
     d46:	b0 e0       	ldi	r27, 0x00	; 0
     d48:	e7 e2       	ldi	r30, 0x27	; 39
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	80 81       	ld	r24, Z
     d4e:	82 60       	ori	r24, 0x02	; 2
     d50:	8c 93       	st	X, r24
     d52:	a7 e2       	ldi	r26, 0x27	; 39
     d54:	b0 e0       	ldi	r27, 0x00	; 0
     d56:	e7 e2       	ldi	r30, 0x27	; 39
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	84 60       	ori	r24, 0x04	; 4
     d5e:	8c 93       	st	X, r24
     d60:	57 c0       	rjmp	.+174    	; 0xe10 <ADC_VoidSelect_channel+0x1dc>
		case ADC_C4 :SET_BIT(ADMUX,MUX0);CLR_BIT(ADMUX,MUX1);CLR_BIT(ADMUX,MUX2); break;
     d62:	a7 e2       	ldi	r26, 0x27	; 39
     d64:	b0 e0       	ldi	r27, 0x00	; 0
     d66:	e7 e2       	ldi	r30, 0x27	; 39
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	80 81       	ld	r24, Z
     d6c:	81 60       	ori	r24, 0x01	; 1
     d6e:	8c 93       	st	X, r24
     d70:	a7 e2       	ldi	r26, 0x27	; 39
     d72:	b0 e0       	ldi	r27, 0x00	; 0
     d74:	e7 e2       	ldi	r30, 0x27	; 39
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	80 81       	ld	r24, Z
     d7a:	8d 7f       	andi	r24, 0xFD	; 253
     d7c:	8c 93       	st	X, r24
     d7e:	a7 e2       	ldi	r26, 0x27	; 39
     d80:	b0 e0       	ldi	r27, 0x00	; 0
     d82:	e7 e2       	ldi	r30, 0x27	; 39
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	80 81       	ld	r24, Z
     d88:	8b 7f       	andi	r24, 0xFB	; 251
     d8a:	8c 93       	st	X, r24
     d8c:	41 c0       	rjmp	.+130    	; 0xe10 <ADC_VoidSelect_channel+0x1dc>
		case ADC_C5 :SET_BIT(ADMUX,MUX0);CLR_BIT(ADMUX,MUX1);SET_BIT(ADMUX,MUX2); break;
     d8e:	a7 e2       	ldi	r26, 0x27	; 39
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	e7 e2       	ldi	r30, 0x27	; 39
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	81 60       	ori	r24, 0x01	; 1
     d9a:	8c 93       	st	X, r24
     d9c:	a7 e2       	ldi	r26, 0x27	; 39
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	e7 e2       	ldi	r30, 0x27	; 39
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	8d 7f       	andi	r24, 0xFD	; 253
     da8:	8c 93       	st	X, r24
     daa:	a7 e2       	ldi	r26, 0x27	; 39
     dac:	b0 e0       	ldi	r27, 0x00	; 0
     dae:	e7 e2       	ldi	r30, 0x27	; 39
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	80 81       	ld	r24, Z
     db4:	84 60       	ori	r24, 0x04	; 4
     db6:	8c 93       	st	X, r24
     db8:	2b c0       	rjmp	.+86     	; 0xe10 <ADC_VoidSelect_channel+0x1dc>
		case ADC_C6 :SET_BIT(ADMUX,MUX0);SET_BIT(ADMUX,MUX1);CLR_BIT(ADMUX,MUX2); break;
     dba:	a7 e2       	ldi	r26, 0x27	; 39
     dbc:	b0 e0       	ldi	r27, 0x00	; 0
     dbe:	e7 e2       	ldi	r30, 0x27	; 39
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	80 81       	ld	r24, Z
     dc4:	81 60       	ori	r24, 0x01	; 1
     dc6:	8c 93       	st	X, r24
     dc8:	a7 e2       	ldi	r26, 0x27	; 39
     dca:	b0 e0       	ldi	r27, 0x00	; 0
     dcc:	e7 e2       	ldi	r30, 0x27	; 39
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	80 81       	ld	r24, Z
     dd2:	82 60       	ori	r24, 0x02	; 2
     dd4:	8c 93       	st	X, r24
     dd6:	a7 e2       	ldi	r26, 0x27	; 39
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	e7 e2       	ldi	r30, 0x27	; 39
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	8b 7f       	andi	r24, 0xFB	; 251
     de2:	8c 93       	st	X, r24
     de4:	15 c0       	rjmp	.+42     	; 0xe10 <ADC_VoidSelect_channel+0x1dc>
		case ADC_C7 :SET_BIT(ADMUX,MUX0);SET_BIT(ADMUX,MUX1);SET_BIT(ADMUX,MUX2); break;
     de6:	a7 e2       	ldi	r26, 0x27	; 39
     de8:	b0 e0       	ldi	r27, 0x00	; 0
     dea:	e7 e2       	ldi	r30, 0x27	; 39
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	81 60       	ori	r24, 0x01	; 1
     df2:	8c 93       	st	X, r24
     df4:	a7 e2       	ldi	r26, 0x27	; 39
     df6:	b0 e0       	ldi	r27, 0x00	; 0
     df8:	e7 e2       	ldi	r30, 0x27	; 39
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	80 81       	ld	r24, Z
     dfe:	82 60       	ori	r24, 0x02	; 2
     e00:	8c 93       	st	X, r24
     e02:	a7 e2       	ldi	r26, 0x27	; 39
     e04:	b0 e0       	ldi	r27, 0x00	; 0
     e06:	e7 e2       	ldi	r30, 0x27	; 39
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	80 81       	ld	r24, Z
     e0c:	84 60       	ori	r24, 0x04	; 4
     e0e:	8c 93       	st	X, r24
	}
}
     e10:	0f 90       	pop	r0
     e12:	0f 90       	pop	r0
     e14:	0f 90       	pop	r0
     e16:	cf 91       	pop	r28
     e18:	df 91       	pop	r29
     e1a:	08 95       	ret

00000e1c <ADC_VoidADCEnable>:

void ADC_VoidADCEnable(void)
{
     e1c:	df 93       	push	r29
     e1e:	cf 93       	push	r28
     e20:	cd b7       	in	r28, 0x3d	; 61
     e22:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADEN);
     e24:	a6 e2       	ldi	r26, 0x26	; 38
     e26:	b0 e0       	ldi	r27, 0x00	; 0
     e28:	e6 e2       	ldi	r30, 0x26	; 38
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	80 81       	ld	r24, Z
     e2e:	80 68       	ori	r24, 0x80	; 128
     e30:	8c 93       	st	X, r24
}
     e32:	cf 91       	pop	r28
     e34:	df 91       	pop	r29
     e36:	08 95       	ret

00000e38 <ADC_VoidStartConversion>:

void ADC_VoidStartConversion(void)
{
     e38:	df 93       	push	r29
     e3a:	cf 93       	push	r28
     e3c:	cd b7       	in	r28, 0x3d	; 61
     e3e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADSC);
     e40:	a6 e2       	ldi	r26, 0x26	; 38
     e42:	b0 e0       	ldi	r27, 0x00	; 0
     e44:	e6 e2       	ldi	r30, 0x26	; 38
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
     e4a:	80 64       	ori	r24, 0x40	; 64
     e4c:	8c 93       	st	X, r24
}
     e4e:	cf 91       	pop	r28
     e50:	df 91       	pop	r29
     e52:	08 95       	ret

00000e54 <ADC_U16ReadDigitalValue>:
u16 ADC_U16ReadDigitalValue(void)
{	ADC_VoidStartConversion();
     e54:	df 93       	push	r29
     e56:	cf 93       	push	r28
     e58:	cd b7       	in	r28, 0x3d	; 61
     e5a:	de b7       	in	r29, 0x3e	; 62
     e5c:	0e 94 1c 07 	call	0xe38	; 0xe38 <ADC_VoidStartConversion>
	while(GET_BIT(ADCSRA,ADIF) == 0);
     e60:	e6 e2       	ldi	r30, 0x26	; 38
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	80 81       	ld	r24, Z
     e66:	82 95       	swap	r24
     e68:	8f 70       	andi	r24, 0x0F	; 15
     e6a:	88 2f       	mov	r24, r24
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	81 70       	andi	r24, 0x01	; 1
     e70:	90 70       	andi	r25, 0x00	; 0
     e72:	00 97       	sbiw	r24, 0x00	; 0
     e74:	a9 f3       	breq	.-22     	; 0xe60 <ADC_U16ReadDigitalValue+0xc>
	return ADC_DATA;
     e76:	e4 e2       	ldi	r30, 0x24	; 36
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	91 81       	ldd	r25, Z+1	; 0x01
}
     e7e:	cf 91       	pop	r28
     e80:	df 91       	pop	r29
     e82:	08 95       	ret

00000e84 <__vector_16>:

void __vector_16(void )
{
     e84:	1f 92       	push	r1
     e86:	0f 92       	push	r0
     e88:	0f b6       	in	r0, 0x3f	; 63
     e8a:	0f 92       	push	r0
     e8c:	11 24       	eor	r1, r1
     e8e:	df 93       	push	r29
     e90:	cf 93       	push	r28
     e92:	cd b7       	in	r28, 0x3d	; 61
     e94:	de b7       	in	r29, 0x3e	; 62
// write your code 

}
     e96:	cf 91       	pop	r28
     e98:	df 91       	pop	r29
     e9a:	0f 90       	pop	r0
     e9c:	0f be       	out	0x3f, r0	; 63
     e9e:	0f 90       	pop	r0
     ea0:	1f 90       	pop	r1
     ea2:	18 95       	reti

00000ea4 <DIO_VidSetPinDirection>:
#include"DIO_register.h"
#include"DIO_config.h"
#include"DIO_interface.h"

void DIO_VidSetPinDirection		(u8 copy_u8port, u8 copy_U8pin, u8 copy_U8state)
{
     ea4:	df 93       	push	r29
     ea6:	cf 93       	push	r28
     ea8:	cd b7       	in	r28, 0x3d	; 61
     eaa:	de b7       	in	r29, 0x3e	; 62
     eac:	27 97       	sbiw	r28, 0x07	; 7
     eae:	0f b6       	in	r0, 0x3f	; 63
     eb0:	f8 94       	cli
     eb2:	de bf       	out	0x3e, r29	; 62
     eb4:	0f be       	out	0x3f, r0	; 63
     eb6:	cd bf       	out	0x3d, r28	; 61
     eb8:	89 83       	std	Y+1, r24	; 0x01
     eba:	6a 83       	std	Y+2, r22	; 0x02
     ebc:	4b 83       	std	Y+3, r20	; 0x03
	if(OUTPUT==copy_U8state)
     ebe:	8b 81       	ldd	r24, Y+3	; 0x03
     ec0:	81 30       	cpi	r24, 0x01	; 1
     ec2:	09 f0       	breq	.+2      	; 0xec6 <DIO_VidSetPinDirection+0x22>
     ec4:	6f c0       	rjmp	.+222    	; 0xfa4 <DIO_VidSetPinDirection+0x100>
	{
		switch (copy_u8port)
     ec6:	89 81       	ldd	r24, Y+1	; 0x01
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	3f 83       	std	Y+7, r19	; 0x07
     ece:	2e 83       	std	Y+6, r18	; 0x06
     ed0:	8e 81       	ldd	r24, Y+6	; 0x06
     ed2:	9f 81       	ldd	r25, Y+7	; 0x07
     ed4:	81 30       	cpi	r24, 0x01	; 1
     ed6:	91 05       	cpc	r25, r1
     ed8:	49 f1       	breq	.+82     	; 0xf2c <DIO_VidSetPinDirection+0x88>
     eda:	2e 81       	ldd	r18, Y+6	; 0x06
     edc:	3f 81       	ldd	r19, Y+7	; 0x07
     ede:	22 30       	cpi	r18, 0x02	; 2
     ee0:	31 05       	cpc	r19, r1
     ee2:	2c f4       	brge	.+10     	; 0xeee <DIO_VidSetPinDirection+0x4a>
     ee4:	8e 81       	ldd	r24, Y+6	; 0x06
     ee6:	9f 81       	ldd	r25, Y+7	; 0x07
     ee8:	00 97       	sbiw	r24, 0x00	; 0
     eea:	61 f0       	breq	.+24     	; 0xf04 <DIO_VidSetPinDirection+0x60>
     eec:	d2 c0       	rjmp	.+420    	; 0x1092 <DIO_VidSetPinDirection+0x1ee>
     eee:	2e 81       	ldd	r18, Y+6	; 0x06
     ef0:	3f 81       	ldd	r19, Y+7	; 0x07
     ef2:	22 30       	cpi	r18, 0x02	; 2
     ef4:	31 05       	cpc	r19, r1
     ef6:	71 f1       	breq	.+92     	; 0xf54 <DIO_VidSetPinDirection+0xb0>
     ef8:	8e 81       	ldd	r24, Y+6	; 0x06
     efa:	9f 81       	ldd	r25, Y+7	; 0x07
     efc:	83 30       	cpi	r24, 0x03	; 3
     efe:	91 05       	cpc	r25, r1
     f00:	e9 f1       	breq	.+122    	; 0xf7c <DIO_VidSetPinDirection+0xd8>
     f02:	c7 c0       	rjmp	.+398    	; 0x1092 <DIO_VidSetPinDirection+0x1ee>
		{
			case PORTA:SET_BIT(DDRA, copy_U8pin); break;
     f04:	aa e3       	ldi	r26, 0x3A	; 58
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	ea e3       	ldi	r30, 0x3A	; 58
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	48 2f       	mov	r20, r24
     f10:	8a 81       	ldd	r24, Y+2	; 0x02
     f12:	28 2f       	mov	r18, r24
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	02 2e       	mov	r0, r18
     f1c:	02 c0       	rjmp	.+4      	; 0xf22 <DIO_VidSetPinDirection+0x7e>
     f1e:	88 0f       	add	r24, r24
     f20:	99 1f       	adc	r25, r25
     f22:	0a 94       	dec	r0
     f24:	e2 f7       	brpl	.-8      	; 0xf1e <DIO_VidSetPinDirection+0x7a>
     f26:	84 2b       	or	r24, r20
     f28:	8c 93       	st	X, r24
     f2a:	b3 c0       	rjmp	.+358    	; 0x1092 <DIO_VidSetPinDirection+0x1ee>
			case PORTB:SET_BIT(DDRB, copy_U8pin); break;
     f2c:	a7 e3       	ldi	r26, 0x37	; 55
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	e7 e3       	ldi	r30, 0x37	; 55
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	48 2f       	mov	r20, r24
     f38:	8a 81       	ldd	r24, Y+2	; 0x02
     f3a:	28 2f       	mov	r18, r24
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	02 2e       	mov	r0, r18
     f44:	02 c0       	rjmp	.+4      	; 0xf4a <DIO_VidSetPinDirection+0xa6>
     f46:	88 0f       	add	r24, r24
     f48:	99 1f       	adc	r25, r25
     f4a:	0a 94       	dec	r0
     f4c:	e2 f7       	brpl	.-8      	; 0xf46 <DIO_VidSetPinDirection+0xa2>
     f4e:	84 2b       	or	r24, r20
     f50:	8c 93       	st	X, r24
     f52:	9f c0       	rjmp	.+318    	; 0x1092 <DIO_VidSetPinDirection+0x1ee>
			case PORTC:SET_BIT(DDRC, copy_U8pin); break;
     f54:	a4 e3       	ldi	r26, 0x34	; 52
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	e4 e3       	ldi	r30, 0x34	; 52
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	48 2f       	mov	r20, r24
     f60:	8a 81       	ldd	r24, Y+2	; 0x02
     f62:	28 2f       	mov	r18, r24
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	02 2e       	mov	r0, r18
     f6c:	02 c0       	rjmp	.+4      	; 0xf72 <DIO_VidSetPinDirection+0xce>
     f6e:	88 0f       	add	r24, r24
     f70:	99 1f       	adc	r25, r25
     f72:	0a 94       	dec	r0
     f74:	e2 f7       	brpl	.-8      	; 0xf6e <DIO_VidSetPinDirection+0xca>
     f76:	84 2b       	or	r24, r20
     f78:	8c 93       	st	X, r24
     f7a:	8b c0       	rjmp	.+278    	; 0x1092 <DIO_VidSetPinDirection+0x1ee>
			case PORTD:SET_BIT(DDRD, copy_U8pin); break;
     f7c:	a1 e3       	ldi	r26, 0x31	; 49
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	e1 e3       	ldi	r30, 0x31	; 49
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	48 2f       	mov	r20, r24
     f88:	8a 81       	ldd	r24, Y+2	; 0x02
     f8a:	28 2f       	mov	r18, r24
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	02 2e       	mov	r0, r18
     f94:	02 c0       	rjmp	.+4      	; 0xf9a <DIO_VidSetPinDirection+0xf6>
     f96:	88 0f       	add	r24, r24
     f98:	99 1f       	adc	r25, r25
     f9a:	0a 94       	dec	r0
     f9c:	e2 f7       	brpl	.-8      	; 0xf96 <DIO_VidSetPinDirection+0xf2>
     f9e:	84 2b       	or	r24, r20
     fa0:	8c 93       	st	X, r24
     fa2:	77 c0       	rjmp	.+238    	; 0x1092 <DIO_VidSetPinDirection+0x1ee>
	
		}	
	}
	else if(INPUT==copy_U8state)
     fa4:	8b 81       	ldd	r24, Y+3	; 0x03
     fa6:	88 23       	and	r24, r24
     fa8:	09 f0       	breq	.+2      	; 0xfac <DIO_VidSetPinDirection+0x108>
     faa:	73 c0       	rjmp	.+230    	; 0x1092 <DIO_VidSetPinDirection+0x1ee>
	{
		switch(copy_u8port)
     fac:	89 81       	ldd	r24, Y+1	; 0x01
     fae:	28 2f       	mov	r18, r24
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	3d 83       	std	Y+5, r19	; 0x05
     fb4:	2c 83       	std	Y+4, r18	; 0x04
     fb6:	8c 81       	ldd	r24, Y+4	; 0x04
     fb8:	9d 81       	ldd	r25, Y+5	; 0x05
     fba:	81 30       	cpi	r24, 0x01	; 1
     fbc:	91 05       	cpc	r25, r1
     fbe:	59 f1       	breq	.+86     	; 0x1016 <DIO_VidSetPinDirection+0x172>
     fc0:	2c 81       	ldd	r18, Y+4	; 0x04
     fc2:	3d 81       	ldd	r19, Y+5	; 0x05
     fc4:	22 30       	cpi	r18, 0x02	; 2
     fc6:	31 05       	cpc	r19, r1
     fc8:	2c f4       	brge	.+10     	; 0xfd4 <DIO_VidSetPinDirection+0x130>
     fca:	8c 81       	ldd	r24, Y+4	; 0x04
     fcc:	9d 81       	ldd	r25, Y+5	; 0x05
     fce:	00 97       	sbiw	r24, 0x00	; 0
     fd0:	69 f0       	breq	.+26     	; 0xfec <DIO_VidSetPinDirection+0x148>
     fd2:	5f c0       	rjmp	.+190    	; 0x1092 <DIO_VidSetPinDirection+0x1ee>
     fd4:	2c 81       	ldd	r18, Y+4	; 0x04
     fd6:	3d 81       	ldd	r19, Y+5	; 0x05
     fd8:	22 30       	cpi	r18, 0x02	; 2
     fda:	31 05       	cpc	r19, r1
     fdc:	89 f1       	breq	.+98     	; 0x1040 <DIO_VidSetPinDirection+0x19c>
     fde:	8c 81       	ldd	r24, Y+4	; 0x04
     fe0:	9d 81       	ldd	r25, Y+5	; 0x05
     fe2:	83 30       	cpi	r24, 0x03	; 3
     fe4:	91 05       	cpc	r25, r1
     fe6:	09 f4       	brne	.+2      	; 0xfea <DIO_VidSetPinDirection+0x146>
     fe8:	40 c0       	rjmp	.+128    	; 0x106a <DIO_VidSetPinDirection+0x1c6>
     fea:	53 c0       	rjmp	.+166    	; 0x1092 <DIO_VidSetPinDirection+0x1ee>
		{
			case PORTA:CLR_BIT(DDRA, copy_U8pin); break;
     fec:	aa e3       	ldi	r26, 0x3A	; 58
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	ea e3       	ldi	r30, 0x3A	; 58
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	48 2f       	mov	r20, r24
     ff8:	8a 81       	ldd	r24, Y+2	; 0x02
     ffa:	28 2f       	mov	r18, r24
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	02 2e       	mov	r0, r18
    1004:	02 c0       	rjmp	.+4      	; 0x100a <DIO_VidSetPinDirection+0x166>
    1006:	88 0f       	add	r24, r24
    1008:	99 1f       	adc	r25, r25
    100a:	0a 94       	dec	r0
    100c:	e2 f7       	brpl	.-8      	; 0x1006 <DIO_VidSetPinDirection+0x162>
    100e:	80 95       	com	r24
    1010:	84 23       	and	r24, r20
    1012:	8c 93       	st	X, r24
    1014:	3e c0       	rjmp	.+124    	; 0x1092 <DIO_VidSetPinDirection+0x1ee>
			case PORTB:CLR_BIT(DDRB, copy_U8pin); break;
    1016:	a7 e3       	ldi	r26, 0x37	; 55
    1018:	b0 e0       	ldi	r27, 0x00	; 0
    101a:	e7 e3       	ldi	r30, 0x37	; 55
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	48 2f       	mov	r20, r24
    1022:	8a 81       	ldd	r24, Y+2	; 0x02
    1024:	28 2f       	mov	r18, r24
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	02 2e       	mov	r0, r18
    102e:	02 c0       	rjmp	.+4      	; 0x1034 <DIO_VidSetPinDirection+0x190>
    1030:	88 0f       	add	r24, r24
    1032:	99 1f       	adc	r25, r25
    1034:	0a 94       	dec	r0
    1036:	e2 f7       	brpl	.-8      	; 0x1030 <DIO_VidSetPinDirection+0x18c>
    1038:	80 95       	com	r24
    103a:	84 23       	and	r24, r20
    103c:	8c 93       	st	X, r24
    103e:	29 c0       	rjmp	.+82     	; 0x1092 <DIO_VidSetPinDirection+0x1ee>
		    case PORTC:CLR_BIT(DDRC, copy_U8pin); break;
    1040:	a4 e3       	ldi	r26, 0x34	; 52
    1042:	b0 e0       	ldi	r27, 0x00	; 0
    1044:	e4 e3       	ldi	r30, 0x34	; 52
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	48 2f       	mov	r20, r24
    104c:	8a 81       	ldd	r24, Y+2	; 0x02
    104e:	28 2f       	mov	r18, r24
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	02 2e       	mov	r0, r18
    1058:	02 c0       	rjmp	.+4      	; 0x105e <DIO_VidSetPinDirection+0x1ba>
    105a:	88 0f       	add	r24, r24
    105c:	99 1f       	adc	r25, r25
    105e:	0a 94       	dec	r0
    1060:	e2 f7       	brpl	.-8      	; 0x105a <DIO_VidSetPinDirection+0x1b6>
    1062:	80 95       	com	r24
    1064:	84 23       	and	r24, r20
    1066:	8c 93       	st	X, r24
    1068:	14 c0       	rjmp	.+40     	; 0x1092 <DIO_VidSetPinDirection+0x1ee>
		    case PORTD:CLR_BIT(DDRD, copy_U8pin); break;
    106a:	a1 e3       	ldi	r26, 0x31	; 49
    106c:	b0 e0       	ldi	r27, 0x00	; 0
    106e:	e1 e3       	ldi	r30, 0x31	; 49
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	48 2f       	mov	r20, r24
    1076:	8a 81       	ldd	r24, Y+2	; 0x02
    1078:	28 2f       	mov	r18, r24
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	02 2e       	mov	r0, r18
    1082:	02 c0       	rjmp	.+4      	; 0x1088 <DIO_VidSetPinDirection+0x1e4>
    1084:	88 0f       	add	r24, r24
    1086:	99 1f       	adc	r25, r25
    1088:	0a 94       	dec	r0
    108a:	e2 f7       	brpl	.-8      	; 0x1084 <DIO_VidSetPinDirection+0x1e0>
    108c:	80 95       	com	r24
    108e:	84 23       	and	r24, r20
    1090:	8c 93       	st	X, r24
	else
	{
		
	}
	
}
    1092:	27 96       	adiw	r28, 0x07	; 7
    1094:	0f b6       	in	r0, 0x3f	; 63
    1096:	f8 94       	cli
    1098:	de bf       	out	0x3e, r29	; 62
    109a:	0f be       	out	0x3f, r0	; 63
    109c:	cd bf       	out	0x3d, r28	; 61
    109e:	cf 91       	pop	r28
    10a0:	df 91       	pop	r29
    10a2:	08 95       	ret

000010a4 <DIO_VidSetPinValue>:
void DIO_VidSetPinValue			(u8 copy_u8port, u8 copy_U8pin, u8 copy_U8value)
{
    10a4:	df 93       	push	r29
    10a6:	cf 93       	push	r28
    10a8:	cd b7       	in	r28, 0x3d	; 61
    10aa:	de b7       	in	r29, 0x3e	; 62
    10ac:	27 97       	sbiw	r28, 0x07	; 7
    10ae:	0f b6       	in	r0, 0x3f	; 63
    10b0:	f8 94       	cli
    10b2:	de bf       	out	0x3e, r29	; 62
    10b4:	0f be       	out	0x3f, r0	; 63
    10b6:	cd bf       	out	0x3d, r28	; 61
    10b8:	89 83       	std	Y+1, r24	; 0x01
    10ba:	6a 83       	std	Y+2, r22	; 0x02
    10bc:	4b 83       	std	Y+3, r20	; 0x03
	if(HIGH==copy_U8value)
    10be:	8b 81       	ldd	r24, Y+3	; 0x03
    10c0:	81 30       	cpi	r24, 0x01	; 1
    10c2:	09 f0       	breq	.+2      	; 0x10c6 <DIO_VidSetPinValue+0x22>
    10c4:	6f c0       	rjmp	.+222    	; 0x11a4 <DIO_VidSetPinValue+0x100>
	{
		switch (copy_u8port)
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	3f 83       	std	Y+7, r19	; 0x07
    10ce:	2e 83       	std	Y+6, r18	; 0x06
    10d0:	8e 81       	ldd	r24, Y+6	; 0x06
    10d2:	9f 81       	ldd	r25, Y+7	; 0x07
    10d4:	81 30       	cpi	r24, 0x01	; 1
    10d6:	91 05       	cpc	r25, r1
    10d8:	49 f1       	breq	.+82     	; 0x112c <DIO_VidSetPinValue+0x88>
    10da:	2e 81       	ldd	r18, Y+6	; 0x06
    10dc:	3f 81       	ldd	r19, Y+7	; 0x07
    10de:	22 30       	cpi	r18, 0x02	; 2
    10e0:	31 05       	cpc	r19, r1
    10e2:	2c f4       	brge	.+10     	; 0x10ee <DIO_VidSetPinValue+0x4a>
    10e4:	8e 81       	ldd	r24, Y+6	; 0x06
    10e6:	9f 81       	ldd	r25, Y+7	; 0x07
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	61 f0       	breq	.+24     	; 0x1104 <DIO_VidSetPinValue+0x60>
    10ec:	d2 c0       	rjmp	.+420    	; 0x1292 <DIO_VidSetPinValue+0x1ee>
    10ee:	2e 81       	ldd	r18, Y+6	; 0x06
    10f0:	3f 81       	ldd	r19, Y+7	; 0x07
    10f2:	22 30       	cpi	r18, 0x02	; 2
    10f4:	31 05       	cpc	r19, r1
    10f6:	71 f1       	breq	.+92     	; 0x1154 <DIO_VidSetPinValue+0xb0>
    10f8:	8e 81       	ldd	r24, Y+6	; 0x06
    10fa:	9f 81       	ldd	r25, Y+7	; 0x07
    10fc:	83 30       	cpi	r24, 0x03	; 3
    10fe:	91 05       	cpc	r25, r1
    1100:	e9 f1       	breq	.+122    	; 0x117c <DIO_VidSetPinValue+0xd8>
    1102:	c7 c0       	rjmp	.+398    	; 0x1292 <DIO_VidSetPinValue+0x1ee>
		{
			case PORTA:SET_BIT(PORT_A, copy_U8pin); break;
    1104:	ab e3       	ldi	r26, 0x3B	; 59
    1106:	b0 e0       	ldi	r27, 0x00	; 0
    1108:	eb e3       	ldi	r30, 0x3B	; 59
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	80 81       	ld	r24, Z
    110e:	48 2f       	mov	r20, r24
    1110:	8a 81       	ldd	r24, Y+2	; 0x02
    1112:	28 2f       	mov	r18, r24
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	02 2e       	mov	r0, r18
    111c:	02 c0       	rjmp	.+4      	; 0x1122 <DIO_VidSetPinValue+0x7e>
    111e:	88 0f       	add	r24, r24
    1120:	99 1f       	adc	r25, r25
    1122:	0a 94       	dec	r0
    1124:	e2 f7       	brpl	.-8      	; 0x111e <DIO_VidSetPinValue+0x7a>
    1126:	84 2b       	or	r24, r20
    1128:	8c 93       	st	X, r24
    112a:	b3 c0       	rjmp	.+358    	; 0x1292 <DIO_VidSetPinValue+0x1ee>
			case PORTB:SET_BIT(PORT_B, copy_U8pin); break;
    112c:	a8 e3       	ldi	r26, 0x38	; 56
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	e8 e3       	ldi	r30, 0x38	; 56
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	48 2f       	mov	r20, r24
    1138:	8a 81       	ldd	r24, Y+2	; 0x02
    113a:	28 2f       	mov	r18, r24
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	02 2e       	mov	r0, r18
    1144:	02 c0       	rjmp	.+4      	; 0x114a <DIO_VidSetPinValue+0xa6>
    1146:	88 0f       	add	r24, r24
    1148:	99 1f       	adc	r25, r25
    114a:	0a 94       	dec	r0
    114c:	e2 f7       	brpl	.-8      	; 0x1146 <DIO_VidSetPinValue+0xa2>
    114e:	84 2b       	or	r24, r20
    1150:	8c 93       	st	X, r24
    1152:	9f c0       	rjmp	.+318    	; 0x1292 <DIO_VidSetPinValue+0x1ee>
			case PORTC:SET_BIT(PORT_C, copy_U8pin); break;
    1154:	a5 e3       	ldi	r26, 0x35	; 53
    1156:	b0 e0       	ldi	r27, 0x00	; 0
    1158:	e5 e3       	ldi	r30, 0x35	; 53
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	48 2f       	mov	r20, r24
    1160:	8a 81       	ldd	r24, Y+2	; 0x02
    1162:	28 2f       	mov	r18, r24
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	02 2e       	mov	r0, r18
    116c:	02 c0       	rjmp	.+4      	; 0x1172 <DIO_VidSetPinValue+0xce>
    116e:	88 0f       	add	r24, r24
    1170:	99 1f       	adc	r25, r25
    1172:	0a 94       	dec	r0
    1174:	e2 f7       	brpl	.-8      	; 0x116e <DIO_VidSetPinValue+0xca>
    1176:	84 2b       	or	r24, r20
    1178:	8c 93       	st	X, r24
    117a:	8b c0       	rjmp	.+278    	; 0x1292 <DIO_VidSetPinValue+0x1ee>
			case PORTD:SET_BIT(PORT_D, copy_U8pin); break;
    117c:	a2 e3       	ldi	r26, 0x32	; 50
    117e:	b0 e0       	ldi	r27, 0x00	; 0
    1180:	e2 e3       	ldi	r30, 0x32	; 50
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	80 81       	ld	r24, Z
    1186:	48 2f       	mov	r20, r24
    1188:	8a 81       	ldd	r24, Y+2	; 0x02
    118a:	28 2f       	mov	r18, r24
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	02 2e       	mov	r0, r18
    1194:	02 c0       	rjmp	.+4      	; 0x119a <DIO_VidSetPinValue+0xf6>
    1196:	88 0f       	add	r24, r24
    1198:	99 1f       	adc	r25, r25
    119a:	0a 94       	dec	r0
    119c:	e2 f7       	brpl	.-8      	; 0x1196 <DIO_VidSetPinValue+0xf2>
    119e:	84 2b       	or	r24, r20
    11a0:	8c 93       	st	X, r24
    11a2:	77 c0       	rjmp	.+238    	; 0x1292 <DIO_VidSetPinValue+0x1ee>
	
		}	
	}
	else if(LOW==copy_U8value)
    11a4:	8b 81       	ldd	r24, Y+3	; 0x03
    11a6:	88 23       	and	r24, r24
    11a8:	09 f0       	breq	.+2      	; 0x11ac <DIO_VidSetPinValue+0x108>
    11aa:	73 c0       	rjmp	.+230    	; 0x1292 <DIO_VidSetPinValue+0x1ee>
	{
		switch(copy_u8port)
    11ac:	89 81       	ldd	r24, Y+1	; 0x01
    11ae:	28 2f       	mov	r18, r24
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	3d 83       	std	Y+5, r19	; 0x05
    11b4:	2c 83       	std	Y+4, r18	; 0x04
    11b6:	8c 81       	ldd	r24, Y+4	; 0x04
    11b8:	9d 81       	ldd	r25, Y+5	; 0x05
    11ba:	81 30       	cpi	r24, 0x01	; 1
    11bc:	91 05       	cpc	r25, r1
    11be:	59 f1       	breq	.+86     	; 0x1216 <DIO_VidSetPinValue+0x172>
    11c0:	2c 81       	ldd	r18, Y+4	; 0x04
    11c2:	3d 81       	ldd	r19, Y+5	; 0x05
    11c4:	22 30       	cpi	r18, 0x02	; 2
    11c6:	31 05       	cpc	r19, r1
    11c8:	2c f4       	brge	.+10     	; 0x11d4 <DIO_VidSetPinValue+0x130>
    11ca:	8c 81       	ldd	r24, Y+4	; 0x04
    11cc:	9d 81       	ldd	r25, Y+5	; 0x05
    11ce:	00 97       	sbiw	r24, 0x00	; 0
    11d0:	69 f0       	breq	.+26     	; 0x11ec <DIO_VidSetPinValue+0x148>
    11d2:	5f c0       	rjmp	.+190    	; 0x1292 <DIO_VidSetPinValue+0x1ee>
    11d4:	2c 81       	ldd	r18, Y+4	; 0x04
    11d6:	3d 81       	ldd	r19, Y+5	; 0x05
    11d8:	22 30       	cpi	r18, 0x02	; 2
    11da:	31 05       	cpc	r19, r1
    11dc:	89 f1       	breq	.+98     	; 0x1240 <DIO_VidSetPinValue+0x19c>
    11de:	8c 81       	ldd	r24, Y+4	; 0x04
    11e0:	9d 81       	ldd	r25, Y+5	; 0x05
    11e2:	83 30       	cpi	r24, 0x03	; 3
    11e4:	91 05       	cpc	r25, r1
    11e6:	09 f4       	brne	.+2      	; 0x11ea <DIO_VidSetPinValue+0x146>
    11e8:	40 c0       	rjmp	.+128    	; 0x126a <DIO_VidSetPinValue+0x1c6>
    11ea:	53 c0       	rjmp	.+166    	; 0x1292 <DIO_VidSetPinValue+0x1ee>
		{
			case PORTA:CLR_BIT(PORT_A, copy_U8pin); break;
    11ec:	ab e3       	ldi	r26, 0x3B	; 59
    11ee:	b0 e0       	ldi	r27, 0x00	; 0
    11f0:	eb e3       	ldi	r30, 0x3B	; 59
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	80 81       	ld	r24, Z
    11f6:	48 2f       	mov	r20, r24
    11f8:	8a 81       	ldd	r24, Y+2	; 0x02
    11fa:	28 2f       	mov	r18, r24
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	02 2e       	mov	r0, r18
    1204:	02 c0       	rjmp	.+4      	; 0x120a <DIO_VidSetPinValue+0x166>
    1206:	88 0f       	add	r24, r24
    1208:	99 1f       	adc	r25, r25
    120a:	0a 94       	dec	r0
    120c:	e2 f7       	brpl	.-8      	; 0x1206 <DIO_VidSetPinValue+0x162>
    120e:	80 95       	com	r24
    1210:	84 23       	and	r24, r20
    1212:	8c 93       	st	X, r24
    1214:	3e c0       	rjmp	.+124    	; 0x1292 <DIO_VidSetPinValue+0x1ee>
			case PORTB:CLR_BIT(PORT_B, copy_U8pin); break;
    1216:	a8 e3       	ldi	r26, 0x38	; 56
    1218:	b0 e0       	ldi	r27, 0x00	; 0
    121a:	e8 e3       	ldi	r30, 0x38	; 56
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	48 2f       	mov	r20, r24
    1222:	8a 81       	ldd	r24, Y+2	; 0x02
    1224:	28 2f       	mov	r18, r24
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	02 2e       	mov	r0, r18
    122e:	02 c0       	rjmp	.+4      	; 0x1234 <DIO_VidSetPinValue+0x190>
    1230:	88 0f       	add	r24, r24
    1232:	99 1f       	adc	r25, r25
    1234:	0a 94       	dec	r0
    1236:	e2 f7       	brpl	.-8      	; 0x1230 <DIO_VidSetPinValue+0x18c>
    1238:	80 95       	com	r24
    123a:	84 23       	and	r24, r20
    123c:	8c 93       	st	X, r24
    123e:	29 c0       	rjmp	.+82     	; 0x1292 <DIO_VidSetPinValue+0x1ee>
		    case PORTC:CLR_BIT(PORT_C, copy_U8pin); break;
    1240:	a5 e3       	ldi	r26, 0x35	; 53
    1242:	b0 e0       	ldi	r27, 0x00	; 0
    1244:	e5 e3       	ldi	r30, 0x35	; 53
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 81       	ld	r24, Z
    124a:	48 2f       	mov	r20, r24
    124c:	8a 81       	ldd	r24, Y+2	; 0x02
    124e:	28 2f       	mov	r18, r24
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	02 2e       	mov	r0, r18
    1258:	02 c0       	rjmp	.+4      	; 0x125e <DIO_VidSetPinValue+0x1ba>
    125a:	88 0f       	add	r24, r24
    125c:	99 1f       	adc	r25, r25
    125e:	0a 94       	dec	r0
    1260:	e2 f7       	brpl	.-8      	; 0x125a <DIO_VidSetPinValue+0x1b6>
    1262:	80 95       	com	r24
    1264:	84 23       	and	r24, r20
    1266:	8c 93       	st	X, r24
    1268:	14 c0       	rjmp	.+40     	; 0x1292 <DIO_VidSetPinValue+0x1ee>
		    case PORTD:CLR_BIT(PORT_D, copy_U8pin); break;
    126a:	a2 e3       	ldi	r26, 0x32	; 50
    126c:	b0 e0       	ldi	r27, 0x00	; 0
    126e:	e2 e3       	ldi	r30, 0x32	; 50
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	48 2f       	mov	r20, r24
    1276:	8a 81       	ldd	r24, Y+2	; 0x02
    1278:	28 2f       	mov	r18, r24
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	02 2e       	mov	r0, r18
    1282:	02 c0       	rjmp	.+4      	; 0x1288 <DIO_VidSetPinValue+0x1e4>
    1284:	88 0f       	add	r24, r24
    1286:	99 1f       	adc	r25, r25
    1288:	0a 94       	dec	r0
    128a:	e2 f7       	brpl	.-8      	; 0x1284 <DIO_VidSetPinValue+0x1e0>
    128c:	80 95       	com	r24
    128e:	84 23       	and	r24, r20
    1290:	8c 93       	st	X, r24
		
	}	
	
	
	
}
    1292:	27 96       	adiw	r28, 0x07	; 7
    1294:	0f b6       	in	r0, 0x3f	; 63
    1296:	f8 94       	cli
    1298:	de bf       	out	0x3e, r29	; 62
    129a:	0f be       	out	0x3f, r0	; 63
    129c:	cd bf       	out	0x3d, r28	; 61
    129e:	cf 91       	pop	r28
    12a0:	df 91       	pop	r29
    12a2:	08 95       	ret

000012a4 <DIO_VidGetPinValue>:


u8 DIO_VidGetPinValue			(u8 copy_u8port, u8 Copy_U8Pin)
{
    12a4:	df 93       	push	r29
    12a6:	cf 93       	push	r28
    12a8:	00 d0       	rcall	.+0      	; 0x12aa <DIO_VidGetPinValue+0x6>
    12aa:	00 d0       	rcall	.+0      	; 0x12ac <DIO_VidGetPinValue+0x8>
    12ac:	0f 92       	push	r0
    12ae:	cd b7       	in	r28, 0x3d	; 61
    12b0:	de b7       	in	r29, 0x3e	; 62
    12b2:	8a 83       	std	Y+2, r24	; 0x02
    12b4:	6b 83       	std	Y+3, r22	; 0x03
	u8 Lcal_U8PinResult=0;
    12b6:	19 82       	std	Y+1, r1	; 0x01
	switch(copy_u8port){
    12b8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ba:	28 2f       	mov	r18, r24
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	3d 83       	std	Y+5, r19	; 0x05
    12c0:	2c 83       	std	Y+4, r18	; 0x04
    12c2:	4c 81       	ldd	r20, Y+4	; 0x04
    12c4:	5d 81       	ldd	r21, Y+5	; 0x05
    12c6:	41 30       	cpi	r20, 0x01	; 1
    12c8:	51 05       	cpc	r21, r1
    12ca:	41 f1       	breq	.+80     	; 0x131c <DIO_VidGetPinValue+0x78>
    12cc:	8c 81       	ldd	r24, Y+4	; 0x04
    12ce:	9d 81       	ldd	r25, Y+5	; 0x05
    12d0:	82 30       	cpi	r24, 0x02	; 2
    12d2:	91 05       	cpc	r25, r1
    12d4:	34 f4       	brge	.+12     	; 0x12e2 <DIO_VidGetPinValue+0x3e>
    12d6:	2c 81       	ldd	r18, Y+4	; 0x04
    12d8:	3d 81       	ldd	r19, Y+5	; 0x05
    12da:	21 15       	cp	r18, r1
    12dc:	31 05       	cpc	r19, r1
    12de:	61 f0       	breq	.+24     	; 0x12f8 <DIO_VidGetPinValue+0x54>
    12e0:	52 c0       	rjmp	.+164    	; 0x1386 <DIO_VidGetPinValue+0xe2>
    12e2:	4c 81       	ldd	r20, Y+4	; 0x04
    12e4:	5d 81       	ldd	r21, Y+5	; 0x05
    12e6:	42 30       	cpi	r20, 0x02	; 2
    12e8:	51 05       	cpc	r21, r1
    12ea:	51 f1       	breq	.+84     	; 0x1340 <DIO_VidGetPinValue+0x9c>
    12ec:	8c 81       	ldd	r24, Y+4	; 0x04
    12ee:	9d 81       	ldd	r25, Y+5	; 0x05
    12f0:	83 30       	cpi	r24, 0x03	; 3
    12f2:	91 05       	cpc	r25, r1
    12f4:	b9 f1       	breq	.+110    	; 0x1364 <DIO_VidGetPinValue+0xc0>
    12f6:	47 c0       	rjmp	.+142    	; 0x1386 <DIO_VidGetPinValue+0xe2>

			case PORTA :		Lcal_U8PinResult=GET_BIT(PINA,Copy_U8Pin);	        break;
    12f8:	e9 e3       	ldi	r30, 0x39	; 57
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	28 2f       	mov	r18, r24
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	8b 81       	ldd	r24, Y+3	; 0x03
    1304:	88 2f       	mov	r24, r24
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	a9 01       	movw	r20, r18
    130a:	02 c0       	rjmp	.+4      	; 0x1310 <DIO_VidGetPinValue+0x6c>
    130c:	55 95       	asr	r21
    130e:	47 95       	ror	r20
    1310:	8a 95       	dec	r24
    1312:	e2 f7       	brpl	.-8      	; 0x130c <DIO_VidGetPinValue+0x68>
    1314:	ca 01       	movw	r24, r20
    1316:	81 70       	andi	r24, 0x01	; 1
    1318:	89 83       	std	Y+1, r24	; 0x01
    131a:	35 c0       	rjmp	.+106    	; 0x1386 <DIO_VidGetPinValue+0xe2>
			case PORTB :		Lcal_U8PinResult=GET_BIT(PINB,Copy_U8Pin); 		    break;
    131c:	e6 e3       	ldi	r30, 0x36	; 54
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	80 81       	ld	r24, Z
    1322:	28 2f       	mov	r18, r24
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	8b 81       	ldd	r24, Y+3	; 0x03
    1328:	88 2f       	mov	r24, r24
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	a9 01       	movw	r20, r18
    132e:	02 c0       	rjmp	.+4      	; 0x1334 <DIO_VidGetPinValue+0x90>
    1330:	55 95       	asr	r21
    1332:	47 95       	ror	r20
    1334:	8a 95       	dec	r24
    1336:	e2 f7       	brpl	.-8      	; 0x1330 <DIO_VidGetPinValue+0x8c>
    1338:	ca 01       	movw	r24, r20
    133a:	81 70       	andi	r24, 0x01	; 1
    133c:	89 83       	std	Y+1, r24	; 0x01
    133e:	23 c0       	rjmp	.+70     	; 0x1386 <DIO_VidGetPinValue+0xe2>
			case PORTC :		Lcal_U8PinResult=GET_BIT(PINC,Copy_U8Pin);			break;
    1340:	e3 e3       	ldi	r30, 0x33	; 51
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	80 81       	ld	r24, Z
    1346:	28 2f       	mov	r18, r24
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	8b 81       	ldd	r24, Y+3	; 0x03
    134c:	88 2f       	mov	r24, r24
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	a9 01       	movw	r20, r18
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <DIO_VidGetPinValue+0xb4>
    1354:	55 95       	asr	r21
    1356:	47 95       	ror	r20
    1358:	8a 95       	dec	r24
    135a:	e2 f7       	brpl	.-8      	; 0x1354 <DIO_VidGetPinValue+0xb0>
    135c:	ca 01       	movw	r24, r20
    135e:	81 70       	andi	r24, 0x01	; 1
    1360:	89 83       	std	Y+1, r24	; 0x01
    1362:	11 c0       	rjmp	.+34     	; 0x1386 <DIO_VidGetPinValue+0xe2>
			case PORTD :		Lcal_U8PinResult=GET_BIT(PIND,Copy_U8Pin);			break;
    1364:	e0 e3       	ldi	r30, 0x30	; 48
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	80 81       	ld	r24, Z
    136a:	28 2f       	mov	r18, r24
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	8b 81       	ldd	r24, Y+3	; 0x03
    1370:	88 2f       	mov	r24, r24
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	a9 01       	movw	r20, r18
    1376:	02 c0       	rjmp	.+4      	; 0x137c <DIO_VidGetPinValue+0xd8>
    1378:	55 95       	asr	r21
    137a:	47 95       	ror	r20
    137c:	8a 95       	dec	r24
    137e:	e2 f7       	brpl	.-8      	; 0x1378 <DIO_VidGetPinValue+0xd4>
    1380:	ca 01       	movw	r24, r20
    1382:	81 70       	andi	r24, 0x01	; 1
    1384:	89 83       	std	Y+1, r24	; 0x01

			}


return(Lcal_U8PinResult);
    1386:	89 81       	ldd	r24, Y+1	; 0x01
	
	
}
    1388:	0f 90       	pop	r0
    138a:	0f 90       	pop	r0
    138c:	0f 90       	pop	r0
    138e:	0f 90       	pop	r0
    1390:	0f 90       	pop	r0
    1392:	cf 91       	pop	r28
    1394:	df 91       	pop	r29
    1396:	08 95       	ret

00001398 <DIO_VidSetPortDirection>:

void DIO_VidSetPortDirection	(u8 copy_u8port, u8 copy_U8state)
{
    1398:	df 93       	push	r29
    139a:	cf 93       	push	r28
    139c:	00 d0       	rcall	.+0      	; 0x139e <DIO_VidSetPortDirection+0x6>
    139e:	00 d0       	rcall	.+0      	; 0x13a0 <DIO_VidSetPortDirection+0x8>
    13a0:	00 d0       	rcall	.+0      	; 0x13a2 <DIO_VidSetPortDirection+0xa>
    13a2:	cd b7       	in	r28, 0x3d	; 61
    13a4:	de b7       	in	r29, 0x3e	; 62
    13a6:	89 83       	std	Y+1, r24	; 0x01
    13a8:	6a 83       	std	Y+2, r22	; 0x02
	
	if(OUTPUT==copy_U8state)
    13aa:	8a 81       	ldd	r24, Y+2	; 0x02
    13ac:	81 30       	cpi	r24, 0x01	; 1
    13ae:	99 f5       	brne	.+102    	; 0x1416 <DIO_VidSetPortDirection+0x7e>
	{
		switch (copy_u8port)
    13b0:	89 81       	ldd	r24, Y+1	; 0x01
    13b2:	28 2f       	mov	r18, r24
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	3e 83       	std	Y+6, r19	; 0x06
    13b8:	2d 83       	std	Y+5, r18	; 0x05
    13ba:	8d 81       	ldd	r24, Y+5	; 0x05
    13bc:	9e 81       	ldd	r25, Y+6	; 0x06
    13be:	81 30       	cpi	r24, 0x01	; 1
    13c0:	91 05       	cpc	r25, r1
    13c2:	d1 f0       	breq	.+52     	; 0x13f8 <DIO_VidSetPortDirection+0x60>
    13c4:	2d 81       	ldd	r18, Y+5	; 0x05
    13c6:	3e 81       	ldd	r19, Y+6	; 0x06
    13c8:	22 30       	cpi	r18, 0x02	; 2
    13ca:	31 05       	cpc	r19, r1
    13cc:	2c f4       	brge	.+10     	; 0x13d8 <DIO_VidSetPortDirection+0x40>
    13ce:	8d 81       	ldd	r24, Y+5	; 0x05
    13d0:	9e 81       	ldd	r25, Y+6	; 0x06
    13d2:	00 97       	sbiw	r24, 0x00	; 0
    13d4:	61 f0       	breq	.+24     	; 0x13ee <DIO_VidSetPortDirection+0x56>
    13d6:	50 c0       	rjmp	.+160    	; 0x1478 <DIO_VidSetPortDirection+0xe0>
    13d8:	2d 81       	ldd	r18, Y+5	; 0x05
    13da:	3e 81       	ldd	r19, Y+6	; 0x06
    13dc:	22 30       	cpi	r18, 0x02	; 2
    13de:	31 05       	cpc	r19, r1
    13e0:	81 f0       	breq	.+32     	; 0x1402 <DIO_VidSetPortDirection+0x6a>
    13e2:	8d 81       	ldd	r24, Y+5	; 0x05
    13e4:	9e 81       	ldd	r25, Y+6	; 0x06
    13e6:	83 30       	cpi	r24, 0x03	; 3
    13e8:	91 05       	cpc	r25, r1
    13ea:	81 f0       	breq	.+32     	; 0x140c <DIO_VidSetPortDirection+0x74>
    13ec:	45 c0       	rjmp	.+138    	; 0x1478 <DIO_VidSetPortDirection+0xe0>
		{
			case PORTA:DDRA= ALL_OUTPUT		; break;
    13ee:	ea e3       	ldi	r30, 0x3A	; 58
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	8f ef       	ldi	r24, 0xFF	; 255
    13f4:	80 83       	st	Z, r24
    13f6:	40 c0       	rjmp	.+128    	; 0x1478 <DIO_VidSetPortDirection+0xe0>
			case PORTB:DDRB= ALL_OUTPUT		; break;
    13f8:	e7 e3       	ldi	r30, 0x37	; 55
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	8f ef       	ldi	r24, 0xFF	; 255
    13fe:	80 83       	st	Z, r24
    1400:	3b c0       	rjmp	.+118    	; 0x1478 <DIO_VidSetPortDirection+0xe0>
			case PORTC:DDRC= ALL_OUTPUT		; break;
    1402:	e4 e3       	ldi	r30, 0x34	; 52
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	8f ef       	ldi	r24, 0xFF	; 255
    1408:	80 83       	st	Z, r24
    140a:	36 c0       	rjmp	.+108    	; 0x1478 <DIO_VidSetPortDirection+0xe0>
			case PORTD:DDRD= ALL_OUTPUT		; break;
    140c:	e1 e3       	ldi	r30, 0x31	; 49
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	8f ef       	ldi	r24, 0xFF	; 255
    1412:	80 83       	st	Z, r24
    1414:	31 c0       	rjmp	.+98     	; 0x1478 <DIO_VidSetPortDirection+0xe0>
	
		}	
	}
	else if(INPUT==copy_U8state)
    1416:	8a 81       	ldd	r24, Y+2	; 0x02
    1418:	88 23       	and	r24, r24
    141a:	71 f5       	brne	.+92     	; 0x1478 <DIO_VidSetPortDirection+0xe0>
	{
		switch(copy_u8port)
    141c:	89 81       	ldd	r24, Y+1	; 0x01
    141e:	28 2f       	mov	r18, r24
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	3c 83       	std	Y+4, r19	; 0x04
    1424:	2b 83       	std	Y+3, r18	; 0x03
    1426:	8b 81       	ldd	r24, Y+3	; 0x03
    1428:	9c 81       	ldd	r25, Y+4	; 0x04
    142a:	81 30       	cpi	r24, 0x01	; 1
    142c:	91 05       	cpc	r25, r1
    142e:	c9 f0       	breq	.+50     	; 0x1462 <DIO_VidSetPortDirection+0xca>
    1430:	2b 81       	ldd	r18, Y+3	; 0x03
    1432:	3c 81       	ldd	r19, Y+4	; 0x04
    1434:	22 30       	cpi	r18, 0x02	; 2
    1436:	31 05       	cpc	r19, r1
    1438:	2c f4       	brge	.+10     	; 0x1444 <DIO_VidSetPortDirection+0xac>
    143a:	8b 81       	ldd	r24, Y+3	; 0x03
    143c:	9c 81       	ldd	r25, Y+4	; 0x04
    143e:	00 97       	sbiw	r24, 0x00	; 0
    1440:	61 f0       	breq	.+24     	; 0x145a <DIO_VidSetPortDirection+0xc2>
    1442:	1a c0       	rjmp	.+52     	; 0x1478 <DIO_VidSetPortDirection+0xe0>
    1444:	2b 81       	ldd	r18, Y+3	; 0x03
    1446:	3c 81       	ldd	r19, Y+4	; 0x04
    1448:	22 30       	cpi	r18, 0x02	; 2
    144a:	31 05       	cpc	r19, r1
    144c:	71 f0       	breq	.+28     	; 0x146a <DIO_VidSetPortDirection+0xd2>
    144e:	8b 81       	ldd	r24, Y+3	; 0x03
    1450:	9c 81       	ldd	r25, Y+4	; 0x04
    1452:	83 30       	cpi	r24, 0x03	; 3
    1454:	91 05       	cpc	r25, r1
    1456:	69 f0       	breq	.+26     	; 0x1472 <DIO_VidSetPortDirection+0xda>
    1458:	0f c0       	rjmp	.+30     	; 0x1478 <DIO_VidSetPortDirection+0xe0>
		{
			case PORTA:DDRA= ALL_INPUT		; break;
    145a:	ea e3       	ldi	r30, 0x3A	; 58
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	10 82       	st	Z, r1
    1460:	0b c0       	rjmp	.+22     	; 0x1478 <DIO_VidSetPortDirection+0xe0>
			case PORTB:DDRB= ALL_INPUT		; break;
    1462:	e7 e3       	ldi	r30, 0x37	; 55
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	10 82       	st	Z, r1
    1468:	07 c0       	rjmp	.+14     	; 0x1478 <DIO_VidSetPortDirection+0xe0>
			case PORTC:DDRC= ALL_INPUT		; break;
    146a:	e4 e3       	ldi	r30, 0x34	; 52
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	10 82       	st	Z, r1
    1470:	03 c0       	rjmp	.+6      	; 0x1478 <DIO_VidSetPortDirection+0xe0>
			case PORTD:DDRD= ALL_INPUT		; break;
    1472:	e1 e3       	ldi	r30, 0x31	; 49
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	10 82       	st	Z, r1
	{
		
	}
	
	
}
    1478:	26 96       	adiw	r28, 0x06	; 6
    147a:	0f b6       	in	r0, 0x3f	; 63
    147c:	f8 94       	cli
    147e:	de bf       	out	0x3e, r29	; 62
    1480:	0f be       	out	0x3f, r0	; 63
    1482:	cd bf       	out	0x3d, r28	; 61
    1484:	cf 91       	pop	r28
    1486:	df 91       	pop	r29
    1488:	08 95       	ret

0000148a <DIO_VidSetPortValue>:
void DIO_VidSetPortValue		(u8 copy_u8port, u8 copy_U8value)
{
    148a:	df 93       	push	r29
    148c:	cf 93       	push	r28
    148e:	00 d0       	rcall	.+0      	; 0x1490 <DIO_VidSetPortValue+0x6>
    1490:	00 d0       	rcall	.+0      	; 0x1492 <DIO_VidSetPortValue+0x8>
    1492:	cd b7       	in	r28, 0x3d	; 61
    1494:	de b7       	in	r29, 0x3e	; 62
    1496:	89 83       	std	Y+1, r24	; 0x01
    1498:	6a 83       	std	Y+2, r22	; 0x02
		
		switch (copy_u8port)
    149a:	89 81       	ldd	r24, Y+1	; 0x01
    149c:	28 2f       	mov	r18, r24
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	3c 83       	std	Y+4, r19	; 0x04
    14a2:	2b 83       	std	Y+3, r18	; 0x03
    14a4:	8b 81       	ldd	r24, Y+3	; 0x03
    14a6:	9c 81       	ldd	r25, Y+4	; 0x04
    14a8:	81 30       	cpi	r24, 0x01	; 1
    14aa:	91 05       	cpc	r25, r1
    14ac:	d1 f0       	breq	.+52     	; 0x14e2 <DIO_VidSetPortValue+0x58>
    14ae:	2b 81       	ldd	r18, Y+3	; 0x03
    14b0:	3c 81       	ldd	r19, Y+4	; 0x04
    14b2:	22 30       	cpi	r18, 0x02	; 2
    14b4:	31 05       	cpc	r19, r1
    14b6:	2c f4       	brge	.+10     	; 0x14c2 <DIO_VidSetPortValue+0x38>
    14b8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ba:	9c 81       	ldd	r25, Y+4	; 0x04
    14bc:	00 97       	sbiw	r24, 0x00	; 0
    14be:	61 f0       	breq	.+24     	; 0x14d8 <DIO_VidSetPortValue+0x4e>
    14c0:	1e c0       	rjmp	.+60     	; 0x14fe <DIO_VidSetPortValue+0x74>
    14c2:	2b 81       	ldd	r18, Y+3	; 0x03
    14c4:	3c 81       	ldd	r19, Y+4	; 0x04
    14c6:	22 30       	cpi	r18, 0x02	; 2
    14c8:	31 05       	cpc	r19, r1
    14ca:	81 f0       	breq	.+32     	; 0x14ec <DIO_VidSetPortValue+0x62>
    14cc:	8b 81       	ldd	r24, Y+3	; 0x03
    14ce:	9c 81       	ldd	r25, Y+4	; 0x04
    14d0:	83 30       	cpi	r24, 0x03	; 3
    14d2:	91 05       	cpc	r25, r1
    14d4:	81 f0       	breq	.+32     	; 0x14f6 <DIO_VidSetPortValue+0x6c>
    14d6:	13 c0       	rjmp	.+38     	; 0x14fe <DIO_VidSetPortValue+0x74>
		{
			case PORTA:PORT_A=copy_U8value		; break;
    14d8:	eb e3       	ldi	r30, 0x3B	; 59
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	8a 81       	ldd	r24, Y+2	; 0x02
    14de:	80 83       	st	Z, r24
    14e0:	0e c0       	rjmp	.+28     	; 0x14fe <DIO_VidSetPortValue+0x74>
			case PORTB:PORT_B=copy_U8value		; break;
    14e2:	e8 e3       	ldi	r30, 0x38	; 56
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	8a 81       	ldd	r24, Y+2	; 0x02
    14e8:	80 83       	st	Z, r24
    14ea:	09 c0       	rjmp	.+18     	; 0x14fe <DIO_VidSetPortValue+0x74>
			case PORTC:PORT_C=copy_U8value		; break;
    14ec:	e5 e3       	ldi	r30, 0x35	; 53
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	8a 81       	ldd	r24, Y+2	; 0x02
    14f2:	80 83       	st	Z, r24
    14f4:	04 c0       	rjmp	.+8      	; 0x14fe <DIO_VidSetPortValue+0x74>
			case PORTD:PORT_D=copy_U8value		; break;
    14f6:	e2 e3       	ldi	r30, 0x32	; 50
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	8a 81       	ldd	r24, Y+2	; 0x02
    14fc:	80 83       	st	Z, r24
		}	
	
	
	
	
}
    14fe:	0f 90       	pop	r0
    1500:	0f 90       	pop	r0
    1502:	0f 90       	pop	r0
    1504:	0f 90       	pop	r0
    1506:	cf 91       	pop	r28
    1508:	df 91       	pop	r29
    150a:	08 95       	ret

0000150c <DIO_VidTogglePin>:

void DIO_VidTogglePin			(u8 copy_u8port, u8 copy_U8pin)
{
    150c:	df 93       	push	r29
    150e:	cf 93       	push	r28
    1510:	00 d0       	rcall	.+0      	; 0x1512 <DIO_VidTogglePin+0x6>
    1512:	00 d0       	rcall	.+0      	; 0x1514 <DIO_VidTogglePin+0x8>
    1514:	cd b7       	in	r28, 0x3d	; 61
    1516:	de b7       	in	r29, 0x3e	; 62
    1518:	89 83       	std	Y+1, r24	; 0x01
    151a:	6a 83       	std	Y+2, r22	; 0x02

		switch (copy_u8port)
    151c:	89 81       	ldd	r24, Y+1	; 0x01
    151e:	28 2f       	mov	r18, r24
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	3c 83       	std	Y+4, r19	; 0x04
    1524:	2b 83       	std	Y+3, r18	; 0x03
    1526:	8b 81       	ldd	r24, Y+3	; 0x03
    1528:	9c 81       	ldd	r25, Y+4	; 0x04
    152a:	81 30       	cpi	r24, 0x01	; 1
    152c:	91 05       	cpc	r25, r1
    152e:	49 f1       	breq	.+82     	; 0x1582 <DIO_VidTogglePin+0x76>
    1530:	2b 81       	ldd	r18, Y+3	; 0x03
    1532:	3c 81       	ldd	r19, Y+4	; 0x04
    1534:	22 30       	cpi	r18, 0x02	; 2
    1536:	31 05       	cpc	r19, r1
    1538:	2c f4       	brge	.+10     	; 0x1544 <DIO_VidTogglePin+0x38>
    153a:	8b 81       	ldd	r24, Y+3	; 0x03
    153c:	9c 81       	ldd	r25, Y+4	; 0x04
    153e:	00 97       	sbiw	r24, 0x00	; 0
    1540:	61 f0       	breq	.+24     	; 0x155a <DIO_VidTogglePin+0x4e>
    1542:	5a c0       	rjmp	.+180    	; 0x15f8 <DIO_VidTogglePin+0xec>
    1544:	2b 81       	ldd	r18, Y+3	; 0x03
    1546:	3c 81       	ldd	r19, Y+4	; 0x04
    1548:	22 30       	cpi	r18, 0x02	; 2
    154a:	31 05       	cpc	r19, r1
    154c:	71 f1       	breq	.+92     	; 0x15aa <DIO_VidTogglePin+0x9e>
    154e:	8b 81       	ldd	r24, Y+3	; 0x03
    1550:	9c 81       	ldd	r25, Y+4	; 0x04
    1552:	83 30       	cpi	r24, 0x03	; 3
    1554:	91 05       	cpc	r25, r1
    1556:	e9 f1       	breq	.+122    	; 0x15d2 <DIO_VidTogglePin+0xc6>
    1558:	4f c0       	rjmp	.+158    	; 0x15f8 <DIO_VidTogglePin+0xec>
		{
					case PORTA:TOG_BIT(PORT_A, copy_U8pin); break;
    155a:	ab e3       	ldi	r26, 0x3B	; 59
    155c:	b0 e0       	ldi	r27, 0x00	; 0
    155e:	eb e3       	ldi	r30, 0x3B	; 59
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	80 81       	ld	r24, Z
    1564:	48 2f       	mov	r20, r24
    1566:	8a 81       	ldd	r24, Y+2	; 0x02
    1568:	28 2f       	mov	r18, r24
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	02 2e       	mov	r0, r18
    1572:	02 c0       	rjmp	.+4      	; 0x1578 <DIO_VidTogglePin+0x6c>
    1574:	88 0f       	add	r24, r24
    1576:	99 1f       	adc	r25, r25
    1578:	0a 94       	dec	r0
    157a:	e2 f7       	brpl	.-8      	; 0x1574 <DIO_VidTogglePin+0x68>
    157c:	84 27       	eor	r24, r20
    157e:	8c 93       	st	X, r24
    1580:	3b c0       	rjmp	.+118    	; 0x15f8 <DIO_VidTogglePin+0xec>
					case PORTB:TOG_BIT(PORT_B, copy_U8pin); break;
    1582:	a8 e3       	ldi	r26, 0x38	; 56
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	e8 e3       	ldi	r30, 0x38	; 56
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	48 2f       	mov	r20, r24
    158e:	8a 81       	ldd	r24, Y+2	; 0x02
    1590:	28 2f       	mov	r18, r24
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	02 2e       	mov	r0, r18
    159a:	02 c0       	rjmp	.+4      	; 0x15a0 <DIO_VidTogglePin+0x94>
    159c:	88 0f       	add	r24, r24
    159e:	99 1f       	adc	r25, r25
    15a0:	0a 94       	dec	r0
    15a2:	e2 f7       	brpl	.-8      	; 0x159c <DIO_VidTogglePin+0x90>
    15a4:	84 27       	eor	r24, r20
    15a6:	8c 93       	st	X, r24
    15a8:	27 c0       	rjmp	.+78     	; 0x15f8 <DIO_VidTogglePin+0xec>
					case PORTC:TOG_BIT(PORT_C, copy_U8pin); break;
    15aa:	a5 e3       	ldi	r26, 0x35	; 53
    15ac:	b0 e0       	ldi	r27, 0x00	; 0
    15ae:	e5 e3       	ldi	r30, 0x35	; 53
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	80 81       	ld	r24, Z
    15b4:	48 2f       	mov	r20, r24
    15b6:	8a 81       	ldd	r24, Y+2	; 0x02
    15b8:	28 2f       	mov	r18, r24
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	02 2e       	mov	r0, r18
    15c2:	02 c0       	rjmp	.+4      	; 0x15c8 <DIO_VidTogglePin+0xbc>
    15c4:	88 0f       	add	r24, r24
    15c6:	99 1f       	adc	r25, r25
    15c8:	0a 94       	dec	r0
    15ca:	e2 f7       	brpl	.-8      	; 0x15c4 <DIO_VidTogglePin+0xb8>
    15cc:	84 27       	eor	r24, r20
    15ce:	8c 93       	st	X, r24
    15d0:	13 c0       	rjmp	.+38     	; 0x15f8 <DIO_VidTogglePin+0xec>
					case PORTD:TOG_BIT(PORT_D, copy_U8pin); break;
    15d2:	a2 e3       	ldi	r26, 0x32	; 50
    15d4:	b0 e0       	ldi	r27, 0x00	; 0
    15d6:	e2 e3       	ldi	r30, 0x32	; 50
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	80 81       	ld	r24, Z
    15dc:	48 2f       	mov	r20, r24
    15de:	8a 81       	ldd	r24, Y+2	; 0x02
    15e0:	28 2f       	mov	r18, r24
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	02 2e       	mov	r0, r18
    15ea:	02 c0       	rjmp	.+4      	; 0x15f0 <DIO_VidTogglePin+0xe4>
    15ec:	88 0f       	add	r24, r24
    15ee:	99 1f       	adc	r25, r25
    15f0:	0a 94       	dec	r0
    15f2:	e2 f7       	brpl	.-8      	; 0x15ec <DIO_VidTogglePin+0xe0>
    15f4:	84 27       	eor	r24, r20
    15f6:	8c 93       	st	X, r24
		}

}
    15f8:	0f 90       	pop	r0
    15fa:	0f 90       	pop	r0
    15fc:	0f 90       	pop	r0
    15fe:	0f 90       	pop	r0
    1600:	cf 91       	pop	r28
    1602:	df 91       	pop	r29
    1604:	08 95       	ret

00001606 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 copy_u8port)
{
    1606:	df 93       	push	r29
    1608:	cf 93       	push	r28
    160a:	00 d0       	rcall	.+0      	; 0x160c <DIO_u8GetPortValue+0x6>
    160c:	00 d0       	rcall	.+0      	; 0x160e <DIO_u8GetPortValue+0x8>
    160e:	cd b7       	in	r28, 0x3d	; 61
    1610:	de b7       	in	r29, 0x3e	; 62
    1612:	8a 83       	std	Y+2, r24	; 0x02
		u8 Lcal_U8PortResult=0;
    1614:	19 82       	std	Y+1, r1	; 0x01
	switch(copy_u8port){
    1616:	8a 81       	ldd	r24, Y+2	; 0x02
    1618:	28 2f       	mov	r18, r24
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	3c 83       	std	Y+4, r19	; 0x04
    161e:	2b 83       	std	Y+3, r18	; 0x03
    1620:	8b 81       	ldd	r24, Y+3	; 0x03
    1622:	9c 81       	ldd	r25, Y+4	; 0x04
    1624:	81 30       	cpi	r24, 0x01	; 1
    1626:	91 05       	cpc	r25, r1
    1628:	d1 f0       	breq	.+52     	; 0x165e <DIO_u8GetPortValue+0x58>
    162a:	2b 81       	ldd	r18, Y+3	; 0x03
    162c:	3c 81       	ldd	r19, Y+4	; 0x04
    162e:	22 30       	cpi	r18, 0x02	; 2
    1630:	31 05       	cpc	r19, r1
    1632:	2c f4       	brge	.+10     	; 0x163e <DIO_u8GetPortValue+0x38>
    1634:	8b 81       	ldd	r24, Y+3	; 0x03
    1636:	9c 81       	ldd	r25, Y+4	; 0x04
    1638:	00 97       	sbiw	r24, 0x00	; 0
    163a:	61 f0       	breq	.+24     	; 0x1654 <DIO_u8GetPortValue+0x4e>
    163c:	1e c0       	rjmp	.+60     	; 0x167a <DIO_u8GetPortValue+0x74>
    163e:	2b 81       	ldd	r18, Y+3	; 0x03
    1640:	3c 81       	ldd	r19, Y+4	; 0x04
    1642:	22 30       	cpi	r18, 0x02	; 2
    1644:	31 05       	cpc	r19, r1
    1646:	81 f0       	breq	.+32     	; 0x1668 <DIO_u8GetPortValue+0x62>
    1648:	8b 81       	ldd	r24, Y+3	; 0x03
    164a:	9c 81       	ldd	r25, Y+4	; 0x04
    164c:	83 30       	cpi	r24, 0x03	; 3
    164e:	91 05       	cpc	r25, r1
    1650:	81 f0       	breq	.+32     	; 0x1672 <DIO_u8GetPortValue+0x6c>
    1652:	13 c0       	rjmp	.+38     	; 0x167a <DIO_u8GetPortValue+0x74>

			case PORTA :	Lcal_U8PortResult=PINA;	        break;
    1654:	e9 e3       	ldi	r30, 0x39	; 57
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	80 81       	ld	r24, Z
    165a:	89 83       	std	Y+1, r24	; 0x01
    165c:	0e c0       	rjmp	.+28     	; 0x167a <DIO_u8GetPortValue+0x74>
			case PORTB :	Lcal_U8PortResult=PINB; 		    break;
    165e:	e6 e3       	ldi	r30, 0x36	; 54
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	80 81       	ld	r24, Z
    1664:	89 83       	std	Y+1, r24	; 0x01
    1666:	09 c0       	rjmp	.+18     	; 0x167a <DIO_u8GetPortValue+0x74>
			case PORTC :	Lcal_U8PortResult=PINC;			break;
    1668:	e3 e3       	ldi	r30, 0x33	; 51
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	80 81       	ld	r24, Z
    166e:	89 83       	std	Y+1, r24	; 0x01
    1670:	04 c0       	rjmp	.+8      	; 0x167a <DIO_u8GetPortValue+0x74>
			case PORTD :	Lcal_U8PortResult=PIND;			break;
    1672:	e0 e3       	ldi	r30, 0x30	; 48
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	80 81       	ld	r24, Z
    1678:	89 83       	std	Y+1, r24	; 0x01

			}


return(Lcal_U8PortResult);
    167a:	89 81       	ldd	r24, Y+1	; 0x01
	
	
}
    167c:	0f 90       	pop	r0
    167e:	0f 90       	pop	r0
    1680:	0f 90       	pop	r0
    1682:	0f 90       	pop	r0
    1684:	cf 91       	pop	r28
    1686:	df 91       	pop	r29
    1688:	08 95       	ret

0000168a <Keypad_VoidInit>:
								{'4','5','6','*'},
								{'1','2','3','-'},
								{'Q','0','=','+'}};

void Keypad_VoidInit(void)
{
    168a:	df 93       	push	r29
    168c:	cf 93       	push	r28
    168e:	cd b7       	in	r28, 0x3d	; 61
    1690:	de b7       	in	r29, 0x3e	; 62
	
	DIO_VidSetPinDirection(COLS_ROWSPORT,COLS0,OUTPUT);
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	60 e0       	ldi	r22, 0x00	; 0
    1696:	41 e0       	ldi	r20, 0x01	; 1
    1698:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(COLS_ROWSPORT,COLS1,OUTPUT);
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	61 e0       	ldi	r22, 0x01	; 1
    16a0:	41 e0       	ldi	r20, 0x01	; 1
    16a2:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(COLS_ROWSPORT,COLS2,OUTPUT);
    16a6:	81 e0       	ldi	r24, 0x01	; 1
    16a8:	62 e0       	ldi	r22, 0x02	; 2
    16aa:	41 e0       	ldi	r20, 0x01	; 1
    16ac:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(COLS_ROWSPORT,COLS3,OUTPUT);
    16b0:	81 e0       	ldi	r24, 0x01	; 1
    16b2:	63 e0       	ldi	r22, 0x03	; 3
    16b4:	41 e0       	ldi	r20, 0x01	; 1
    16b6:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_VidSetPinDirection>

	DIO_VidSetPinDirection(COLS_ROWSPORT,ROW0,INPUT);
    16ba:	81 e0       	ldi	r24, 0x01	; 1
    16bc:	64 e0       	ldi	r22, 0x04	; 4
    16be:	40 e0       	ldi	r20, 0x00	; 0
    16c0:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(COLS_ROWSPORT,ROW1,INPUT);
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	65 e0       	ldi	r22, 0x05	; 5
    16c8:	40 e0       	ldi	r20, 0x00	; 0
    16ca:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(COLS_ROWSPORT,ROW2,INPUT);
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	66 e0       	ldi	r22, 0x06	; 6
    16d2:	40 e0       	ldi	r20, 0x00	; 0
    16d4:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(COLS_ROWSPORT,ROW3,INPUT);
    16d8:	81 e0       	ldi	r24, 0x01	; 1
    16da:	67 e0       	ldi	r22, 0x07	; 7
    16dc:	40 e0       	ldi	r20, 0x00	; 0
    16de:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_VidSetPinDirection>
	DIO_VidSetPinValue(COLS_ROWSPORT,ROW0 ,HIGH);
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	64 e0       	ldi	r22, 0x04	; 4
    16e6:	41 e0       	ldi	r20, 0x01	; 1
    16e8:	0e 94 52 08 	call	0x10a4	; 0x10a4 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(COLS_ROWSPORT,ROW1 ,HIGH);
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	65 e0       	ldi	r22, 0x05	; 5
    16f0:	41 e0       	ldi	r20, 0x01	; 1
    16f2:	0e 94 52 08 	call	0x10a4	; 0x10a4 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(COLS_ROWSPORT,ROW2 ,HIGH);
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	66 e0       	ldi	r22, 0x06	; 6
    16fa:	41 e0       	ldi	r20, 0x01	; 1
    16fc:	0e 94 52 08 	call	0x10a4	; 0x10a4 <DIO_VidSetPinValue>
  	DIO_VidSetPinValue(COLS_ROWSPORT,ROW3 ,HIGH);
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	67 e0       	ldi	r22, 0x07	; 7
    1704:	41 e0       	ldi	r20, 0x01	; 1
    1706:	0e 94 52 08 	call	0x10a4	; 0x10a4 <DIO_VidSetPinValue>

	DIO_VidSetPinValue(COLS_ROWSPORT,COLS0,HIGH);
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	60 e0       	ldi	r22, 0x00	; 0
    170e:	41 e0       	ldi	r20, 0x01	; 1
    1710:	0e 94 52 08 	call	0x10a4	; 0x10a4 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS1,HIGH);
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	61 e0       	ldi	r22, 0x01	; 1
    1718:	41 e0       	ldi	r20, 0x01	; 1
    171a:	0e 94 52 08 	call	0x10a4	; 0x10a4 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS2,HIGH);
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	62 e0       	ldi	r22, 0x02	; 2
    1722:	41 e0       	ldi	r20, 0x01	; 1
    1724:	0e 94 52 08 	call	0x10a4	; 0x10a4 <DIO_VidSetPinValue>
  	DIO_VidSetPinValue(COLS_ROWSPORT,COLS3,HIGH);
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	63 e0       	ldi	r22, 0x03	; 3
    172c:	41 e0       	ldi	r20, 0x01	; 1
    172e:	0e 94 52 08 	call	0x10a4	; 0x10a4 <DIO_VidSetPinValue>


}
    1732:	cf 91       	pop	r28
    1734:	df 91       	pop	r29
    1736:	08 95       	ret

00001738 <Keypad_U8ReadPin>:

u8 Keypad_U8ReadPin(void)
{
    1738:	df 93       	push	r29
    173a:	cf 93       	push	r28
    173c:	cd b7       	in	r28, 0x3d	; 61
    173e:	de b7       	in	r29, 0x3e	; 62
    1740:	61 97       	sbiw	r28, 0x11	; 17
    1742:	0f b6       	in	r0, 0x3f	; 63
    1744:	f8 94       	cli
    1746:	de bf       	out	0x3e, r29	; 62
    1748:	0f be       	out	0x3f, r0	; 63
    174a:	cd bf       	out	0x3d, r28	; 61

	DIO_VidSetPinValue(COLS_ROWSPORT,ROW0 ,HIGH);
    174c:	81 e0       	ldi	r24, 0x01	; 1
    174e:	64 e0       	ldi	r22, 0x04	; 4
    1750:	41 e0       	ldi	r20, 0x01	; 1
    1752:	0e 94 52 08 	call	0x10a4	; 0x10a4 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(COLS_ROWSPORT,ROW1 ,HIGH);
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	65 e0       	ldi	r22, 0x05	; 5
    175a:	41 e0       	ldi	r20, 0x01	; 1
    175c:	0e 94 52 08 	call	0x10a4	; 0x10a4 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(COLS_ROWSPORT,ROW2 ,HIGH);
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	66 e0       	ldi	r22, 0x06	; 6
    1764:	41 e0       	ldi	r20, 0x01	; 1
    1766:	0e 94 52 08 	call	0x10a4	; 0x10a4 <DIO_VidSetPinValue>
  	DIO_VidSetPinValue(COLS_ROWSPORT,ROW3 ,HIGH);
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	67 e0       	ldi	r22, 0x07	; 7
    176e:	41 e0       	ldi	r20, 0x01	; 1
    1770:	0e 94 52 08 	call	0x10a4	; 0x10a4 <DIO_VidSetPinValue>

	u8 pressdkey=DEFAULT_KEY;
    1774:	83 e4       	ldi	r24, 0x43	; 67
    1776:	89 8b       	std	Y+17, r24	; 0x11
	u8 col=0,row=0;
    1778:	18 8a       	std	Y+16, r1	; 0x10
    177a:	1f 86       	std	Y+15, r1	; 0x0f

	for(row=0;row<=3;row++)
    177c:	1f 86       	std	Y+15, r1	; 0x0f
    177e:	ad c0       	rjmp	.+346    	; 0x18da <Keypad_U8ReadPin+0x1a2>
	{
		DIO_VidSetPinValue(COLS_ROWSPORT,row,LOW);
    1780:	81 e0       	ldi	r24, 0x01	; 1
    1782:	6f 85       	ldd	r22, Y+15	; 0x0f
    1784:	40 e0       	ldi	r20, 0x00	; 0
    1786:	0e 94 52 08 	call	0x10a4	; 0x10a4 <DIO_VidSetPinValue>

		for(col=0;col<=3;col++)
    178a:	18 8a       	std	Y+16, r1	; 0x10
    178c:	9a c0       	rjmp	.+308    	; 0x18c2 <Keypad_U8ReadPin+0x18a>
		{
			if(DIO_VidGetPinValue(COLS_ROWSPORT,col+ROWSHIFT)==0)
    178e:	88 89       	ldd	r24, Y+16	; 0x10
    1790:	98 2f       	mov	r25, r24
    1792:	9c 5f       	subi	r25, 0xFC	; 252
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	69 2f       	mov	r22, r25
    1798:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_VidGetPinValue>
    179c:	88 23       	and	r24, r24
    179e:	09 f0       	breq	.+2      	; 0x17a2 <Keypad_U8ReadPin+0x6a>
    17a0:	8d c0       	rjmp	.+282    	; 0x18bc <Keypad_U8ReadPin+0x184>
			{
				pressdkey=	array_keypad[row][col];
    17a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    17a4:	48 2f       	mov	r20, r24
    17a6:	50 e0       	ldi	r21, 0x00	; 0
    17a8:	88 89       	ldd	r24, Y+16	; 0x10
    17aa:	28 2f       	mov	r18, r24
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	ca 01       	movw	r24, r20
    17b0:	88 0f       	add	r24, r24
    17b2:	99 1f       	adc	r25, r25
    17b4:	88 0f       	add	r24, r24
    17b6:	99 1f       	adc	r25, r25
    17b8:	82 0f       	add	r24, r18
    17ba:	93 1f       	adc	r25, r19
    17bc:	fc 01       	movw	r30, r24
    17be:	e7 52       	subi	r30, 0x27	; 39
    17c0:	ff 4f       	sbci	r31, 0xFF	; 255
    17c2:	80 81       	ld	r24, Z
    17c4:	89 8b       	std	Y+17, r24	; 0x11
				while(DIO_VidGetPinValue(COLS_ROWSPORT,col+ROWSHIFT)==0);
    17c6:	88 89       	ldd	r24, Y+16	; 0x10
    17c8:	98 2f       	mov	r25, r24
    17ca:	9c 5f       	subi	r25, 0xFC	; 252
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	69 2f       	mov	r22, r25
    17d0:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_VidGetPinValue>
    17d4:	88 23       	and	r24, r24
    17d6:	b9 f3       	breq	.-18     	; 0x17c6 <Keypad_U8ReadPin+0x8e>
    17d8:	80 e0       	ldi	r24, 0x00	; 0
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	a0 e2       	ldi	r26, 0x20	; 32
    17de:	b1 e4       	ldi	r27, 0x41	; 65
    17e0:	8b 87       	std	Y+11, r24	; 0x0b
    17e2:	9c 87       	std	Y+12, r25	; 0x0c
    17e4:	ad 87       	std	Y+13, r26	; 0x0d
    17e6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    17ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    17ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    17ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    17f0:	20 e0       	ldi	r18, 0x00	; 0
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	4a ef       	ldi	r20, 0xFA	; 250
    17f6:	54 e4       	ldi	r21, 0x44	; 68
    17f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17fc:	dc 01       	movw	r26, r24
    17fe:	cb 01       	movw	r24, r22
    1800:	8f 83       	std	Y+7, r24	; 0x07
    1802:	98 87       	std	Y+8, r25	; 0x08
    1804:	a9 87       	std	Y+9, r26	; 0x09
    1806:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1808:	6f 81       	ldd	r22, Y+7	; 0x07
    180a:	78 85       	ldd	r23, Y+8	; 0x08
    180c:	89 85       	ldd	r24, Y+9	; 0x09
    180e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1810:	20 e0       	ldi	r18, 0x00	; 0
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	40 e8       	ldi	r20, 0x80	; 128
    1816:	5f e3       	ldi	r21, 0x3F	; 63
    1818:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    181c:	88 23       	and	r24, r24
    181e:	2c f4       	brge	.+10     	; 0x182a <Keypad_U8ReadPin+0xf2>
		__ticks = 1;
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	9e 83       	std	Y+6, r25	; 0x06
    1826:	8d 83       	std	Y+5, r24	; 0x05
    1828:	3f c0       	rjmp	.+126    	; 0x18a8 <Keypad_U8ReadPin+0x170>
	else if (__tmp > 65535)
    182a:	6f 81       	ldd	r22, Y+7	; 0x07
    182c:	78 85       	ldd	r23, Y+8	; 0x08
    182e:	89 85       	ldd	r24, Y+9	; 0x09
    1830:	9a 85       	ldd	r25, Y+10	; 0x0a
    1832:	20 e0       	ldi	r18, 0x00	; 0
    1834:	3f ef       	ldi	r19, 0xFF	; 255
    1836:	4f e7       	ldi	r20, 0x7F	; 127
    1838:	57 e4       	ldi	r21, 0x47	; 71
    183a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    183e:	18 16       	cp	r1, r24
    1840:	4c f5       	brge	.+82     	; 0x1894 <Keypad_U8ReadPin+0x15c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1842:	6b 85       	ldd	r22, Y+11	; 0x0b
    1844:	7c 85       	ldd	r23, Y+12	; 0x0c
    1846:	8d 85       	ldd	r24, Y+13	; 0x0d
    1848:	9e 85       	ldd	r25, Y+14	; 0x0e
    184a:	20 e0       	ldi	r18, 0x00	; 0
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	40 e2       	ldi	r20, 0x20	; 32
    1850:	51 e4       	ldi	r21, 0x41	; 65
    1852:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1856:	dc 01       	movw	r26, r24
    1858:	cb 01       	movw	r24, r22
    185a:	bc 01       	movw	r22, r24
    185c:	cd 01       	movw	r24, r26
    185e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1862:	dc 01       	movw	r26, r24
    1864:	cb 01       	movw	r24, r22
    1866:	9e 83       	std	Y+6, r25	; 0x06
    1868:	8d 83       	std	Y+5, r24	; 0x05
    186a:	0f c0       	rjmp	.+30     	; 0x188a <Keypad_U8ReadPin+0x152>
    186c:	88 ec       	ldi	r24, 0xC8	; 200
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	9c 83       	std	Y+4, r25	; 0x04
    1872:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1874:	8b 81       	ldd	r24, Y+3	; 0x03
    1876:	9c 81       	ldd	r25, Y+4	; 0x04
    1878:	01 97       	sbiw	r24, 0x01	; 1
    187a:	f1 f7       	brne	.-4      	; 0x1878 <Keypad_U8ReadPin+0x140>
    187c:	9c 83       	std	Y+4, r25	; 0x04
    187e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1880:	8d 81       	ldd	r24, Y+5	; 0x05
    1882:	9e 81       	ldd	r25, Y+6	; 0x06
    1884:	01 97       	sbiw	r24, 0x01	; 1
    1886:	9e 83       	std	Y+6, r25	; 0x06
    1888:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    188a:	8d 81       	ldd	r24, Y+5	; 0x05
    188c:	9e 81       	ldd	r25, Y+6	; 0x06
    188e:	00 97       	sbiw	r24, 0x00	; 0
    1890:	69 f7       	brne	.-38     	; 0x186c <Keypad_U8ReadPin+0x134>
    1892:	14 c0       	rjmp	.+40     	; 0x18bc <Keypad_U8ReadPin+0x184>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1894:	6f 81       	ldd	r22, Y+7	; 0x07
    1896:	78 85       	ldd	r23, Y+8	; 0x08
    1898:	89 85       	ldd	r24, Y+9	; 0x09
    189a:	9a 85       	ldd	r25, Y+10	; 0x0a
    189c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18a0:	dc 01       	movw	r26, r24
    18a2:	cb 01       	movw	r24, r22
    18a4:	9e 83       	std	Y+6, r25	; 0x06
    18a6:	8d 83       	std	Y+5, r24	; 0x05
    18a8:	8d 81       	ldd	r24, Y+5	; 0x05
    18aa:	9e 81       	ldd	r25, Y+6	; 0x06
    18ac:	9a 83       	std	Y+2, r25	; 0x02
    18ae:	89 83       	std	Y+1, r24	; 0x01
    18b0:	89 81       	ldd	r24, Y+1	; 0x01
    18b2:	9a 81       	ldd	r25, Y+2	; 0x02
    18b4:	01 97       	sbiw	r24, 0x01	; 1
    18b6:	f1 f7       	brne	.-4      	; 0x18b4 <Keypad_U8ReadPin+0x17c>
    18b8:	9a 83       	std	Y+2, r25	; 0x02
    18ba:	89 83       	std	Y+1, r24	; 0x01

	for(row=0;row<=3;row++)
	{
		DIO_VidSetPinValue(COLS_ROWSPORT,row,LOW);

		for(col=0;col<=3;col++)
    18bc:	88 89       	ldd	r24, Y+16	; 0x10
    18be:	8f 5f       	subi	r24, 0xFF	; 255
    18c0:	88 8b       	std	Y+16, r24	; 0x10
    18c2:	88 89       	ldd	r24, Y+16	; 0x10
    18c4:	84 30       	cpi	r24, 0x04	; 4
    18c6:	08 f4       	brcc	.+2      	; 0x18ca <Keypad_U8ReadPin+0x192>
    18c8:	62 cf       	rjmp	.-316    	; 0x178e <Keypad_U8ReadPin+0x56>
				pressdkey=	array_keypad[row][col];
				while(DIO_VidGetPinValue(COLS_ROWSPORT,col+ROWSHIFT)==0);
				_delay_ms(10);
			}
		}
		DIO_VidSetPinValue(COLS_ROWSPORT,row,HIGH);
    18ca:	81 e0       	ldi	r24, 0x01	; 1
    18cc:	6f 85       	ldd	r22, Y+15	; 0x0f
    18ce:	41 e0       	ldi	r20, 0x01	; 1
    18d0:	0e 94 52 08 	call	0x10a4	; 0x10a4 <DIO_VidSetPinValue>
  	DIO_VidSetPinValue(COLS_ROWSPORT,ROW3 ,HIGH);

	u8 pressdkey=DEFAULT_KEY;
	u8 col=0,row=0;

	for(row=0;row<=3;row++)
    18d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    18d6:	8f 5f       	subi	r24, 0xFF	; 255
    18d8:	8f 87       	std	Y+15, r24	; 0x0f
    18da:	8f 85       	ldd	r24, Y+15	; 0x0f
    18dc:	84 30       	cpi	r24, 0x04	; 4
    18de:	08 f4       	brcc	.+2      	; 0x18e2 <Keypad_U8ReadPin+0x1aa>
    18e0:	4f cf       	rjmp	.-354    	; 0x1780 <Keypad_U8ReadPin+0x48>
			}
		}
		DIO_VidSetPinValue(COLS_ROWSPORT,row,HIGH);
	}

return pressdkey;
    18e2:	89 89       	ldd	r24, Y+17	; 0x11
	
}
    18e4:	61 96       	adiw	r28, 0x11	; 17
    18e6:	0f b6       	in	r0, 0x3f	; 63
    18e8:	f8 94       	cli
    18ea:	de bf       	out	0x3e, r29	; 62
    18ec:	0f be       	out	0x3f, r0	; 63
    18ee:	cd bf       	out	0x3d, r28	; 61
    18f0:	cf 91       	pop	r28
    18f2:	df 91       	pop	r29
    18f4:	08 95       	ret

000018f6 <Keypad_U8ReadPin1>:

u8 Keypad_U8ReadPin1(void)
{
    18f6:	df 93       	push	r29
    18f8:	cf 93       	push	r28
    18fa:	cd b7       	in	r28, 0x3d	; 61
    18fc:	de b7       	in	r29, 0x3e	; 62
    18fe:	ea 97       	sbiw	r28, 0x3a	; 58
    1900:	0f b6       	in	r0, 0x3f	; 63
    1902:	f8 94       	cli
    1904:	de bf       	out	0x3e, r29	; 62
    1906:	0f be       	out	0x3f, r0	; 63
    1908:	cd bf       	out	0x3d, r28	; 61
	u8 row, pressdkey=0;
    190a:	19 ae       	std	Y+57, r1	; 0x39
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS0,LOW);
    190c:	81 e0       	ldi	r24, 0x01	; 1
    190e:	60 e0       	ldi	r22, 0x00	; 0
    1910:	40 e0       	ldi	r20, 0x00	; 0
    1912:	0e 94 52 08 	call	0x10a4	; 0x10a4 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS1,HIGH);
    1916:	81 e0       	ldi	r24, 0x01	; 1
    1918:	61 e0       	ldi	r22, 0x01	; 1
    191a:	41 e0       	ldi	r20, 0x01	; 1
    191c:	0e 94 52 08 	call	0x10a4	; 0x10a4 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS2,HIGH);
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	62 e0       	ldi	r22, 0x02	; 2
    1924:	41 e0       	ldi	r20, 0x01	; 1
    1926:	0e 94 52 08 	call	0x10a4	; 0x10a4 <DIO_VidSetPinValue>
  	DIO_VidSetPinValue(COLS_ROWSPORT,COLS3,HIGH);
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	63 e0       	ldi	r22, 0x03	; 3
    192e:	41 e0       	ldi	r20, 0x01	; 1
    1930:	0e 94 52 08 	call	0x10a4	; 0x10a4 <DIO_VidSetPinValue>
	for(row=4;row<=7;row++)
    1934:	84 e0       	ldi	r24, 0x04	; 4
    1936:	8a af       	std	Y+58, r24	; 0x3a
    1938:	8d c0       	rjmp	.+282    	; 0x1a54 <Keypad_U8ReadPin1+0x15e>
	{
		if(DIO_VidGetPinValue(COLS_ROWSPORT,row)==0)
    193a:	81 e0       	ldi	r24, 0x01	; 1
    193c:	6a ad       	ldd	r22, Y+58	; 0x3a
    193e:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_VidGetPinValue>
    1942:	88 23       	and	r24, r24
    1944:	61 f4       	brne	.+24     	; 0x195e <Keypad_U8ReadPin1+0x68>
		{
			pressdkey=	array_keypad[row][COLS0];
    1946:	8a ad       	ldd	r24, Y+58	; 0x3a
    1948:	88 2f       	mov	r24, r24
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	88 0f       	add	r24, r24
    194e:	99 1f       	adc	r25, r25
    1950:	88 0f       	add	r24, r24
    1952:	99 1f       	adc	r25, r25
    1954:	fc 01       	movw	r30, r24
    1956:	e7 52       	subi	r30, 0x27	; 39
    1958:	ff 4f       	sbci	r31, 0xFF	; 255
    195a:	80 81       	ld	r24, Z
    195c:	89 af       	std	Y+57, r24	; 0x39
		}
		while(DIO_VidGetPinValue(COLS_ROWSPORT,row)==0);
    195e:	81 e0       	ldi	r24, 0x01	; 1
    1960:	6a ad       	ldd	r22, Y+58	; 0x3a
    1962:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_VidGetPinValue>
    1966:	88 23       	and	r24, r24
    1968:	d1 f3       	breq	.-12     	; 0x195e <Keypad_U8ReadPin1+0x68>
    196a:	80 e0       	ldi	r24, 0x00	; 0
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	a0 ea       	ldi	r26, 0xA0	; 160
    1970:	b0 e4       	ldi	r27, 0x40	; 64
    1972:	8d ab       	std	Y+53, r24	; 0x35
    1974:	9e ab       	std	Y+54, r25	; 0x36
    1976:	af ab       	std	Y+55, r26	; 0x37
    1978:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    197a:	6d a9       	ldd	r22, Y+53	; 0x35
    197c:	7e a9       	ldd	r23, Y+54	; 0x36
    197e:	8f a9       	ldd	r24, Y+55	; 0x37
    1980:	98 ad       	ldd	r25, Y+56	; 0x38
    1982:	20 e0       	ldi	r18, 0x00	; 0
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	4a ef       	ldi	r20, 0xFA	; 250
    1988:	54 e4       	ldi	r21, 0x44	; 68
    198a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    198e:	dc 01       	movw	r26, r24
    1990:	cb 01       	movw	r24, r22
    1992:	89 ab       	std	Y+49, r24	; 0x31
    1994:	9a ab       	std	Y+50, r25	; 0x32
    1996:	ab ab       	std	Y+51, r26	; 0x33
    1998:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    199a:	69 a9       	ldd	r22, Y+49	; 0x31
    199c:	7a a9       	ldd	r23, Y+50	; 0x32
    199e:	8b a9       	ldd	r24, Y+51	; 0x33
    19a0:	9c a9       	ldd	r25, Y+52	; 0x34
    19a2:	20 e0       	ldi	r18, 0x00	; 0
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	40 e8       	ldi	r20, 0x80	; 128
    19a8:	5f e3       	ldi	r21, 0x3F	; 63
    19aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19ae:	88 23       	and	r24, r24
    19b0:	2c f4       	brge	.+10     	; 0x19bc <Keypad_U8ReadPin1+0xc6>
		__ticks = 1;
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	98 ab       	std	Y+48, r25	; 0x30
    19b8:	8f a7       	std	Y+47, r24	; 0x2f
    19ba:	3f c0       	rjmp	.+126    	; 0x1a3a <Keypad_U8ReadPin1+0x144>
	else if (__tmp > 65535)
    19bc:	69 a9       	ldd	r22, Y+49	; 0x31
    19be:	7a a9       	ldd	r23, Y+50	; 0x32
    19c0:	8b a9       	ldd	r24, Y+51	; 0x33
    19c2:	9c a9       	ldd	r25, Y+52	; 0x34
    19c4:	20 e0       	ldi	r18, 0x00	; 0
    19c6:	3f ef       	ldi	r19, 0xFF	; 255
    19c8:	4f e7       	ldi	r20, 0x7F	; 127
    19ca:	57 e4       	ldi	r21, 0x47	; 71
    19cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19d0:	18 16       	cp	r1, r24
    19d2:	4c f5       	brge	.+82     	; 0x1a26 <Keypad_U8ReadPin1+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19d4:	6d a9       	ldd	r22, Y+53	; 0x35
    19d6:	7e a9       	ldd	r23, Y+54	; 0x36
    19d8:	8f a9       	ldd	r24, Y+55	; 0x37
    19da:	98 ad       	ldd	r25, Y+56	; 0x38
    19dc:	20 e0       	ldi	r18, 0x00	; 0
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	40 e2       	ldi	r20, 0x20	; 32
    19e2:	51 e4       	ldi	r21, 0x41	; 65
    19e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19e8:	dc 01       	movw	r26, r24
    19ea:	cb 01       	movw	r24, r22
    19ec:	bc 01       	movw	r22, r24
    19ee:	cd 01       	movw	r24, r26
    19f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19f4:	dc 01       	movw	r26, r24
    19f6:	cb 01       	movw	r24, r22
    19f8:	98 ab       	std	Y+48, r25	; 0x30
    19fa:	8f a7       	std	Y+47, r24	; 0x2f
    19fc:	0f c0       	rjmp	.+30     	; 0x1a1c <Keypad_U8ReadPin1+0x126>
    19fe:	88 ec       	ldi	r24, 0xC8	; 200
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	9e a7       	std	Y+46, r25	; 0x2e
    1a04:	8d a7       	std	Y+45, r24	; 0x2d
    1a06:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a08:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a0a:	01 97       	sbiw	r24, 0x01	; 1
    1a0c:	f1 f7       	brne	.-4      	; 0x1a0a <Keypad_U8ReadPin1+0x114>
    1a0e:	9e a7       	std	Y+46, r25	; 0x2e
    1a10:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a12:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a14:	98 a9       	ldd	r25, Y+48	; 0x30
    1a16:	01 97       	sbiw	r24, 0x01	; 1
    1a18:	98 ab       	std	Y+48, r25	; 0x30
    1a1a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a1c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a1e:	98 a9       	ldd	r25, Y+48	; 0x30
    1a20:	00 97       	sbiw	r24, 0x00	; 0
    1a22:	69 f7       	brne	.-38     	; 0x19fe <Keypad_U8ReadPin1+0x108>
    1a24:	14 c0       	rjmp	.+40     	; 0x1a4e <Keypad_U8ReadPin1+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a26:	69 a9       	ldd	r22, Y+49	; 0x31
    1a28:	7a a9       	ldd	r23, Y+50	; 0x32
    1a2a:	8b a9       	ldd	r24, Y+51	; 0x33
    1a2c:	9c a9       	ldd	r25, Y+52	; 0x34
    1a2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a32:	dc 01       	movw	r26, r24
    1a34:	cb 01       	movw	r24, r22
    1a36:	98 ab       	std	Y+48, r25	; 0x30
    1a38:	8f a7       	std	Y+47, r24	; 0x2f
    1a3a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a3c:	98 a9       	ldd	r25, Y+48	; 0x30
    1a3e:	9c a7       	std	Y+44, r25	; 0x2c
    1a40:	8b a7       	std	Y+43, r24	; 0x2b
    1a42:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a44:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a46:	01 97       	sbiw	r24, 0x01	; 1
    1a48:	f1 f7       	brne	.-4      	; 0x1a46 <Keypad_U8ReadPin1+0x150>
    1a4a:	9c a7       	std	Y+44, r25	; 0x2c
    1a4c:	8b a7       	std	Y+43, r24	; 0x2b
	u8 row, pressdkey=0;
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS0,LOW);
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS1,HIGH);
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS2,HIGH);
  	DIO_VidSetPinValue(COLS_ROWSPORT,COLS3,HIGH);
	for(row=4;row<=7;row++)
    1a4e:	8a ad       	ldd	r24, Y+58	; 0x3a
    1a50:	8f 5f       	subi	r24, 0xFF	; 255
    1a52:	8a af       	std	Y+58, r24	; 0x3a
    1a54:	8a ad       	ldd	r24, Y+58	; 0x3a
    1a56:	88 30       	cpi	r24, 0x08	; 8
    1a58:	08 f4       	brcc	.+2      	; 0x1a5c <Keypad_U8ReadPin1+0x166>
    1a5a:	6f cf       	rjmp	.-290    	; 0x193a <Keypad_U8ReadPin1+0x44>
			pressdkey=	array_keypad[row][COLS0];
		}
		while(DIO_VidGetPinValue(COLS_ROWSPORT,row)==0);
		_delay_ms(5);
	}
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS0,HIGH);
    1a5c:	81 e0       	ldi	r24, 0x01	; 1
    1a5e:	60 e0       	ldi	r22, 0x00	; 0
    1a60:	41 e0       	ldi	r20, 0x01	; 1
    1a62:	0e 94 52 08 	call	0x10a4	; 0x10a4 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS1,LOW );
    1a66:	81 e0       	ldi	r24, 0x01	; 1
    1a68:	61 e0       	ldi	r22, 0x01	; 1
    1a6a:	40 e0       	ldi	r20, 0x00	; 0
    1a6c:	0e 94 52 08 	call	0x10a4	; 0x10a4 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS2,HIGH);
    1a70:	81 e0       	ldi	r24, 0x01	; 1
    1a72:	62 e0       	ldi	r22, 0x02	; 2
    1a74:	41 e0       	ldi	r20, 0x01	; 1
    1a76:	0e 94 52 08 	call	0x10a4	; 0x10a4 <DIO_VidSetPinValue>
  	DIO_VidSetPinValue(COLS_ROWSPORT,COLS3,HIGH);
    1a7a:	81 e0       	ldi	r24, 0x01	; 1
    1a7c:	63 e0       	ldi	r22, 0x03	; 3
    1a7e:	41 e0       	ldi	r20, 0x01	; 1
    1a80:	0e 94 52 08 	call	0x10a4	; 0x10a4 <DIO_VidSetPinValue>
	for(row=4;row<=7;row++)
    1a84:	84 e0       	ldi	r24, 0x04	; 4
    1a86:	8a af       	std	Y+58, r24	; 0x3a
    1a88:	8d c0       	rjmp	.+282    	; 0x1ba4 <Keypad_U8ReadPin1+0x2ae>
	{
		if(DIO_VidGetPinValue(COLS_ROWSPORT,row)==0)
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	6a ad       	ldd	r22, Y+58	; 0x3a
    1a8e:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_VidGetPinValue>
    1a92:	88 23       	and	r24, r24
    1a94:	61 f4       	brne	.+24     	; 0x1aae <Keypad_U8ReadPin1+0x1b8>
		{
			pressdkey=	array_keypad[row][COLS1];
    1a96:	8a ad       	ldd	r24, Y+58	; 0x3a
    1a98:	88 2f       	mov	r24, r24
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	88 0f       	add	r24, r24
    1a9e:	99 1f       	adc	r25, r25
    1aa0:	88 0f       	add	r24, r24
    1aa2:	99 1f       	adc	r25, r25
    1aa4:	fc 01       	movw	r30, r24
    1aa6:	e6 52       	subi	r30, 0x26	; 38
    1aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aaa:	80 81       	ld	r24, Z
    1aac:	89 af       	std	Y+57, r24	; 0x39
		}
		while(DIO_VidGetPinValue(COLS_ROWSPORT,row)==0);
    1aae:	81 e0       	ldi	r24, 0x01	; 1
    1ab0:	6a ad       	ldd	r22, Y+58	; 0x3a
    1ab2:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_VidGetPinValue>
    1ab6:	88 23       	and	r24, r24
    1ab8:	d1 f3       	breq	.-12     	; 0x1aae <Keypad_U8ReadPin1+0x1b8>
    1aba:	80 e0       	ldi	r24, 0x00	; 0
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	a0 ea       	ldi	r26, 0xA0	; 160
    1ac0:	b0 e4       	ldi	r27, 0x40	; 64
    1ac2:	8f a3       	std	Y+39, r24	; 0x27
    1ac4:	98 a7       	std	Y+40, r25	; 0x28
    1ac6:	a9 a7       	std	Y+41, r26	; 0x29
    1ac8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aca:	6f a1       	ldd	r22, Y+39	; 0x27
    1acc:	78 a5       	ldd	r23, Y+40	; 0x28
    1ace:	89 a5       	ldd	r24, Y+41	; 0x29
    1ad0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ad2:	20 e0       	ldi	r18, 0x00	; 0
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	4a ef       	ldi	r20, 0xFA	; 250
    1ad8:	54 e4       	ldi	r21, 0x44	; 68
    1ada:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ade:	dc 01       	movw	r26, r24
    1ae0:	cb 01       	movw	r24, r22
    1ae2:	8b a3       	std	Y+35, r24	; 0x23
    1ae4:	9c a3       	std	Y+36, r25	; 0x24
    1ae6:	ad a3       	std	Y+37, r26	; 0x25
    1ae8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1aea:	6b a1       	ldd	r22, Y+35	; 0x23
    1aec:	7c a1       	ldd	r23, Y+36	; 0x24
    1aee:	8d a1       	ldd	r24, Y+37	; 0x25
    1af0:	9e a1       	ldd	r25, Y+38	; 0x26
    1af2:	20 e0       	ldi	r18, 0x00	; 0
    1af4:	30 e0       	ldi	r19, 0x00	; 0
    1af6:	40 e8       	ldi	r20, 0x80	; 128
    1af8:	5f e3       	ldi	r21, 0x3F	; 63
    1afa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1afe:	88 23       	and	r24, r24
    1b00:	2c f4       	brge	.+10     	; 0x1b0c <Keypad_U8ReadPin1+0x216>
		__ticks = 1;
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	9a a3       	std	Y+34, r25	; 0x22
    1b08:	89 a3       	std	Y+33, r24	; 0x21
    1b0a:	3f c0       	rjmp	.+126    	; 0x1b8a <Keypad_U8ReadPin1+0x294>
	else if (__tmp > 65535)
    1b0c:	6b a1       	ldd	r22, Y+35	; 0x23
    1b0e:	7c a1       	ldd	r23, Y+36	; 0x24
    1b10:	8d a1       	ldd	r24, Y+37	; 0x25
    1b12:	9e a1       	ldd	r25, Y+38	; 0x26
    1b14:	20 e0       	ldi	r18, 0x00	; 0
    1b16:	3f ef       	ldi	r19, 0xFF	; 255
    1b18:	4f e7       	ldi	r20, 0x7F	; 127
    1b1a:	57 e4       	ldi	r21, 0x47	; 71
    1b1c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b20:	18 16       	cp	r1, r24
    1b22:	4c f5       	brge	.+82     	; 0x1b76 <Keypad_U8ReadPin1+0x280>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b24:	6f a1       	ldd	r22, Y+39	; 0x27
    1b26:	78 a5       	ldd	r23, Y+40	; 0x28
    1b28:	89 a5       	ldd	r24, Y+41	; 0x29
    1b2a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b2c:	20 e0       	ldi	r18, 0x00	; 0
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	40 e2       	ldi	r20, 0x20	; 32
    1b32:	51 e4       	ldi	r21, 0x41	; 65
    1b34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b38:	dc 01       	movw	r26, r24
    1b3a:	cb 01       	movw	r24, r22
    1b3c:	bc 01       	movw	r22, r24
    1b3e:	cd 01       	movw	r24, r26
    1b40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b44:	dc 01       	movw	r26, r24
    1b46:	cb 01       	movw	r24, r22
    1b48:	9a a3       	std	Y+34, r25	; 0x22
    1b4a:	89 a3       	std	Y+33, r24	; 0x21
    1b4c:	0f c0       	rjmp	.+30     	; 0x1b6c <Keypad_U8ReadPin1+0x276>
    1b4e:	88 ec       	ldi	r24, 0xC8	; 200
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	98 a3       	std	Y+32, r25	; 0x20
    1b54:	8f 8f       	std	Y+31, r24	; 0x1f
    1b56:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b58:	98 a1       	ldd	r25, Y+32	; 0x20
    1b5a:	01 97       	sbiw	r24, 0x01	; 1
    1b5c:	f1 f7       	brne	.-4      	; 0x1b5a <Keypad_U8ReadPin1+0x264>
    1b5e:	98 a3       	std	Y+32, r25	; 0x20
    1b60:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b62:	89 a1       	ldd	r24, Y+33	; 0x21
    1b64:	9a a1       	ldd	r25, Y+34	; 0x22
    1b66:	01 97       	sbiw	r24, 0x01	; 1
    1b68:	9a a3       	std	Y+34, r25	; 0x22
    1b6a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b6c:	89 a1       	ldd	r24, Y+33	; 0x21
    1b6e:	9a a1       	ldd	r25, Y+34	; 0x22
    1b70:	00 97       	sbiw	r24, 0x00	; 0
    1b72:	69 f7       	brne	.-38     	; 0x1b4e <Keypad_U8ReadPin1+0x258>
    1b74:	14 c0       	rjmp	.+40     	; 0x1b9e <Keypad_U8ReadPin1+0x2a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b76:	6b a1       	ldd	r22, Y+35	; 0x23
    1b78:	7c a1       	ldd	r23, Y+36	; 0x24
    1b7a:	8d a1       	ldd	r24, Y+37	; 0x25
    1b7c:	9e a1       	ldd	r25, Y+38	; 0x26
    1b7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b82:	dc 01       	movw	r26, r24
    1b84:	cb 01       	movw	r24, r22
    1b86:	9a a3       	std	Y+34, r25	; 0x22
    1b88:	89 a3       	std	Y+33, r24	; 0x21
    1b8a:	89 a1       	ldd	r24, Y+33	; 0x21
    1b8c:	9a a1       	ldd	r25, Y+34	; 0x22
    1b8e:	9e 8f       	std	Y+30, r25	; 0x1e
    1b90:	8d 8f       	std	Y+29, r24	; 0x1d
    1b92:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b94:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b96:	01 97       	sbiw	r24, 0x01	; 1
    1b98:	f1 f7       	brne	.-4      	; 0x1b96 <Keypad_U8ReadPin1+0x2a0>
    1b9a:	9e 8f       	std	Y+30, r25	; 0x1e
    1b9c:	8d 8f       	std	Y+29, r24	; 0x1d
	}
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS0,HIGH);
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS1,LOW );
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS2,HIGH);
  	DIO_VidSetPinValue(COLS_ROWSPORT,COLS3,HIGH);
	for(row=4;row<=7;row++)
    1b9e:	8a ad       	ldd	r24, Y+58	; 0x3a
    1ba0:	8f 5f       	subi	r24, 0xFF	; 255
    1ba2:	8a af       	std	Y+58, r24	; 0x3a
    1ba4:	8a ad       	ldd	r24, Y+58	; 0x3a
    1ba6:	88 30       	cpi	r24, 0x08	; 8
    1ba8:	08 f4       	brcc	.+2      	; 0x1bac <Keypad_U8ReadPin1+0x2b6>
    1baa:	6f cf       	rjmp	.-290    	; 0x1a8a <Keypad_U8ReadPin1+0x194>
			pressdkey=	array_keypad[row][COLS1];
		}
		while(DIO_VidGetPinValue(COLS_ROWSPORT,row)==0);
		_delay_ms(5);
	}
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS0,HIGH);
    1bac:	81 e0       	ldi	r24, 0x01	; 1
    1bae:	60 e0       	ldi	r22, 0x00	; 0
    1bb0:	41 e0       	ldi	r20, 0x01	; 1
    1bb2:	0e 94 52 08 	call	0x10a4	; 0x10a4 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS1,HIGH);
    1bb6:	81 e0       	ldi	r24, 0x01	; 1
    1bb8:	61 e0       	ldi	r22, 0x01	; 1
    1bba:	41 e0       	ldi	r20, 0x01	; 1
    1bbc:	0e 94 52 08 	call	0x10a4	; 0x10a4 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS2,LOW );
    1bc0:	81 e0       	ldi	r24, 0x01	; 1
    1bc2:	62 e0       	ldi	r22, 0x02	; 2
    1bc4:	40 e0       	ldi	r20, 0x00	; 0
    1bc6:	0e 94 52 08 	call	0x10a4	; 0x10a4 <DIO_VidSetPinValue>
  	DIO_VidSetPinValue(COLS_ROWSPORT,COLS3,HIGH);
    1bca:	81 e0       	ldi	r24, 0x01	; 1
    1bcc:	63 e0       	ldi	r22, 0x03	; 3
    1bce:	41 e0       	ldi	r20, 0x01	; 1
    1bd0:	0e 94 52 08 	call	0x10a4	; 0x10a4 <DIO_VidSetPinValue>
	for(row=4;row<=7;row++)
    1bd4:	84 e0       	ldi	r24, 0x04	; 4
    1bd6:	8a af       	std	Y+58, r24	; 0x3a
    1bd8:	8e c0       	rjmp	.+284    	; 0x1cf6 <Keypad_U8ReadPin1+0x400>
	{
		if(DIO_VidGetPinValue(COLS_ROWSPORT,row)==0)
    1bda:	81 e0       	ldi	r24, 0x01	; 1
    1bdc:	6a ad       	ldd	r22, Y+58	; 0x3a
    1bde:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_VidGetPinValue>
    1be2:	88 23       	and	r24, r24
    1be4:	69 f4       	brne	.+26     	; 0x1c00 <Keypad_U8ReadPin1+0x30a>
		{
			pressdkey=	array_keypad[row][COLS2];
    1be6:	8a ad       	ldd	r24, Y+58	; 0x3a
    1be8:	88 2f       	mov	r24, r24
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	88 0f       	add	r24, r24
    1bee:	99 1f       	adc	r25, r25
    1bf0:	01 96       	adiw	r24, 0x01	; 1
    1bf2:	88 0f       	add	r24, r24
    1bf4:	99 1f       	adc	r25, r25
    1bf6:	fc 01       	movw	r30, r24
    1bf8:	e7 52       	subi	r30, 0x27	; 39
    1bfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfc:	80 81       	ld	r24, Z
    1bfe:	89 af       	std	Y+57, r24	; 0x39
		}
		while(DIO_VidGetPinValue(COLS_ROWSPORT,row)==0);
    1c00:	81 e0       	ldi	r24, 0x01	; 1
    1c02:	6a ad       	ldd	r22, Y+58	; 0x3a
    1c04:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_VidGetPinValue>
    1c08:	88 23       	and	r24, r24
    1c0a:	d1 f3       	breq	.-12     	; 0x1c00 <Keypad_U8ReadPin1+0x30a>
    1c0c:	80 e0       	ldi	r24, 0x00	; 0
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	a0 ea       	ldi	r26, 0xA0	; 160
    1c12:	b0 e4       	ldi	r27, 0x40	; 64
    1c14:	89 8f       	std	Y+25, r24	; 0x19
    1c16:	9a 8f       	std	Y+26, r25	; 0x1a
    1c18:	ab 8f       	std	Y+27, r26	; 0x1b
    1c1a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c1c:	69 8d       	ldd	r22, Y+25	; 0x19
    1c1e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c20:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c22:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c24:	20 e0       	ldi	r18, 0x00	; 0
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	4a ef       	ldi	r20, 0xFA	; 250
    1c2a:	54 e4       	ldi	r21, 0x44	; 68
    1c2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c30:	dc 01       	movw	r26, r24
    1c32:	cb 01       	movw	r24, r22
    1c34:	8d 8b       	std	Y+21, r24	; 0x15
    1c36:	9e 8b       	std	Y+22, r25	; 0x16
    1c38:	af 8b       	std	Y+23, r26	; 0x17
    1c3a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c3c:	6d 89       	ldd	r22, Y+21	; 0x15
    1c3e:	7e 89       	ldd	r23, Y+22	; 0x16
    1c40:	8f 89       	ldd	r24, Y+23	; 0x17
    1c42:	98 8d       	ldd	r25, Y+24	; 0x18
    1c44:	20 e0       	ldi	r18, 0x00	; 0
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	40 e8       	ldi	r20, 0x80	; 128
    1c4a:	5f e3       	ldi	r21, 0x3F	; 63
    1c4c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c50:	88 23       	and	r24, r24
    1c52:	2c f4       	brge	.+10     	; 0x1c5e <Keypad_U8ReadPin1+0x368>
		__ticks = 1;
    1c54:	81 e0       	ldi	r24, 0x01	; 1
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	9c 8b       	std	Y+20, r25	; 0x14
    1c5a:	8b 8b       	std	Y+19, r24	; 0x13
    1c5c:	3f c0       	rjmp	.+126    	; 0x1cdc <Keypad_U8ReadPin1+0x3e6>
	else if (__tmp > 65535)
    1c5e:	6d 89       	ldd	r22, Y+21	; 0x15
    1c60:	7e 89       	ldd	r23, Y+22	; 0x16
    1c62:	8f 89       	ldd	r24, Y+23	; 0x17
    1c64:	98 8d       	ldd	r25, Y+24	; 0x18
    1c66:	20 e0       	ldi	r18, 0x00	; 0
    1c68:	3f ef       	ldi	r19, 0xFF	; 255
    1c6a:	4f e7       	ldi	r20, 0x7F	; 127
    1c6c:	57 e4       	ldi	r21, 0x47	; 71
    1c6e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c72:	18 16       	cp	r1, r24
    1c74:	4c f5       	brge	.+82     	; 0x1cc8 <Keypad_U8ReadPin1+0x3d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c76:	69 8d       	ldd	r22, Y+25	; 0x19
    1c78:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c7a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c7c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c7e:	20 e0       	ldi	r18, 0x00	; 0
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	40 e2       	ldi	r20, 0x20	; 32
    1c84:	51 e4       	ldi	r21, 0x41	; 65
    1c86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c8a:	dc 01       	movw	r26, r24
    1c8c:	cb 01       	movw	r24, r22
    1c8e:	bc 01       	movw	r22, r24
    1c90:	cd 01       	movw	r24, r26
    1c92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c96:	dc 01       	movw	r26, r24
    1c98:	cb 01       	movw	r24, r22
    1c9a:	9c 8b       	std	Y+20, r25	; 0x14
    1c9c:	8b 8b       	std	Y+19, r24	; 0x13
    1c9e:	0f c0       	rjmp	.+30     	; 0x1cbe <Keypad_U8ReadPin1+0x3c8>
    1ca0:	88 ec       	ldi	r24, 0xC8	; 200
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	9a 8b       	std	Y+18, r25	; 0x12
    1ca6:	89 8b       	std	Y+17, r24	; 0x11
    1ca8:	89 89       	ldd	r24, Y+17	; 0x11
    1caa:	9a 89       	ldd	r25, Y+18	; 0x12
    1cac:	01 97       	sbiw	r24, 0x01	; 1
    1cae:	f1 f7       	brne	.-4      	; 0x1cac <Keypad_U8ReadPin1+0x3b6>
    1cb0:	9a 8b       	std	Y+18, r25	; 0x12
    1cb2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cb4:	8b 89       	ldd	r24, Y+19	; 0x13
    1cb6:	9c 89       	ldd	r25, Y+20	; 0x14
    1cb8:	01 97       	sbiw	r24, 0x01	; 1
    1cba:	9c 8b       	std	Y+20, r25	; 0x14
    1cbc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cbe:	8b 89       	ldd	r24, Y+19	; 0x13
    1cc0:	9c 89       	ldd	r25, Y+20	; 0x14
    1cc2:	00 97       	sbiw	r24, 0x00	; 0
    1cc4:	69 f7       	brne	.-38     	; 0x1ca0 <Keypad_U8ReadPin1+0x3aa>
    1cc6:	14 c0       	rjmp	.+40     	; 0x1cf0 <Keypad_U8ReadPin1+0x3fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cc8:	6d 89       	ldd	r22, Y+21	; 0x15
    1cca:	7e 89       	ldd	r23, Y+22	; 0x16
    1ccc:	8f 89       	ldd	r24, Y+23	; 0x17
    1cce:	98 8d       	ldd	r25, Y+24	; 0x18
    1cd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd4:	dc 01       	movw	r26, r24
    1cd6:	cb 01       	movw	r24, r22
    1cd8:	9c 8b       	std	Y+20, r25	; 0x14
    1cda:	8b 8b       	std	Y+19, r24	; 0x13
    1cdc:	8b 89       	ldd	r24, Y+19	; 0x13
    1cde:	9c 89       	ldd	r25, Y+20	; 0x14
    1ce0:	98 8b       	std	Y+16, r25	; 0x10
    1ce2:	8f 87       	std	Y+15, r24	; 0x0f
    1ce4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ce6:	98 89       	ldd	r25, Y+16	; 0x10
    1ce8:	01 97       	sbiw	r24, 0x01	; 1
    1cea:	f1 f7       	brne	.-4      	; 0x1ce8 <Keypad_U8ReadPin1+0x3f2>
    1cec:	98 8b       	std	Y+16, r25	; 0x10
    1cee:	8f 87       	std	Y+15, r24	; 0x0f
	}
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS0,HIGH);
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS1,HIGH);
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS2,LOW );
  	DIO_VidSetPinValue(COLS_ROWSPORT,COLS3,HIGH);
	for(row=4;row<=7;row++)
    1cf0:	8a ad       	ldd	r24, Y+58	; 0x3a
    1cf2:	8f 5f       	subi	r24, 0xFF	; 255
    1cf4:	8a af       	std	Y+58, r24	; 0x3a
    1cf6:	8a ad       	ldd	r24, Y+58	; 0x3a
    1cf8:	88 30       	cpi	r24, 0x08	; 8
    1cfa:	08 f4       	brcc	.+2      	; 0x1cfe <Keypad_U8ReadPin1+0x408>
    1cfc:	6e cf       	rjmp	.-292    	; 0x1bda <Keypad_U8ReadPin1+0x2e4>
			pressdkey=	array_keypad[row][COLS2];
		}
		while(DIO_VidGetPinValue(COLS_ROWSPORT,row)==0);
		_delay_ms(5);
	}
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS0,HIGH);
    1cfe:	81 e0       	ldi	r24, 0x01	; 1
    1d00:	60 e0       	ldi	r22, 0x00	; 0
    1d02:	41 e0       	ldi	r20, 0x01	; 1
    1d04:	0e 94 52 08 	call	0x10a4	; 0x10a4 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS1,HIGH);
    1d08:	81 e0       	ldi	r24, 0x01	; 1
    1d0a:	61 e0       	ldi	r22, 0x01	; 1
    1d0c:	41 e0       	ldi	r20, 0x01	; 1
    1d0e:	0e 94 52 08 	call	0x10a4	; 0x10a4 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS2,HIGH);
    1d12:	81 e0       	ldi	r24, 0x01	; 1
    1d14:	62 e0       	ldi	r22, 0x02	; 2
    1d16:	41 e0       	ldi	r20, 0x01	; 1
    1d18:	0e 94 52 08 	call	0x10a4	; 0x10a4 <DIO_VidSetPinValue>
  	DIO_VidSetPinValue(COLS_ROWSPORT,COLS3,LOW );
    1d1c:	81 e0       	ldi	r24, 0x01	; 1
    1d1e:	63 e0       	ldi	r22, 0x03	; 3
    1d20:	40 e0       	ldi	r20, 0x00	; 0
    1d22:	0e 94 52 08 	call	0x10a4	; 0x10a4 <DIO_VidSetPinValue>
	for(row=4;row<=7;row++)
    1d26:	84 e0       	ldi	r24, 0x04	; 4
    1d28:	8a af       	std	Y+58, r24	; 0x3a
    1d2a:	8d c0       	rjmp	.+282    	; 0x1e46 <Keypad_U8ReadPin1+0x550>
	{
		if(DIO_VidGetPinValue(COLS_ROWSPORT,row)==0)
    1d2c:	81 e0       	ldi	r24, 0x01	; 1
    1d2e:	6a ad       	ldd	r22, Y+58	; 0x3a
    1d30:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_VidGetPinValue>
    1d34:	88 23       	and	r24, r24
    1d36:	61 f4       	brne	.+24     	; 0x1d50 <Keypad_U8ReadPin1+0x45a>
		{
			pressdkey=	array_keypad[row][COLS3];
    1d38:	8a ad       	ldd	r24, Y+58	; 0x3a
    1d3a:	88 2f       	mov	r24, r24
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	88 0f       	add	r24, r24
    1d40:	99 1f       	adc	r25, r25
    1d42:	88 0f       	add	r24, r24
    1d44:	99 1f       	adc	r25, r25
    1d46:	fc 01       	movw	r30, r24
    1d48:	e4 52       	subi	r30, 0x24	; 36
    1d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4c:	80 81       	ld	r24, Z
    1d4e:	89 af       	std	Y+57, r24	; 0x39
		}
		while(DIO_VidGetPinValue(COLS_ROWSPORT,row)==0);
    1d50:	81 e0       	ldi	r24, 0x01	; 1
    1d52:	6a ad       	ldd	r22, Y+58	; 0x3a
    1d54:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_VidGetPinValue>
    1d58:	88 23       	and	r24, r24
    1d5a:	d1 f3       	breq	.-12     	; 0x1d50 <Keypad_U8ReadPin1+0x45a>
    1d5c:	80 e0       	ldi	r24, 0x00	; 0
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	a0 ea       	ldi	r26, 0xA0	; 160
    1d62:	b0 e4       	ldi	r27, 0x40	; 64
    1d64:	8b 87       	std	Y+11, r24	; 0x0b
    1d66:	9c 87       	std	Y+12, r25	; 0x0c
    1d68:	ad 87       	std	Y+13, r26	; 0x0d
    1d6a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d70:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d72:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d74:	20 e0       	ldi	r18, 0x00	; 0
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	4a ef       	ldi	r20, 0xFA	; 250
    1d7a:	54 e4       	ldi	r21, 0x44	; 68
    1d7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d80:	dc 01       	movw	r26, r24
    1d82:	cb 01       	movw	r24, r22
    1d84:	8f 83       	std	Y+7, r24	; 0x07
    1d86:	98 87       	std	Y+8, r25	; 0x08
    1d88:	a9 87       	std	Y+9, r26	; 0x09
    1d8a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d8e:	78 85       	ldd	r23, Y+8	; 0x08
    1d90:	89 85       	ldd	r24, Y+9	; 0x09
    1d92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d94:	20 e0       	ldi	r18, 0x00	; 0
    1d96:	30 e0       	ldi	r19, 0x00	; 0
    1d98:	40 e8       	ldi	r20, 0x80	; 128
    1d9a:	5f e3       	ldi	r21, 0x3F	; 63
    1d9c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1da0:	88 23       	and	r24, r24
    1da2:	2c f4       	brge	.+10     	; 0x1dae <Keypad_U8ReadPin1+0x4b8>
		__ticks = 1;
    1da4:	81 e0       	ldi	r24, 0x01	; 1
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	9e 83       	std	Y+6, r25	; 0x06
    1daa:	8d 83       	std	Y+5, r24	; 0x05
    1dac:	3f c0       	rjmp	.+126    	; 0x1e2c <Keypad_U8ReadPin1+0x536>
	else if (__tmp > 65535)
    1dae:	6f 81       	ldd	r22, Y+7	; 0x07
    1db0:	78 85       	ldd	r23, Y+8	; 0x08
    1db2:	89 85       	ldd	r24, Y+9	; 0x09
    1db4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1db6:	20 e0       	ldi	r18, 0x00	; 0
    1db8:	3f ef       	ldi	r19, 0xFF	; 255
    1dba:	4f e7       	ldi	r20, 0x7F	; 127
    1dbc:	57 e4       	ldi	r21, 0x47	; 71
    1dbe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dc2:	18 16       	cp	r1, r24
    1dc4:	4c f5       	brge	.+82     	; 0x1e18 <Keypad_U8ReadPin1+0x522>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dc6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dc8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dca:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dcc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dce:	20 e0       	ldi	r18, 0x00	; 0
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	40 e2       	ldi	r20, 0x20	; 32
    1dd4:	51 e4       	ldi	r21, 0x41	; 65
    1dd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dda:	dc 01       	movw	r26, r24
    1ddc:	cb 01       	movw	r24, r22
    1dde:	bc 01       	movw	r22, r24
    1de0:	cd 01       	movw	r24, r26
    1de2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1de6:	dc 01       	movw	r26, r24
    1de8:	cb 01       	movw	r24, r22
    1dea:	9e 83       	std	Y+6, r25	; 0x06
    1dec:	8d 83       	std	Y+5, r24	; 0x05
    1dee:	0f c0       	rjmp	.+30     	; 0x1e0e <Keypad_U8ReadPin1+0x518>
    1df0:	88 ec       	ldi	r24, 0xC8	; 200
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	9c 83       	std	Y+4, r25	; 0x04
    1df6:	8b 83       	std	Y+3, r24	; 0x03
    1df8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfa:	9c 81       	ldd	r25, Y+4	; 0x04
    1dfc:	01 97       	sbiw	r24, 0x01	; 1
    1dfe:	f1 f7       	brne	.-4      	; 0x1dfc <Keypad_U8ReadPin1+0x506>
    1e00:	9c 83       	std	Y+4, r25	; 0x04
    1e02:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e04:	8d 81       	ldd	r24, Y+5	; 0x05
    1e06:	9e 81       	ldd	r25, Y+6	; 0x06
    1e08:	01 97       	sbiw	r24, 0x01	; 1
    1e0a:	9e 83       	std	Y+6, r25	; 0x06
    1e0c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e10:	9e 81       	ldd	r25, Y+6	; 0x06
    1e12:	00 97       	sbiw	r24, 0x00	; 0
    1e14:	69 f7       	brne	.-38     	; 0x1df0 <Keypad_U8ReadPin1+0x4fa>
    1e16:	14 c0       	rjmp	.+40     	; 0x1e40 <Keypad_U8ReadPin1+0x54a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e18:	6f 81       	ldd	r22, Y+7	; 0x07
    1e1a:	78 85       	ldd	r23, Y+8	; 0x08
    1e1c:	89 85       	ldd	r24, Y+9	; 0x09
    1e1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e24:	dc 01       	movw	r26, r24
    1e26:	cb 01       	movw	r24, r22
    1e28:	9e 83       	std	Y+6, r25	; 0x06
    1e2a:	8d 83       	std	Y+5, r24	; 0x05
    1e2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e30:	9a 83       	std	Y+2, r25	; 0x02
    1e32:	89 83       	std	Y+1, r24	; 0x01
    1e34:	89 81       	ldd	r24, Y+1	; 0x01
    1e36:	9a 81       	ldd	r25, Y+2	; 0x02
    1e38:	01 97       	sbiw	r24, 0x01	; 1
    1e3a:	f1 f7       	brne	.-4      	; 0x1e38 <Keypad_U8ReadPin1+0x542>
    1e3c:	9a 83       	std	Y+2, r25	; 0x02
    1e3e:	89 83       	std	Y+1, r24	; 0x01
	}
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS0,HIGH);
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS1,HIGH);
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS2,HIGH);
  	DIO_VidSetPinValue(COLS_ROWSPORT,COLS3,LOW );
	for(row=4;row<=7;row++)
    1e40:	8a ad       	ldd	r24, Y+58	; 0x3a
    1e42:	8f 5f       	subi	r24, 0xFF	; 255
    1e44:	8a af       	std	Y+58, r24	; 0x3a
    1e46:	8a ad       	ldd	r24, Y+58	; 0x3a
    1e48:	88 30       	cpi	r24, 0x08	; 8
    1e4a:	08 f4       	brcc	.+2      	; 0x1e4e <Keypad_U8ReadPin1+0x558>
    1e4c:	6f cf       	rjmp	.-290    	; 0x1d2c <Keypad_U8ReadPin1+0x436>
		}
		while(DIO_VidGetPinValue(COLS_ROWSPORT,row)==0);
		_delay_ms(5);
	}

	return pressdkey;
    1e4e:	89 ad       	ldd	r24, Y+57	; 0x39


}
    1e50:	ea 96       	adiw	r28, 0x3a	; 58
    1e52:	0f b6       	in	r0, 0x3f	; 63
    1e54:	f8 94       	cli
    1e56:	de bf       	out	0x3e, r29	; 62
    1e58:	0f be       	out	0x3f, r0	; 63
    1e5a:	cd bf       	out	0x3d, r28	; 61
    1e5c:	cf 91       	pop	r28
    1e5e:	df 91       	pop	r29
    1e60:	08 95       	ret

00001e62 <LCD_VidInit>:




void LCD_VidInit(void)
{
    1e62:	0f 93       	push	r16
    1e64:	1f 93       	push	r17
    1e66:	df 93       	push	r29
    1e68:	cf 93       	push	r28
    1e6a:	cd b7       	in	r28, 0x3d	; 61
    1e6c:	de b7       	in	r29, 0x3e	; 62
    1e6e:	c0 57       	subi	r28, 0x70	; 112
    1e70:	d0 40       	sbci	r29, 0x00	; 0
    1e72:	0f b6       	in	r0, 0x3f	; 63
    1e74:	f8 94       	cli
    1e76:	de bf       	out	0x3e, r29	; 62
    1e78:	0f be       	out	0x3f, r0	; 63
    1e7a:	cd bf       	out	0x3d, r28	; 61
    1e7c:	fe 01       	movw	r30, r28
    1e7e:	e3 59       	subi	r30, 0x93	; 147
    1e80:	ff 4f       	sbci	r31, 0xFF	; 255
    1e82:	80 e0       	ldi	r24, 0x00	; 0
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	a0 e2       	ldi	r26, 0x20	; 32
    1e88:	b2 e4       	ldi	r27, 0x42	; 66
    1e8a:	80 83       	st	Z, r24
    1e8c:	91 83       	std	Z+1, r25	; 0x01
    1e8e:	a2 83       	std	Z+2, r26	; 0x02
    1e90:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e92:	8e 01       	movw	r16, r28
    1e94:	07 59       	subi	r16, 0x97	; 151
    1e96:	1f 4f       	sbci	r17, 0xFF	; 255
    1e98:	fe 01       	movw	r30, r28
    1e9a:	e3 59       	subi	r30, 0x93	; 147
    1e9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9e:	60 81       	ld	r22, Z
    1ea0:	71 81       	ldd	r23, Z+1	; 0x01
    1ea2:	82 81       	ldd	r24, Z+2	; 0x02
    1ea4:	93 81       	ldd	r25, Z+3	; 0x03
    1ea6:	20 e0       	ldi	r18, 0x00	; 0
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	4a ef       	ldi	r20, 0xFA	; 250
    1eac:	54 e4       	ldi	r21, 0x44	; 68
    1eae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eb2:	dc 01       	movw	r26, r24
    1eb4:	cb 01       	movw	r24, r22
    1eb6:	f8 01       	movw	r30, r16
    1eb8:	80 83       	st	Z, r24
    1eba:	91 83       	std	Z+1, r25	; 0x01
    1ebc:	a2 83       	std	Z+2, r26	; 0x02
    1ebe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ec0:	fe 01       	movw	r30, r28
    1ec2:	e7 59       	subi	r30, 0x97	; 151
    1ec4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec6:	60 81       	ld	r22, Z
    1ec8:	71 81       	ldd	r23, Z+1	; 0x01
    1eca:	82 81       	ldd	r24, Z+2	; 0x02
    1ecc:	93 81       	ldd	r25, Z+3	; 0x03
    1ece:	20 e0       	ldi	r18, 0x00	; 0
    1ed0:	30 e0       	ldi	r19, 0x00	; 0
    1ed2:	40 e8       	ldi	r20, 0x80	; 128
    1ed4:	5f e3       	ldi	r21, 0x3F	; 63
    1ed6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1eda:	88 23       	and	r24, r24
    1edc:	44 f4       	brge	.+16     	; 0x1eee <LCD_VidInit+0x8c>
		__ticks = 1;
    1ede:	fe 01       	movw	r30, r28
    1ee0:	e9 59       	subi	r30, 0x99	; 153
    1ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee4:	81 e0       	ldi	r24, 0x01	; 1
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	91 83       	std	Z+1, r25	; 0x01
    1eea:	80 83       	st	Z, r24
    1eec:	64 c0       	rjmp	.+200    	; 0x1fb6 <LCD_VidInit+0x154>
	else if (__tmp > 65535)
    1eee:	fe 01       	movw	r30, r28
    1ef0:	e7 59       	subi	r30, 0x97	; 151
    1ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef4:	60 81       	ld	r22, Z
    1ef6:	71 81       	ldd	r23, Z+1	; 0x01
    1ef8:	82 81       	ldd	r24, Z+2	; 0x02
    1efa:	93 81       	ldd	r25, Z+3	; 0x03
    1efc:	20 e0       	ldi	r18, 0x00	; 0
    1efe:	3f ef       	ldi	r19, 0xFF	; 255
    1f00:	4f e7       	ldi	r20, 0x7F	; 127
    1f02:	57 e4       	ldi	r21, 0x47	; 71
    1f04:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f08:	18 16       	cp	r1, r24
    1f0a:	0c f0       	brlt	.+2      	; 0x1f0e <LCD_VidInit+0xac>
    1f0c:	43 c0       	rjmp	.+134    	; 0x1f94 <LCD_VidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f0e:	fe 01       	movw	r30, r28
    1f10:	e3 59       	subi	r30, 0x93	; 147
    1f12:	ff 4f       	sbci	r31, 0xFF	; 255
    1f14:	60 81       	ld	r22, Z
    1f16:	71 81       	ldd	r23, Z+1	; 0x01
    1f18:	82 81       	ldd	r24, Z+2	; 0x02
    1f1a:	93 81       	ldd	r25, Z+3	; 0x03
    1f1c:	20 e0       	ldi	r18, 0x00	; 0
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	40 e2       	ldi	r20, 0x20	; 32
    1f22:	51 e4       	ldi	r21, 0x41	; 65
    1f24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f28:	dc 01       	movw	r26, r24
    1f2a:	cb 01       	movw	r24, r22
    1f2c:	8e 01       	movw	r16, r28
    1f2e:	09 59       	subi	r16, 0x99	; 153
    1f30:	1f 4f       	sbci	r17, 0xFF	; 255
    1f32:	bc 01       	movw	r22, r24
    1f34:	cd 01       	movw	r24, r26
    1f36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f3a:	dc 01       	movw	r26, r24
    1f3c:	cb 01       	movw	r24, r22
    1f3e:	f8 01       	movw	r30, r16
    1f40:	91 83       	std	Z+1, r25	; 0x01
    1f42:	80 83       	st	Z, r24
    1f44:	1f c0       	rjmp	.+62     	; 0x1f84 <LCD_VidInit+0x122>
    1f46:	fe 01       	movw	r30, r28
    1f48:	eb 59       	subi	r30, 0x9B	; 155
    1f4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4c:	88 ec       	ldi	r24, 0xC8	; 200
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	91 83       	std	Z+1, r25	; 0x01
    1f52:	80 83       	st	Z, r24
    1f54:	fe 01       	movw	r30, r28
    1f56:	eb 59       	subi	r30, 0x9B	; 155
    1f58:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5a:	80 81       	ld	r24, Z
    1f5c:	91 81       	ldd	r25, Z+1	; 0x01
    1f5e:	01 97       	sbiw	r24, 0x01	; 1
    1f60:	f1 f7       	brne	.-4      	; 0x1f5e <LCD_VidInit+0xfc>
    1f62:	fe 01       	movw	r30, r28
    1f64:	eb 59       	subi	r30, 0x9B	; 155
    1f66:	ff 4f       	sbci	r31, 0xFF	; 255
    1f68:	91 83       	std	Z+1, r25	; 0x01
    1f6a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f6c:	de 01       	movw	r26, r28
    1f6e:	a9 59       	subi	r26, 0x99	; 153
    1f70:	bf 4f       	sbci	r27, 0xFF	; 255
    1f72:	fe 01       	movw	r30, r28
    1f74:	e9 59       	subi	r30, 0x99	; 153
    1f76:	ff 4f       	sbci	r31, 0xFF	; 255
    1f78:	80 81       	ld	r24, Z
    1f7a:	91 81       	ldd	r25, Z+1	; 0x01
    1f7c:	01 97       	sbiw	r24, 0x01	; 1
    1f7e:	11 96       	adiw	r26, 0x01	; 1
    1f80:	9c 93       	st	X, r25
    1f82:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f84:	fe 01       	movw	r30, r28
    1f86:	e9 59       	subi	r30, 0x99	; 153
    1f88:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8a:	80 81       	ld	r24, Z
    1f8c:	91 81       	ldd	r25, Z+1	; 0x01
    1f8e:	00 97       	sbiw	r24, 0x00	; 0
    1f90:	d1 f6       	brne	.-76     	; 0x1f46 <LCD_VidInit+0xe4>
    1f92:	27 c0       	rjmp	.+78     	; 0x1fe2 <LCD_VidInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f94:	8e 01       	movw	r16, r28
    1f96:	09 59       	subi	r16, 0x99	; 153
    1f98:	1f 4f       	sbci	r17, 0xFF	; 255
    1f9a:	fe 01       	movw	r30, r28
    1f9c:	e7 59       	subi	r30, 0x97	; 151
    1f9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa0:	60 81       	ld	r22, Z
    1fa2:	71 81       	ldd	r23, Z+1	; 0x01
    1fa4:	82 81       	ldd	r24, Z+2	; 0x02
    1fa6:	93 81       	ldd	r25, Z+3	; 0x03
    1fa8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fac:	dc 01       	movw	r26, r24
    1fae:	cb 01       	movw	r24, r22
    1fb0:	f8 01       	movw	r30, r16
    1fb2:	91 83       	std	Z+1, r25	; 0x01
    1fb4:	80 83       	st	Z, r24
    1fb6:	de 01       	movw	r26, r28
    1fb8:	ad 59       	subi	r26, 0x9D	; 157
    1fba:	bf 4f       	sbci	r27, 0xFF	; 255
    1fbc:	fe 01       	movw	r30, r28
    1fbe:	e9 59       	subi	r30, 0x99	; 153
    1fc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc2:	80 81       	ld	r24, Z
    1fc4:	91 81       	ldd	r25, Z+1	; 0x01
    1fc6:	8d 93       	st	X+, r24
    1fc8:	9c 93       	st	X, r25
    1fca:	fe 01       	movw	r30, r28
    1fcc:	ed 59       	subi	r30, 0x9D	; 157
    1fce:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd0:	80 81       	ld	r24, Z
    1fd2:	91 81       	ldd	r25, Z+1	; 0x01
    1fd4:	01 97       	sbiw	r24, 0x01	; 1
    1fd6:	f1 f7       	brne	.-4      	; 0x1fd4 <LCD_VidInit+0x172>
    1fd8:	fe 01       	movw	r30, r28
    1fda:	ed 59       	subi	r30, 0x9D	; 157
    1fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fde:	91 83       	std	Z+1, r25	; 0x01
    1fe0:	80 83       	st	Z, r24
	_delay_ms(1);


	#elif LCD_Mode==FOUR_BIT
	_delay_ms(40);
	DIO_VidSetPinDirection	( Lcopy_u8PORT,RS_copy_u8Pin, OUTPUT);
    1fe2:	80 e0       	ldi	r24, 0x00	; 0
    1fe4:	60 e0       	ldi	r22, 0x00	; 0
    1fe6:	41 e0       	ldi	r20, 0x01	; 1
    1fe8:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection	( Lcopy_u8PORT,R_w_copy_u8Pin,OUTPUT);
    1fec:	80 e0       	ldi	r24, 0x00	; 0
    1fee:	61 e0       	ldi	r22, 0x01	; 1
    1ff0:	41 e0       	ldi	r20, 0x01	; 1
    1ff2:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection	( Lcopy_u8PORT,E_copy_u8Pin,  OUTPUT);
    1ff6:	80 e0       	ldi	r24, 0x00	; 0
    1ff8:	62 e0       	ldi	r22, 0x02	; 2
    1ffa:	41 e0       	ldi	r20, 0x01	; 1
    1ffc:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_VidSetPinDirection>
    2000:	fe 01       	movw	r30, r28
    2002:	e1 5a       	subi	r30, 0xA1	; 161
    2004:	ff 4f       	sbci	r31, 0xFF	; 255
    2006:	80 e0       	ldi	r24, 0x00	; 0
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	a0 e8       	ldi	r26, 0x80	; 128
    200c:	bf e3       	ldi	r27, 0x3F	; 63
    200e:	80 83       	st	Z, r24
    2010:	91 83       	std	Z+1, r25	; 0x01
    2012:	a2 83       	std	Z+2, r26	; 0x02
    2014:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2016:	8e 01       	movw	r16, r28
    2018:	05 5a       	subi	r16, 0xA5	; 165
    201a:	1f 4f       	sbci	r17, 0xFF	; 255
    201c:	fe 01       	movw	r30, r28
    201e:	e1 5a       	subi	r30, 0xA1	; 161
    2020:	ff 4f       	sbci	r31, 0xFF	; 255
    2022:	60 81       	ld	r22, Z
    2024:	71 81       	ldd	r23, Z+1	; 0x01
    2026:	82 81       	ldd	r24, Z+2	; 0x02
    2028:	93 81       	ldd	r25, Z+3	; 0x03
    202a:	20 e0       	ldi	r18, 0x00	; 0
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	4a ef       	ldi	r20, 0xFA	; 250
    2030:	54 e4       	ldi	r21, 0x44	; 68
    2032:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2036:	dc 01       	movw	r26, r24
    2038:	cb 01       	movw	r24, r22
    203a:	f8 01       	movw	r30, r16
    203c:	80 83       	st	Z, r24
    203e:	91 83       	std	Z+1, r25	; 0x01
    2040:	a2 83       	std	Z+2, r26	; 0x02
    2042:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2044:	fe 01       	movw	r30, r28
    2046:	e5 5a       	subi	r30, 0xA5	; 165
    2048:	ff 4f       	sbci	r31, 0xFF	; 255
    204a:	60 81       	ld	r22, Z
    204c:	71 81       	ldd	r23, Z+1	; 0x01
    204e:	82 81       	ldd	r24, Z+2	; 0x02
    2050:	93 81       	ldd	r25, Z+3	; 0x03
    2052:	20 e0       	ldi	r18, 0x00	; 0
    2054:	30 e0       	ldi	r19, 0x00	; 0
    2056:	40 e8       	ldi	r20, 0x80	; 128
    2058:	5f e3       	ldi	r21, 0x3F	; 63
    205a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    205e:	88 23       	and	r24, r24
    2060:	44 f4       	brge	.+16     	; 0x2072 <LCD_VidInit+0x210>
		__ticks = 1;
    2062:	fe 01       	movw	r30, r28
    2064:	e7 5a       	subi	r30, 0xA7	; 167
    2066:	ff 4f       	sbci	r31, 0xFF	; 255
    2068:	81 e0       	ldi	r24, 0x01	; 1
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	91 83       	std	Z+1, r25	; 0x01
    206e:	80 83       	st	Z, r24
    2070:	64 c0       	rjmp	.+200    	; 0x213a <LCD_VidInit+0x2d8>
	else if (__tmp > 65535)
    2072:	fe 01       	movw	r30, r28
    2074:	e5 5a       	subi	r30, 0xA5	; 165
    2076:	ff 4f       	sbci	r31, 0xFF	; 255
    2078:	60 81       	ld	r22, Z
    207a:	71 81       	ldd	r23, Z+1	; 0x01
    207c:	82 81       	ldd	r24, Z+2	; 0x02
    207e:	93 81       	ldd	r25, Z+3	; 0x03
    2080:	20 e0       	ldi	r18, 0x00	; 0
    2082:	3f ef       	ldi	r19, 0xFF	; 255
    2084:	4f e7       	ldi	r20, 0x7F	; 127
    2086:	57 e4       	ldi	r21, 0x47	; 71
    2088:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    208c:	18 16       	cp	r1, r24
    208e:	0c f0       	brlt	.+2      	; 0x2092 <LCD_VidInit+0x230>
    2090:	43 c0       	rjmp	.+134    	; 0x2118 <LCD_VidInit+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2092:	fe 01       	movw	r30, r28
    2094:	e1 5a       	subi	r30, 0xA1	; 161
    2096:	ff 4f       	sbci	r31, 0xFF	; 255
    2098:	60 81       	ld	r22, Z
    209a:	71 81       	ldd	r23, Z+1	; 0x01
    209c:	82 81       	ldd	r24, Z+2	; 0x02
    209e:	93 81       	ldd	r25, Z+3	; 0x03
    20a0:	20 e0       	ldi	r18, 0x00	; 0
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	40 e2       	ldi	r20, 0x20	; 32
    20a6:	51 e4       	ldi	r21, 0x41	; 65
    20a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ac:	dc 01       	movw	r26, r24
    20ae:	cb 01       	movw	r24, r22
    20b0:	8e 01       	movw	r16, r28
    20b2:	07 5a       	subi	r16, 0xA7	; 167
    20b4:	1f 4f       	sbci	r17, 0xFF	; 255
    20b6:	bc 01       	movw	r22, r24
    20b8:	cd 01       	movw	r24, r26
    20ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20be:	dc 01       	movw	r26, r24
    20c0:	cb 01       	movw	r24, r22
    20c2:	f8 01       	movw	r30, r16
    20c4:	91 83       	std	Z+1, r25	; 0x01
    20c6:	80 83       	st	Z, r24
    20c8:	1f c0       	rjmp	.+62     	; 0x2108 <LCD_VidInit+0x2a6>
    20ca:	fe 01       	movw	r30, r28
    20cc:	e9 5a       	subi	r30, 0xA9	; 169
    20ce:	ff 4f       	sbci	r31, 0xFF	; 255
    20d0:	88 ec       	ldi	r24, 0xC8	; 200
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	91 83       	std	Z+1, r25	; 0x01
    20d6:	80 83       	st	Z, r24
    20d8:	fe 01       	movw	r30, r28
    20da:	e9 5a       	subi	r30, 0xA9	; 169
    20dc:	ff 4f       	sbci	r31, 0xFF	; 255
    20de:	80 81       	ld	r24, Z
    20e0:	91 81       	ldd	r25, Z+1	; 0x01
    20e2:	01 97       	sbiw	r24, 0x01	; 1
    20e4:	f1 f7       	brne	.-4      	; 0x20e2 <LCD_VidInit+0x280>
    20e6:	fe 01       	movw	r30, r28
    20e8:	e9 5a       	subi	r30, 0xA9	; 169
    20ea:	ff 4f       	sbci	r31, 0xFF	; 255
    20ec:	91 83       	std	Z+1, r25	; 0x01
    20ee:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20f0:	de 01       	movw	r26, r28
    20f2:	a7 5a       	subi	r26, 0xA7	; 167
    20f4:	bf 4f       	sbci	r27, 0xFF	; 255
    20f6:	fe 01       	movw	r30, r28
    20f8:	e7 5a       	subi	r30, 0xA7	; 167
    20fa:	ff 4f       	sbci	r31, 0xFF	; 255
    20fc:	80 81       	ld	r24, Z
    20fe:	91 81       	ldd	r25, Z+1	; 0x01
    2100:	01 97       	sbiw	r24, 0x01	; 1
    2102:	11 96       	adiw	r26, 0x01	; 1
    2104:	9c 93       	st	X, r25
    2106:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2108:	fe 01       	movw	r30, r28
    210a:	e7 5a       	subi	r30, 0xA7	; 167
    210c:	ff 4f       	sbci	r31, 0xFF	; 255
    210e:	80 81       	ld	r24, Z
    2110:	91 81       	ldd	r25, Z+1	; 0x01
    2112:	00 97       	sbiw	r24, 0x00	; 0
    2114:	d1 f6       	brne	.-76     	; 0x20ca <LCD_VidInit+0x268>
    2116:	27 c0       	rjmp	.+78     	; 0x2166 <LCD_VidInit+0x304>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2118:	8e 01       	movw	r16, r28
    211a:	07 5a       	subi	r16, 0xA7	; 167
    211c:	1f 4f       	sbci	r17, 0xFF	; 255
    211e:	fe 01       	movw	r30, r28
    2120:	e5 5a       	subi	r30, 0xA5	; 165
    2122:	ff 4f       	sbci	r31, 0xFF	; 255
    2124:	60 81       	ld	r22, Z
    2126:	71 81       	ldd	r23, Z+1	; 0x01
    2128:	82 81       	ldd	r24, Z+2	; 0x02
    212a:	93 81       	ldd	r25, Z+3	; 0x03
    212c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2130:	dc 01       	movw	r26, r24
    2132:	cb 01       	movw	r24, r22
    2134:	f8 01       	movw	r30, r16
    2136:	91 83       	std	Z+1, r25	; 0x01
    2138:	80 83       	st	Z, r24
    213a:	de 01       	movw	r26, r28
    213c:	ab 5a       	subi	r26, 0xAB	; 171
    213e:	bf 4f       	sbci	r27, 0xFF	; 255
    2140:	fe 01       	movw	r30, r28
    2142:	e7 5a       	subi	r30, 0xA7	; 167
    2144:	ff 4f       	sbci	r31, 0xFF	; 255
    2146:	80 81       	ld	r24, Z
    2148:	91 81       	ldd	r25, Z+1	; 0x01
    214a:	8d 93       	st	X+, r24
    214c:	9c 93       	st	X, r25
    214e:	fe 01       	movw	r30, r28
    2150:	eb 5a       	subi	r30, 0xAB	; 171
    2152:	ff 4f       	sbci	r31, 0xFF	; 255
    2154:	80 81       	ld	r24, Z
    2156:	91 81       	ldd	r25, Z+1	; 0x01
    2158:	01 97       	sbiw	r24, 0x01	; 1
    215a:	f1 f7       	brne	.-4      	; 0x2158 <LCD_VidInit+0x2f6>
    215c:	fe 01       	movw	r30, r28
    215e:	eb 5a       	subi	r30, 0xAB	; 171
    2160:	ff 4f       	sbci	r31, 0xFF	; 255
    2162:	91 83       	std	Z+1, r25	; 0x01
    2164:	80 83       	st	Z, r24
	_delay_ms(1);
	DIO_VidSetPortDirection	( LDcopy_u8PORT,OUTPUT);
    2166:	82 e0       	ldi	r24, 0x02	; 2
    2168:	61 e0       	ldi	r22, 0x01	; 1
    216a:	0e 94 cc 09 	call	0x1398	; 0x1398 <DIO_VidSetPortDirection>
	LCD_VidSendCommand(0x33);
    216e:	83 e3       	ldi	r24, 0x33	; 51
    2170:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <LCD_VidSendCommand>
    2174:	fe 01       	movw	r30, r28
    2176:	ef 5a       	subi	r30, 0xAF	; 175
    2178:	ff 4f       	sbci	r31, 0xFF	; 255
    217a:	80 e0       	ldi	r24, 0x00	; 0
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	a0 e0       	ldi	r26, 0x00	; 0
    2180:	b0 e4       	ldi	r27, 0x40	; 64
    2182:	80 83       	st	Z, r24
    2184:	91 83       	std	Z+1, r25	; 0x01
    2186:	a2 83       	std	Z+2, r26	; 0x02
    2188:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    218a:	8e 01       	movw	r16, r28
    218c:	03 5b       	subi	r16, 0xB3	; 179
    218e:	1f 4f       	sbci	r17, 0xFF	; 255
    2190:	fe 01       	movw	r30, r28
    2192:	ef 5a       	subi	r30, 0xAF	; 175
    2194:	ff 4f       	sbci	r31, 0xFF	; 255
    2196:	60 81       	ld	r22, Z
    2198:	71 81       	ldd	r23, Z+1	; 0x01
    219a:	82 81       	ldd	r24, Z+2	; 0x02
    219c:	93 81       	ldd	r25, Z+3	; 0x03
    219e:	20 e0       	ldi	r18, 0x00	; 0
    21a0:	30 e0       	ldi	r19, 0x00	; 0
    21a2:	4a ef       	ldi	r20, 0xFA	; 250
    21a4:	54 e4       	ldi	r21, 0x44	; 68
    21a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21aa:	dc 01       	movw	r26, r24
    21ac:	cb 01       	movw	r24, r22
    21ae:	f8 01       	movw	r30, r16
    21b0:	80 83       	st	Z, r24
    21b2:	91 83       	std	Z+1, r25	; 0x01
    21b4:	a2 83       	std	Z+2, r26	; 0x02
    21b6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21b8:	fe 01       	movw	r30, r28
    21ba:	e3 5b       	subi	r30, 0xB3	; 179
    21bc:	ff 4f       	sbci	r31, 0xFF	; 255
    21be:	60 81       	ld	r22, Z
    21c0:	71 81       	ldd	r23, Z+1	; 0x01
    21c2:	82 81       	ldd	r24, Z+2	; 0x02
    21c4:	93 81       	ldd	r25, Z+3	; 0x03
    21c6:	20 e0       	ldi	r18, 0x00	; 0
    21c8:	30 e0       	ldi	r19, 0x00	; 0
    21ca:	40 e8       	ldi	r20, 0x80	; 128
    21cc:	5f e3       	ldi	r21, 0x3F	; 63
    21ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21d2:	88 23       	and	r24, r24
    21d4:	44 f4       	brge	.+16     	; 0x21e6 <LCD_VidInit+0x384>
		__ticks = 1;
    21d6:	fe 01       	movw	r30, r28
    21d8:	e5 5b       	subi	r30, 0xB5	; 181
    21da:	ff 4f       	sbci	r31, 0xFF	; 255
    21dc:	81 e0       	ldi	r24, 0x01	; 1
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	91 83       	std	Z+1, r25	; 0x01
    21e2:	80 83       	st	Z, r24
    21e4:	64 c0       	rjmp	.+200    	; 0x22ae <LCD_VidInit+0x44c>
	else if (__tmp > 65535)
    21e6:	fe 01       	movw	r30, r28
    21e8:	e3 5b       	subi	r30, 0xB3	; 179
    21ea:	ff 4f       	sbci	r31, 0xFF	; 255
    21ec:	60 81       	ld	r22, Z
    21ee:	71 81       	ldd	r23, Z+1	; 0x01
    21f0:	82 81       	ldd	r24, Z+2	; 0x02
    21f2:	93 81       	ldd	r25, Z+3	; 0x03
    21f4:	20 e0       	ldi	r18, 0x00	; 0
    21f6:	3f ef       	ldi	r19, 0xFF	; 255
    21f8:	4f e7       	ldi	r20, 0x7F	; 127
    21fa:	57 e4       	ldi	r21, 0x47	; 71
    21fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2200:	18 16       	cp	r1, r24
    2202:	0c f0       	brlt	.+2      	; 0x2206 <LCD_VidInit+0x3a4>
    2204:	43 c0       	rjmp	.+134    	; 0x228c <LCD_VidInit+0x42a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2206:	fe 01       	movw	r30, r28
    2208:	ef 5a       	subi	r30, 0xAF	; 175
    220a:	ff 4f       	sbci	r31, 0xFF	; 255
    220c:	60 81       	ld	r22, Z
    220e:	71 81       	ldd	r23, Z+1	; 0x01
    2210:	82 81       	ldd	r24, Z+2	; 0x02
    2212:	93 81       	ldd	r25, Z+3	; 0x03
    2214:	20 e0       	ldi	r18, 0x00	; 0
    2216:	30 e0       	ldi	r19, 0x00	; 0
    2218:	40 e2       	ldi	r20, 0x20	; 32
    221a:	51 e4       	ldi	r21, 0x41	; 65
    221c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2220:	dc 01       	movw	r26, r24
    2222:	cb 01       	movw	r24, r22
    2224:	8e 01       	movw	r16, r28
    2226:	05 5b       	subi	r16, 0xB5	; 181
    2228:	1f 4f       	sbci	r17, 0xFF	; 255
    222a:	bc 01       	movw	r22, r24
    222c:	cd 01       	movw	r24, r26
    222e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2232:	dc 01       	movw	r26, r24
    2234:	cb 01       	movw	r24, r22
    2236:	f8 01       	movw	r30, r16
    2238:	91 83       	std	Z+1, r25	; 0x01
    223a:	80 83       	st	Z, r24
    223c:	1f c0       	rjmp	.+62     	; 0x227c <LCD_VidInit+0x41a>
    223e:	fe 01       	movw	r30, r28
    2240:	e7 5b       	subi	r30, 0xB7	; 183
    2242:	ff 4f       	sbci	r31, 0xFF	; 255
    2244:	88 ec       	ldi	r24, 0xC8	; 200
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	91 83       	std	Z+1, r25	; 0x01
    224a:	80 83       	st	Z, r24
    224c:	fe 01       	movw	r30, r28
    224e:	e7 5b       	subi	r30, 0xB7	; 183
    2250:	ff 4f       	sbci	r31, 0xFF	; 255
    2252:	80 81       	ld	r24, Z
    2254:	91 81       	ldd	r25, Z+1	; 0x01
    2256:	01 97       	sbiw	r24, 0x01	; 1
    2258:	f1 f7       	brne	.-4      	; 0x2256 <LCD_VidInit+0x3f4>
    225a:	fe 01       	movw	r30, r28
    225c:	e7 5b       	subi	r30, 0xB7	; 183
    225e:	ff 4f       	sbci	r31, 0xFF	; 255
    2260:	91 83       	std	Z+1, r25	; 0x01
    2262:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2264:	de 01       	movw	r26, r28
    2266:	a5 5b       	subi	r26, 0xB5	; 181
    2268:	bf 4f       	sbci	r27, 0xFF	; 255
    226a:	fe 01       	movw	r30, r28
    226c:	e5 5b       	subi	r30, 0xB5	; 181
    226e:	ff 4f       	sbci	r31, 0xFF	; 255
    2270:	80 81       	ld	r24, Z
    2272:	91 81       	ldd	r25, Z+1	; 0x01
    2274:	01 97       	sbiw	r24, 0x01	; 1
    2276:	11 96       	adiw	r26, 0x01	; 1
    2278:	9c 93       	st	X, r25
    227a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    227c:	fe 01       	movw	r30, r28
    227e:	e5 5b       	subi	r30, 0xB5	; 181
    2280:	ff 4f       	sbci	r31, 0xFF	; 255
    2282:	80 81       	ld	r24, Z
    2284:	91 81       	ldd	r25, Z+1	; 0x01
    2286:	00 97       	sbiw	r24, 0x00	; 0
    2288:	d1 f6       	brne	.-76     	; 0x223e <LCD_VidInit+0x3dc>
    228a:	27 c0       	rjmp	.+78     	; 0x22da <LCD_VidInit+0x478>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    228c:	8e 01       	movw	r16, r28
    228e:	05 5b       	subi	r16, 0xB5	; 181
    2290:	1f 4f       	sbci	r17, 0xFF	; 255
    2292:	fe 01       	movw	r30, r28
    2294:	e3 5b       	subi	r30, 0xB3	; 179
    2296:	ff 4f       	sbci	r31, 0xFF	; 255
    2298:	60 81       	ld	r22, Z
    229a:	71 81       	ldd	r23, Z+1	; 0x01
    229c:	82 81       	ldd	r24, Z+2	; 0x02
    229e:	93 81       	ldd	r25, Z+3	; 0x03
    22a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a4:	dc 01       	movw	r26, r24
    22a6:	cb 01       	movw	r24, r22
    22a8:	f8 01       	movw	r30, r16
    22aa:	91 83       	std	Z+1, r25	; 0x01
    22ac:	80 83       	st	Z, r24
    22ae:	de 01       	movw	r26, r28
    22b0:	a9 5b       	subi	r26, 0xB9	; 185
    22b2:	bf 4f       	sbci	r27, 0xFF	; 255
    22b4:	fe 01       	movw	r30, r28
    22b6:	e5 5b       	subi	r30, 0xB5	; 181
    22b8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ba:	80 81       	ld	r24, Z
    22bc:	91 81       	ldd	r25, Z+1	; 0x01
    22be:	8d 93       	st	X+, r24
    22c0:	9c 93       	st	X, r25
    22c2:	fe 01       	movw	r30, r28
    22c4:	e9 5b       	subi	r30, 0xB9	; 185
    22c6:	ff 4f       	sbci	r31, 0xFF	; 255
    22c8:	80 81       	ld	r24, Z
    22ca:	91 81       	ldd	r25, Z+1	; 0x01
    22cc:	01 97       	sbiw	r24, 0x01	; 1
    22ce:	f1 f7       	brne	.-4      	; 0x22cc <LCD_VidInit+0x46a>
    22d0:	fe 01       	movw	r30, r28
    22d2:	e9 5b       	subi	r30, 0xB9	; 185
    22d4:	ff 4f       	sbci	r31, 0xFF	; 255
    22d6:	91 83       	std	Z+1, r25	; 0x01
    22d8:	80 83       	st	Z, r24
	_delay_ms(2);
	LCD_VidSendCommand(0x32);	/* Send for 4 bit initialization of LCD  */
    22da:	82 e3       	ldi	r24, 0x32	; 50
    22dc:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <LCD_VidSendCommand>
    22e0:	fe 01       	movw	r30, r28
    22e2:	ed 5b       	subi	r30, 0xBD	; 189
    22e4:	ff 4f       	sbci	r31, 0xFF	; 255
    22e6:	80 e0       	ldi	r24, 0x00	; 0
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	a0 e0       	ldi	r26, 0x00	; 0
    22ec:	b0 e4       	ldi	r27, 0x40	; 64
    22ee:	80 83       	st	Z, r24
    22f0:	91 83       	std	Z+1, r25	; 0x01
    22f2:	a2 83       	std	Z+2, r26	; 0x02
    22f4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22f6:	8e 01       	movw	r16, r28
    22f8:	01 5c       	subi	r16, 0xC1	; 193
    22fa:	1f 4f       	sbci	r17, 0xFF	; 255
    22fc:	fe 01       	movw	r30, r28
    22fe:	ed 5b       	subi	r30, 0xBD	; 189
    2300:	ff 4f       	sbci	r31, 0xFF	; 255
    2302:	60 81       	ld	r22, Z
    2304:	71 81       	ldd	r23, Z+1	; 0x01
    2306:	82 81       	ldd	r24, Z+2	; 0x02
    2308:	93 81       	ldd	r25, Z+3	; 0x03
    230a:	20 e0       	ldi	r18, 0x00	; 0
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	4a ef       	ldi	r20, 0xFA	; 250
    2310:	54 e4       	ldi	r21, 0x44	; 68
    2312:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2316:	dc 01       	movw	r26, r24
    2318:	cb 01       	movw	r24, r22
    231a:	f8 01       	movw	r30, r16
    231c:	80 83       	st	Z, r24
    231e:	91 83       	std	Z+1, r25	; 0x01
    2320:	a2 83       	std	Z+2, r26	; 0x02
    2322:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2324:	fe 01       	movw	r30, r28
    2326:	ff 96       	adiw	r30, 0x3f	; 63
    2328:	60 81       	ld	r22, Z
    232a:	71 81       	ldd	r23, Z+1	; 0x01
    232c:	82 81       	ldd	r24, Z+2	; 0x02
    232e:	93 81       	ldd	r25, Z+3	; 0x03
    2330:	20 e0       	ldi	r18, 0x00	; 0
    2332:	30 e0       	ldi	r19, 0x00	; 0
    2334:	40 e8       	ldi	r20, 0x80	; 128
    2336:	5f e3       	ldi	r21, 0x3F	; 63
    2338:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    233c:	88 23       	and	r24, r24
    233e:	2c f4       	brge	.+10     	; 0x234a <LCD_VidInit+0x4e8>
		__ticks = 1;
    2340:	81 e0       	ldi	r24, 0x01	; 1
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	9e af       	std	Y+62, r25	; 0x3e
    2346:	8d af       	std	Y+61, r24	; 0x3d
    2348:	46 c0       	rjmp	.+140    	; 0x23d6 <LCD_VidInit+0x574>
	else if (__tmp > 65535)
    234a:	fe 01       	movw	r30, r28
    234c:	ff 96       	adiw	r30, 0x3f	; 63
    234e:	60 81       	ld	r22, Z
    2350:	71 81       	ldd	r23, Z+1	; 0x01
    2352:	82 81       	ldd	r24, Z+2	; 0x02
    2354:	93 81       	ldd	r25, Z+3	; 0x03
    2356:	20 e0       	ldi	r18, 0x00	; 0
    2358:	3f ef       	ldi	r19, 0xFF	; 255
    235a:	4f e7       	ldi	r20, 0x7F	; 127
    235c:	57 e4       	ldi	r21, 0x47	; 71
    235e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2362:	18 16       	cp	r1, r24
    2364:	64 f5       	brge	.+88     	; 0x23be <LCD_VidInit+0x55c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2366:	fe 01       	movw	r30, r28
    2368:	ed 5b       	subi	r30, 0xBD	; 189
    236a:	ff 4f       	sbci	r31, 0xFF	; 255
    236c:	60 81       	ld	r22, Z
    236e:	71 81       	ldd	r23, Z+1	; 0x01
    2370:	82 81       	ldd	r24, Z+2	; 0x02
    2372:	93 81       	ldd	r25, Z+3	; 0x03
    2374:	20 e0       	ldi	r18, 0x00	; 0
    2376:	30 e0       	ldi	r19, 0x00	; 0
    2378:	40 e2       	ldi	r20, 0x20	; 32
    237a:	51 e4       	ldi	r21, 0x41	; 65
    237c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2380:	dc 01       	movw	r26, r24
    2382:	cb 01       	movw	r24, r22
    2384:	bc 01       	movw	r22, r24
    2386:	cd 01       	movw	r24, r26
    2388:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    238c:	dc 01       	movw	r26, r24
    238e:	cb 01       	movw	r24, r22
    2390:	9e af       	std	Y+62, r25	; 0x3e
    2392:	8d af       	std	Y+61, r24	; 0x3d
    2394:	0f c0       	rjmp	.+30     	; 0x23b4 <LCD_VidInit+0x552>
    2396:	88 ec       	ldi	r24, 0xC8	; 200
    2398:	90 e0       	ldi	r25, 0x00	; 0
    239a:	9c af       	std	Y+60, r25	; 0x3c
    239c:	8b af       	std	Y+59, r24	; 0x3b
    239e:	8b ad       	ldd	r24, Y+59	; 0x3b
    23a0:	9c ad       	ldd	r25, Y+60	; 0x3c
    23a2:	01 97       	sbiw	r24, 0x01	; 1
    23a4:	f1 f7       	brne	.-4      	; 0x23a2 <LCD_VidInit+0x540>
    23a6:	9c af       	std	Y+60, r25	; 0x3c
    23a8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23aa:	8d ad       	ldd	r24, Y+61	; 0x3d
    23ac:	9e ad       	ldd	r25, Y+62	; 0x3e
    23ae:	01 97       	sbiw	r24, 0x01	; 1
    23b0:	9e af       	std	Y+62, r25	; 0x3e
    23b2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23b4:	8d ad       	ldd	r24, Y+61	; 0x3d
    23b6:	9e ad       	ldd	r25, Y+62	; 0x3e
    23b8:	00 97       	sbiw	r24, 0x00	; 0
    23ba:	69 f7       	brne	.-38     	; 0x2396 <LCD_VidInit+0x534>
    23bc:	16 c0       	rjmp	.+44     	; 0x23ea <LCD_VidInit+0x588>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23be:	fe 01       	movw	r30, r28
    23c0:	ff 96       	adiw	r30, 0x3f	; 63
    23c2:	60 81       	ld	r22, Z
    23c4:	71 81       	ldd	r23, Z+1	; 0x01
    23c6:	82 81       	ldd	r24, Z+2	; 0x02
    23c8:	93 81       	ldd	r25, Z+3	; 0x03
    23ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ce:	dc 01       	movw	r26, r24
    23d0:	cb 01       	movw	r24, r22
    23d2:	9e af       	std	Y+62, r25	; 0x3e
    23d4:	8d af       	std	Y+61, r24	; 0x3d
    23d6:	8d ad       	ldd	r24, Y+61	; 0x3d
    23d8:	9e ad       	ldd	r25, Y+62	; 0x3e
    23da:	9a af       	std	Y+58, r25	; 0x3a
    23dc:	89 af       	std	Y+57, r24	; 0x39
    23de:	89 ad       	ldd	r24, Y+57	; 0x39
    23e0:	9a ad       	ldd	r25, Y+58	; 0x3a
    23e2:	01 97       	sbiw	r24, 0x01	; 1
    23e4:	f1 f7       	brne	.-4      	; 0x23e2 <LCD_VidInit+0x580>
    23e6:	9a af       	std	Y+58, r25	; 0x3a
    23e8:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(2);
	LCD_VidSendCommand(0x28);	/* 2 line, 5*7 matrix in 4-bit mode */
    23ea:	88 e2       	ldi	r24, 0x28	; 40
    23ec:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <LCD_VidSendCommand>
    23f0:	80 e0       	ldi	r24, 0x00	; 0
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	a0 e0       	ldi	r26, 0x00	; 0
    23f6:	b0 e4       	ldi	r27, 0x40	; 64
    23f8:	8d ab       	std	Y+53, r24	; 0x35
    23fa:	9e ab       	std	Y+54, r25	; 0x36
    23fc:	af ab       	std	Y+55, r26	; 0x37
    23fe:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2400:	6d a9       	ldd	r22, Y+53	; 0x35
    2402:	7e a9       	ldd	r23, Y+54	; 0x36
    2404:	8f a9       	ldd	r24, Y+55	; 0x37
    2406:	98 ad       	ldd	r25, Y+56	; 0x38
    2408:	20 e0       	ldi	r18, 0x00	; 0
    240a:	30 e0       	ldi	r19, 0x00	; 0
    240c:	4a ef       	ldi	r20, 0xFA	; 250
    240e:	54 e4       	ldi	r21, 0x44	; 68
    2410:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2414:	dc 01       	movw	r26, r24
    2416:	cb 01       	movw	r24, r22
    2418:	89 ab       	std	Y+49, r24	; 0x31
    241a:	9a ab       	std	Y+50, r25	; 0x32
    241c:	ab ab       	std	Y+51, r26	; 0x33
    241e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2420:	69 a9       	ldd	r22, Y+49	; 0x31
    2422:	7a a9       	ldd	r23, Y+50	; 0x32
    2424:	8b a9       	ldd	r24, Y+51	; 0x33
    2426:	9c a9       	ldd	r25, Y+52	; 0x34
    2428:	20 e0       	ldi	r18, 0x00	; 0
    242a:	30 e0       	ldi	r19, 0x00	; 0
    242c:	40 e8       	ldi	r20, 0x80	; 128
    242e:	5f e3       	ldi	r21, 0x3F	; 63
    2430:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2434:	88 23       	and	r24, r24
    2436:	2c f4       	brge	.+10     	; 0x2442 <LCD_VidInit+0x5e0>
		__ticks = 1;
    2438:	81 e0       	ldi	r24, 0x01	; 1
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	98 ab       	std	Y+48, r25	; 0x30
    243e:	8f a7       	std	Y+47, r24	; 0x2f
    2440:	3f c0       	rjmp	.+126    	; 0x24c0 <LCD_VidInit+0x65e>
	else if (__tmp > 65535)
    2442:	69 a9       	ldd	r22, Y+49	; 0x31
    2444:	7a a9       	ldd	r23, Y+50	; 0x32
    2446:	8b a9       	ldd	r24, Y+51	; 0x33
    2448:	9c a9       	ldd	r25, Y+52	; 0x34
    244a:	20 e0       	ldi	r18, 0x00	; 0
    244c:	3f ef       	ldi	r19, 0xFF	; 255
    244e:	4f e7       	ldi	r20, 0x7F	; 127
    2450:	57 e4       	ldi	r21, 0x47	; 71
    2452:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2456:	18 16       	cp	r1, r24
    2458:	4c f5       	brge	.+82     	; 0x24ac <LCD_VidInit+0x64a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    245a:	6d a9       	ldd	r22, Y+53	; 0x35
    245c:	7e a9       	ldd	r23, Y+54	; 0x36
    245e:	8f a9       	ldd	r24, Y+55	; 0x37
    2460:	98 ad       	ldd	r25, Y+56	; 0x38
    2462:	20 e0       	ldi	r18, 0x00	; 0
    2464:	30 e0       	ldi	r19, 0x00	; 0
    2466:	40 e2       	ldi	r20, 0x20	; 32
    2468:	51 e4       	ldi	r21, 0x41	; 65
    246a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    246e:	dc 01       	movw	r26, r24
    2470:	cb 01       	movw	r24, r22
    2472:	bc 01       	movw	r22, r24
    2474:	cd 01       	movw	r24, r26
    2476:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    247a:	dc 01       	movw	r26, r24
    247c:	cb 01       	movw	r24, r22
    247e:	98 ab       	std	Y+48, r25	; 0x30
    2480:	8f a7       	std	Y+47, r24	; 0x2f
    2482:	0f c0       	rjmp	.+30     	; 0x24a2 <LCD_VidInit+0x640>
    2484:	88 ec       	ldi	r24, 0xC8	; 200
    2486:	90 e0       	ldi	r25, 0x00	; 0
    2488:	9e a7       	std	Y+46, r25	; 0x2e
    248a:	8d a7       	std	Y+45, r24	; 0x2d
    248c:	8d a5       	ldd	r24, Y+45	; 0x2d
    248e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2490:	01 97       	sbiw	r24, 0x01	; 1
    2492:	f1 f7       	brne	.-4      	; 0x2490 <LCD_VidInit+0x62e>
    2494:	9e a7       	std	Y+46, r25	; 0x2e
    2496:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2498:	8f a5       	ldd	r24, Y+47	; 0x2f
    249a:	98 a9       	ldd	r25, Y+48	; 0x30
    249c:	01 97       	sbiw	r24, 0x01	; 1
    249e:	98 ab       	std	Y+48, r25	; 0x30
    24a0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    24a4:	98 a9       	ldd	r25, Y+48	; 0x30
    24a6:	00 97       	sbiw	r24, 0x00	; 0
    24a8:	69 f7       	brne	.-38     	; 0x2484 <LCD_VidInit+0x622>
    24aa:	14 c0       	rjmp	.+40     	; 0x24d4 <LCD_VidInit+0x672>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ac:	69 a9       	ldd	r22, Y+49	; 0x31
    24ae:	7a a9       	ldd	r23, Y+50	; 0x32
    24b0:	8b a9       	ldd	r24, Y+51	; 0x33
    24b2:	9c a9       	ldd	r25, Y+52	; 0x34
    24b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24b8:	dc 01       	movw	r26, r24
    24ba:	cb 01       	movw	r24, r22
    24bc:	98 ab       	std	Y+48, r25	; 0x30
    24be:	8f a7       	std	Y+47, r24	; 0x2f
    24c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    24c2:	98 a9       	ldd	r25, Y+48	; 0x30
    24c4:	9c a7       	std	Y+44, r25	; 0x2c
    24c6:	8b a7       	std	Y+43, r24	; 0x2b
    24c8:	8b a5       	ldd	r24, Y+43	; 0x2b
    24ca:	9c a5       	ldd	r25, Y+44	; 0x2c
    24cc:	01 97       	sbiw	r24, 0x01	; 1
    24ce:	f1 f7       	brne	.-4      	; 0x24cc <LCD_VidInit+0x66a>
    24d0:	9c a7       	std	Y+44, r25	; 0x2c
    24d2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	LCD_VidSendCommand(0x0c);	/* Display on cursor off */
    24d4:	8c e0       	ldi	r24, 0x0C	; 12
    24d6:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <LCD_VidSendCommand>
    24da:	80 e0       	ldi	r24, 0x00	; 0
    24dc:	90 e0       	ldi	r25, 0x00	; 0
    24de:	a0 e0       	ldi	r26, 0x00	; 0
    24e0:	b0 e4       	ldi	r27, 0x40	; 64
    24e2:	8f a3       	std	Y+39, r24	; 0x27
    24e4:	98 a7       	std	Y+40, r25	; 0x28
    24e6:	a9 a7       	std	Y+41, r26	; 0x29
    24e8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ea:	6f a1       	ldd	r22, Y+39	; 0x27
    24ec:	78 a5       	ldd	r23, Y+40	; 0x28
    24ee:	89 a5       	ldd	r24, Y+41	; 0x29
    24f0:	9a a5       	ldd	r25, Y+42	; 0x2a
    24f2:	20 e0       	ldi	r18, 0x00	; 0
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	4a ef       	ldi	r20, 0xFA	; 250
    24f8:	54 e4       	ldi	r21, 0x44	; 68
    24fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24fe:	dc 01       	movw	r26, r24
    2500:	cb 01       	movw	r24, r22
    2502:	8b a3       	std	Y+35, r24	; 0x23
    2504:	9c a3       	std	Y+36, r25	; 0x24
    2506:	ad a3       	std	Y+37, r26	; 0x25
    2508:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    250a:	6b a1       	ldd	r22, Y+35	; 0x23
    250c:	7c a1       	ldd	r23, Y+36	; 0x24
    250e:	8d a1       	ldd	r24, Y+37	; 0x25
    2510:	9e a1       	ldd	r25, Y+38	; 0x26
    2512:	20 e0       	ldi	r18, 0x00	; 0
    2514:	30 e0       	ldi	r19, 0x00	; 0
    2516:	40 e8       	ldi	r20, 0x80	; 128
    2518:	5f e3       	ldi	r21, 0x3F	; 63
    251a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    251e:	88 23       	and	r24, r24
    2520:	2c f4       	brge	.+10     	; 0x252c <LCD_VidInit+0x6ca>
		__ticks = 1;
    2522:	81 e0       	ldi	r24, 0x01	; 1
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	9a a3       	std	Y+34, r25	; 0x22
    2528:	89 a3       	std	Y+33, r24	; 0x21
    252a:	3f c0       	rjmp	.+126    	; 0x25aa <LCD_VidInit+0x748>
	else if (__tmp > 65535)
    252c:	6b a1       	ldd	r22, Y+35	; 0x23
    252e:	7c a1       	ldd	r23, Y+36	; 0x24
    2530:	8d a1       	ldd	r24, Y+37	; 0x25
    2532:	9e a1       	ldd	r25, Y+38	; 0x26
    2534:	20 e0       	ldi	r18, 0x00	; 0
    2536:	3f ef       	ldi	r19, 0xFF	; 255
    2538:	4f e7       	ldi	r20, 0x7F	; 127
    253a:	57 e4       	ldi	r21, 0x47	; 71
    253c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2540:	18 16       	cp	r1, r24
    2542:	4c f5       	brge	.+82     	; 0x2596 <LCD_VidInit+0x734>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2544:	6f a1       	ldd	r22, Y+39	; 0x27
    2546:	78 a5       	ldd	r23, Y+40	; 0x28
    2548:	89 a5       	ldd	r24, Y+41	; 0x29
    254a:	9a a5       	ldd	r25, Y+42	; 0x2a
    254c:	20 e0       	ldi	r18, 0x00	; 0
    254e:	30 e0       	ldi	r19, 0x00	; 0
    2550:	40 e2       	ldi	r20, 0x20	; 32
    2552:	51 e4       	ldi	r21, 0x41	; 65
    2554:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2558:	dc 01       	movw	r26, r24
    255a:	cb 01       	movw	r24, r22
    255c:	bc 01       	movw	r22, r24
    255e:	cd 01       	movw	r24, r26
    2560:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2564:	dc 01       	movw	r26, r24
    2566:	cb 01       	movw	r24, r22
    2568:	9a a3       	std	Y+34, r25	; 0x22
    256a:	89 a3       	std	Y+33, r24	; 0x21
    256c:	0f c0       	rjmp	.+30     	; 0x258c <LCD_VidInit+0x72a>
    256e:	88 ec       	ldi	r24, 0xC8	; 200
    2570:	90 e0       	ldi	r25, 0x00	; 0
    2572:	98 a3       	std	Y+32, r25	; 0x20
    2574:	8f 8f       	std	Y+31, r24	; 0x1f
    2576:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2578:	98 a1       	ldd	r25, Y+32	; 0x20
    257a:	01 97       	sbiw	r24, 0x01	; 1
    257c:	f1 f7       	brne	.-4      	; 0x257a <LCD_VidInit+0x718>
    257e:	98 a3       	std	Y+32, r25	; 0x20
    2580:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2582:	89 a1       	ldd	r24, Y+33	; 0x21
    2584:	9a a1       	ldd	r25, Y+34	; 0x22
    2586:	01 97       	sbiw	r24, 0x01	; 1
    2588:	9a a3       	std	Y+34, r25	; 0x22
    258a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    258c:	89 a1       	ldd	r24, Y+33	; 0x21
    258e:	9a a1       	ldd	r25, Y+34	; 0x22
    2590:	00 97       	sbiw	r24, 0x00	; 0
    2592:	69 f7       	brne	.-38     	; 0x256e <LCD_VidInit+0x70c>
    2594:	14 c0       	rjmp	.+40     	; 0x25be <LCD_VidInit+0x75c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2596:	6b a1       	ldd	r22, Y+35	; 0x23
    2598:	7c a1       	ldd	r23, Y+36	; 0x24
    259a:	8d a1       	ldd	r24, Y+37	; 0x25
    259c:	9e a1       	ldd	r25, Y+38	; 0x26
    259e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25a2:	dc 01       	movw	r26, r24
    25a4:	cb 01       	movw	r24, r22
    25a6:	9a a3       	std	Y+34, r25	; 0x22
    25a8:	89 a3       	std	Y+33, r24	; 0x21
    25aa:	89 a1       	ldd	r24, Y+33	; 0x21
    25ac:	9a a1       	ldd	r25, Y+34	; 0x22
    25ae:	9e 8f       	std	Y+30, r25	; 0x1e
    25b0:	8d 8f       	std	Y+29, r24	; 0x1d
    25b2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25b4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25b6:	01 97       	sbiw	r24, 0x01	; 1
    25b8:	f1 f7       	brne	.-4      	; 0x25b6 <LCD_VidInit+0x754>
    25ba:	9e 8f       	std	Y+30, r25	; 0x1e
    25bc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	LCD_VidSendCommand(0x06);	/* Increment cursor (shift cursor to right) */
    25be:	86 e0       	ldi	r24, 0x06	; 6
    25c0:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <LCD_VidSendCommand>
    25c4:	80 e0       	ldi	r24, 0x00	; 0
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	a0 e0       	ldi	r26, 0x00	; 0
    25ca:	b0 e4       	ldi	r27, 0x40	; 64
    25cc:	89 8f       	std	Y+25, r24	; 0x19
    25ce:	9a 8f       	std	Y+26, r25	; 0x1a
    25d0:	ab 8f       	std	Y+27, r26	; 0x1b
    25d2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25d4:	69 8d       	ldd	r22, Y+25	; 0x19
    25d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25dc:	20 e0       	ldi	r18, 0x00	; 0
    25de:	30 e0       	ldi	r19, 0x00	; 0
    25e0:	4a ef       	ldi	r20, 0xFA	; 250
    25e2:	54 e4       	ldi	r21, 0x44	; 68
    25e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25e8:	dc 01       	movw	r26, r24
    25ea:	cb 01       	movw	r24, r22
    25ec:	8d 8b       	std	Y+21, r24	; 0x15
    25ee:	9e 8b       	std	Y+22, r25	; 0x16
    25f0:	af 8b       	std	Y+23, r26	; 0x17
    25f2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    25f4:	6d 89       	ldd	r22, Y+21	; 0x15
    25f6:	7e 89       	ldd	r23, Y+22	; 0x16
    25f8:	8f 89       	ldd	r24, Y+23	; 0x17
    25fa:	98 8d       	ldd	r25, Y+24	; 0x18
    25fc:	20 e0       	ldi	r18, 0x00	; 0
    25fe:	30 e0       	ldi	r19, 0x00	; 0
    2600:	40 e8       	ldi	r20, 0x80	; 128
    2602:	5f e3       	ldi	r21, 0x3F	; 63
    2604:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2608:	88 23       	and	r24, r24
    260a:	2c f4       	brge	.+10     	; 0x2616 <LCD_VidInit+0x7b4>
		__ticks = 1;
    260c:	81 e0       	ldi	r24, 0x01	; 1
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	9c 8b       	std	Y+20, r25	; 0x14
    2612:	8b 8b       	std	Y+19, r24	; 0x13
    2614:	3f c0       	rjmp	.+126    	; 0x2694 <LCD_VidInit+0x832>
	else if (__tmp > 65535)
    2616:	6d 89       	ldd	r22, Y+21	; 0x15
    2618:	7e 89       	ldd	r23, Y+22	; 0x16
    261a:	8f 89       	ldd	r24, Y+23	; 0x17
    261c:	98 8d       	ldd	r25, Y+24	; 0x18
    261e:	20 e0       	ldi	r18, 0x00	; 0
    2620:	3f ef       	ldi	r19, 0xFF	; 255
    2622:	4f e7       	ldi	r20, 0x7F	; 127
    2624:	57 e4       	ldi	r21, 0x47	; 71
    2626:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    262a:	18 16       	cp	r1, r24
    262c:	4c f5       	brge	.+82     	; 0x2680 <LCD_VidInit+0x81e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    262e:	69 8d       	ldd	r22, Y+25	; 0x19
    2630:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2632:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2634:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2636:	20 e0       	ldi	r18, 0x00	; 0
    2638:	30 e0       	ldi	r19, 0x00	; 0
    263a:	40 e2       	ldi	r20, 0x20	; 32
    263c:	51 e4       	ldi	r21, 0x41	; 65
    263e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2642:	dc 01       	movw	r26, r24
    2644:	cb 01       	movw	r24, r22
    2646:	bc 01       	movw	r22, r24
    2648:	cd 01       	movw	r24, r26
    264a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    264e:	dc 01       	movw	r26, r24
    2650:	cb 01       	movw	r24, r22
    2652:	9c 8b       	std	Y+20, r25	; 0x14
    2654:	8b 8b       	std	Y+19, r24	; 0x13
    2656:	0f c0       	rjmp	.+30     	; 0x2676 <LCD_VidInit+0x814>
    2658:	88 ec       	ldi	r24, 0xC8	; 200
    265a:	90 e0       	ldi	r25, 0x00	; 0
    265c:	9a 8b       	std	Y+18, r25	; 0x12
    265e:	89 8b       	std	Y+17, r24	; 0x11
    2660:	89 89       	ldd	r24, Y+17	; 0x11
    2662:	9a 89       	ldd	r25, Y+18	; 0x12
    2664:	01 97       	sbiw	r24, 0x01	; 1
    2666:	f1 f7       	brne	.-4      	; 0x2664 <LCD_VidInit+0x802>
    2668:	9a 8b       	std	Y+18, r25	; 0x12
    266a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    266c:	8b 89       	ldd	r24, Y+19	; 0x13
    266e:	9c 89       	ldd	r25, Y+20	; 0x14
    2670:	01 97       	sbiw	r24, 0x01	; 1
    2672:	9c 8b       	std	Y+20, r25	; 0x14
    2674:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2676:	8b 89       	ldd	r24, Y+19	; 0x13
    2678:	9c 89       	ldd	r25, Y+20	; 0x14
    267a:	00 97       	sbiw	r24, 0x00	; 0
    267c:	69 f7       	brne	.-38     	; 0x2658 <LCD_VidInit+0x7f6>
    267e:	14 c0       	rjmp	.+40     	; 0x26a8 <LCD_VidInit+0x846>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2680:	6d 89       	ldd	r22, Y+21	; 0x15
    2682:	7e 89       	ldd	r23, Y+22	; 0x16
    2684:	8f 89       	ldd	r24, Y+23	; 0x17
    2686:	98 8d       	ldd	r25, Y+24	; 0x18
    2688:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    268c:	dc 01       	movw	r26, r24
    268e:	cb 01       	movw	r24, r22
    2690:	9c 8b       	std	Y+20, r25	; 0x14
    2692:	8b 8b       	std	Y+19, r24	; 0x13
    2694:	8b 89       	ldd	r24, Y+19	; 0x13
    2696:	9c 89       	ldd	r25, Y+20	; 0x14
    2698:	98 8b       	std	Y+16, r25	; 0x10
    269a:	8f 87       	std	Y+15, r24	; 0x0f
    269c:	8f 85       	ldd	r24, Y+15	; 0x0f
    269e:	98 89       	ldd	r25, Y+16	; 0x10
    26a0:	01 97       	sbiw	r24, 0x01	; 1
    26a2:	f1 f7       	brne	.-4      	; 0x26a0 <LCD_VidInit+0x83e>
    26a4:	98 8b       	std	Y+16, r25	; 0x10
    26a6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	LCD_VidSendCommand(0x01);	/* Clear display screen */
    26a8:	81 e0       	ldi	r24, 0x01	; 1
    26aa:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <LCD_VidSendCommand>
    26ae:	80 e0       	ldi	r24, 0x00	; 0
    26b0:	90 e0       	ldi	r25, 0x00	; 0
    26b2:	a0 e0       	ldi	r26, 0x00	; 0
    26b4:	b0 e4       	ldi	r27, 0x40	; 64
    26b6:	8b 87       	std	Y+11, r24	; 0x0b
    26b8:	9c 87       	std	Y+12, r25	; 0x0c
    26ba:	ad 87       	std	Y+13, r26	; 0x0d
    26bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26be:	6b 85       	ldd	r22, Y+11	; 0x0b
    26c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    26c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    26c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    26c6:	20 e0       	ldi	r18, 0x00	; 0
    26c8:	30 e0       	ldi	r19, 0x00	; 0
    26ca:	4a ef       	ldi	r20, 0xFA	; 250
    26cc:	54 e4       	ldi	r21, 0x44	; 68
    26ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26d2:	dc 01       	movw	r26, r24
    26d4:	cb 01       	movw	r24, r22
    26d6:	8f 83       	std	Y+7, r24	; 0x07
    26d8:	98 87       	std	Y+8, r25	; 0x08
    26da:	a9 87       	std	Y+9, r26	; 0x09
    26dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26de:	6f 81       	ldd	r22, Y+7	; 0x07
    26e0:	78 85       	ldd	r23, Y+8	; 0x08
    26e2:	89 85       	ldd	r24, Y+9	; 0x09
    26e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    26e6:	20 e0       	ldi	r18, 0x00	; 0
    26e8:	30 e0       	ldi	r19, 0x00	; 0
    26ea:	40 e8       	ldi	r20, 0x80	; 128
    26ec:	5f e3       	ldi	r21, 0x3F	; 63
    26ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26f2:	88 23       	and	r24, r24
    26f4:	2c f4       	brge	.+10     	; 0x2700 <LCD_VidInit+0x89e>
		__ticks = 1;
    26f6:	81 e0       	ldi	r24, 0x01	; 1
    26f8:	90 e0       	ldi	r25, 0x00	; 0
    26fa:	9e 83       	std	Y+6, r25	; 0x06
    26fc:	8d 83       	std	Y+5, r24	; 0x05
    26fe:	3f c0       	rjmp	.+126    	; 0x277e <LCD_VidInit+0x91c>
	else if (__tmp > 65535)
    2700:	6f 81       	ldd	r22, Y+7	; 0x07
    2702:	78 85       	ldd	r23, Y+8	; 0x08
    2704:	89 85       	ldd	r24, Y+9	; 0x09
    2706:	9a 85       	ldd	r25, Y+10	; 0x0a
    2708:	20 e0       	ldi	r18, 0x00	; 0
    270a:	3f ef       	ldi	r19, 0xFF	; 255
    270c:	4f e7       	ldi	r20, 0x7F	; 127
    270e:	57 e4       	ldi	r21, 0x47	; 71
    2710:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2714:	18 16       	cp	r1, r24
    2716:	4c f5       	brge	.+82     	; 0x276a <LCD_VidInit+0x908>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2718:	6b 85       	ldd	r22, Y+11	; 0x0b
    271a:	7c 85       	ldd	r23, Y+12	; 0x0c
    271c:	8d 85       	ldd	r24, Y+13	; 0x0d
    271e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2720:	20 e0       	ldi	r18, 0x00	; 0
    2722:	30 e0       	ldi	r19, 0x00	; 0
    2724:	40 e2       	ldi	r20, 0x20	; 32
    2726:	51 e4       	ldi	r21, 0x41	; 65
    2728:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    272c:	dc 01       	movw	r26, r24
    272e:	cb 01       	movw	r24, r22
    2730:	bc 01       	movw	r22, r24
    2732:	cd 01       	movw	r24, r26
    2734:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2738:	dc 01       	movw	r26, r24
    273a:	cb 01       	movw	r24, r22
    273c:	9e 83       	std	Y+6, r25	; 0x06
    273e:	8d 83       	std	Y+5, r24	; 0x05
    2740:	0f c0       	rjmp	.+30     	; 0x2760 <LCD_VidInit+0x8fe>
    2742:	88 ec       	ldi	r24, 0xC8	; 200
    2744:	90 e0       	ldi	r25, 0x00	; 0
    2746:	9c 83       	std	Y+4, r25	; 0x04
    2748:	8b 83       	std	Y+3, r24	; 0x03
    274a:	8b 81       	ldd	r24, Y+3	; 0x03
    274c:	9c 81       	ldd	r25, Y+4	; 0x04
    274e:	01 97       	sbiw	r24, 0x01	; 1
    2750:	f1 f7       	brne	.-4      	; 0x274e <LCD_VidInit+0x8ec>
    2752:	9c 83       	std	Y+4, r25	; 0x04
    2754:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2756:	8d 81       	ldd	r24, Y+5	; 0x05
    2758:	9e 81       	ldd	r25, Y+6	; 0x06
    275a:	01 97       	sbiw	r24, 0x01	; 1
    275c:	9e 83       	std	Y+6, r25	; 0x06
    275e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2760:	8d 81       	ldd	r24, Y+5	; 0x05
    2762:	9e 81       	ldd	r25, Y+6	; 0x06
    2764:	00 97       	sbiw	r24, 0x00	; 0
    2766:	69 f7       	brne	.-38     	; 0x2742 <LCD_VidInit+0x8e0>
    2768:	14 c0       	rjmp	.+40     	; 0x2792 <LCD_VidInit+0x930>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    276a:	6f 81       	ldd	r22, Y+7	; 0x07
    276c:	78 85       	ldd	r23, Y+8	; 0x08
    276e:	89 85       	ldd	r24, Y+9	; 0x09
    2770:	9a 85       	ldd	r25, Y+10	; 0x0a
    2772:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2776:	dc 01       	movw	r26, r24
    2778:	cb 01       	movw	r24, r22
    277a:	9e 83       	std	Y+6, r25	; 0x06
    277c:	8d 83       	std	Y+5, r24	; 0x05
    277e:	8d 81       	ldd	r24, Y+5	; 0x05
    2780:	9e 81       	ldd	r25, Y+6	; 0x06
    2782:	9a 83       	std	Y+2, r25	; 0x02
    2784:	89 83       	std	Y+1, r24	; 0x01
    2786:	89 81       	ldd	r24, Y+1	; 0x01
    2788:	9a 81       	ldd	r25, Y+2	; 0x02
    278a:	01 97       	sbiw	r24, 0x01	; 1
    278c:	f1 f7       	brne	.-4      	; 0x278a <LCD_VidInit+0x928>
    278e:	9a 83       	std	Y+2, r25	; 0x02
    2790:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

	#endif
}
    2792:	c0 59       	subi	r28, 0x90	; 144
    2794:	df 4f       	sbci	r29, 0xFF	; 255
    2796:	0f b6       	in	r0, 0x3f	; 63
    2798:	f8 94       	cli
    279a:	de bf       	out	0x3e, r29	; 62
    279c:	0f be       	out	0x3f, r0	; 63
    279e:	cd bf       	out	0x3d, r28	; 61
    27a0:	cf 91       	pop	r28
    27a2:	df 91       	pop	r29
    27a4:	1f 91       	pop	r17
    27a6:	0f 91       	pop	r16
    27a8:	08 95       	ret

000027aa <LCD_VidSendData>:

void LCD_VidSendData(u8 copy_u8data)
{
    27aa:	df 93       	push	r29
    27ac:	cf 93       	push	r28
    27ae:	cd b7       	in	r28, 0x3d	; 61
    27b0:	de b7       	in	r29, 0x3e	; 62
    27b2:	e9 97       	sbiw	r28, 0x39	; 57
    27b4:	0f b6       	in	r0, 0x3f	; 63
    27b6:	f8 94       	cli
    27b8:	de bf       	out	0x3e, r29	; 62
    27ba:	0f be       	out	0x3f, r0	; 63
    27bc:	cd bf       	out	0x3d, r28	; 61
    27be:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(1);
		DIO_VidSetPinValue(Lcopy_u8PORT,  E_copy_u8Pin,0);   // E=0 Display Command
        _delay_ms(1);
		
	#elif LCD_Mode==FOUR_BIT
		DIO_VidSetPortValue(LDcopy_u8PORT,(LDcopy_u8PORT & 0x0F)|(copy_u8data & 0xF0));
    27c0:	89 ad       	ldd	r24, Y+57	; 0x39
    27c2:	80 7f       	andi	r24, 0xF0	; 240
    27c4:	82 60       	ori	r24, 0x02	; 2
    27c6:	98 2f       	mov	r25, r24
    27c8:	82 e0       	ldi	r24, 0x02	; 2
    27ca:	69 2f       	mov	r22, r25
    27cc:	0e 94 45 0a 	call	0x148a	; 0x148a <DIO_VidSetPortValue>
		DIO_VidSetPinValue(Lcopy_u8PORT,  RS_copy_u8Pin,1);
    27d0:	80 e0       	ldi	r24, 0x00	; 0
    27d2:	60 e0       	ldi	r22, 0x00	; 0
    27d4:	41 e0       	ldi	r20, 0x01	; 1
    27d6:	0e 94 52 08 	call	0x10a4	; 0x10a4 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(Lcopy_u8PORT,  R_w_copy_u8Pin,0);
    27da:	80 e0       	ldi	r24, 0x00	; 0
    27dc:	61 e0       	ldi	r22, 0x01	; 1
    27de:	40 e0       	ldi	r20, 0x00	; 0
    27e0:	0e 94 52 08 	call	0x10a4	; 0x10a4 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(Lcopy_u8PORT,  E_copy_u8Pin,1);  // E=1; Upload Command
    27e4:	80 e0       	ldi	r24, 0x00	; 0
    27e6:	62 e0       	ldi	r22, 0x02	; 2
    27e8:	41 e0       	ldi	r20, 0x01	; 1
    27ea:	0e 94 52 08 	call	0x10a4	; 0x10a4 <DIO_VidSetPinValue>
    27ee:	80 e0       	ldi	r24, 0x00	; 0
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	a0 e0       	ldi	r26, 0x00	; 0
    27f4:	b0 e4       	ldi	r27, 0x40	; 64
    27f6:	8d ab       	std	Y+53, r24	; 0x35
    27f8:	9e ab       	std	Y+54, r25	; 0x36
    27fa:	af ab       	std	Y+55, r26	; 0x37
    27fc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27fe:	6d a9       	ldd	r22, Y+53	; 0x35
    2800:	7e a9       	ldd	r23, Y+54	; 0x36
    2802:	8f a9       	ldd	r24, Y+55	; 0x37
    2804:	98 ad       	ldd	r25, Y+56	; 0x38
    2806:	20 e0       	ldi	r18, 0x00	; 0
    2808:	30 e0       	ldi	r19, 0x00	; 0
    280a:	4a ef       	ldi	r20, 0xFA	; 250
    280c:	54 e4       	ldi	r21, 0x44	; 68
    280e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2812:	dc 01       	movw	r26, r24
    2814:	cb 01       	movw	r24, r22
    2816:	89 ab       	std	Y+49, r24	; 0x31
    2818:	9a ab       	std	Y+50, r25	; 0x32
    281a:	ab ab       	std	Y+51, r26	; 0x33
    281c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    281e:	69 a9       	ldd	r22, Y+49	; 0x31
    2820:	7a a9       	ldd	r23, Y+50	; 0x32
    2822:	8b a9       	ldd	r24, Y+51	; 0x33
    2824:	9c a9       	ldd	r25, Y+52	; 0x34
    2826:	20 e0       	ldi	r18, 0x00	; 0
    2828:	30 e0       	ldi	r19, 0x00	; 0
    282a:	40 e8       	ldi	r20, 0x80	; 128
    282c:	5f e3       	ldi	r21, 0x3F	; 63
    282e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2832:	88 23       	and	r24, r24
    2834:	2c f4       	brge	.+10     	; 0x2840 <LCD_VidSendData+0x96>
		__ticks = 1;
    2836:	81 e0       	ldi	r24, 0x01	; 1
    2838:	90 e0       	ldi	r25, 0x00	; 0
    283a:	98 ab       	std	Y+48, r25	; 0x30
    283c:	8f a7       	std	Y+47, r24	; 0x2f
    283e:	3f c0       	rjmp	.+126    	; 0x28be <LCD_VidSendData+0x114>
	else if (__tmp > 65535)
    2840:	69 a9       	ldd	r22, Y+49	; 0x31
    2842:	7a a9       	ldd	r23, Y+50	; 0x32
    2844:	8b a9       	ldd	r24, Y+51	; 0x33
    2846:	9c a9       	ldd	r25, Y+52	; 0x34
    2848:	20 e0       	ldi	r18, 0x00	; 0
    284a:	3f ef       	ldi	r19, 0xFF	; 255
    284c:	4f e7       	ldi	r20, 0x7F	; 127
    284e:	57 e4       	ldi	r21, 0x47	; 71
    2850:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2854:	18 16       	cp	r1, r24
    2856:	4c f5       	brge	.+82     	; 0x28aa <LCD_VidSendData+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2858:	6d a9       	ldd	r22, Y+53	; 0x35
    285a:	7e a9       	ldd	r23, Y+54	; 0x36
    285c:	8f a9       	ldd	r24, Y+55	; 0x37
    285e:	98 ad       	ldd	r25, Y+56	; 0x38
    2860:	20 e0       	ldi	r18, 0x00	; 0
    2862:	30 e0       	ldi	r19, 0x00	; 0
    2864:	40 e2       	ldi	r20, 0x20	; 32
    2866:	51 e4       	ldi	r21, 0x41	; 65
    2868:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    286c:	dc 01       	movw	r26, r24
    286e:	cb 01       	movw	r24, r22
    2870:	bc 01       	movw	r22, r24
    2872:	cd 01       	movw	r24, r26
    2874:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2878:	dc 01       	movw	r26, r24
    287a:	cb 01       	movw	r24, r22
    287c:	98 ab       	std	Y+48, r25	; 0x30
    287e:	8f a7       	std	Y+47, r24	; 0x2f
    2880:	0f c0       	rjmp	.+30     	; 0x28a0 <LCD_VidSendData+0xf6>
    2882:	88 ec       	ldi	r24, 0xC8	; 200
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	9e a7       	std	Y+46, r25	; 0x2e
    2888:	8d a7       	std	Y+45, r24	; 0x2d
    288a:	8d a5       	ldd	r24, Y+45	; 0x2d
    288c:	9e a5       	ldd	r25, Y+46	; 0x2e
    288e:	01 97       	sbiw	r24, 0x01	; 1
    2890:	f1 f7       	brne	.-4      	; 0x288e <LCD_VidSendData+0xe4>
    2892:	9e a7       	std	Y+46, r25	; 0x2e
    2894:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2896:	8f a5       	ldd	r24, Y+47	; 0x2f
    2898:	98 a9       	ldd	r25, Y+48	; 0x30
    289a:	01 97       	sbiw	r24, 0x01	; 1
    289c:	98 ab       	std	Y+48, r25	; 0x30
    289e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    28a2:	98 a9       	ldd	r25, Y+48	; 0x30
    28a4:	00 97       	sbiw	r24, 0x00	; 0
    28a6:	69 f7       	brne	.-38     	; 0x2882 <LCD_VidSendData+0xd8>
    28a8:	14 c0       	rjmp	.+40     	; 0x28d2 <LCD_VidSendData+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28aa:	69 a9       	ldd	r22, Y+49	; 0x31
    28ac:	7a a9       	ldd	r23, Y+50	; 0x32
    28ae:	8b a9       	ldd	r24, Y+51	; 0x33
    28b0:	9c a9       	ldd	r25, Y+52	; 0x34
    28b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28b6:	dc 01       	movw	r26, r24
    28b8:	cb 01       	movw	r24, r22
    28ba:	98 ab       	std	Y+48, r25	; 0x30
    28bc:	8f a7       	std	Y+47, r24	; 0x2f
    28be:	8f a5       	ldd	r24, Y+47	; 0x2f
    28c0:	98 a9       	ldd	r25, Y+48	; 0x30
    28c2:	9c a7       	std	Y+44, r25	; 0x2c
    28c4:	8b a7       	std	Y+43, r24	; 0x2b
    28c6:	8b a5       	ldd	r24, Y+43	; 0x2b
    28c8:	9c a5       	ldd	r25, Y+44	; 0x2c
    28ca:	01 97       	sbiw	r24, 0x01	; 1
    28cc:	f1 f7       	brne	.-4      	; 0x28ca <LCD_VidSendData+0x120>
    28ce:	9c a7       	std	Y+44, r25	; 0x2c
    28d0:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(2);
		DIO_VidSetPinValue(Lcopy_u8PORT,  E_copy_u8Pin,0);   // E=0 Display Command
    28d2:	80 e0       	ldi	r24, 0x00	; 0
    28d4:	62 e0       	ldi	r22, 0x02	; 2
    28d6:	40 e0       	ldi	r20, 0x00	; 0
    28d8:	0e 94 52 08 	call	0x10a4	; 0x10a4 <DIO_VidSetPinValue>
    28dc:	80 e0       	ldi	r24, 0x00	; 0
    28de:	90 e0       	ldi	r25, 0x00	; 0
    28e0:	a0 e0       	ldi	r26, 0x00	; 0
    28e2:	b0 e4       	ldi	r27, 0x40	; 64
    28e4:	8f a3       	std	Y+39, r24	; 0x27
    28e6:	98 a7       	std	Y+40, r25	; 0x28
    28e8:	a9 a7       	std	Y+41, r26	; 0x29
    28ea:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28ec:	6f a1       	ldd	r22, Y+39	; 0x27
    28ee:	78 a5       	ldd	r23, Y+40	; 0x28
    28f0:	89 a5       	ldd	r24, Y+41	; 0x29
    28f2:	9a a5       	ldd	r25, Y+42	; 0x2a
    28f4:	20 e0       	ldi	r18, 0x00	; 0
    28f6:	30 e0       	ldi	r19, 0x00	; 0
    28f8:	4a ef       	ldi	r20, 0xFA	; 250
    28fa:	54 e4       	ldi	r21, 0x44	; 68
    28fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2900:	dc 01       	movw	r26, r24
    2902:	cb 01       	movw	r24, r22
    2904:	8b a3       	std	Y+35, r24	; 0x23
    2906:	9c a3       	std	Y+36, r25	; 0x24
    2908:	ad a3       	std	Y+37, r26	; 0x25
    290a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    290c:	6b a1       	ldd	r22, Y+35	; 0x23
    290e:	7c a1       	ldd	r23, Y+36	; 0x24
    2910:	8d a1       	ldd	r24, Y+37	; 0x25
    2912:	9e a1       	ldd	r25, Y+38	; 0x26
    2914:	20 e0       	ldi	r18, 0x00	; 0
    2916:	30 e0       	ldi	r19, 0x00	; 0
    2918:	40 e8       	ldi	r20, 0x80	; 128
    291a:	5f e3       	ldi	r21, 0x3F	; 63
    291c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2920:	88 23       	and	r24, r24
    2922:	2c f4       	brge	.+10     	; 0x292e <LCD_VidSendData+0x184>
		__ticks = 1;
    2924:	81 e0       	ldi	r24, 0x01	; 1
    2926:	90 e0       	ldi	r25, 0x00	; 0
    2928:	9a a3       	std	Y+34, r25	; 0x22
    292a:	89 a3       	std	Y+33, r24	; 0x21
    292c:	3f c0       	rjmp	.+126    	; 0x29ac <LCD_VidSendData+0x202>
	else if (__tmp > 65535)
    292e:	6b a1       	ldd	r22, Y+35	; 0x23
    2930:	7c a1       	ldd	r23, Y+36	; 0x24
    2932:	8d a1       	ldd	r24, Y+37	; 0x25
    2934:	9e a1       	ldd	r25, Y+38	; 0x26
    2936:	20 e0       	ldi	r18, 0x00	; 0
    2938:	3f ef       	ldi	r19, 0xFF	; 255
    293a:	4f e7       	ldi	r20, 0x7F	; 127
    293c:	57 e4       	ldi	r21, 0x47	; 71
    293e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2942:	18 16       	cp	r1, r24
    2944:	4c f5       	brge	.+82     	; 0x2998 <LCD_VidSendData+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2946:	6f a1       	ldd	r22, Y+39	; 0x27
    2948:	78 a5       	ldd	r23, Y+40	; 0x28
    294a:	89 a5       	ldd	r24, Y+41	; 0x29
    294c:	9a a5       	ldd	r25, Y+42	; 0x2a
    294e:	20 e0       	ldi	r18, 0x00	; 0
    2950:	30 e0       	ldi	r19, 0x00	; 0
    2952:	40 e2       	ldi	r20, 0x20	; 32
    2954:	51 e4       	ldi	r21, 0x41	; 65
    2956:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    295a:	dc 01       	movw	r26, r24
    295c:	cb 01       	movw	r24, r22
    295e:	bc 01       	movw	r22, r24
    2960:	cd 01       	movw	r24, r26
    2962:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2966:	dc 01       	movw	r26, r24
    2968:	cb 01       	movw	r24, r22
    296a:	9a a3       	std	Y+34, r25	; 0x22
    296c:	89 a3       	std	Y+33, r24	; 0x21
    296e:	0f c0       	rjmp	.+30     	; 0x298e <LCD_VidSendData+0x1e4>
    2970:	88 ec       	ldi	r24, 0xC8	; 200
    2972:	90 e0       	ldi	r25, 0x00	; 0
    2974:	98 a3       	std	Y+32, r25	; 0x20
    2976:	8f 8f       	std	Y+31, r24	; 0x1f
    2978:	8f 8d       	ldd	r24, Y+31	; 0x1f
    297a:	98 a1       	ldd	r25, Y+32	; 0x20
    297c:	01 97       	sbiw	r24, 0x01	; 1
    297e:	f1 f7       	brne	.-4      	; 0x297c <LCD_VidSendData+0x1d2>
    2980:	98 a3       	std	Y+32, r25	; 0x20
    2982:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2984:	89 a1       	ldd	r24, Y+33	; 0x21
    2986:	9a a1       	ldd	r25, Y+34	; 0x22
    2988:	01 97       	sbiw	r24, 0x01	; 1
    298a:	9a a3       	std	Y+34, r25	; 0x22
    298c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    298e:	89 a1       	ldd	r24, Y+33	; 0x21
    2990:	9a a1       	ldd	r25, Y+34	; 0x22
    2992:	00 97       	sbiw	r24, 0x00	; 0
    2994:	69 f7       	brne	.-38     	; 0x2970 <LCD_VidSendData+0x1c6>
    2996:	14 c0       	rjmp	.+40     	; 0x29c0 <LCD_VidSendData+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2998:	6b a1       	ldd	r22, Y+35	; 0x23
    299a:	7c a1       	ldd	r23, Y+36	; 0x24
    299c:	8d a1       	ldd	r24, Y+37	; 0x25
    299e:	9e a1       	ldd	r25, Y+38	; 0x26
    29a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29a4:	dc 01       	movw	r26, r24
    29a6:	cb 01       	movw	r24, r22
    29a8:	9a a3       	std	Y+34, r25	; 0x22
    29aa:	89 a3       	std	Y+33, r24	; 0x21
    29ac:	89 a1       	ldd	r24, Y+33	; 0x21
    29ae:	9a a1       	ldd	r25, Y+34	; 0x22
    29b0:	9e 8f       	std	Y+30, r25	; 0x1e
    29b2:	8d 8f       	std	Y+29, r24	; 0x1d
    29b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29b6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    29b8:	01 97       	sbiw	r24, 0x01	; 1
    29ba:	f1 f7       	brne	.-4      	; 0x29b8 <LCD_VidSendData+0x20e>
    29bc:	9e 8f       	std	Y+30, r25	; 0x1e
    29be:	8d 8f       	std	Y+29, r24	; 0x1d

		_delay_ms(2);

		DIO_VidSetPortValue(LDcopy_u8PORT,(LDcopy_u8PORT& 0x0F)|(copy_u8data<<4));
    29c0:	89 ad       	ldd	r24, Y+57	; 0x39
    29c2:	88 2f       	mov	r24, r24
    29c4:	90 e0       	ldi	r25, 0x00	; 0
    29c6:	82 95       	swap	r24
    29c8:	92 95       	swap	r25
    29ca:	90 7f       	andi	r25, 0xF0	; 240
    29cc:	98 27       	eor	r25, r24
    29ce:	80 7f       	andi	r24, 0xF0	; 240
    29d0:	98 27       	eor	r25, r24
    29d2:	82 60       	ori	r24, 0x02	; 2
    29d4:	98 2f       	mov	r25, r24
    29d6:	82 e0       	ldi	r24, 0x02	; 2
    29d8:	69 2f       	mov	r22, r25
    29da:	0e 94 45 0a 	call	0x148a	; 0x148a <DIO_VidSetPortValue>
		DIO_VidSetPinValue(Lcopy_u8PORT,  E_copy_u8Pin,1);  // E=1; Upload Command
    29de:	80 e0       	ldi	r24, 0x00	; 0
    29e0:	62 e0       	ldi	r22, 0x02	; 2
    29e2:	41 e0       	ldi	r20, 0x01	; 1
    29e4:	0e 94 52 08 	call	0x10a4	; 0x10a4 <DIO_VidSetPinValue>
    29e8:	80 e0       	ldi	r24, 0x00	; 0
    29ea:	90 e0       	ldi	r25, 0x00	; 0
    29ec:	a0 e0       	ldi	r26, 0x00	; 0
    29ee:	b0 e4       	ldi	r27, 0x40	; 64
    29f0:	89 8f       	std	Y+25, r24	; 0x19
    29f2:	9a 8f       	std	Y+26, r25	; 0x1a
    29f4:	ab 8f       	std	Y+27, r26	; 0x1b
    29f6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29f8:	69 8d       	ldd	r22, Y+25	; 0x19
    29fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a00:	20 e0       	ldi	r18, 0x00	; 0
    2a02:	30 e0       	ldi	r19, 0x00	; 0
    2a04:	4a ef       	ldi	r20, 0xFA	; 250
    2a06:	54 e4       	ldi	r21, 0x44	; 68
    2a08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a0c:	dc 01       	movw	r26, r24
    2a0e:	cb 01       	movw	r24, r22
    2a10:	8d 8b       	std	Y+21, r24	; 0x15
    2a12:	9e 8b       	std	Y+22, r25	; 0x16
    2a14:	af 8b       	std	Y+23, r26	; 0x17
    2a16:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a18:	6d 89       	ldd	r22, Y+21	; 0x15
    2a1a:	7e 89       	ldd	r23, Y+22	; 0x16
    2a1c:	8f 89       	ldd	r24, Y+23	; 0x17
    2a1e:	98 8d       	ldd	r25, Y+24	; 0x18
    2a20:	20 e0       	ldi	r18, 0x00	; 0
    2a22:	30 e0       	ldi	r19, 0x00	; 0
    2a24:	40 e8       	ldi	r20, 0x80	; 128
    2a26:	5f e3       	ldi	r21, 0x3F	; 63
    2a28:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a2c:	88 23       	and	r24, r24
    2a2e:	2c f4       	brge	.+10     	; 0x2a3a <LCD_VidSendData+0x290>
		__ticks = 1;
    2a30:	81 e0       	ldi	r24, 0x01	; 1
    2a32:	90 e0       	ldi	r25, 0x00	; 0
    2a34:	9c 8b       	std	Y+20, r25	; 0x14
    2a36:	8b 8b       	std	Y+19, r24	; 0x13
    2a38:	3f c0       	rjmp	.+126    	; 0x2ab8 <LCD_VidSendData+0x30e>
	else if (__tmp > 65535)
    2a3a:	6d 89       	ldd	r22, Y+21	; 0x15
    2a3c:	7e 89       	ldd	r23, Y+22	; 0x16
    2a3e:	8f 89       	ldd	r24, Y+23	; 0x17
    2a40:	98 8d       	ldd	r25, Y+24	; 0x18
    2a42:	20 e0       	ldi	r18, 0x00	; 0
    2a44:	3f ef       	ldi	r19, 0xFF	; 255
    2a46:	4f e7       	ldi	r20, 0x7F	; 127
    2a48:	57 e4       	ldi	r21, 0x47	; 71
    2a4a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a4e:	18 16       	cp	r1, r24
    2a50:	4c f5       	brge	.+82     	; 0x2aa4 <LCD_VidSendData+0x2fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a52:	69 8d       	ldd	r22, Y+25	; 0x19
    2a54:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a56:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a58:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a5a:	20 e0       	ldi	r18, 0x00	; 0
    2a5c:	30 e0       	ldi	r19, 0x00	; 0
    2a5e:	40 e2       	ldi	r20, 0x20	; 32
    2a60:	51 e4       	ldi	r21, 0x41	; 65
    2a62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a66:	dc 01       	movw	r26, r24
    2a68:	cb 01       	movw	r24, r22
    2a6a:	bc 01       	movw	r22, r24
    2a6c:	cd 01       	movw	r24, r26
    2a6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a72:	dc 01       	movw	r26, r24
    2a74:	cb 01       	movw	r24, r22
    2a76:	9c 8b       	std	Y+20, r25	; 0x14
    2a78:	8b 8b       	std	Y+19, r24	; 0x13
    2a7a:	0f c0       	rjmp	.+30     	; 0x2a9a <LCD_VidSendData+0x2f0>
    2a7c:	88 ec       	ldi	r24, 0xC8	; 200
    2a7e:	90 e0       	ldi	r25, 0x00	; 0
    2a80:	9a 8b       	std	Y+18, r25	; 0x12
    2a82:	89 8b       	std	Y+17, r24	; 0x11
    2a84:	89 89       	ldd	r24, Y+17	; 0x11
    2a86:	9a 89       	ldd	r25, Y+18	; 0x12
    2a88:	01 97       	sbiw	r24, 0x01	; 1
    2a8a:	f1 f7       	brne	.-4      	; 0x2a88 <LCD_VidSendData+0x2de>
    2a8c:	9a 8b       	std	Y+18, r25	; 0x12
    2a8e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a90:	8b 89       	ldd	r24, Y+19	; 0x13
    2a92:	9c 89       	ldd	r25, Y+20	; 0x14
    2a94:	01 97       	sbiw	r24, 0x01	; 1
    2a96:	9c 8b       	std	Y+20, r25	; 0x14
    2a98:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a9a:	8b 89       	ldd	r24, Y+19	; 0x13
    2a9c:	9c 89       	ldd	r25, Y+20	; 0x14
    2a9e:	00 97       	sbiw	r24, 0x00	; 0
    2aa0:	69 f7       	brne	.-38     	; 0x2a7c <LCD_VidSendData+0x2d2>
    2aa2:	14 c0       	rjmp	.+40     	; 0x2acc <LCD_VidSendData+0x322>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aa4:	6d 89       	ldd	r22, Y+21	; 0x15
    2aa6:	7e 89       	ldd	r23, Y+22	; 0x16
    2aa8:	8f 89       	ldd	r24, Y+23	; 0x17
    2aaa:	98 8d       	ldd	r25, Y+24	; 0x18
    2aac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ab0:	dc 01       	movw	r26, r24
    2ab2:	cb 01       	movw	r24, r22
    2ab4:	9c 8b       	std	Y+20, r25	; 0x14
    2ab6:	8b 8b       	std	Y+19, r24	; 0x13
    2ab8:	8b 89       	ldd	r24, Y+19	; 0x13
    2aba:	9c 89       	ldd	r25, Y+20	; 0x14
    2abc:	98 8b       	std	Y+16, r25	; 0x10
    2abe:	8f 87       	std	Y+15, r24	; 0x0f
    2ac0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ac2:	98 89       	ldd	r25, Y+16	; 0x10
    2ac4:	01 97       	sbiw	r24, 0x01	; 1
    2ac6:	f1 f7       	brne	.-4      	; 0x2ac4 <LCD_VidSendData+0x31a>
    2ac8:	98 8b       	std	Y+16, r25	; 0x10
    2aca:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2);
		DIO_VidSetPinValue(Lcopy_u8PORT,  E_copy_u8Pin,0);   // E=0 Display Command
    2acc:	80 e0       	ldi	r24, 0x00	; 0
    2ace:	62 e0       	ldi	r22, 0x02	; 2
    2ad0:	40 e0       	ldi	r20, 0x00	; 0
    2ad2:	0e 94 52 08 	call	0x10a4	; 0x10a4 <DIO_VidSetPinValue>
    2ad6:	80 e0       	ldi	r24, 0x00	; 0
    2ad8:	90 e0       	ldi	r25, 0x00	; 0
    2ada:	a0 e0       	ldi	r26, 0x00	; 0
    2adc:	b0 e4       	ldi	r27, 0x40	; 64
    2ade:	8b 87       	std	Y+11, r24	; 0x0b
    2ae0:	9c 87       	std	Y+12, r25	; 0x0c
    2ae2:	ad 87       	std	Y+13, r26	; 0x0d
    2ae4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ae6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ae8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2aea:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aec:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aee:	20 e0       	ldi	r18, 0x00	; 0
    2af0:	30 e0       	ldi	r19, 0x00	; 0
    2af2:	4a ef       	ldi	r20, 0xFA	; 250
    2af4:	54 e4       	ldi	r21, 0x44	; 68
    2af6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2afa:	dc 01       	movw	r26, r24
    2afc:	cb 01       	movw	r24, r22
    2afe:	8f 83       	std	Y+7, r24	; 0x07
    2b00:	98 87       	std	Y+8, r25	; 0x08
    2b02:	a9 87       	std	Y+9, r26	; 0x09
    2b04:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b06:	6f 81       	ldd	r22, Y+7	; 0x07
    2b08:	78 85       	ldd	r23, Y+8	; 0x08
    2b0a:	89 85       	ldd	r24, Y+9	; 0x09
    2b0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b0e:	20 e0       	ldi	r18, 0x00	; 0
    2b10:	30 e0       	ldi	r19, 0x00	; 0
    2b12:	40 e8       	ldi	r20, 0x80	; 128
    2b14:	5f e3       	ldi	r21, 0x3F	; 63
    2b16:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b1a:	88 23       	and	r24, r24
    2b1c:	2c f4       	brge	.+10     	; 0x2b28 <LCD_VidSendData+0x37e>
		__ticks = 1;
    2b1e:	81 e0       	ldi	r24, 0x01	; 1
    2b20:	90 e0       	ldi	r25, 0x00	; 0
    2b22:	9e 83       	std	Y+6, r25	; 0x06
    2b24:	8d 83       	std	Y+5, r24	; 0x05
    2b26:	3f c0       	rjmp	.+126    	; 0x2ba6 <LCD_VidSendData+0x3fc>
	else if (__tmp > 65535)
    2b28:	6f 81       	ldd	r22, Y+7	; 0x07
    2b2a:	78 85       	ldd	r23, Y+8	; 0x08
    2b2c:	89 85       	ldd	r24, Y+9	; 0x09
    2b2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b30:	20 e0       	ldi	r18, 0x00	; 0
    2b32:	3f ef       	ldi	r19, 0xFF	; 255
    2b34:	4f e7       	ldi	r20, 0x7F	; 127
    2b36:	57 e4       	ldi	r21, 0x47	; 71
    2b38:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b3c:	18 16       	cp	r1, r24
    2b3e:	4c f5       	brge	.+82     	; 0x2b92 <LCD_VidSendData+0x3e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b40:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b42:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b44:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b46:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b48:	20 e0       	ldi	r18, 0x00	; 0
    2b4a:	30 e0       	ldi	r19, 0x00	; 0
    2b4c:	40 e2       	ldi	r20, 0x20	; 32
    2b4e:	51 e4       	ldi	r21, 0x41	; 65
    2b50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b54:	dc 01       	movw	r26, r24
    2b56:	cb 01       	movw	r24, r22
    2b58:	bc 01       	movw	r22, r24
    2b5a:	cd 01       	movw	r24, r26
    2b5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b60:	dc 01       	movw	r26, r24
    2b62:	cb 01       	movw	r24, r22
    2b64:	9e 83       	std	Y+6, r25	; 0x06
    2b66:	8d 83       	std	Y+5, r24	; 0x05
    2b68:	0f c0       	rjmp	.+30     	; 0x2b88 <LCD_VidSendData+0x3de>
    2b6a:	88 ec       	ldi	r24, 0xC8	; 200
    2b6c:	90 e0       	ldi	r25, 0x00	; 0
    2b6e:	9c 83       	std	Y+4, r25	; 0x04
    2b70:	8b 83       	std	Y+3, r24	; 0x03
    2b72:	8b 81       	ldd	r24, Y+3	; 0x03
    2b74:	9c 81       	ldd	r25, Y+4	; 0x04
    2b76:	01 97       	sbiw	r24, 0x01	; 1
    2b78:	f1 f7       	brne	.-4      	; 0x2b76 <LCD_VidSendData+0x3cc>
    2b7a:	9c 83       	std	Y+4, r25	; 0x04
    2b7c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b7e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b80:	9e 81       	ldd	r25, Y+6	; 0x06
    2b82:	01 97       	sbiw	r24, 0x01	; 1
    2b84:	9e 83       	std	Y+6, r25	; 0x06
    2b86:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b88:	8d 81       	ldd	r24, Y+5	; 0x05
    2b8a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b8c:	00 97       	sbiw	r24, 0x00	; 0
    2b8e:	69 f7       	brne	.-38     	; 0x2b6a <LCD_VidSendData+0x3c0>
    2b90:	14 c0       	rjmp	.+40     	; 0x2bba <LCD_VidSendData+0x410>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b92:	6f 81       	ldd	r22, Y+7	; 0x07
    2b94:	78 85       	ldd	r23, Y+8	; 0x08
    2b96:	89 85       	ldd	r24, Y+9	; 0x09
    2b98:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b9e:	dc 01       	movw	r26, r24
    2ba0:	cb 01       	movw	r24, r22
    2ba2:	9e 83       	std	Y+6, r25	; 0x06
    2ba4:	8d 83       	std	Y+5, r24	; 0x05
    2ba6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ba8:	9e 81       	ldd	r25, Y+6	; 0x06
    2baa:	9a 83       	std	Y+2, r25	; 0x02
    2bac:	89 83       	std	Y+1, r24	; 0x01
    2bae:	89 81       	ldd	r24, Y+1	; 0x01
    2bb0:	9a 81       	ldd	r25, Y+2	; 0x02
    2bb2:	01 97       	sbiw	r24, 0x01	; 1
    2bb4:	f1 f7       	brne	.-4      	; 0x2bb2 <LCD_VidSendData+0x408>
    2bb6:	9a 83       	std	Y+2, r25	; 0x02
    2bb8:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);

	#endif
}
    2bba:	e9 96       	adiw	r28, 0x39	; 57
    2bbc:	0f b6       	in	r0, 0x3f	; 63
    2bbe:	f8 94       	cli
    2bc0:	de bf       	out	0x3e, r29	; 62
    2bc2:	0f be       	out	0x3f, r0	; 63
    2bc4:	cd bf       	out	0x3d, r28	; 61
    2bc6:	cf 91       	pop	r28
    2bc8:	df 91       	pop	r29
    2bca:	08 95       	ret

00002bcc <LCD_VidSendCommand>:

void LCD_VidSendCommand(u8 copy_u8command)
{
    2bcc:	0f 93       	push	r16
    2bce:	1f 93       	push	r17
    2bd0:	df 93       	push	r29
    2bd2:	cf 93       	push	r28
    2bd4:	cd b7       	in	r28, 0x3d	; 61
    2bd6:	de b7       	in	r29, 0x3e	; 62
    2bd8:	c7 54       	subi	r28, 0x47	; 71
    2bda:	d0 40       	sbci	r29, 0x00	; 0
    2bdc:	0f b6       	in	r0, 0x3f	; 63
    2bde:	f8 94       	cli
    2be0:	de bf       	out	0x3e, r29	; 62
    2be2:	0f be       	out	0x3f, r0	; 63
    2be4:	cd bf       	out	0x3d, r28	; 61
    2be6:	fe 01       	movw	r30, r28
    2be8:	e9 5b       	subi	r30, 0xB9	; 185
    2bea:	ff 4f       	sbci	r31, 0xFF	; 255
    2bec:	80 83       	st	Z, r24
	_delay_ms(2);
	
	
	
	#elif LCD_Mode==FOUR_BIT
	DIO_VidSetPortValue(LDcopy_u8PORT,(LDcopy_u8PORT& 0x0F)|(copy_u8command&0xF0));
    2bee:	fe 01       	movw	r30, r28
    2bf0:	e9 5b       	subi	r30, 0xB9	; 185
    2bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf4:	80 81       	ld	r24, Z
    2bf6:	80 7f       	andi	r24, 0xF0	; 240
    2bf8:	82 60       	ori	r24, 0x02	; 2
    2bfa:	98 2f       	mov	r25, r24
    2bfc:	82 e0       	ldi	r24, 0x02	; 2
    2bfe:	69 2f       	mov	r22, r25
    2c00:	0e 94 45 0a 	call	0x148a	; 0x148a <DIO_VidSetPortValue>
	DIO_VidSetPinValue(Lcopy_u8PORT,  RS_copy_u8Pin,0);
    2c04:	80 e0       	ldi	r24, 0x00	; 0
    2c06:	60 e0       	ldi	r22, 0x00	; 0
    2c08:	40 e0       	ldi	r20, 0x00	; 0
    2c0a:	0e 94 52 08 	call	0x10a4	; 0x10a4 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(Lcopy_u8PORT,  R_w_copy_u8Pin,0);
    2c0e:	80 e0       	ldi	r24, 0x00	; 0
    2c10:	61 e0       	ldi	r22, 0x01	; 1
    2c12:	40 e0       	ldi	r20, 0x00	; 0
    2c14:	0e 94 52 08 	call	0x10a4	; 0x10a4 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(Lcopy_u8PORT,  E_copy_u8Pin,1);
    2c18:	80 e0       	ldi	r24, 0x00	; 0
    2c1a:	62 e0       	ldi	r22, 0x02	; 2
    2c1c:	41 e0       	ldi	r20, 0x01	; 1
    2c1e:	0e 94 52 08 	call	0x10a4	; 0x10a4 <DIO_VidSetPinValue>
    2c22:	fe 01       	movw	r30, r28
    2c24:	ed 5b       	subi	r30, 0xBD	; 189
    2c26:	ff 4f       	sbci	r31, 0xFF	; 255
    2c28:	80 e0       	ldi	r24, 0x00	; 0
    2c2a:	90 e0       	ldi	r25, 0x00	; 0
    2c2c:	a0 e0       	ldi	r26, 0x00	; 0
    2c2e:	b0 e4       	ldi	r27, 0x40	; 64
    2c30:	80 83       	st	Z, r24
    2c32:	91 83       	std	Z+1, r25	; 0x01
    2c34:	a2 83       	std	Z+2, r26	; 0x02
    2c36:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c38:	8e 01       	movw	r16, r28
    2c3a:	01 5c       	subi	r16, 0xC1	; 193
    2c3c:	1f 4f       	sbci	r17, 0xFF	; 255
    2c3e:	fe 01       	movw	r30, r28
    2c40:	ed 5b       	subi	r30, 0xBD	; 189
    2c42:	ff 4f       	sbci	r31, 0xFF	; 255
    2c44:	60 81       	ld	r22, Z
    2c46:	71 81       	ldd	r23, Z+1	; 0x01
    2c48:	82 81       	ldd	r24, Z+2	; 0x02
    2c4a:	93 81       	ldd	r25, Z+3	; 0x03
    2c4c:	20 e0       	ldi	r18, 0x00	; 0
    2c4e:	30 e0       	ldi	r19, 0x00	; 0
    2c50:	4a ef       	ldi	r20, 0xFA	; 250
    2c52:	54 e4       	ldi	r21, 0x44	; 68
    2c54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c58:	dc 01       	movw	r26, r24
    2c5a:	cb 01       	movw	r24, r22
    2c5c:	f8 01       	movw	r30, r16
    2c5e:	80 83       	st	Z, r24
    2c60:	91 83       	std	Z+1, r25	; 0x01
    2c62:	a2 83       	std	Z+2, r26	; 0x02
    2c64:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c66:	fe 01       	movw	r30, r28
    2c68:	ff 96       	adiw	r30, 0x3f	; 63
    2c6a:	60 81       	ld	r22, Z
    2c6c:	71 81       	ldd	r23, Z+1	; 0x01
    2c6e:	82 81       	ldd	r24, Z+2	; 0x02
    2c70:	93 81       	ldd	r25, Z+3	; 0x03
    2c72:	20 e0       	ldi	r18, 0x00	; 0
    2c74:	30 e0       	ldi	r19, 0x00	; 0
    2c76:	40 e8       	ldi	r20, 0x80	; 128
    2c78:	5f e3       	ldi	r21, 0x3F	; 63
    2c7a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c7e:	88 23       	and	r24, r24
    2c80:	2c f4       	brge	.+10     	; 0x2c8c <LCD_VidSendCommand+0xc0>
		__ticks = 1;
    2c82:	81 e0       	ldi	r24, 0x01	; 1
    2c84:	90 e0       	ldi	r25, 0x00	; 0
    2c86:	9e af       	std	Y+62, r25	; 0x3e
    2c88:	8d af       	std	Y+61, r24	; 0x3d
    2c8a:	46 c0       	rjmp	.+140    	; 0x2d18 <LCD_VidSendCommand+0x14c>
	else if (__tmp > 65535)
    2c8c:	fe 01       	movw	r30, r28
    2c8e:	ff 96       	adiw	r30, 0x3f	; 63
    2c90:	60 81       	ld	r22, Z
    2c92:	71 81       	ldd	r23, Z+1	; 0x01
    2c94:	82 81       	ldd	r24, Z+2	; 0x02
    2c96:	93 81       	ldd	r25, Z+3	; 0x03
    2c98:	20 e0       	ldi	r18, 0x00	; 0
    2c9a:	3f ef       	ldi	r19, 0xFF	; 255
    2c9c:	4f e7       	ldi	r20, 0x7F	; 127
    2c9e:	57 e4       	ldi	r21, 0x47	; 71
    2ca0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ca4:	18 16       	cp	r1, r24
    2ca6:	64 f5       	brge	.+88     	; 0x2d00 <LCD_VidSendCommand+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ca8:	fe 01       	movw	r30, r28
    2caa:	ed 5b       	subi	r30, 0xBD	; 189
    2cac:	ff 4f       	sbci	r31, 0xFF	; 255
    2cae:	60 81       	ld	r22, Z
    2cb0:	71 81       	ldd	r23, Z+1	; 0x01
    2cb2:	82 81       	ldd	r24, Z+2	; 0x02
    2cb4:	93 81       	ldd	r25, Z+3	; 0x03
    2cb6:	20 e0       	ldi	r18, 0x00	; 0
    2cb8:	30 e0       	ldi	r19, 0x00	; 0
    2cba:	40 e2       	ldi	r20, 0x20	; 32
    2cbc:	51 e4       	ldi	r21, 0x41	; 65
    2cbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cc2:	dc 01       	movw	r26, r24
    2cc4:	cb 01       	movw	r24, r22
    2cc6:	bc 01       	movw	r22, r24
    2cc8:	cd 01       	movw	r24, r26
    2cca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cce:	dc 01       	movw	r26, r24
    2cd0:	cb 01       	movw	r24, r22
    2cd2:	9e af       	std	Y+62, r25	; 0x3e
    2cd4:	8d af       	std	Y+61, r24	; 0x3d
    2cd6:	0f c0       	rjmp	.+30     	; 0x2cf6 <LCD_VidSendCommand+0x12a>
    2cd8:	88 ec       	ldi	r24, 0xC8	; 200
    2cda:	90 e0       	ldi	r25, 0x00	; 0
    2cdc:	9c af       	std	Y+60, r25	; 0x3c
    2cde:	8b af       	std	Y+59, r24	; 0x3b
    2ce0:	8b ad       	ldd	r24, Y+59	; 0x3b
    2ce2:	9c ad       	ldd	r25, Y+60	; 0x3c
    2ce4:	01 97       	sbiw	r24, 0x01	; 1
    2ce6:	f1 f7       	brne	.-4      	; 0x2ce4 <LCD_VidSendCommand+0x118>
    2ce8:	9c af       	std	Y+60, r25	; 0x3c
    2cea:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cec:	8d ad       	ldd	r24, Y+61	; 0x3d
    2cee:	9e ad       	ldd	r25, Y+62	; 0x3e
    2cf0:	01 97       	sbiw	r24, 0x01	; 1
    2cf2:	9e af       	std	Y+62, r25	; 0x3e
    2cf4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cf6:	8d ad       	ldd	r24, Y+61	; 0x3d
    2cf8:	9e ad       	ldd	r25, Y+62	; 0x3e
    2cfa:	00 97       	sbiw	r24, 0x00	; 0
    2cfc:	69 f7       	brne	.-38     	; 0x2cd8 <LCD_VidSendCommand+0x10c>
    2cfe:	16 c0       	rjmp	.+44     	; 0x2d2c <LCD_VidSendCommand+0x160>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d00:	fe 01       	movw	r30, r28
    2d02:	ff 96       	adiw	r30, 0x3f	; 63
    2d04:	60 81       	ld	r22, Z
    2d06:	71 81       	ldd	r23, Z+1	; 0x01
    2d08:	82 81       	ldd	r24, Z+2	; 0x02
    2d0a:	93 81       	ldd	r25, Z+3	; 0x03
    2d0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d10:	dc 01       	movw	r26, r24
    2d12:	cb 01       	movw	r24, r22
    2d14:	9e af       	std	Y+62, r25	; 0x3e
    2d16:	8d af       	std	Y+61, r24	; 0x3d
    2d18:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d1a:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d1c:	9a af       	std	Y+58, r25	; 0x3a
    2d1e:	89 af       	std	Y+57, r24	; 0x39
    2d20:	89 ad       	ldd	r24, Y+57	; 0x39
    2d22:	9a ad       	ldd	r25, Y+58	; 0x3a
    2d24:	01 97       	sbiw	r24, 0x01	; 1
    2d26:	f1 f7       	brne	.-4      	; 0x2d24 <LCD_VidSendCommand+0x158>
    2d28:	9a af       	std	Y+58, r25	; 0x3a
    2d2a:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(2);
	DIO_VidSetPinValue(Lcopy_u8PORT,  E_copy_u8Pin,0);
    2d2c:	80 e0       	ldi	r24, 0x00	; 0
    2d2e:	62 e0       	ldi	r22, 0x02	; 2
    2d30:	40 e0       	ldi	r20, 0x00	; 0
    2d32:	0e 94 52 08 	call	0x10a4	; 0x10a4 <DIO_VidSetPinValue>
    2d36:	80 e0       	ldi	r24, 0x00	; 0
    2d38:	90 e0       	ldi	r25, 0x00	; 0
    2d3a:	a0 e0       	ldi	r26, 0x00	; 0
    2d3c:	b0 e4       	ldi	r27, 0x40	; 64
    2d3e:	8d ab       	std	Y+53, r24	; 0x35
    2d40:	9e ab       	std	Y+54, r25	; 0x36
    2d42:	af ab       	std	Y+55, r26	; 0x37
    2d44:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d46:	6d a9       	ldd	r22, Y+53	; 0x35
    2d48:	7e a9       	ldd	r23, Y+54	; 0x36
    2d4a:	8f a9       	ldd	r24, Y+55	; 0x37
    2d4c:	98 ad       	ldd	r25, Y+56	; 0x38
    2d4e:	20 e0       	ldi	r18, 0x00	; 0
    2d50:	30 e0       	ldi	r19, 0x00	; 0
    2d52:	4a ef       	ldi	r20, 0xFA	; 250
    2d54:	54 e4       	ldi	r21, 0x44	; 68
    2d56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d5a:	dc 01       	movw	r26, r24
    2d5c:	cb 01       	movw	r24, r22
    2d5e:	89 ab       	std	Y+49, r24	; 0x31
    2d60:	9a ab       	std	Y+50, r25	; 0x32
    2d62:	ab ab       	std	Y+51, r26	; 0x33
    2d64:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2d66:	69 a9       	ldd	r22, Y+49	; 0x31
    2d68:	7a a9       	ldd	r23, Y+50	; 0x32
    2d6a:	8b a9       	ldd	r24, Y+51	; 0x33
    2d6c:	9c a9       	ldd	r25, Y+52	; 0x34
    2d6e:	20 e0       	ldi	r18, 0x00	; 0
    2d70:	30 e0       	ldi	r19, 0x00	; 0
    2d72:	40 e8       	ldi	r20, 0x80	; 128
    2d74:	5f e3       	ldi	r21, 0x3F	; 63
    2d76:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d7a:	88 23       	and	r24, r24
    2d7c:	2c f4       	brge	.+10     	; 0x2d88 <LCD_VidSendCommand+0x1bc>
		__ticks = 1;
    2d7e:	81 e0       	ldi	r24, 0x01	; 1
    2d80:	90 e0       	ldi	r25, 0x00	; 0
    2d82:	98 ab       	std	Y+48, r25	; 0x30
    2d84:	8f a7       	std	Y+47, r24	; 0x2f
    2d86:	3f c0       	rjmp	.+126    	; 0x2e06 <LCD_VidSendCommand+0x23a>
	else if (__tmp > 65535)
    2d88:	69 a9       	ldd	r22, Y+49	; 0x31
    2d8a:	7a a9       	ldd	r23, Y+50	; 0x32
    2d8c:	8b a9       	ldd	r24, Y+51	; 0x33
    2d8e:	9c a9       	ldd	r25, Y+52	; 0x34
    2d90:	20 e0       	ldi	r18, 0x00	; 0
    2d92:	3f ef       	ldi	r19, 0xFF	; 255
    2d94:	4f e7       	ldi	r20, 0x7F	; 127
    2d96:	57 e4       	ldi	r21, 0x47	; 71
    2d98:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d9c:	18 16       	cp	r1, r24
    2d9e:	4c f5       	brge	.+82     	; 0x2df2 <LCD_VidSendCommand+0x226>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2da0:	6d a9       	ldd	r22, Y+53	; 0x35
    2da2:	7e a9       	ldd	r23, Y+54	; 0x36
    2da4:	8f a9       	ldd	r24, Y+55	; 0x37
    2da6:	98 ad       	ldd	r25, Y+56	; 0x38
    2da8:	20 e0       	ldi	r18, 0x00	; 0
    2daa:	30 e0       	ldi	r19, 0x00	; 0
    2dac:	40 e2       	ldi	r20, 0x20	; 32
    2dae:	51 e4       	ldi	r21, 0x41	; 65
    2db0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2db4:	dc 01       	movw	r26, r24
    2db6:	cb 01       	movw	r24, r22
    2db8:	bc 01       	movw	r22, r24
    2dba:	cd 01       	movw	r24, r26
    2dbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dc0:	dc 01       	movw	r26, r24
    2dc2:	cb 01       	movw	r24, r22
    2dc4:	98 ab       	std	Y+48, r25	; 0x30
    2dc6:	8f a7       	std	Y+47, r24	; 0x2f
    2dc8:	0f c0       	rjmp	.+30     	; 0x2de8 <LCD_VidSendCommand+0x21c>
    2dca:	88 ec       	ldi	r24, 0xC8	; 200
    2dcc:	90 e0       	ldi	r25, 0x00	; 0
    2dce:	9e a7       	std	Y+46, r25	; 0x2e
    2dd0:	8d a7       	std	Y+45, r24	; 0x2d
    2dd2:	8d a5       	ldd	r24, Y+45	; 0x2d
    2dd4:	9e a5       	ldd	r25, Y+46	; 0x2e
    2dd6:	01 97       	sbiw	r24, 0x01	; 1
    2dd8:	f1 f7       	brne	.-4      	; 0x2dd6 <LCD_VidSendCommand+0x20a>
    2dda:	9e a7       	std	Y+46, r25	; 0x2e
    2ddc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dde:	8f a5       	ldd	r24, Y+47	; 0x2f
    2de0:	98 a9       	ldd	r25, Y+48	; 0x30
    2de2:	01 97       	sbiw	r24, 0x01	; 1
    2de4:	98 ab       	std	Y+48, r25	; 0x30
    2de6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2de8:	8f a5       	ldd	r24, Y+47	; 0x2f
    2dea:	98 a9       	ldd	r25, Y+48	; 0x30
    2dec:	00 97       	sbiw	r24, 0x00	; 0
    2dee:	69 f7       	brne	.-38     	; 0x2dca <LCD_VidSendCommand+0x1fe>
    2df0:	14 c0       	rjmp	.+40     	; 0x2e1a <LCD_VidSendCommand+0x24e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2df2:	69 a9       	ldd	r22, Y+49	; 0x31
    2df4:	7a a9       	ldd	r23, Y+50	; 0x32
    2df6:	8b a9       	ldd	r24, Y+51	; 0x33
    2df8:	9c a9       	ldd	r25, Y+52	; 0x34
    2dfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dfe:	dc 01       	movw	r26, r24
    2e00:	cb 01       	movw	r24, r22
    2e02:	98 ab       	std	Y+48, r25	; 0x30
    2e04:	8f a7       	std	Y+47, r24	; 0x2f
    2e06:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e08:	98 a9       	ldd	r25, Y+48	; 0x30
    2e0a:	9c a7       	std	Y+44, r25	; 0x2c
    2e0c:	8b a7       	std	Y+43, r24	; 0x2b
    2e0e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e10:	9c a5       	ldd	r25, Y+44	; 0x2c
    2e12:	01 97       	sbiw	r24, 0x01	; 1
    2e14:	f1 f7       	brne	.-4      	; 0x2e12 <LCD_VidSendCommand+0x246>
    2e16:	9c a7       	std	Y+44, r25	; 0x2c
    2e18:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	DIO_VidSetPortValue(LDcopy_u8PORT,(LDcopy_u8PORT& 0x0F)|(copy_u8command<<4)); /* Sending lower cmnds */
    2e1a:	fe 01       	movw	r30, r28
    2e1c:	e9 5b       	subi	r30, 0xB9	; 185
    2e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e20:	80 81       	ld	r24, Z
    2e22:	88 2f       	mov	r24, r24
    2e24:	90 e0       	ldi	r25, 0x00	; 0
    2e26:	82 95       	swap	r24
    2e28:	92 95       	swap	r25
    2e2a:	90 7f       	andi	r25, 0xF0	; 240
    2e2c:	98 27       	eor	r25, r24
    2e2e:	80 7f       	andi	r24, 0xF0	; 240
    2e30:	98 27       	eor	r25, r24
    2e32:	82 60       	ori	r24, 0x02	; 2
    2e34:	98 2f       	mov	r25, r24
    2e36:	82 e0       	ldi	r24, 0x02	; 2
    2e38:	69 2f       	mov	r22, r25
    2e3a:	0e 94 45 0a 	call	0x148a	; 0x148a <DIO_VidSetPortValue>
	DIO_VidSetPinValue(Lcopy_u8PORT,  E_copy_u8Pin,1);
    2e3e:	80 e0       	ldi	r24, 0x00	; 0
    2e40:	62 e0       	ldi	r22, 0x02	; 2
    2e42:	41 e0       	ldi	r20, 0x01	; 1
    2e44:	0e 94 52 08 	call	0x10a4	; 0x10a4 <DIO_VidSetPinValue>
    2e48:	80 e0       	ldi	r24, 0x00	; 0
    2e4a:	90 e0       	ldi	r25, 0x00	; 0
    2e4c:	a0 e0       	ldi	r26, 0x00	; 0
    2e4e:	b0 e4       	ldi	r27, 0x40	; 64
    2e50:	8f a3       	std	Y+39, r24	; 0x27
    2e52:	98 a7       	std	Y+40, r25	; 0x28
    2e54:	a9 a7       	std	Y+41, r26	; 0x29
    2e56:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e58:	6f a1       	ldd	r22, Y+39	; 0x27
    2e5a:	78 a5       	ldd	r23, Y+40	; 0x28
    2e5c:	89 a5       	ldd	r24, Y+41	; 0x29
    2e5e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e60:	20 e0       	ldi	r18, 0x00	; 0
    2e62:	30 e0       	ldi	r19, 0x00	; 0
    2e64:	4a ef       	ldi	r20, 0xFA	; 250
    2e66:	54 e4       	ldi	r21, 0x44	; 68
    2e68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e6c:	dc 01       	movw	r26, r24
    2e6e:	cb 01       	movw	r24, r22
    2e70:	8b a3       	std	Y+35, r24	; 0x23
    2e72:	9c a3       	std	Y+36, r25	; 0x24
    2e74:	ad a3       	std	Y+37, r26	; 0x25
    2e76:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2e78:	6b a1       	ldd	r22, Y+35	; 0x23
    2e7a:	7c a1       	ldd	r23, Y+36	; 0x24
    2e7c:	8d a1       	ldd	r24, Y+37	; 0x25
    2e7e:	9e a1       	ldd	r25, Y+38	; 0x26
    2e80:	20 e0       	ldi	r18, 0x00	; 0
    2e82:	30 e0       	ldi	r19, 0x00	; 0
    2e84:	40 e8       	ldi	r20, 0x80	; 128
    2e86:	5f e3       	ldi	r21, 0x3F	; 63
    2e88:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e8c:	88 23       	and	r24, r24
    2e8e:	2c f4       	brge	.+10     	; 0x2e9a <LCD_VidSendCommand+0x2ce>
		__ticks = 1;
    2e90:	81 e0       	ldi	r24, 0x01	; 1
    2e92:	90 e0       	ldi	r25, 0x00	; 0
    2e94:	9a a3       	std	Y+34, r25	; 0x22
    2e96:	89 a3       	std	Y+33, r24	; 0x21
    2e98:	3f c0       	rjmp	.+126    	; 0x2f18 <LCD_VidSendCommand+0x34c>
	else if (__tmp > 65535)
    2e9a:	6b a1       	ldd	r22, Y+35	; 0x23
    2e9c:	7c a1       	ldd	r23, Y+36	; 0x24
    2e9e:	8d a1       	ldd	r24, Y+37	; 0x25
    2ea0:	9e a1       	ldd	r25, Y+38	; 0x26
    2ea2:	20 e0       	ldi	r18, 0x00	; 0
    2ea4:	3f ef       	ldi	r19, 0xFF	; 255
    2ea6:	4f e7       	ldi	r20, 0x7F	; 127
    2ea8:	57 e4       	ldi	r21, 0x47	; 71
    2eaa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2eae:	18 16       	cp	r1, r24
    2eb0:	4c f5       	brge	.+82     	; 0x2f04 <LCD_VidSendCommand+0x338>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eb2:	6f a1       	ldd	r22, Y+39	; 0x27
    2eb4:	78 a5       	ldd	r23, Y+40	; 0x28
    2eb6:	89 a5       	ldd	r24, Y+41	; 0x29
    2eb8:	9a a5       	ldd	r25, Y+42	; 0x2a
    2eba:	20 e0       	ldi	r18, 0x00	; 0
    2ebc:	30 e0       	ldi	r19, 0x00	; 0
    2ebe:	40 e2       	ldi	r20, 0x20	; 32
    2ec0:	51 e4       	ldi	r21, 0x41	; 65
    2ec2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ec6:	dc 01       	movw	r26, r24
    2ec8:	cb 01       	movw	r24, r22
    2eca:	bc 01       	movw	r22, r24
    2ecc:	cd 01       	movw	r24, r26
    2ece:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ed2:	dc 01       	movw	r26, r24
    2ed4:	cb 01       	movw	r24, r22
    2ed6:	9a a3       	std	Y+34, r25	; 0x22
    2ed8:	89 a3       	std	Y+33, r24	; 0x21
    2eda:	0f c0       	rjmp	.+30     	; 0x2efa <LCD_VidSendCommand+0x32e>
    2edc:	88 ec       	ldi	r24, 0xC8	; 200
    2ede:	90 e0       	ldi	r25, 0x00	; 0
    2ee0:	98 a3       	std	Y+32, r25	; 0x20
    2ee2:	8f 8f       	std	Y+31, r24	; 0x1f
    2ee4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ee6:	98 a1       	ldd	r25, Y+32	; 0x20
    2ee8:	01 97       	sbiw	r24, 0x01	; 1
    2eea:	f1 f7       	brne	.-4      	; 0x2ee8 <LCD_VidSendCommand+0x31c>
    2eec:	98 a3       	std	Y+32, r25	; 0x20
    2eee:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ef0:	89 a1       	ldd	r24, Y+33	; 0x21
    2ef2:	9a a1       	ldd	r25, Y+34	; 0x22
    2ef4:	01 97       	sbiw	r24, 0x01	; 1
    2ef6:	9a a3       	std	Y+34, r25	; 0x22
    2ef8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2efa:	89 a1       	ldd	r24, Y+33	; 0x21
    2efc:	9a a1       	ldd	r25, Y+34	; 0x22
    2efe:	00 97       	sbiw	r24, 0x00	; 0
    2f00:	69 f7       	brne	.-38     	; 0x2edc <LCD_VidSendCommand+0x310>
    2f02:	14 c0       	rjmp	.+40     	; 0x2f2c <LCD_VidSendCommand+0x360>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f04:	6b a1       	ldd	r22, Y+35	; 0x23
    2f06:	7c a1       	ldd	r23, Y+36	; 0x24
    2f08:	8d a1       	ldd	r24, Y+37	; 0x25
    2f0a:	9e a1       	ldd	r25, Y+38	; 0x26
    2f0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f10:	dc 01       	movw	r26, r24
    2f12:	cb 01       	movw	r24, r22
    2f14:	9a a3       	std	Y+34, r25	; 0x22
    2f16:	89 a3       	std	Y+33, r24	; 0x21
    2f18:	89 a1       	ldd	r24, Y+33	; 0x21
    2f1a:	9a a1       	ldd	r25, Y+34	; 0x22
    2f1c:	9e 8f       	std	Y+30, r25	; 0x1e
    2f1e:	8d 8f       	std	Y+29, r24	; 0x1d
    2f20:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f22:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f24:	01 97       	sbiw	r24, 0x01	; 1
    2f26:	f1 f7       	brne	.-4      	; 0x2f24 <LCD_VidSendCommand+0x358>
    2f28:	9e 8f       	std	Y+30, r25	; 0x1e
    2f2a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	DIO_VidSetPinValue(Lcopy_u8PORT,  E_copy_u8Pin,0);
    2f2c:	80 e0       	ldi	r24, 0x00	; 0
    2f2e:	62 e0       	ldi	r22, 0x02	; 2
    2f30:	40 e0       	ldi	r20, 0x00	; 0
    2f32:	0e 94 52 08 	call	0x10a4	; 0x10a4 <DIO_VidSetPinValue>
    2f36:	80 e0       	ldi	r24, 0x00	; 0
    2f38:	90 e0       	ldi	r25, 0x00	; 0
    2f3a:	a0 e0       	ldi	r26, 0x00	; 0
    2f3c:	b0 e4       	ldi	r27, 0x40	; 64
    2f3e:	89 8f       	std	Y+25, r24	; 0x19
    2f40:	9a 8f       	std	Y+26, r25	; 0x1a
    2f42:	ab 8f       	std	Y+27, r26	; 0x1b
    2f44:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f46:	69 8d       	ldd	r22, Y+25	; 0x19
    2f48:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f4a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f4c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f4e:	20 e0       	ldi	r18, 0x00	; 0
    2f50:	30 e0       	ldi	r19, 0x00	; 0
    2f52:	4a ef       	ldi	r20, 0xFA	; 250
    2f54:	54 e4       	ldi	r21, 0x44	; 68
    2f56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f5a:	dc 01       	movw	r26, r24
    2f5c:	cb 01       	movw	r24, r22
    2f5e:	8d 8b       	std	Y+21, r24	; 0x15
    2f60:	9e 8b       	std	Y+22, r25	; 0x16
    2f62:	af 8b       	std	Y+23, r26	; 0x17
    2f64:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f66:	6d 89       	ldd	r22, Y+21	; 0x15
    2f68:	7e 89       	ldd	r23, Y+22	; 0x16
    2f6a:	8f 89       	ldd	r24, Y+23	; 0x17
    2f6c:	98 8d       	ldd	r25, Y+24	; 0x18
    2f6e:	20 e0       	ldi	r18, 0x00	; 0
    2f70:	30 e0       	ldi	r19, 0x00	; 0
    2f72:	40 e8       	ldi	r20, 0x80	; 128
    2f74:	5f e3       	ldi	r21, 0x3F	; 63
    2f76:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f7a:	88 23       	and	r24, r24
    2f7c:	2c f4       	brge	.+10     	; 0x2f88 <LCD_VidSendCommand+0x3bc>
		__ticks = 1;
    2f7e:	81 e0       	ldi	r24, 0x01	; 1
    2f80:	90 e0       	ldi	r25, 0x00	; 0
    2f82:	9c 8b       	std	Y+20, r25	; 0x14
    2f84:	8b 8b       	std	Y+19, r24	; 0x13
    2f86:	3f c0       	rjmp	.+126    	; 0x3006 <LCD_VidSendCommand+0x43a>
	else if (__tmp > 65535)
    2f88:	6d 89       	ldd	r22, Y+21	; 0x15
    2f8a:	7e 89       	ldd	r23, Y+22	; 0x16
    2f8c:	8f 89       	ldd	r24, Y+23	; 0x17
    2f8e:	98 8d       	ldd	r25, Y+24	; 0x18
    2f90:	20 e0       	ldi	r18, 0x00	; 0
    2f92:	3f ef       	ldi	r19, 0xFF	; 255
    2f94:	4f e7       	ldi	r20, 0x7F	; 127
    2f96:	57 e4       	ldi	r21, 0x47	; 71
    2f98:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f9c:	18 16       	cp	r1, r24
    2f9e:	4c f5       	brge	.+82     	; 0x2ff2 <LCD_VidSendCommand+0x426>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fa0:	69 8d       	ldd	r22, Y+25	; 0x19
    2fa2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fa4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fa6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fa8:	20 e0       	ldi	r18, 0x00	; 0
    2faa:	30 e0       	ldi	r19, 0x00	; 0
    2fac:	40 e2       	ldi	r20, 0x20	; 32
    2fae:	51 e4       	ldi	r21, 0x41	; 65
    2fb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fb4:	dc 01       	movw	r26, r24
    2fb6:	cb 01       	movw	r24, r22
    2fb8:	bc 01       	movw	r22, r24
    2fba:	cd 01       	movw	r24, r26
    2fbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fc0:	dc 01       	movw	r26, r24
    2fc2:	cb 01       	movw	r24, r22
    2fc4:	9c 8b       	std	Y+20, r25	; 0x14
    2fc6:	8b 8b       	std	Y+19, r24	; 0x13
    2fc8:	0f c0       	rjmp	.+30     	; 0x2fe8 <LCD_VidSendCommand+0x41c>
    2fca:	88 ec       	ldi	r24, 0xC8	; 200
    2fcc:	90 e0       	ldi	r25, 0x00	; 0
    2fce:	9a 8b       	std	Y+18, r25	; 0x12
    2fd0:	89 8b       	std	Y+17, r24	; 0x11
    2fd2:	89 89       	ldd	r24, Y+17	; 0x11
    2fd4:	9a 89       	ldd	r25, Y+18	; 0x12
    2fd6:	01 97       	sbiw	r24, 0x01	; 1
    2fd8:	f1 f7       	brne	.-4      	; 0x2fd6 <LCD_VidSendCommand+0x40a>
    2fda:	9a 8b       	std	Y+18, r25	; 0x12
    2fdc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fde:	8b 89       	ldd	r24, Y+19	; 0x13
    2fe0:	9c 89       	ldd	r25, Y+20	; 0x14
    2fe2:	01 97       	sbiw	r24, 0x01	; 1
    2fe4:	9c 8b       	std	Y+20, r25	; 0x14
    2fe6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fe8:	8b 89       	ldd	r24, Y+19	; 0x13
    2fea:	9c 89       	ldd	r25, Y+20	; 0x14
    2fec:	00 97       	sbiw	r24, 0x00	; 0
    2fee:	69 f7       	brne	.-38     	; 0x2fca <LCD_VidSendCommand+0x3fe>
    2ff0:	14 c0       	rjmp	.+40     	; 0x301a <LCD_VidSendCommand+0x44e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ff2:	6d 89       	ldd	r22, Y+21	; 0x15
    2ff4:	7e 89       	ldd	r23, Y+22	; 0x16
    2ff6:	8f 89       	ldd	r24, Y+23	; 0x17
    2ff8:	98 8d       	ldd	r25, Y+24	; 0x18
    2ffa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ffe:	dc 01       	movw	r26, r24
    3000:	cb 01       	movw	r24, r22
    3002:	9c 8b       	std	Y+20, r25	; 0x14
    3004:	8b 8b       	std	Y+19, r24	; 0x13
    3006:	8b 89       	ldd	r24, Y+19	; 0x13
    3008:	9c 89       	ldd	r25, Y+20	; 0x14
    300a:	98 8b       	std	Y+16, r25	; 0x10
    300c:	8f 87       	std	Y+15, r24	; 0x0f
    300e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3010:	98 89       	ldd	r25, Y+16	; 0x10
    3012:	01 97       	sbiw	r24, 0x01	; 1
    3014:	f1 f7       	brne	.-4      	; 0x3012 <LCD_VidSendCommand+0x446>
    3016:	98 8b       	std	Y+16, r25	; 0x10
    3018:	8f 87       	std	Y+15, r24	; 0x0f
    301a:	80 e0       	ldi	r24, 0x00	; 0
    301c:	90 e0       	ldi	r25, 0x00	; 0
    301e:	a0 ea       	ldi	r26, 0xA0	; 160
    3020:	b0 e4       	ldi	r27, 0x40	; 64
    3022:	8b 87       	std	Y+11, r24	; 0x0b
    3024:	9c 87       	std	Y+12, r25	; 0x0c
    3026:	ad 87       	std	Y+13, r26	; 0x0d
    3028:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    302a:	6b 85       	ldd	r22, Y+11	; 0x0b
    302c:	7c 85       	ldd	r23, Y+12	; 0x0c
    302e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3030:	9e 85       	ldd	r25, Y+14	; 0x0e
    3032:	20 e0       	ldi	r18, 0x00	; 0
    3034:	30 e0       	ldi	r19, 0x00	; 0
    3036:	4a ef       	ldi	r20, 0xFA	; 250
    3038:	54 e4       	ldi	r21, 0x44	; 68
    303a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    303e:	dc 01       	movw	r26, r24
    3040:	cb 01       	movw	r24, r22
    3042:	8f 83       	std	Y+7, r24	; 0x07
    3044:	98 87       	std	Y+8, r25	; 0x08
    3046:	a9 87       	std	Y+9, r26	; 0x09
    3048:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    304a:	6f 81       	ldd	r22, Y+7	; 0x07
    304c:	78 85       	ldd	r23, Y+8	; 0x08
    304e:	89 85       	ldd	r24, Y+9	; 0x09
    3050:	9a 85       	ldd	r25, Y+10	; 0x0a
    3052:	20 e0       	ldi	r18, 0x00	; 0
    3054:	30 e0       	ldi	r19, 0x00	; 0
    3056:	40 e8       	ldi	r20, 0x80	; 128
    3058:	5f e3       	ldi	r21, 0x3F	; 63
    305a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    305e:	88 23       	and	r24, r24
    3060:	2c f4       	brge	.+10     	; 0x306c <LCD_VidSendCommand+0x4a0>
		__ticks = 1;
    3062:	81 e0       	ldi	r24, 0x01	; 1
    3064:	90 e0       	ldi	r25, 0x00	; 0
    3066:	9e 83       	std	Y+6, r25	; 0x06
    3068:	8d 83       	std	Y+5, r24	; 0x05
    306a:	3f c0       	rjmp	.+126    	; 0x30ea <LCD_VidSendCommand+0x51e>
	else if (__tmp > 65535)
    306c:	6f 81       	ldd	r22, Y+7	; 0x07
    306e:	78 85       	ldd	r23, Y+8	; 0x08
    3070:	89 85       	ldd	r24, Y+9	; 0x09
    3072:	9a 85       	ldd	r25, Y+10	; 0x0a
    3074:	20 e0       	ldi	r18, 0x00	; 0
    3076:	3f ef       	ldi	r19, 0xFF	; 255
    3078:	4f e7       	ldi	r20, 0x7F	; 127
    307a:	57 e4       	ldi	r21, 0x47	; 71
    307c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3080:	18 16       	cp	r1, r24
    3082:	4c f5       	brge	.+82     	; 0x30d6 <LCD_VidSendCommand+0x50a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3084:	6b 85       	ldd	r22, Y+11	; 0x0b
    3086:	7c 85       	ldd	r23, Y+12	; 0x0c
    3088:	8d 85       	ldd	r24, Y+13	; 0x0d
    308a:	9e 85       	ldd	r25, Y+14	; 0x0e
    308c:	20 e0       	ldi	r18, 0x00	; 0
    308e:	30 e0       	ldi	r19, 0x00	; 0
    3090:	40 e2       	ldi	r20, 0x20	; 32
    3092:	51 e4       	ldi	r21, 0x41	; 65
    3094:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3098:	dc 01       	movw	r26, r24
    309a:	cb 01       	movw	r24, r22
    309c:	bc 01       	movw	r22, r24
    309e:	cd 01       	movw	r24, r26
    30a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30a4:	dc 01       	movw	r26, r24
    30a6:	cb 01       	movw	r24, r22
    30a8:	9e 83       	std	Y+6, r25	; 0x06
    30aa:	8d 83       	std	Y+5, r24	; 0x05
    30ac:	0f c0       	rjmp	.+30     	; 0x30cc <LCD_VidSendCommand+0x500>
    30ae:	88 ec       	ldi	r24, 0xC8	; 200
    30b0:	90 e0       	ldi	r25, 0x00	; 0
    30b2:	9c 83       	std	Y+4, r25	; 0x04
    30b4:	8b 83       	std	Y+3, r24	; 0x03
    30b6:	8b 81       	ldd	r24, Y+3	; 0x03
    30b8:	9c 81       	ldd	r25, Y+4	; 0x04
    30ba:	01 97       	sbiw	r24, 0x01	; 1
    30bc:	f1 f7       	brne	.-4      	; 0x30ba <LCD_VidSendCommand+0x4ee>
    30be:	9c 83       	std	Y+4, r25	; 0x04
    30c0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30c2:	8d 81       	ldd	r24, Y+5	; 0x05
    30c4:	9e 81       	ldd	r25, Y+6	; 0x06
    30c6:	01 97       	sbiw	r24, 0x01	; 1
    30c8:	9e 83       	std	Y+6, r25	; 0x06
    30ca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30cc:	8d 81       	ldd	r24, Y+5	; 0x05
    30ce:	9e 81       	ldd	r25, Y+6	; 0x06
    30d0:	00 97       	sbiw	r24, 0x00	; 0
    30d2:	69 f7       	brne	.-38     	; 0x30ae <LCD_VidSendCommand+0x4e2>
    30d4:	14 c0       	rjmp	.+40     	; 0x30fe <LCD_VidSendCommand+0x532>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30d6:	6f 81       	ldd	r22, Y+7	; 0x07
    30d8:	78 85       	ldd	r23, Y+8	; 0x08
    30da:	89 85       	ldd	r24, Y+9	; 0x09
    30dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    30de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30e2:	dc 01       	movw	r26, r24
    30e4:	cb 01       	movw	r24, r22
    30e6:	9e 83       	std	Y+6, r25	; 0x06
    30e8:	8d 83       	std	Y+5, r24	; 0x05
    30ea:	8d 81       	ldd	r24, Y+5	; 0x05
    30ec:	9e 81       	ldd	r25, Y+6	; 0x06
    30ee:	9a 83       	std	Y+2, r25	; 0x02
    30f0:	89 83       	std	Y+1, r24	; 0x01
    30f2:	89 81       	ldd	r24, Y+1	; 0x01
    30f4:	9a 81       	ldd	r25, Y+2	; 0x02
    30f6:	01 97       	sbiw	r24, 0x01	; 1
    30f8:	f1 f7       	brne	.-4      	; 0x30f6 <LCD_VidSendCommand+0x52a>
    30fa:	9a 83       	std	Y+2, r25	; 0x02
    30fc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

	_delay_ms(5);
	#endif
}
    30fe:	c9 5b       	subi	r28, 0xB9	; 185
    3100:	df 4f       	sbci	r29, 0xFF	; 255
    3102:	0f b6       	in	r0, 0x3f	; 63
    3104:	f8 94       	cli
    3106:	de bf       	out	0x3e, r29	; 62
    3108:	0f be       	out	0x3f, r0	; 63
    310a:	cd bf       	out	0x3d, r28	; 61
    310c:	cf 91       	pop	r28
    310e:	df 91       	pop	r29
    3110:	1f 91       	pop	r17
    3112:	0f 91       	pop	r16
    3114:	08 95       	ret

00003116 <LCD_VidSendString>:

void LCD_VidSendString( u8 *copy_u8string)
{
    3116:	df 93       	push	r29
    3118:	cf 93       	push	r28
    311a:	00 d0       	rcall	.+0      	; 0x311c <LCD_VidSendString+0x6>
    311c:	0f 92       	push	r0
    311e:	cd b7       	in	r28, 0x3d	; 61
    3120:	de b7       	in	r29, 0x3e	; 62
    3122:	9b 83       	std	Y+3, r25	; 0x03
    3124:	8a 83       	std	Y+2, r24	; 0x02

	u8 i=0;
    3126:	19 82       	std	Y+1, r1	; 0x01
    3128:	0e c0       	rjmp	.+28     	; 0x3146 <LCD_VidSendString+0x30>

	while(copy_u8string[i] != '\0')
	{

		LCD_VidSendData(copy_u8string[i]);
    312a:	89 81       	ldd	r24, Y+1	; 0x01
    312c:	28 2f       	mov	r18, r24
    312e:	30 e0       	ldi	r19, 0x00	; 0
    3130:	8a 81       	ldd	r24, Y+2	; 0x02
    3132:	9b 81       	ldd	r25, Y+3	; 0x03
    3134:	fc 01       	movw	r30, r24
    3136:	e2 0f       	add	r30, r18
    3138:	f3 1f       	adc	r31, r19
    313a:	80 81       	ld	r24, Z
    313c:	0e 94 d5 13 	call	0x27aa	; 0x27aa <LCD_VidSendData>
		i++;
    3140:	89 81       	ldd	r24, Y+1	; 0x01
    3142:	8f 5f       	subi	r24, 0xFF	; 255
    3144:	89 83       	std	Y+1, r24	; 0x01
void LCD_VidSendString( u8 *copy_u8string)
{

	u8 i=0;

	while(copy_u8string[i] != '\0')
    3146:	89 81       	ldd	r24, Y+1	; 0x01
    3148:	28 2f       	mov	r18, r24
    314a:	30 e0       	ldi	r19, 0x00	; 0
    314c:	8a 81       	ldd	r24, Y+2	; 0x02
    314e:	9b 81       	ldd	r25, Y+3	; 0x03
    3150:	fc 01       	movw	r30, r24
    3152:	e2 0f       	add	r30, r18
    3154:	f3 1f       	adc	r31, r19
    3156:	80 81       	ld	r24, Z
    3158:	88 23       	and	r24, r24
    315a:	39 f7       	brne	.-50     	; 0x312a <LCD_VidSendString+0x14>
		LCD_VidSendData(copy_u8string[i]);
		i++;
	}


}
    315c:	0f 90       	pop	r0
    315e:	0f 90       	pop	r0
    3160:	0f 90       	pop	r0
    3162:	cf 91       	pop	r28
    3164:	df 91       	pop	r29
    3166:	08 95       	ret

00003168 <LCD_VidSendNumber>:

 void LCD_VidSendNumber( u16 copy_u16number)
{
    3168:	df 93       	push	r29
    316a:	cf 93       	push	r28
    316c:	cd b7       	in	r28, 0x3d	; 61
    316e:	de b7       	in	r29, 0x3e	; 62
    3170:	2a 97       	sbiw	r28, 0x0a	; 10
    3172:	0f b6       	in	r0, 0x3f	; 63
    3174:	f8 94       	cli
    3176:	de bf       	out	0x3e, r29	; 62
    3178:	0f be       	out	0x3f, r0	; 63
    317a:	cd bf       	out	0x3d, r28	; 61
    317c:	98 87       	std	Y+8, r25	; 0x08
    317e:	8f 83       	std	Y+7, r24	; 0x07

	if (copy_u16number==0)
    3180:	8f 81       	ldd	r24, Y+7	; 0x07
    3182:	98 85       	ldd	r25, Y+8	; 0x08
    3184:	00 97       	sbiw	r24, 0x00	; 0
    3186:	19 f4       	brne	.+6      	; 0x318e <LCD_VidSendNumber+0x26>
	{
		LCD_VidSendData('0');
    3188:	80 e3       	ldi	r24, 0x30	; 48
    318a:	0e 94 d5 13 	call	0x27aa	; 0x27aa <LCD_VidSendData>
	}
	s8 i=0;
    318e:	19 82       	std	Y+1, r1	; 0x01
    3190:	1f c0       	rjmp	.+62     	; 0x31d0 <LCD_VidSendNumber+0x68>
	u8 str_num[5];
	while(copy_u16number>0)
	{
		str_num[i]=copy_u16number%10;
    3192:	89 81       	ldd	r24, Y+1	; 0x01
    3194:	e8 2f       	mov	r30, r24
    3196:	ff 27       	eor	r31, r31
    3198:	e7 fd       	sbrc	r30, 7
    319a:	f0 95       	com	r31
    319c:	8f 81       	ldd	r24, Y+7	; 0x07
    319e:	98 85       	ldd	r25, Y+8	; 0x08
    31a0:	2a e0       	ldi	r18, 0x0A	; 10
    31a2:	30 e0       	ldi	r19, 0x00	; 0
    31a4:	b9 01       	movw	r22, r18
    31a6:	0e 94 54 1e 	call	0x3ca8	; 0x3ca8 <__udivmodhi4>
    31aa:	28 2f       	mov	r18, r24
    31ac:	ce 01       	movw	r24, r28
    31ae:	02 96       	adiw	r24, 0x02	; 2
    31b0:	e8 0f       	add	r30, r24
    31b2:	f9 1f       	adc	r31, r25
    31b4:	20 83       	st	Z, r18
		copy_u16number/=10;
    31b6:	8f 81       	ldd	r24, Y+7	; 0x07
    31b8:	98 85       	ldd	r25, Y+8	; 0x08
    31ba:	2a e0       	ldi	r18, 0x0A	; 10
    31bc:	30 e0       	ldi	r19, 0x00	; 0
    31be:	b9 01       	movw	r22, r18
    31c0:	0e 94 54 1e 	call	0x3ca8	; 0x3ca8 <__udivmodhi4>
    31c4:	cb 01       	movw	r24, r22
    31c6:	98 87       	std	Y+8, r25	; 0x08
    31c8:	8f 83       	std	Y+7, r24	; 0x07
		i++;
    31ca:	89 81       	ldd	r24, Y+1	; 0x01
    31cc:	8f 5f       	subi	r24, 0xFF	; 255
    31ce:	89 83       	std	Y+1, r24	; 0x01
	{
		LCD_VidSendData('0');
	}
	s8 i=0;
	u8 str_num[5];
	while(copy_u16number>0)
    31d0:	8f 81       	ldd	r24, Y+7	; 0x07
    31d2:	98 85       	ldd	r25, Y+8	; 0x08
    31d4:	00 97       	sbiw	r24, 0x00	; 0
    31d6:	e9 f6       	brne	.-70     	; 0x3192 <LCD_VidSendNumber+0x2a>
	{
		str_num[i]=copy_u16number%10;
		copy_u16number/=10;
		i++;
	}
	i--;
    31d8:	89 81       	ldd	r24, Y+1	; 0x01
    31da:	81 50       	subi	r24, 0x01	; 1
    31dc:	89 83       	std	Y+1, r24	; 0x01
    31de:	7e c0       	rjmp	.+252    	; 0x32dc <LCD_VidSendNumber+0x174>
	while(i>=0)
	{
		switch(str_num[i])
    31e0:	89 81       	ldd	r24, Y+1	; 0x01
    31e2:	28 2f       	mov	r18, r24
    31e4:	33 27       	eor	r19, r19
    31e6:	27 fd       	sbrc	r18, 7
    31e8:	30 95       	com	r19
    31ea:	ce 01       	movw	r24, r28
    31ec:	02 96       	adiw	r24, 0x02	; 2
    31ee:	fc 01       	movw	r30, r24
    31f0:	e2 0f       	add	r30, r18
    31f2:	f3 1f       	adc	r31, r19
    31f4:	80 81       	ld	r24, Z
    31f6:	28 2f       	mov	r18, r24
    31f8:	30 e0       	ldi	r19, 0x00	; 0
    31fa:	3a 87       	std	Y+10, r19	; 0x0a
    31fc:	29 87       	std	Y+9, r18	; 0x09
    31fe:	89 85       	ldd	r24, Y+9	; 0x09
    3200:	9a 85       	ldd	r25, Y+10	; 0x0a
    3202:	84 30       	cpi	r24, 0x04	; 4
    3204:	91 05       	cpc	r25, r1
    3206:	09 f4       	brne	.+2      	; 0x320a <LCD_VidSendNumber+0xa2>
    3208:	4f c0       	rjmp	.+158    	; 0x32a8 <LCD_VidSendNumber+0x140>
    320a:	29 85       	ldd	r18, Y+9	; 0x09
    320c:	3a 85       	ldd	r19, Y+10	; 0x0a
    320e:	25 30       	cpi	r18, 0x05	; 5
    3210:	31 05       	cpc	r19, r1
    3212:	d4 f4       	brge	.+52     	; 0x3248 <LCD_VidSendNumber+0xe0>
    3214:	89 85       	ldd	r24, Y+9	; 0x09
    3216:	9a 85       	ldd	r25, Y+10	; 0x0a
    3218:	81 30       	cpi	r24, 0x01	; 1
    321a:	91 05       	cpc	r25, r1
    321c:	c9 f1       	breq	.+114    	; 0x3290 <LCD_VidSendNumber+0x128>
    321e:	29 85       	ldd	r18, Y+9	; 0x09
    3220:	3a 85       	ldd	r19, Y+10	; 0x0a
    3222:	22 30       	cpi	r18, 0x02	; 2
    3224:	31 05       	cpc	r19, r1
    3226:	2c f4       	brge	.+10     	; 0x3232 <LCD_VidSendNumber+0xca>
    3228:	89 85       	ldd	r24, Y+9	; 0x09
    322a:	9a 85       	ldd	r25, Y+10	; 0x0a
    322c:	00 97       	sbiw	r24, 0x00	; 0
    322e:	61 f1       	breq	.+88     	; 0x3288 <LCD_VidSendNumber+0x120>
    3230:	52 c0       	rjmp	.+164    	; 0x32d6 <LCD_VidSendNumber+0x16e>
    3232:	29 85       	ldd	r18, Y+9	; 0x09
    3234:	3a 85       	ldd	r19, Y+10	; 0x0a
    3236:	22 30       	cpi	r18, 0x02	; 2
    3238:	31 05       	cpc	r19, r1
    323a:	71 f1       	breq	.+92     	; 0x3298 <LCD_VidSendNumber+0x130>
    323c:	89 85       	ldd	r24, Y+9	; 0x09
    323e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3240:	83 30       	cpi	r24, 0x03	; 3
    3242:	91 05       	cpc	r25, r1
    3244:	69 f1       	breq	.+90     	; 0x32a0 <LCD_VidSendNumber+0x138>
    3246:	47 c0       	rjmp	.+142    	; 0x32d6 <LCD_VidSendNumber+0x16e>
    3248:	29 85       	ldd	r18, Y+9	; 0x09
    324a:	3a 85       	ldd	r19, Y+10	; 0x0a
    324c:	27 30       	cpi	r18, 0x07	; 7
    324e:	31 05       	cpc	r19, r1
    3250:	b9 f1       	breq	.+110    	; 0x32c0 <LCD_VidSendNumber+0x158>
    3252:	89 85       	ldd	r24, Y+9	; 0x09
    3254:	9a 85       	ldd	r25, Y+10	; 0x0a
    3256:	88 30       	cpi	r24, 0x08	; 8
    3258:	91 05       	cpc	r25, r1
    325a:	5c f4       	brge	.+22     	; 0x3272 <LCD_VidSendNumber+0x10a>
    325c:	29 85       	ldd	r18, Y+9	; 0x09
    325e:	3a 85       	ldd	r19, Y+10	; 0x0a
    3260:	25 30       	cpi	r18, 0x05	; 5
    3262:	31 05       	cpc	r19, r1
    3264:	29 f1       	breq	.+74     	; 0x32b0 <LCD_VidSendNumber+0x148>
    3266:	89 85       	ldd	r24, Y+9	; 0x09
    3268:	9a 85       	ldd	r25, Y+10	; 0x0a
    326a:	86 30       	cpi	r24, 0x06	; 6
    326c:	91 05       	cpc	r25, r1
    326e:	21 f1       	breq	.+72     	; 0x32b8 <LCD_VidSendNumber+0x150>
    3270:	32 c0       	rjmp	.+100    	; 0x32d6 <LCD_VidSendNumber+0x16e>
    3272:	29 85       	ldd	r18, Y+9	; 0x09
    3274:	3a 85       	ldd	r19, Y+10	; 0x0a
    3276:	28 30       	cpi	r18, 0x08	; 8
    3278:	31 05       	cpc	r19, r1
    327a:	31 f1       	breq	.+76     	; 0x32c8 <LCD_VidSendNumber+0x160>
    327c:	89 85       	ldd	r24, Y+9	; 0x09
    327e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3280:	89 30       	cpi	r24, 0x09	; 9
    3282:	91 05       	cpc	r25, r1
    3284:	29 f1       	breq	.+74     	; 0x32d0 <LCD_VidSendNumber+0x168>
    3286:	27 c0       	rjmp	.+78     	; 0x32d6 <LCD_VidSendNumber+0x16e>
		{
		case 0 : LCD_VidSendData('0');break;
    3288:	80 e3       	ldi	r24, 0x30	; 48
    328a:	0e 94 d5 13 	call	0x27aa	; 0x27aa <LCD_VidSendData>
    328e:	23 c0       	rjmp	.+70     	; 0x32d6 <LCD_VidSendNumber+0x16e>
		case 1 : LCD_VidSendData('1');break;
    3290:	81 e3       	ldi	r24, 0x31	; 49
    3292:	0e 94 d5 13 	call	0x27aa	; 0x27aa <LCD_VidSendData>
    3296:	1f c0       	rjmp	.+62     	; 0x32d6 <LCD_VidSendNumber+0x16e>
		case 2 : LCD_VidSendData('2');break;
    3298:	82 e3       	ldi	r24, 0x32	; 50
    329a:	0e 94 d5 13 	call	0x27aa	; 0x27aa <LCD_VidSendData>
    329e:	1b c0       	rjmp	.+54     	; 0x32d6 <LCD_VidSendNumber+0x16e>
		case 3 : LCD_VidSendData('3');break;
    32a0:	83 e3       	ldi	r24, 0x33	; 51
    32a2:	0e 94 d5 13 	call	0x27aa	; 0x27aa <LCD_VidSendData>
    32a6:	17 c0       	rjmp	.+46     	; 0x32d6 <LCD_VidSendNumber+0x16e>
		case 4 : LCD_VidSendData('4');break;
    32a8:	84 e3       	ldi	r24, 0x34	; 52
    32aa:	0e 94 d5 13 	call	0x27aa	; 0x27aa <LCD_VidSendData>
    32ae:	13 c0       	rjmp	.+38     	; 0x32d6 <LCD_VidSendNumber+0x16e>
		case 5 : LCD_VidSendData('5');break;
    32b0:	85 e3       	ldi	r24, 0x35	; 53
    32b2:	0e 94 d5 13 	call	0x27aa	; 0x27aa <LCD_VidSendData>
    32b6:	0f c0       	rjmp	.+30     	; 0x32d6 <LCD_VidSendNumber+0x16e>
		case 6 : LCD_VidSendData('6');break;
    32b8:	86 e3       	ldi	r24, 0x36	; 54
    32ba:	0e 94 d5 13 	call	0x27aa	; 0x27aa <LCD_VidSendData>
    32be:	0b c0       	rjmp	.+22     	; 0x32d6 <LCD_VidSendNumber+0x16e>
		case 7 : LCD_VidSendData('7');break;
    32c0:	87 e3       	ldi	r24, 0x37	; 55
    32c2:	0e 94 d5 13 	call	0x27aa	; 0x27aa <LCD_VidSendData>
    32c6:	07 c0       	rjmp	.+14     	; 0x32d6 <LCD_VidSendNumber+0x16e>
		case 8 : LCD_VidSendData('8');break;
    32c8:	88 e3       	ldi	r24, 0x38	; 56
    32ca:	0e 94 d5 13 	call	0x27aa	; 0x27aa <LCD_VidSendData>
    32ce:	03 c0       	rjmp	.+6      	; 0x32d6 <LCD_VidSendNumber+0x16e>
		case 9 : LCD_VidSendData('9');break;
    32d0:	89 e3       	ldi	r24, 0x39	; 57
    32d2:	0e 94 d5 13 	call	0x27aa	; 0x27aa <LCD_VidSendData>
		}

		i--;
    32d6:	89 81       	ldd	r24, Y+1	; 0x01
    32d8:	81 50       	subi	r24, 0x01	; 1
    32da:	89 83       	std	Y+1, r24	; 0x01
		str_num[i]=copy_u16number%10;
		copy_u16number/=10;
		i++;
	}
	i--;
	while(i>=0)
    32dc:	89 81       	ldd	r24, Y+1	; 0x01
    32de:	88 23       	and	r24, r24
    32e0:	0c f0       	brlt	.+2      	; 0x32e4 <LCD_VidSendNumber+0x17c>
    32e2:	7e cf       	rjmp	.-260    	; 0x31e0 <LCD_VidSendNumber+0x78>

		i--;
	}


}
    32e4:	2a 96       	adiw	r28, 0x0a	; 10
    32e6:	0f b6       	in	r0, 0x3f	; 63
    32e8:	f8 94       	cli
    32ea:	de bf       	out	0x3e, r29	; 62
    32ec:	0f be       	out	0x3f, r0	; 63
    32ee:	cd bf       	out	0x3d, r28	; 61
    32f0:	cf 91       	pop	r28
    32f2:	df 91       	pop	r29
    32f4:	08 95       	ret

000032f6 <LCD_VidSetPosition>:


void LCD_VidSetPosition(u8 raw, u8 column)
{
    32f6:	df 93       	push	r29
    32f8:	cf 93       	push	r28
    32fa:	00 d0       	rcall	.+0      	; 0x32fc <LCD_VidSetPosition+0x6>
    32fc:	cd b7       	in	r28, 0x3d	; 61
    32fe:	de b7       	in	r29, 0x3e	; 62
    3300:	89 83       	std	Y+1, r24	; 0x01
    3302:	6a 83       	std	Y+2, r22	; 0x02
	if(0==raw)       // raw= 0
    3304:	89 81       	ldd	r24, Y+1	; 0x01
    3306:	88 23       	and	r24, r24
    3308:	21 f4       	brne	.+8      	; 0x3312 <LCD_VidSetPosition+0x1c>
	{
	LCD_VidSendCommand(128+column);    // 0b10000000=128 +column
    330a:	8a 81       	ldd	r24, Y+2	; 0x02
    330c:	80 58       	subi	r24, 0x80	; 128
    330e:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <LCD_VidSendCommand>
	}
	if(1==raw)
    3312:	89 81       	ldd	r24, Y+1	; 0x01
    3314:	81 30       	cpi	r24, 0x01	; 1
    3316:	21 f4       	brne	.+8      	; 0x3320 <LCD_VidSetPosition+0x2a>
	{
	LCD_VidSendCommand(128+64+column);  //  // 0b10000000=128 +column+64
    3318:	8a 81       	ldd	r24, Y+2	; 0x02
    331a:	80 54       	subi	r24, 0x40	; 64
    331c:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <LCD_VidSendCommand>
	                                    // 64 is the start address of row 2
	}

}
    3320:	0f 90       	pop	r0
    3322:	0f 90       	pop	r0
    3324:	cf 91       	pop	r28
    3326:	df 91       	pop	r29
    3328:	08 95       	ret

0000332a <LCD_VidClear>:

void LCD_VidClear(void)
{
    332a:	df 93       	push	r29
    332c:	cf 93       	push	r28
    332e:	cd b7       	in	r28, 0x3d	; 61
    3330:	de b7       	in	r29, 0x3e	; 62
	LCD_VidSendCommand(1);
    3332:	81 e0       	ldi	r24, 0x01	; 1
    3334:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <LCD_VidSendCommand>


}
    3338:	cf 91       	pop	r28
    333a:	df 91       	pop	r29
    333c:	08 95       	ret

0000333e <LCD_VidShiftRight>:

void LCD_VidShiftRight(void)
{
    333e:	df 93       	push	r29
    3340:	cf 93       	push	r28
    3342:	cd b7       	in	r28, 0x3d	; 61
    3344:	de b7       	in	r29, 0x3e	; 62
	LCD_VidSendCommand(0b00011100);
    3346:	8c e1       	ldi	r24, 0x1C	; 28
    3348:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <LCD_VidSendCommand>

}
    334c:	cf 91       	pop	r28
    334e:	df 91       	pop	r29
    3350:	08 95       	ret

00003352 <LCD_VidShiftLeft>:

void LCD_VidShiftLeft(void)
{
    3352:	df 93       	push	r29
    3354:	cf 93       	push	r28
    3356:	cd b7       	in	r28, 0x3d	; 61
    3358:	de b7       	in	r29, 0x3e	; 62
	LCD_VidSendCommand(0x18);
    335a:	88 e1       	ldi	r24, 0x18	; 24
    335c:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <LCD_VidSendCommand>

}
    3360:	cf 91       	pop	r28
    3362:	df 91       	pop	r29
    3364:	08 95       	ret

00003366 <LCD_voidReturnHome>:

void LCD_voidReturnHome(void)
{
    3366:	df 93       	push	r29
    3368:	cf 93       	push	r28
    336a:	cd b7       	in	r28, 0x3d	; 61
    336c:	de b7       	in	r29, 0x3e	; 62
	LCD_VidSendCommand(0x02);
    336e:	82 e0       	ldi	r24, 0x02	; 2
    3370:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <LCD_VidSendCommand>

}
    3374:	cf 91       	pop	r28
    3376:	df 91       	pop	r29
    3378:	08 95       	ret

0000337a <USART_voidINIT>:
#include "USART_interface.h"
#include "USART_config.h"


void USART_voidINIT(void)
{
    337a:	df 93       	push	r29
    337c:	cf 93       	push	r28
    337e:	cd b7       	in	r28, 0x3d	; 61
    3380:	de b7       	in	r29, 0x3e	; 62
	u8 static UCSRC_HELP=0;

	//Select Normal Mode
	CLR_BIT(UCSRA,U2X);
    3382:	ab e2       	ldi	r26, 0x2B	; 43
    3384:	b0 e0       	ldi	r27, 0x00	; 0
    3386:	eb e2       	ldi	r30, 0x2B	; 43
    3388:	f0 e0       	ldi	r31, 0x00	; 0
    338a:	80 81       	ld	r24, Z
    338c:	8d 7f       	andi	r24, 0xFD	; 253
    338e:	8c 93       	st	X, r24
	CLR_BIT(UCSRA,MPCM);
    3390:	ab e2       	ldi	r26, 0x2B	; 43
    3392:	b0 e0       	ldi	r27, 0x00	; 0
    3394:	eb e2       	ldi	r30, 0x2B	; 43
    3396:	f0 e0       	ldi	r31, 0x00	; 0
    3398:	80 81       	ld	r24, Z
    339a:	8e 7f       	andi	r24, 0xFE	; 254
    339c:	8c 93       	st	X, r24

	//Baud rate
	UBRRH=0;
    339e:	e0 e4       	ldi	r30, 0x40	; 64
    33a0:	f0 e0       	ldi	r31, 0x00	; 0
    33a2:	10 82       	st	Z, r1
	UBRRL=51;
    33a4:	e9 e2       	ldi	r30, 0x29	; 41
    33a6:	f0 e0       	ldi	r31, 0x00	; 0
    33a8:	83 e3       	ldi	r24, 0x33	; 51
    33aa:	80 83       	st	Z, r24

	#if Ch_Size==EIGHT_BITS
	//frame size   // 8bit
	CLR_BIT(UCSRB,UCSZ2);
    33ac:	aa e2       	ldi	r26, 0x2A	; 42
    33ae:	b0 e0       	ldi	r27, 0x00	; 0
    33b0:	ea e2       	ldi	r30, 0x2A	; 42
    33b2:	f0 e0       	ldi	r31, 0x00	; 0
    33b4:	80 81       	ld	r24, Z
    33b6:	8b 7f       	andi	r24, 0xFB	; 251
    33b8:	8c 93       	st	X, r24
	SET_BIT(UCSRC_HELP,UCSZ1);
    33ba:	80 91 fa 00 	lds	r24, 0x00FA
    33be:	84 60       	ori	r24, 0x04	; 4
    33c0:	80 93 fa 00 	sts	0x00FA, r24
	SET_BIT(UCSRC_HELP,UCSZ0);
    33c4:	80 91 fa 00 	lds	r24, 0x00FA
    33c8:	82 60       	ori	r24, 0x02	; 2
    33ca:	80 93 fa 00 	sts	0x00FA, r24
		#error("Wrong choice")
		
	#endif

	// Select UCSRC
	SET_BIT(UCSRC_HELP,URSEL);
    33ce:	80 91 fa 00 	lds	r24, 0x00FA
    33d2:	80 68       	ori	r24, 0x80	; 128
    33d4:	80 93 fa 00 	sts	0x00FA, r24
	//Asynchronous Operation
	#if Mode==ASYNCHRONOUS_OP
	CLR_BIT(UCSRC_HELP,UMSEL);
    33d8:	80 91 fa 00 	lds	r24, 0x00FA
    33dc:	8f 7b       	andi	r24, 0xBF	; 191
    33de:	80 93 fa 00 	sts	0x00FA, r24
	#else 
		#error("Wrong choice")
	#endif
	// Disabled Parity Mode
	#if Parity_Mode==DISABLED
	CLR_BIT(UCSRC_HELP,UPM1);
    33e2:	80 91 fa 00 	lds	r24, 0x00FA
    33e6:	8f 7d       	andi	r24, 0xDF	; 223
    33e8:	80 93 fa 00 	sts	0x00FA, r24
	CLR_BIT(UCSRC_HELP,UPM0);
    33ec:	80 91 fa 00 	lds	r24, 0x00FA
    33f0:	8f 7e       	andi	r24, 0xEF	; 239
    33f2:	80 93 fa 00 	sts	0x00FA, r24
	#else
		#error("Wrong choice")
	#endif
	
	#if STOP_SELECT==ONE_BIT
	CLR_BIT(UCSRC_HELP,USBS);
    33f6:	80 91 fa 00 	lds	r24, 0x00FA
    33fa:	87 7f       	andi	r24, 0xF7	; 247
    33fc:	80 93 fa 00 	sts	0x00FA, r24
	#elif STOP_SELECT==TWO_BIT
	SET_BIT(UCSRC_HELP,USBS);
	#endif
	//Clock Polarity
	#if CL_POL==TR_RISING
	CLR_BIT(UCSRC_HELP,UCPOL);
    3400:	80 91 fa 00 	lds	r24, 0x00FA
    3404:	8e 7f       	andi	r24, 0xFE	; 254
    3406:	80 93 fa 00 	sts	0x00FA, r24
	


	//UCSRC Accessing

	UCSRC=UCSRC_HELP;
    340a:	e0 e4       	ldi	r30, 0x40	; 64
    340c:	f0 e0       	ldi	r31, 0x00	; 0
    340e:	80 91 fa 00 	lds	r24, 0x00FA
    3412:	80 83       	st	Z, r24

	//Transmitter Enable
	SET_BIT(UCSRB,TXEN);
    3414:	aa e2       	ldi	r26, 0x2A	; 42
    3416:	b0 e0       	ldi	r27, 0x00	; 0
    3418:	ea e2       	ldi	r30, 0x2A	; 42
    341a:	f0 e0       	ldi	r31, 0x00	; 0
    341c:	80 81       	ld	r24, Z
    341e:	88 60       	ori	r24, 0x08	; 8
    3420:	8c 93       	st	X, r24

	//Receiver Enable
	SET_BIT(UCSRB,RXEN);
    3422:	aa e2       	ldi	r26, 0x2A	; 42
    3424:	b0 e0       	ldi	r27, 0x00	; 0
    3426:	ea e2       	ldi	r30, 0x2A	; 42
    3428:	f0 e0       	ldi	r31, 0x00	; 0
    342a:	80 81       	ld	r24, Z
    342c:	80 61       	ori	r24, 0x10	; 16
    342e:	8c 93       	st	X, r24

}
    3430:	cf 91       	pop	r28
    3432:	df 91       	pop	r29
    3434:	08 95       	ret

00003436 <USART_u8Receive>:

u8 USART_u8Receive(void)
{
    3436:	df 93       	push	r29
    3438:	cf 93       	push	r28
    343a:	0f 92       	push	r0
    343c:	cd b7       	in	r28, 0x3d	; 61
    343e:	de b7       	in	r29, 0x3e	; 62
	u8 x;
	// USART Receive Complete
	while(0==GET_BIT(UCSRA,RXC));
    3440:	eb e2       	ldi	r30, 0x2B	; 43
    3442:	f0 e0       	ldi	r31, 0x00	; 0
    3444:	80 81       	ld	r24, Z
    3446:	88 23       	and	r24, r24
    3448:	dc f7       	brge	.-10     	; 0x3440 <USART_u8Receive+0xa>
	x=UDR;
    344a:	ec e2       	ldi	r30, 0x2C	; 44
    344c:	f0 e0       	ldi	r31, 0x00	; 0
    344e:	80 81       	ld	r24, Z
    3450:	89 83       	std	Y+1, r24	; 0x01
	return x;
    3452:	89 81       	ldd	r24, Y+1	; 0x01
}
    3454:	0f 90       	pop	r0
    3456:	cf 91       	pop	r28
    3458:	df 91       	pop	r29
    345a:	08 95       	ret

0000345c <USART_voidtransmit>:

void USART_voidtransmit(u8 data_transmitted)
{
    345c:	df 93       	push	r29
    345e:	cf 93       	push	r28
    3460:	0f 92       	push	r0
    3462:	cd b7       	in	r28, 0x3d	; 61
    3464:	de b7       	in	r29, 0x3e	; 62
    3466:	89 83       	std	Y+1, r24	; 0x01

	UDR=data_transmitted;
    3468:	ec e2       	ldi	r30, 0x2C	; 44
    346a:	f0 e0       	ldi	r31, 0x00	; 0
    346c:	89 81       	ldd	r24, Y+1	; 0x01
    346e:	80 83       	st	Z, r24
	// Data register empty
	//while UDR is not empty wait until it finishes
	while(0==GET_BIT(UCSRA,UDRE));
    3470:	eb e2       	ldi	r30, 0x2B	; 43
    3472:	f0 e0       	ldi	r31, 0x00	; 0
    3474:	80 81       	ld	r24, Z
    3476:	82 95       	swap	r24
    3478:	86 95       	lsr	r24
    347a:	87 70       	andi	r24, 0x07	; 7
    347c:	88 2f       	mov	r24, r24
    347e:	90 e0       	ldi	r25, 0x00	; 0
    3480:	81 70       	andi	r24, 0x01	; 1
    3482:	90 70       	andi	r25, 0x00	; 0
    3484:	00 97       	sbiw	r24, 0x00	; 0
    3486:	a1 f3       	breq	.-24     	; 0x3470 <USART_voidtransmit+0x14>

}
    3488:	0f 90       	pop	r0
    348a:	cf 91       	pop	r28
    348c:	df 91       	pop	r29
    348e:	08 95       	ret

00003490 <USART_voidSendString>:

void USART_voidSendString(char *str)
{
    3490:	df 93       	push	r29
    3492:	cf 93       	push	r28
    3494:	00 d0       	rcall	.+0      	; 0x3496 <USART_voidSendString+0x6>
    3496:	0f 92       	push	r0
    3498:	cd b7       	in	r28, 0x3d	; 61
    349a:	de b7       	in	r29, 0x3e	; 62
    349c:	9b 83       	std	Y+3, r25	; 0x03
    349e:	8a 83       	std	Y+2, r24	; 0x02
	u8 j=0;
    34a0:	19 82       	std	Y+1, r1	; 0x01
    34a2:	0e c0       	rjmp	.+28     	; 0x34c0 <USART_voidSendString+0x30>

	while (str[j]!=0)		/* Send string till null*/
	{
		USART_voidtransmit(str[j]);
    34a4:	89 81       	ldd	r24, Y+1	; 0x01
    34a6:	28 2f       	mov	r18, r24
    34a8:	30 e0       	ldi	r19, 0x00	; 0
    34aa:	8a 81       	ldd	r24, Y+2	; 0x02
    34ac:	9b 81       	ldd	r25, Y+3	; 0x03
    34ae:	fc 01       	movw	r30, r24
    34b0:	e2 0f       	add	r30, r18
    34b2:	f3 1f       	adc	r31, r19
    34b4:	80 81       	ld	r24, Z
    34b6:	0e 94 2e 1a 	call	0x345c	; 0x345c <USART_voidtransmit>
		j++;
    34ba:	89 81       	ldd	r24, Y+1	; 0x01
    34bc:	8f 5f       	subi	r24, 0xFF	; 255
    34be:	89 83       	std	Y+1, r24	; 0x01

void USART_voidSendString(char *str)
{
	u8 j=0;

	while (str[j]!=0)		/* Send string till null*/
    34c0:	89 81       	ldd	r24, Y+1	; 0x01
    34c2:	28 2f       	mov	r18, r24
    34c4:	30 e0       	ldi	r19, 0x00	; 0
    34c6:	8a 81       	ldd	r24, Y+2	; 0x02
    34c8:	9b 81       	ldd	r25, Y+3	; 0x03
    34ca:	fc 01       	movw	r30, r24
    34cc:	e2 0f       	add	r30, r18
    34ce:	f3 1f       	adc	r31, r19
    34d0:	80 81       	ld	r24, Z
    34d2:	88 23       	and	r24, r24
    34d4:	39 f7       	brne	.-50     	; 0x34a4 <USART_voidSendString+0x14>
	{
		USART_voidtransmit(str[j]);
		j++;
	}
}
    34d6:	0f 90       	pop	r0
    34d8:	0f 90       	pop	r0
    34da:	0f 90       	pop	r0
    34dc:	cf 91       	pop	r28
    34de:	df 91       	pop	r29
    34e0:	08 95       	ret

000034e2 <USART_u8ReceiveString>:


u8 *USART_u8ReceiveString(u8 *receive_string,u8 terminating_character)
{
    34e2:	0f 93       	push	r16
    34e4:	1f 93       	push	r17
    34e6:	df 93       	push	r29
    34e8:	cf 93       	push	r28
    34ea:	cd b7       	in	r28, 0x3d	; 61
    34ec:	de b7       	in	r29, 0x3e	; 62
    34ee:	27 97       	sbiw	r28, 0x07	; 7
    34f0:	0f b6       	in	r0, 0x3f	; 63
    34f2:	f8 94       	cli
    34f4:	de bf       	out	0x3e, r29	; 62
    34f6:	0f be       	out	0x3f, r0	; 63
    34f8:	cd bf       	out	0x3d, r28	; 61
    34fa:	9e 83       	std	Y+6, r25	; 0x06
    34fc:	8d 83       	std	Y+5, r24	; 0x05
    34fe:	6f 83       	std	Y+7, r22	; 0x07
	int i,temp=0;
    3500:	1a 82       	std	Y+2, r1	; 0x02
    3502:	19 82       	std	Y+1, r1	; 0x01
	for(i=0;;i++)
    3504:	1c 82       	std	Y+4, r1	; 0x04
    3506:	1b 82       	std	Y+3, r1	; 0x03
	{
		*(receive_string+i)=USART_u8Receive();
    3508:	2b 81       	ldd	r18, Y+3	; 0x03
    350a:	3c 81       	ldd	r19, Y+4	; 0x04
    350c:	8d 81       	ldd	r24, Y+5	; 0x05
    350e:	9e 81       	ldd	r25, Y+6	; 0x06
    3510:	8c 01       	movw	r16, r24
    3512:	02 0f       	add	r16, r18
    3514:	13 1f       	adc	r17, r19
    3516:	0e 94 1b 1a 	call	0x3436	; 0x3436 <USART_u8Receive>
    351a:	f8 01       	movw	r30, r16
    351c:	80 83       	st	Z, r24
		if(*(receive_string+i)==terminating_character)
    351e:	2b 81       	ldd	r18, Y+3	; 0x03
    3520:	3c 81       	ldd	r19, Y+4	; 0x04
    3522:	8d 81       	ldd	r24, Y+5	; 0x05
    3524:	9e 81       	ldd	r25, Y+6	; 0x06
    3526:	fc 01       	movw	r30, r24
    3528:	e2 0f       	add	r30, r18
    352a:	f3 1f       	adc	r31, r19
    352c:	90 81       	ld	r25, Z
    352e:	8f 81       	ldd	r24, Y+7	; 0x07
    3530:	98 17       	cp	r25, r24
    3532:	59 f0       	breq	.+22     	; 0x354a <USART_u8ReceiveString+0x68>
			break;
		else
			temp++;
    3534:	89 81       	ldd	r24, Y+1	; 0x01
    3536:	9a 81       	ldd	r25, Y+2	; 0x02
    3538:	01 96       	adiw	r24, 0x01	; 1
    353a:	9a 83       	std	Y+2, r25	; 0x02
    353c:	89 83       	std	Y+1, r24	; 0x01


u8 *USART_u8ReceiveString(u8 *receive_string,u8 terminating_character)
{
	int i,temp=0;
	for(i=0;;i++)
    353e:	8b 81       	ldd	r24, Y+3	; 0x03
    3540:	9c 81       	ldd	r25, Y+4	; 0x04
    3542:	01 96       	adiw	r24, 0x01	; 1
    3544:	9c 83       	std	Y+4, r25	; 0x04
    3546:	8b 83       	std	Y+3, r24	; 0x03
    3548:	df cf       	rjmp	.-66     	; 0x3508 <USART_u8ReceiveString+0x26>
		if(*(receive_string+i)==terminating_character)
			break;
		else
			temp++;
	}
	*(receive_string+temp)='\0';
    354a:	29 81       	ldd	r18, Y+1	; 0x01
    354c:	3a 81       	ldd	r19, Y+2	; 0x02
    354e:	8d 81       	ldd	r24, Y+5	; 0x05
    3550:	9e 81       	ldd	r25, Y+6	; 0x06
    3552:	fc 01       	movw	r30, r24
    3554:	e2 0f       	add	r30, r18
    3556:	f3 1f       	adc	r31, r19
    3558:	10 82       	st	Z, r1
	return receive_string;
    355a:	8d 81       	ldd	r24, Y+5	; 0x05
    355c:	9e 81       	ldd	r25, Y+6	; 0x06
}
    355e:	27 96       	adiw	r28, 0x07	; 7
    3560:	0f b6       	in	r0, 0x3f	; 63
    3562:	f8 94       	cli
    3564:	de bf       	out	0x3e, r29	; 62
    3566:	0f be       	out	0x3f, r0	; 63
    3568:	cd bf       	out	0x3d, r28	; 61
    356a:	cf 91       	pop	r28
    356c:	df 91       	pop	r29
    356e:	1f 91       	pop	r17
    3570:	0f 91       	pop	r16
    3572:	08 95       	ret

00003574 <main>:
u16 password=0 ;
u16 Get_Password(u8 Key);

#define DEFAULT_PASS		1234
void main()
{
    3574:	0f 93       	push	r16
    3576:	1f 93       	push	r17
    3578:	df 93       	push	r29
    357a:	cf 93       	push	r28
    357c:	cd b7       	in	r28, 0x3d	; 61
    357e:	de b7       	in	r29, 0x3e	; 62
    3580:	c2 58       	subi	r28, 0x82	; 130
    3582:	d0 40       	sbci	r29, 0x00	; 0
    3584:	0f b6       	in	r0, 0x3f	; 63
    3586:	f8 94       	cli
    3588:	de bf       	out	0x3e, r29	; 62
    358a:	0f be       	out	0x3f, r0	; 63
    358c:	cd bf       	out	0x3d, r28	; 61
	u8 buffer[50];
	u8 trials = 3;
    358e:	fe 01       	movw	r30, r28
    3590:	e0 5b       	subi	r30, 0xB0	; 176
    3592:	ff 4f       	sbci	r31, 0xFF	; 255
    3594:	83 e0       	ldi	r24, 0x03	; 3
    3596:	80 83       	st	Z, r24
	u16 pressed;
	u16 Password_Input;
	DIO_VidSetPinDirection(PORTA,PIN0,INPUT);
    3598:	80 e0       	ldi	r24, 0x00	; 0
    359a:	60 e0       	ldi	r22, 0x00	; 0
    359c:	40 e0       	ldi	r20, 0x00	; 0
    359e:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_VidSetPinDirection>
	Keypad_VoidInit();
    35a2:	0e 94 45 0b 	call	0x168a	; 0x168a <Keypad_VoidInit>
	LCD_VidInit();
    35a6:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <LCD_VidInit>
	ADC_VoidInit();
    35aa:	0e 94 bf 05 	call	0xb7e	; 0xb7e <ADC_VoidInit>
	ADC_VoidADCEnable();
    35ae:	0e 94 0e 07 	call	0xe1c	; 0xe1c <ADC_VoidADCEnable>
    35b2:	fe 01       	movw	r30, r28
    35b4:	ed 5b       	subi	r30, 0xBD	; 189
    35b6:	ff 4f       	sbci	r31, 0xFF	; 255
    35b8:	80 e0       	ldi	r24, 0x00	; 0
    35ba:	90 e0       	ldi	r25, 0x00	; 0
    35bc:	a8 ec       	ldi	r26, 0xC8	; 200
    35be:	b2 e4       	ldi	r27, 0x42	; 66
    35c0:	80 83       	st	Z, r24
    35c2:	91 83       	std	Z+1, r25	; 0x01
    35c4:	a2 83       	std	Z+2, r26	; 0x02
    35c6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35c8:	8e 01       	movw	r16, r28
    35ca:	01 5c       	subi	r16, 0xC1	; 193
    35cc:	1f 4f       	sbci	r17, 0xFF	; 255
    35ce:	fe 01       	movw	r30, r28
    35d0:	ed 5b       	subi	r30, 0xBD	; 189
    35d2:	ff 4f       	sbci	r31, 0xFF	; 255
    35d4:	60 81       	ld	r22, Z
    35d6:	71 81       	ldd	r23, Z+1	; 0x01
    35d8:	82 81       	ldd	r24, Z+2	; 0x02
    35da:	93 81       	ldd	r25, Z+3	; 0x03
    35dc:	20 e0       	ldi	r18, 0x00	; 0
    35de:	30 e0       	ldi	r19, 0x00	; 0
    35e0:	4a ef       	ldi	r20, 0xFA	; 250
    35e2:	54 e4       	ldi	r21, 0x44	; 68
    35e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35e8:	dc 01       	movw	r26, r24
    35ea:	cb 01       	movw	r24, r22
    35ec:	f8 01       	movw	r30, r16
    35ee:	80 83       	st	Z, r24
    35f0:	91 83       	std	Z+1, r25	; 0x01
    35f2:	a2 83       	std	Z+2, r26	; 0x02
    35f4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    35f6:	fe 01       	movw	r30, r28
    35f8:	ff 96       	adiw	r30, 0x3f	; 63
    35fa:	60 81       	ld	r22, Z
    35fc:	71 81       	ldd	r23, Z+1	; 0x01
    35fe:	82 81       	ldd	r24, Z+2	; 0x02
    3600:	93 81       	ldd	r25, Z+3	; 0x03
    3602:	20 e0       	ldi	r18, 0x00	; 0
    3604:	30 e0       	ldi	r19, 0x00	; 0
    3606:	40 e8       	ldi	r20, 0x80	; 128
    3608:	5f e3       	ldi	r21, 0x3F	; 63
    360a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    360e:	88 23       	and	r24, r24
    3610:	2c f4       	brge	.+10     	; 0x361c <main+0xa8>
		__ticks = 1;
    3612:	81 e0       	ldi	r24, 0x01	; 1
    3614:	90 e0       	ldi	r25, 0x00	; 0
    3616:	9e af       	std	Y+62, r25	; 0x3e
    3618:	8d af       	std	Y+61, r24	; 0x3d
    361a:	46 c0       	rjmp	.+140    	; 0x36a8 <main+0x134>
	else if (__tmp > 65535)
    361c:	fe 01       	movw	r30, r28
    361e:	ff 96       	adiw	r30, 0x3f	; 63
    3620:	60 81       	ld	r22, Z
    3622:	71 81       	ldd	r23, Z+1	; 0x01
    3624:	82 81       	ldd	r24, Z+2	; 0x02
    3626:	93 81       	ldd	r25, Z+3	; 0x03
    3628:	20 e0       	ldi	r18, 0x00	; 0
    362a:	3f ef       	ldi	r19, 0xFF	; 255
    362c:	4f e7       	ldi	r20, 0x7F	; 127
    362e:	57 e4       	ldi	r21, 0x47	; 71
    3630:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3634:	18 16       	cp	r1, r24
    3636:	64 f5       	brge	.+88     	; 0x3690 <main+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3638:	fe 01       	movw	r30, r28
    363a:	ed 5b       	subi	r30, 0xBD	; 189
    363c:	ff 4f       	sbci	r31, 0xFF	; 255
    363e:	60 81       	ld	r22, Z
    3640:	71 81       	ldd	r23, Z+1	; 0x01
    3642:	82 81       	ldd	r24, Z+2	; 0x02
    3644:	93 81       	ldd	r25, Z+3	; 0x03
    3646:	20 e0       	ldi	r18, 0x00	; 0
    3648:	30 e0       	ldi	r19, 0x00	; 0
    364a:	40 e2       	ldi	r20, 0x20	; 32
    364c:	51 e4       	ldi	r21, 0x41	; 65
    364e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3652:	dc 01       	movw	r26, r24
    3654:	cb 01       	movw	r24, r22
    3656:	bc 01       	movw	r22, r24
    3658:	cd 01       	movw	r24, r26
    365a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    365e:	dc 01       	movw	r26, r24
    3660:	cb 01       	movw	r24, r22
    3662:	9e af       	std	Y+62, r25	; 0x3e
    3664:	8d af       	std	Y+61, r24	; 0x3d
    3666:	0f c0       	rjmp	.+30     	; 0x3686 <main+0x112>
    3668:	88 ec       	ldi	r24, 0xC8	; 200
    366a:	90 e0       	ldi	r25, 0x00	; 0
    366c:	9c af       	std	Y+60, r25	; 0x3c
    366e:	8b af       	std	Y+59, r24	; 0x3b
    3670:	8b ad       	ldd	r24, Y+59	; 0x3b
    3672:	9c ad       	ldd	r25, Y+60	; 0x3c
    3674:	01 97       	sbiw	r24, 0x01	; 1
    3676:	f1 f7       	brne	.-4      	; 0x3674 <main+0x100>
    3678:	9c af       	std	Y+60, r25	; 0x3c
    367a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    367c:	8d ad       	ldd	r24, Y+61	; 0x3d
    367e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3680:	01 97       	sbiw	r24, 0x01	; 1
    3682:	9e af       	std	Y+62, r25	; 0x3e
    3684:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3686:	8d ad       	ldd	r24, Y+61	; 0x3d
    3688:	9e ad       	ldd	r25, Y+62	; 0x3e
    368a:	00 97       	sbiw	r24, 0x00	; 0
    368c:	69 f7       	brne	.-38     	; 0x3668 <main+0xf4>
    368e:	16 c0       	rjmp	.+44     	; 0x36bc <main+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3690:	fe 01       	movw	r30, r28
    3692:	ff 96       	adiw	r30, 0x3f	; 63
    3694:	60 81       	ld	r22, Z
    3696:	71 81       	ldd	r23, Z+1	; 0x01
    3698:	82 81       	ldd	r24, Z+2	; 0x02
    369a:	93 81       	ldd	r25, Z+3	; 0x03
    369c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36a0:	dc 01       	movw	r26, r24
    36a2:	cb 01       	movw	r24, r22
    36a4:	9e af       	std	Y+62, r25	; 0x3e
    36a6:	8d af       	std	Y+61, r24	; 0x3d
    36a8:	8d ad       	ldd	r24, Y+61	; 0x3d
    36aa:	9e ad       	ldd	r25, Y+62	; 0x3e
    36ac:	9a af       	std	Y+58, r25	; 0x3a
    36ae:	89 af       	std	Y+57, r24	; 0x39
    36b0:	89 ad       	ldd	r24, Y+57	; 0x39
    36b2:	9a ad       	ldd	r25, Y+58	; 0x3a
    36b4:	01 97       	sbiw	r24, 0x01	; 1
    36b6:	f1 f7       	brne	.-4      	; 0x36b4 <main+0x140>
    36b8:	9a af       	std	Y+58, r25	; 0x3a
    36ba:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(100);

	u32 Digital_value=0;
    36bc:	fe 01       	movw	r30, r28
    36be:	e8 5b       	subi	r30, 0xB8	; 184
    36c0:	ff 4f       	sbci	r31, 0xFF	; 255
    36c2:	10 82       	st	Z, r1
    36c4:	11 82       	std	Z+1, r1	; 0x01
    36c6:	12 82       	std	Z+2, r1	; 0x02
    36c8:	13 82       	std	Z+3, r1	; 0x03
    36ca:	80 e0       	ldi	r24, 0x00	; 0
    36cc:	90 e0       	ldi	r25, 0x00	; 0
    36ce:	aa e7       	ldi	r26, 0x7A	; 122
    36d0:	b4 e4       	ldi	r27, 0x44	; 68
    36d2:	8d ab       	std	Y+53, r24	; 0x35
    36d4:	9e ab       	std	Y+54, r25	; 0x36
    36d6:	af ab       	std	Y+55, r26	; 0x37
    36d8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36da:	6d a9       	ldd	r22, Y+53	; 0x35
    36dc:	7e a9       	ldd	r23, Y+54	; 0x36
    36de:	8f a9       	ldd	r24, Y+55	; 0x37
    36e0:	98 ad       	ldd	r25, Y+56	; 0x38
    36e2:	20 e0       	ldi	r18, 0x00	; 0
    36e4:	30 e0       	ldi	r19, 0x00	; 0
    36e6:	4a ef       	ldi	r20, 0xFA	; 250
    36e8:	54 e4       	ldi	r21, 0x44	; 68
    36ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36ee:	dc 01       	movw	r26, r24
    36f0:	cb 01       	movw	r24, r22
    36f2:	89 ab       	std	Y+49, r24	; 0x31
    36f4:	9a ab       	std	Y+50, r25	; 0x32
    36f6:	ab ab       	std	Y+51, r26	; 0x33
    36f8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    36fa:	69 a9       	ldd	r22, Y+49	; 0x31
    36fc:	7a a9       	ldd	r23, Y+50	; 0x32
    36fe:	8b a9       	ldd	r24, Y+51	; 0x33
    3700:	9c a9       	ldd	r25, Y+52	; 0x34
    3702:	20 e0       	ldi	r18, 0x00	; 0
    3704:	30 e0       	ldi	r19, 0x00	; 0
    3706:	40 e8       	ldi	r20, 0x80	; 128
    3708:	5f e3       	ldi	r21, 0x3F	; 63
    370a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    370e:	88 23       	and	r24, r24
    3710:	2c f4       	brge	.+10     	; 0x371c <main+0x1a8>
		__ticks = 1;
    3712:	81 e0       	ldi	r24, 0x01	; 1
    3714:	90 e0       	ldi	r25, 0x00	; 0
    3716:	98 ab       	std	Y+48, r25	; 0x30
    3718:	8f a7       	std	Y+47, r24	; 0x2f
    371a:	3f c0       	rjmp	.+126    	; 0x379a <main+0x226>
	else if (__tmp > 65535)
    371c:	69 a9       	ldd	r22, Y+49	; 0x31
    371e:	7a a9       	ldd	r23, Y+50	; 0x32
    3720:	8b a9       	ldd	r24, Y+51	; 0x33
    3722:	9c a9       	ldd	r25, Y+52	; 0x34
    3724:	20 e0       	ldi	r18, 0x00	; 0
    3726:	3f ef       	ldi	r19, 0xFF	; 255
    3728:	4f e7       	ldi	r20, 0x7F	; 127
    372a:	57 e4       	ldi	r21, 0x47	; 71
    372c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3730:	18 16       	cp	r1, r24
    3732:	4c f5       	brge	.+82     	; 0x3786 <main+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3734:	6d a9       	ldd	r22, Y+53	; 0x35
    3736:	7e a9       	ldd	r23, Y+54	; 0x36
    3738:	8f a9       	ldd	r24, Y+55	; 0x37
    373a:	98 ad       	ldd	r25, Y+56	; 0x38
    373c:	20 e0       	ldi	r18, 0x00	; 0
    373e:	30 e0       	ldi	r19, 0x00	; 0
    3740:	40 e2       	ldi	r20, 0x20	; 32
    3742:	51 e4       	ldi	r21, 0x41	; 65
    3744:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3748:	dc 01       	movw	r26, r24
    374a:	cb 01       	movw	r24, r22
    374c:	bc 01       	movw	r22, r24
    374e:	cd 01       	movw	r24, r26
    3750:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3754:	dc 01       	movw	r26, r24
    3756:	cb 01       	movw	r24, r22
    3758:	98 ab       	std	Y+48, r25	; 0x30
    375a:	8f a7       	std	Y+47, r24	; 0x2f
    375c:	0f c0       	rjmp	.+30     	; 0x377c <main+0x208>
    375e:	88 ec       	ldi	r24, 0xC8	; 200
    3760:	90 e0       	ldi	r25, 0x00	; 0
    3762:	9e a7       	std	Y+46, r25	; 0x2e
    3764:	8d a7       	std	Y+45, r24	; 0x2d
    3766:	8d a5       	ldd	r24, Y+45	; 0x2d
    3768:	9e a5       	ldd	r25, Y+46	; 0x2e
    376a:	01 97       	sbiw	r24, 0x01	; 1
    376c:	f1 f7       	brne	.-4      	; 0x376a <main+0x1f6>
    376e:	9e a7       	std	Y+46, r25	; 0x2e
    3770:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3772:	8f a5       	ldd	r24, Y+47	; 0x2f
    3774:	98 a9       	ldd	r25, Y+48	; 0x30
    3776:	01 97       	sbiw	r24, 0x01	; 1
    3778:	98 ab       	std	Y+48, r25	; 0x30
    377a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    377c:	8f a5       	ldd	r24, Y+47	; 0x2f
    377e:	98 a9       	ldd	r25, Y+48	; 0x30
    3780:	00 97       	sbiw	r24, 0x00	; 0
    3782:	69 f7       	brne	.-38     	; 0x375e <main+0x1ea>
    3784:	14 c0       	rjmp	.+40     	; 0x37ae <main+0x23a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3786:	69 a9       	ldd	r22, Y+49	; 0x31
    3788:	7a a9       	ldd	r23, Y+50	; 0x32
    378a:	8b a9       	ldd	r24, Y+51	; 0x33
    378c:	9c a9       	ldd	r25, Y+52	; 0x34
    378e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3792:	dc 01       	movw	r26, r24
    3794:	cb 01       	movw	r24, r22
    3796:	98 ab       	std	Y+48, r25	; 0x30
    3798:	8f a7       	std	Y+47, r24	; 0x2f
    379a:	8f a5       	ldd	r24, Y+47	; 0x2f
    379c:	98 a9       	ldd	r25, Y+48	; 0x30
    379e:	9c a7       	std	Y+44, r25	; 0x2c
    37a0:	8b a7       	std	Y+43, r24	; 0x2b
    37a2:	8b a5       	ldd	r24, Y+43	; 0x2b
    37a4:	9c a5       	ldd	r25, Y+44	; 0x2c
    37a6:	01 97       	sbiw	r24, 0x01	; 1
    37a8:	f1 f7       	brne	.-4      	; 0x37a6 <main+0x232>
    37aa:	9c a7       	std	Y+44, r25	; 0x2c
    37ac:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1000);
	LCD_VidClear();
    37ae:	0e 94 95 19 	call	0x332a	; 0x332a <LCD_VidClear>

	while(1)
	{
		LCD_VidSetPosition(0,0);
    37b2:	80 e0       	ldi	r24, 0x00	; 0
    37b4:	60 e0       	ldi	r22, 0x00	; 0
    37b6:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <LCD_VidSetPosition>
		LCD_VidSendString("Welcome to our SmartHome ");
    37ba:	80 e6       	ldi	r24, 0x60	; 96
    37bc:	90 e0       	ldi	r25, 0x00	; 0
    37be:	0e 94 8b 18 	call	0x3116	; 0x3116 <LCD_VidSendString>
		LCD_VidSetPosition(1,5);
    37c2:	81 e0       	ldi	r24, 0x01	; 1
    37c4:	65 e0       	ldi	r22, 0x05	; 5
    37c6:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <LCD_VidSetPosition>
		LCD_VidSendString("SmartHome ");
    37ca:	8a e7       	ldi	r24, 0x7A	; 122
    37cc:	90 e0       	ldi	r25, 0x00	; 0
    37ce:	0e 94 8b 18 	call	0x3116	; 0x3116 <LCD_VidSendString>
    37d2:	80 e0       	ldi	r24, 0x00	; 0
    37d4:	90 e0       	ldi	r25, 0x00	; 0
    37d6:	aa e7       	ldi	r26, 0x7A	; 122
    37d8:	b4 e4       	ldi	r27, 0x44	; 68
    37da:	8f a3       	std	Y+39, r24	; 0x27
    37dc:	98 a7       	std	Y+40, r25	; 0x28
    37de:	a9 a7       	std	Y+41, r26	; 0x29
    37e0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37e2:	6f a1       	ldd	r22, Y+39	; 0x27
    37e4:	78 a5       	ldd	r23, Y+40	; 0x28
    37e6:	89 a5       	ldd	r24, Y+41	; 0x29
    37e8:	9a a5       	ldd	r25, Y+42	; 0x2a
    37ea:	20 e0       	ldi	r18, 0x00	; 0
    37ec:	30 e0       	ldi	r19, 0x00	; 0
    37ee:	4a ef       	ldi	r20, 0xFA	; 250
    37f0:	54 e4       	ldi	r21, 0x44	; 68
    37f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37f6:	dc 01       	movw	r26, r24
    37f8:	cb 01       	movw	r24, r22
    37fa:	8b a3       	std	Y+35, r24	; 0x23
    37fc:	9c a3       	std	Y+36, r25	; 0x24
    37fe:	ad a3       	std	Y+37, r26	; 0x25
    3800:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3802:	6b a1       	ldd	r22, Y+35	; 0x23
    3804:	7c a1       	ldd	r23, Y+36	; 0x24
    3806:	8d a1       	ldd	r24, Y+37	; 0x25
    3808:	9e a1       	ldd	r25, Y+38	; 0x26
    380a:	20 e0       	ldi	r18, 0x00	; 0
    380c:	30 e0       	ldi	r19, 0x00	; 0
    380e:	40 e8       	ldi	r20, 0x80	; 128
    3810:	5f e3       	ldi	r21, 0x3F	; 63
    3812:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3816:	88 23       	and	r24, r24
    3818:	2c f4       	brge	.+10     	; 0x3824 <main+0x2b0>
		__ticks = 1;
    381a:	81 e0       	ldi	r24, 0x01	; 1
    381c:	90 e0       	ldi	r25, 0x00	; 0
    381e:	9a a3       	std	Y+34, r25	; 0x22
    3820:	89 a3       	std	Y+33, r24	; 0x21
    3822:	3f c0       	rjmp	.+126    	; 0x38a2 <main+0x32e>
	else if (__tmp > 65535)
    3824:	6b a1       	ldd	r22, Y+35	; 0x23
    3826:	7c a1       	ldd	r23, Y+36	; 0x24
    3828:	8d a1       	ldd	r24, Y+37	; 0x25
    382a:	9e a1       	ldd	r25, Y+38	; 0x26
    382c:	20 e0       	ldi	r18, 0x00	; 0
    382e:	3f ef       	ldi	r19, 0xFF	; 255
    3830:	4f e7       	ldi	r20, 0x7F	; 127
    3832:	57 e4       	ldi	r21, 0x47	; 71
    3834:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3838:	18 16       	cp	r1, r24
    383a:	4c f5       	brge	.+82     	; 0x388e <main+0x31a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    383c:	6f a1       	ldd	r22, Y+39	; 0x27
    383e:	78 a5       	ldd	r23, Y+40	; 0x28
    3840:	89 a5       	ldd	r24, Y+41	; 0x29
    3842:	9a a5       	ldd	r25, Y+42	; 0x2a
    3844:	20 e0       	ldi	r18, 0x00	; 0
    3846:	30 e0       	ldi	r19, 0x00	; 0
    3848:	40 e2       	ldi	r20, 0x20	; 32
    384a:	51 e4       	ldi	r21, 0x41	; 65
    384c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3850:	dc 01       	movw	r26, r24
    3852:	cb 01       	movw	r24, r22
    3854:	bc 01       	movw	r22, r24
    3856:	cd 01       	movw	r24, r26
    3858:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    385c:	dc 01       	movw	r26, r24
    385e:	cb 01       	movw	r24, r22
    3860:	9a a3       	std	Y+34, r25	; 0x22
    3862:	89 a3       	std	Y+33, r24	; 0x21
    3864:	0f c0       	rjmp	.+30     	; 0x3884 <main+0x310>
    3866:	88 ec       	ldi	r24, 0xC8	; 200
    3868:	90 e0       	ldi	r25, 0x00	; 0
    386a:	98 a3       	std	Y+32, r25	; 0x20
    386c:	8f 8f       	std	Y+31, r24	; 0x1f
    386e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3870:	98 a1       	ldd	r25, Y+32	; 0x20
    3872:	01 97       	sbiw	r24, 0x01	; 1
    3874:	f1 f7       	brne	.-4      	; 0x3872 <main+0x2fe>
    3876:	98 a3       	std	Y+32, r25	; 0x20
    3878:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    387a:	89 a1       	ldd	r24, Y+33	; 0x21
    387c:	9a a1       	ldd	r25, Y+34	; 0x22
    387e:	01 97       	sbiw	r24, 0x01	; 1
    3880:	9a a3       	std	Y+34, r25	; 0x22
    3882:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3884:	89 a1       	ldd	r24, Y+33	; 0x21
    3886:	9a a1       	ldd	r25, Y+34	; 0x22
    3888:	00 97       	sbiw	r24, 0x00	; 0
    388a:	69 f7       	brne	.-38     	; 0x3866 <main+0x2f2>
    388c:	14 c0       	rjmp	.+40     	; 0x38b6 <main+0x342>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    388e:	6b a1       	ldd	r22, Y+35	; 0x23
    3890:	7c a1       	ldd	r23, Y+36	; 0x24
    3892:	8d a1       	ldd	r24, Y+37	; 0x25
    3894:	9e a1       	ldd	r25, Y+38	; 0x26
    3896:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    389a:	dc 01       	movw	r26, r24
    389c:	cb 01       	movw	r24, r22
    389e:	9a a3       	std	Y+34, r25	; 0x22
    38a0:	89 a3       	std	Y+33, r24	; 0x21
    38a2:	89 a1       	ldd	r24, Y+33	; 0x21
    38a4:	9a a1       	ldd	r25, Y+34	; 0x22
    38a6:	9e 8f       	std	Y+30, r25	; 0x1e
    38a8:	8d 8f       	std	Y+29, r24	; 0x1d
    38aa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    38ac:	9e 8d       	ldd	r25, Y+30	; 0x1e
    38ae:	01 97       	sbiw	r24, 0x01	; 1
    38b0:	f1 f7       	brne	.-4      	; 0x38ae <main+0x33a>
    38b2:	9e 8f       	std	Y+30, r25	; 0x1e
    38b4:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1000);
		LCD_VidClear();
    38b6:	0e 94 95 19 	call	0x332a	; 0x332a <LCD_VidClear>
		LCD_VidSetPosition(0,0);
    38ba:	80 e0       	ldi	r24, 0x00	; 0
    38bc:	60 e0       	ldi	r22, 0x00	; 0
    38be:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <LCD_VidSetPosition>
		LCD_VidSendString("Enter Password: ");
    38c2:	85 e8       	ldi	r24, 0x85	; 133
    38c4:	90 e0       	ldi	r25, 0x00	; 0
    38c6:	0e 94 8b 18 	call	0x3116	; 0x3116 <LCD_VidSendString>
		LCD_VidSetPosition(1,0);
    38ca:	81 e0       	ldi	r24, 0x01	; 1
    38cc:	60 e0       	ldi	r22, 0x00	; 0
    38ce:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <LCD_VidSetPosition>
    38d2:	f4 c0       	rjmp	.+488    	; 0x3abc <main+0x548>
		while(trials >0)
		{
			u8 i =4;
    38d4:	fe 01       	movw	r30, r28
    38d6:	e9 5b       	subi	r30, 0xB9	; 185
    38d8:	ff 4f       	sbci	r31, 0xFF	; 255
    38da:	84 e0       	ldi	r24, 0x04	; 4
    38dc:	80 83       	st	Z, r24
    38de:	25 c0       	rjmp	.+74     	; 0x392a <main+0x3b6>
			while(1)
			{
				while(i>0)
				{
					pressed= Keypad_U8ReadPin();
    38e0:	0e 94 9c 0b 	call	0x1738	; 0x1738 <Keypad_U8ReadPin>
    38e4:	fe 01       	movw	r30, r28
    38e6:	e2 5b       	subi	r30, 0xB2	; 178
    38e8:	ff 4f       	sbci	r31, 0xFF	; 255
    38ea:	88 2f       	mov	r24, r24
    38ec:	90 e0       	ldi	r25, 0x00	; 0
    38ee:	91 83       	std	Z+1, r25	; 0x01
    38f0:	80 83       	st	Z, r24
					if(pressed != DEFAULT_KEY)
    38f2:	fe 01       	movw	r30, r28
    38f4:	e2 5b       	subi	r30, 0xB2	; 178
    38f6:	ff 4f       	sbci	r31, 0xFF	; 255
    38f8:	80 81       	ld	r24, Z
    38fa:	91 81       	ldd	r25, Z+1	; 0x01
    38fc:	83 34       	cpi	r24, 0x43	; 67
    38fe:	91 05       	cpc	r25, r1
    3900:	a1 f0       	breq	.+40     	; 0x392a <main+0x3b6>
					{
						Password_Input=	Get_Password(pressed);
    3902:	fe 01       	movw	r30, r28
    3904:	e2 5b       	subi	r30, 0xB2	; 178
    3906:	ff 4f       	sbci	r31, 0xFF	; 255
    3908:	80 81       	ld	r24, Z
    390a:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <Get_Password>
    390e:	fe 01       	movw	r30, r28
    3910:	e4 5b       	subi	r30, 0xB4	; 180
    3912:	ff 4f       	sbci	r31, 0xFF	; 255
    3914:	91 83       	std	Z+1, r25	; 0x01
    3916:	80 83       	st	Z, r24
						--i ;
    3918:	de 01       	movw	r26, r28
    391a:	a9 5b       	subi	r26, 0xB9	; 185
    391c:	bf 4f       	sbci	r27, 0xFF	; 255
    391e:	fe 01       	movw	r30, r28
    3920:	e9 5b       	subi	r30, 0xB9	; 185
    3922:	ff 4f       	sbci	r31, 0xFF	; 255
    3924:	80 81       	ld	r24, Z
    3926:	81 50       	subi	r24, 0x01	; 1
    3928:	8c 93       	st	X, r24
		while(trials >0)
		{
			u8 i =4;
			while(1)
			{
				while(i>0)
    392a:	fe 01       	movw	r30, r28
    392c:	e9 5b       	subi	r30, 0xB9	; 185
    392e:	ff 4f       	sbci	r31, 0xFF	; 255
    3930:	80 81       	ld	r24, Z
    3932:	88 23       	and	r24, r24
    3934:	a9 f6       	brne	.-86     	; 0x38e0 <main+0x36c>
				}
				break;

			}

			trials -- ;
    3936:	de 01       	movw	r26, r28
    3938:	a0 5b       	subi	r26, 0xB0	; 176
    393a:	bf 4f       	sbci	r27, 0xFF	; 255
    393c:	fe 01       	movw	r30, r28
    393e:	e0 5b       	subi	r30, 0xB0	; 176
    3940:	ff 4f       	sbci	r31, 0xFF	; 255
    3942:	80 81       	ld	r24, Z
    3944:	81 50       	subi	r24, 0x01	; 1
    3946:	8c 93       	st	X, r24
			if(Password_Input == DEFAULT_PASS)
    3948:	fe 01       	movw	r30, r28
    394a:	e4 5b       	subi	r30, 0xB4	; 180
    394c:	ff 4f       	sbci	r31, 0xFF	; 255
    394e:	80 81       	ld	r24, Z
    3950:	91 81       	ldd	r25, Z+1	; 0x01
    3952:	f4 e0       	ldi	r31, 0x04	; 4
    3954:	82 3d       	cpi	r24, 0xD2	; 210
    3956:	9f 07       	cpc	r25, r31
    3958:	09 f4       	brne	.+2      	; 0x395c <main+0x3e8>
    395a:	b7 c0       	rjmp	.+366    	; 0x3aca <main+0x556>
			{
				break;
			}
			else
			{
				sprintf(buffer,"You have %d Trials", trials);
    395c:	fe 01       	movw	r30, r28
    395e:	e0 5b       	subi	r30, 0xB0	; 176
    3960:	ff 4f       	sbci	r31, 0xFF	; 255
    3962:	80 81       	ld	r24, Z
    3964:	28 2f       	mov	r18, r24
    3966:	30 e0       	ldi	r19, 0x00	; 0
    3968:	00 d0       	rcall	.+0      	; 0x396a <main+0x3f6>
    396a:	00 d0       	rcall	.+0      	; 0x396c <main+0x3f8>
    396c:	00 d0       	rcall	.+0      	; 0x396e <main+0x3fa>
    396e:	ed b7       	in	r30, 0x3d	; 61
    3970:	fe b7       	in	r31, 0x3e	; 62
    3972:	31 96       	adiw	r30, 0x01	; 1
    3974:	ce 01       	movw	r24, r28
    3976:	8f 5a       	subi	r24, 0xAF	; 175
    3978:	9f 4f       	sbci	r25, 0xFF	; 255
    397a:	91 83       	std	Z+1, r25	; 0x01
    397c:	80 83       	st	Z, r24
    397e:	86 e9       	ldi	r24, 0x96	; 150
    3980:	90 e0       	ldi	r25, 0x00	; 0
    3982:	93 83       	std	Z+3, r25	; 0x03
    3984:	82 83       	std	Z+2, r24	; 0x02
    3986:	35 83       	std	Z+5, r19	; 0x05
    3988:	24 83       	std	Z+4, r18	; 0x04
    398a:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <sprintf>
    398e:	8d b7       	in	r24, 0x3d	; 61
    3990:	9e b7       	in	r25, 0x3e	; 62
    3992:	06 96       	adiw	r24, 0x06	; 6
    3994:	0f b6       	in	r0, 0x3f	; 63
    3996:	f8 94       	cli
    3998:	9e bf       	out	0x3e, r25	; 62
    399a:	0f be       	out	0x3f, r0	; 63
    399c:	8d bf       	out	0x3d, r24	; 61
				LCD_VidClear();
    399e:	0e 94 95 19 	call	0x332a	; 0x332a <LCD_VidClear>
				LCD_VidSetPosition(0,0);
    39a2:	80 e0       	ldi	r24, 0x00	; 0
    39a4:	60 e0       	ldi	r22, 0x00	; 0
    39a6:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <LCD_VidSetPosition>
				LCD_VidSendString(buffer);
    39aa:	ce 01       	movw	r24, r28
    39ac:	8f 5a       	subi	r24, 0xAF	; 175
    39ae:	9f 4f       	sbci	r25, 0xFF	; 255
    39b0:	0e 94 8b 18 	call	0x3116	; 0x3116 <LCD_VidSendString>
    39b4:	80 e0       	ldi	r24, 0x00	; 0
    39b6:	90 e0       	ldi	r25, 0x00	; 0
    39b8:	aa ef       	ldi	r26, 0xFA	; 250
    39ba:	b3 e4       	ldi	r27, 0x43	; 67
    39bc:	89 8f       	std	Y+25, r24	; 0x19
    39be:	9a 8f       	std	Y+26, r25	; 0x1a
    39c0:	ab 8f       	std	Y+27, r26	; 0x1b
    39c2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39c4:	69 8d       	ldd	r22, Y+25	; 0x19
    39c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    39c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    39ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    39cc:	20 e0       	ldi	r18, 0x00	; 0
    39ce:	30 e0       	ldi	r19, 0x00	; 0
    39d0:	4a ef       	ldi	r20, 0xFA	; 250
    39d2:	54 e4       	ldi	r21, 0x44	; 68
    39d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39d8:	dc 01       	movw	r26, r24
    39da:	cb 01       	movw	r24, r22
    39dc:	8d 8b       	std	Y+21, r24	; 0x15
    39de:	9e 8b       	std	Y+22, r25	; 0x16
    39e0:	af 8b       	std	Y+23, r26	; 0x17
    39e2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    39e4:	6d 89       	ldd	r22, Y+21	; 0x15
    39e6:	7e 89       	ldd	r23, Y+22	; 0x16
    39e8:	8f 89       	ldd	r24, Y+23	; 0x17
    39ea:	98 8d       	ldd	r25, Y+24	; 0x18
    39ec:	20 e0       	ldi	r18, 0x00	; 0
    39ee:	30 e0       	ldi	r19, 0x00	; 0
    39f0:	40 e8       	ldi	r20, 0x80	; 128
    39f2:	5f e3       	ldi	r21, 0x3F	; 63
    39f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    39f8:	88 23       	and	r24, r24
    39fa:	2c f4       	brge	.+10     	; 0x3a06 <main+0x492>
		__ticks = 1;
    39fc:	81 e0       	ldi	r24, 0x01	; 1
    39fe:	90 e0       	ldi	r25, 0x00	; 0
    3a00:	9c 8b       	std	Y+20, r25	; 0x14
    3a02:	8b 8b       	std	Y+19, r24	; 0x13
    3a04:	3f c0       	rjmp	.+126    	; 0x3a84 <main+0x510>
	else if (__tmp > 65535)
    3a06:	6d 89       	ldd	r22, Y+21	; 0x15
    3a08:	7e 89       	ldd	r23, Y+22	; 0x16
    3a0a:	8f 89       	ldd	r24, Y+23	; 0x17
    3a0c:	98 8d       	ldd	r25, Y+24	; 0x18
    3a0e:	20 e0       	ldi	r18, 0x00	; 0
    3a10:	3f ef       	ldi	r19, 0xFF	; 255
    3a12:	4f e7       	ldi	r20, 0x7F	; 127
    3a14:	57 e4       	ldi	r21, 0x47	; 71
    3a16:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a1a:	18 16       	cp	r1, r24
    3a1c:	4c f5       	brge	.+82     	; 0x3a70 <main+0x4fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a1e:	69 8d       	ldd	r22, Y+25	; 0x19
    3a20:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a22:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a24:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a26:	20 e0       	ldi	r18, 0x00	; 0
    3a28:	30 e0       	ldi	r19, 0x00	; 0
    3a2a:	40 e2       	ldi	r20, 0x20	; 32
    3a2c:	51 e4       	ldi	r21, 0x41	; 65
    3a2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a32:	dc 01       	movw	r26, r24
    3a34:	cb 01       	movw	r24, r22
    3a36:	bc 01       	movw	r22, r24
    3a38:	cd 01       	movw	r24, r26
    3a3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a3e:	dc 01       	movw	r26, r24
    3a40:	cb 01       	movw	r24, r22
    3a42:	9c 8b       	std	Y+20, r25	; 0x14
    3a44:	8b 8b       	std	Y+19, r24	; 0x13
    3a46:	0f c0       	rjmp	.+30     	; 0x3a66 <main+0x4f2>
    3a48:	88 ec       	ldi	r24, 0xC8	; 200
    3a4a:	90 e0       	ldi	r25, 0x00	; 0
    3a4c:	9a 8b       	std	Y+18, r25	; 0x12
    3a4e:	89 8b       	std	Y+17, r24	; 0x11
    3a50:	89 89       	ldd	r24, Y+17	; 0x11
    3a52:	9a 89       	ldd	r25, Y+18	; 0x12
    3a54:	01 97       	sbiw	r24, 0x01	; 1
    3a56:	f1 f7       	brne	.-4      	; 0x3a54 <main+0x4e0>
    3a58:	9a 8b       	std	Y+18, r25	; 0x12
    3a5a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a5c:	8b 89       	ldd	r24, Y+19	; 0x13
    3a5e:	9c 89       	ldd	r25, Y+20	; 0x14
    3a60:	01 97       	sbiw	r24, 0x01	; 1
    3a62:	9c 8b       	std	Y+20, r25	; 0x14
    3a64:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a66:	8b 89       	ldd	r24, Y+19	; 0x13
    3a68:	9c 89       	ldd	r25, Y+20	; 0x14
    3a6a:	00 97       	sbiw	r24, 0x00	; 0
    3a6c:	69 f7       	brne	.-38     	; 0x3a48 <main+0x4d4>
    3a6e:	14 c0       	rjmp	.+40     	; 0x3a98 <main+0x524>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a70:	6d 89       	ldd	r22, Y+21	; 0x15
    3a72:	7e 89       	ldd	r23, Y+22	; 0x16
    3a74:	8f 89       	ldd	r24, Y+23	; 0x17
    3a76:	98 8d       	ldd	r25, Y+24	; 0x18
    3a78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a7c:	dc 01       	movw	r26, r24
    3a7e:	cb 01       	movw	r24, r22
    3a80:	9c 8b       	std	Y+20, r25	; 0x14
    3a82:	8b 8b       	std	Y+19, r24	; 0x13
    3a84:	8b 89       	ldd	r24, Y+19	; 0x13
    3a86:	9c 89       	ldd	r25, Y+20	; 0x14
    3a88:	98 8b       	std	Y+16, r25	; 0x10
    3a8a:	8f 87       	std	Y+15, r24	; 0x0f
    3a8c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a8e:	98 89       	ldd	r25, Y+16	; 0x10
    3a90:	01 97       	sbiw	r24, 0x01	; 1
    3a92:	f1 f7       	brne	.-4      	; 0x3a90 <main+0x51c>
    3a94:	98 8b       	std	Y+16, r25	; 0x10
    3a96:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(500);
				LCD_VidClear();
    3a98:	0e 94 95 19 	call	0x332a	; 0x332a <LCD_VidClear>
				LCD_VidSetPosition(0,0);
    3a9c:	80 e0       	ldi	r24, 0x00	; 0
    3a9e:	60 e0       	ldi	r22, 0x00	; 0
    3aa0:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <LCD_VidSetPosition>
				LCD_VidSendString("Enter Password: ");
    3aa4:	85 e8       	ldi	r24, 0x85	; 133
    3aa6:	90 e0       	ldi	r25, 0x00	; 0
    3aa8:	0e 94 8b 18 	call	0x3116	; 0x3116 <LCD_VidSendString>
				LCD_VidSetPosition(1,0);
    3aac:	81 e0       	ldi	r24, 0x01	; 1
    3aae:	60 e0       	ldi	r22, 0x00	; 0
    3ab0:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <LCD_VidSetPosition>
				password=0;
    3ab4:	10 92 fc 00 	sts	0x00FC, r1
    3ab8:	10 92 fb 00 	sts	0x00FB, r1
		_delay_ms(1000);
		LCD_VidClear();
		LCD_VidSetPosition(0,0);
		LCD_VidSendString("Enter Password: ");
		LCD_VidSetPosition(1,0);
		while(trials >0)
    3abc:	fe 01       	movw	r30, r28
    3abe:	e0 5b       	subi	r30, 0xB0	; 176
    3ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ac2:	80 81       	ld	r24, Z
    3ac4:	88 23       	and	r24, r24
    3ac6:	09 f0       	breq	.+2      	; 0x3aca <main+0x556>
    3ac8:	05 cf       	rjmp	.-502    	; 0x38d4 <main+0x360>
				password=0;
			}


		}
		if(trials==0)
    3aca:	fe 01       	movw	r30, r28
    3acc:	e0 5b       	subi	r30, 0xB0	; 176
    3ace:	ff 4f       	sbci	r31, 0xFF	; 255
    3ad0:	80 81       	ld	r24, Z
    3ad2:	88 23       	and	r24, r24
    3ad4:	09 f0       	breq	.+2      	; 0x3ad8 <main+0x564>
    3ad6:	85 c0       	rjmp	.+266    	; 0x3be2 <main+0x66e>
		{
			LCD_VidClear();
    3ad8:	0e 94 95 19 	call	0x332a	; 0x332a <LCD_VidClear>
			LCD_VidSetPosition(0,5);
    3adc:	80 e0       	ldi	r24, 0x00	; 0
    3ade:	65 e0       	ldi	r22, 0x05	; 5
    3ae0:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <LCD_VidSetPosition>
			LCD_VidSendString("SYSTEM");
    3ae4:	89 ea       	ldi	r24, 0xA9	; 169
    3ae6:	90 e0       	ldi	r25, 0x00	; 0
    3ae8:	0e 94 8b 18 	call	0x3116	; 0x3116 <LCD_VidSendString>
			LCD_VidSetPosition(1,2);
    3aec:	81 e0       	ldi	r24, 0x01	; 1
    3aee:	62 e0       	ldi	r22, 0x02	; 2
    3af0:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <LCD_VidSetPosition>
			LCD_VidSendString("WILL CLOSE");
    3af4:	80 eb       	ldi	r24, 0xB0	; 176
    3af6:	90 e0       	ldi	r25, 0x00	; 0
    3af8:	0e 94 8b 18 	call	0x3116	; 0x3116 <LCD_VidSendString>
    3afc:	80 e0       	ldi	r24, 0x00	; 0
    3afe:	90 e0       	ldi	r25, 0x00	; 0
    3b00:	aa e7       	ldi	r26, 0x7A	; 122
    3b02:	b4 e4       	ldi	r27, 0x44	; 68
    3b04:	8b 87       	std	Y+11, r24	; 0x0b
    3b06:	9c 87       	std	Y+12, r25	; 0x0c
    3b08:	ad 87       	std	Y+13, r26	; 0x0d
    3b0a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b10:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b12:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b14:	20 e0       	ldi	r18, 0x00	; 0
    3b16:	30 e0       	ldi	r19, 0x00	; 0
    3b18:	4a ef       	ldi	r20, 0xFA	; 250
    3b1a:	54 e4       	ldi	r21, 0x44	; 68
    3b1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b20:	dc 01       	movw	r26, r24
    3b22:	cb 01       	movw	r24, r22
    3b24:	8f 83       	std	Y+7, r24	; 0x07
    3b26:	98 87       	std	Y+8, r25	; 0x08
    3b28:	a9 87       	std	Y+9, r26	; 0x09
    3b2a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b2c:	6f 81       	ldd	r22, Y+7	; 0x07
    3b2e:	78 85       	ldd	r23, Y+8	; 0x08
    3b30:	89 85       	ldd	r24, Y+9	; 0x09
    3b32:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b34:	20 e0       	ldi	r18, 0x00	; 0
    3b36:	30 e0       	ldi	r19, 0x00	; 0
    3b38:	40 e8       	ldi	r20, 0x80	; 128
    3b3a:	5f e3       	ldi	r21, 0x3F	; 63
    3b3c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3b40:	88 23       	and	r24, r24
    3b42:	2c f4       	brge	.+10     	; 0x3b4e <main+0x5da>
		__ticks = 1;
    3b44:	81 e0       	ldi	r24, 0x01	; 1
    3b46:	90 e0       	ldi	r25, 0x00	; 0
    3b48:	9e 83       	std	Y+6, r25	; 0x06
    3b4a:	8d 83       	std	Y+5, r24	; 0x05
    3b4c:	3f c0       	rjmp	.+126    	; 0x3bcc <main+0x658>
	else if (__tmp > 65535)
    3b4e:	6f 81       	ldd	r22, Y+7	; 0x07
    3b50:	78 85       	ldd	r23, Y+8	; 0x08
    3b52:	89 85       	ldd	r24, Y+9	; 0x09
    3b54:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b56:	20 e0       	ldi	r18, 0x00	; 0
    3b58:	3f ef       	ldi	r19, 0xFF	; 255
    3b5a:	4f e7       	ldi	r20, 0x7F	; 127
    3b5c:	57 e4       	ldi	r21, 0x47	; 71
    3b5e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3b62:	18 16       	cp	r1, r24
    3b64:	4c f5       	brge	.+82     	; 0x3bb8 <main+0x644>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b66:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b68:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b6e:	20 e0       	ldi	r18, 0x00	; 0
    3b70:	30 e0       	ldi	r19, 0x00	; 0
    3b72:	40 e2       	ldi	r20, 0x20	; 32
    3b74:	51 e4       	ldi	r21, 0x41	; 65
    3b76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b7a:	dc 01       	movw	r26, r24
    3b7c:	cb 01       	movw	r24, r22
    3b7e:	bc 01       	movw	r22, r24
    3b80:	cd 01       	movw	r24, r26
    3b82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b86:	dc 01       	movw	r26, r24
    3b88:	cb 01       	movw	r24, r22
    3b8a:	9e 83       	std	Y+6, r25	; 0x06
    3b8c:	8d 83       	std	Y+5, r24	; 0x05
    3b8e:	0f c0       	rjmp	.+30     	; 0x3bae <main+0x63a>
    3b90:	88 ec       	ldi	r24, 0xC8	; 200
    3b92:	90 e0       	ldi	r25, 0x00	; 0
    3b94:	9c 83       	std	Y+4, r25	; 0x04
    3b96:	8b 83       	std	Y+3, r24	; 0x03
    3b98:	8b 81       	ldd	r24, Y+3	; 0x03
    3b9a:	9c 81       	ldd	r25, Y+4	; 0x04
    3b9c:	01 97       	sbiw	r24, 0x01	; 1
    3b9e:	f1 f7       	brne	.-4      	; 0x3b9c <main+0x628>
    3ba0:	9c 83       	std	Y+4, r25	; 0x04
    3ba2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ba4:	8d 81       	ldd	r24, Y+5	; 0x05
    3ba6:	9e 81       	ldd	r25, Y+6	; 0x06
    3ba8:	01 97       	sbiw	r24, 0x01	; 1
    3baa:	9e 83       	std	Y+6, r25	; 0x06
    3bac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bae:	8d 81       	ldd	r24, Y+5	; 0x05
    3bb0:	9e 81       	ldd	r25, Y+6	; 0x06
    3bb2:	00 97       	sbiw	r24, 0x00	; 0
    3bb4:	69 f7       	brne	.-38     	; 0x3b90 <main+0x61c>
    3bb6:	39 c0       	rjmp	.+114    	; 0x3c2a <main+0x6b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bb8:	6f 81       	ldd	r22, Y+7	; 0x07
    3bba:	78 85       	ldd	r23, Y+8	; 0x08
    3bbc:	89 85       	ldd	r24, Y+9	; 0x09
    3bbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bc4:	dc 01       	movw	r26, r24
    3bc6:	cb 01       	movw	r24, r22
    3bc8:	9e 83       	std	Y+6, r25	; 0x06
    3bca:	8d 83       	std	Y+5, r24	; 0x05
    3bcc:	8d 81       	ldd	r24, Y+5	; 0x05
    3bce:	9e 81       	ldd	r25, Y+6	; 0x06
    3bd0:	9a 83       	std	Y+2, r25	; 0x02
    3bd2:	89 83       	std	Y+1, r24	; 0x01
    3bd4:	89 81       	ldd	r24, Y+1	; 0x01
    3bd6:	9a 81       	ldd	r25, Y+2	; 0x02
    3bd8:	01 97       	sbiw	r24, 0x01	; 1
    3bda:	f1 f7       	brne	.-4      	; 0x3bd8 <main+0x664>
    3bdc:	9a 83       	std	Y+2, r25	; 0x02
    3bde:	89 83       	std	Y+1, r24	; 0x01
    3be0:	24 c0       	rjmp	.+72     	; 0x3c2a <main+0x6b6>
			_delay_ms(1000);
			break;
		}

		LCD_VidSetPosition(1,0);
    3be2:	81 e0       	ldi	r24, 0x01	; 1
    3be4:	60 e0       	ldi	r22, 0x00	; 0
    3be6:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <LCD_VidSetPosition>
		LCD_VidSendNumber(Password_Input);
    3bea:	fe 01       	movw	r30, r28
    3bec:	e4 5b       	subi	r30, 0xB4	; 180
    3bee:	ff 4f       	sbci	r31, 0xFF	; 255
    3bf0:	80 81       	ld	r24, Z
    3bf2:	91 81       	ldd	r25, Z+1	; 0x01
    3bf4:	0e 94 b4 18 	call	0x3168	; 0x3168 <LCD_VidSendNumber>
		LCD_VidSendNumber(1000);
    3bf8:	88 ee       	ldi	r24, 0xE8	; 232
    3bfa:	93 e0       	ldi	r25, 0x03	; 3
    3bfc:	0e 94 b4 18 	call	0x3168	; 0x3168 <LCD_VidSendNumber>
		if(Password_Input == DEFAULT_PASS)
    3c00:	fe 01       	movw	r30, r28
    3c02:	e4 5b       	subi	r30, 0xB4	; 180
    3c04:	ff 4f       	sbci	r31, 0xFF	; 255
    3c06:	80 81       	ld	r24, Z
    3c08:	91 81       	ldd	r25, Z+1	; 0x01
    3c0a:	e4 e0       	ldi	r30, 0x04	; 4
    3c0c:	82 3d       	cpi	r24, 0xD2	; 210
    3c0e:	9e 07       	cpc	r25, r30
    3c10:	09 f0       	breq	.+2      	; 0x3c14 <main+0x6a0>
    3c12:	cf cd       	rjmp	.-1122   	; 0x37b2 <main+0x23e>
		{
			LCD_VidClear();
    3c14:	0e 94 95 19 	call	0x332a	; 0x332a <LCD_VidClear>
			LCD_VidSetPosition(1,0);
    3c18:	81 e0       	ldi	r24, 0x01	; 1
    3c1a:	60 e0       	ldi	r22, 0x00	; 0
    3c1c:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <LCD_VidSetPosition>
			LCD_VidSendString("PASSWORD SUCCESSFUL !");
    3c20:	8b eb       	ldi	r24, 0xBB	; 187
    3c22:	90 e0       	ldi	r25, 0x00	; 0
    3c24:	0e 94 8b 18 	call	0x3116	; 0x3116 <LCD_VidSendString>
    3c28:	ff cf       	rjmp	.-2      	; 0x3c28 <main+0x6b4>
//		_delay_ms(1000);
//		LCD_VidClear();

	}

}
    3c2a:	ce 57       	subi	r28, 0x7E	; 126
    3c2c:	df 4f       	sbci	r29, 0xFF	; 255
    3c2e:	0f b6       	in	r0, 0x3f	; 63
    3c30:	f8 94       	cli
    3c32:	de bf       	out	0x3e, r29	; 62
    3c34:	0f be       	out	0x3f, r0	; 63
    3c36:	cd bf       	out	0x3d, r28	; 61
    3c38:	cf 91       	pop	r28
    3c3a:	df 91       	pop	r29
    3c3c:	1f 91       	pop	r17
    3c3e:	0f 91       	pop	r16
    3c40:	08 95       	ret

00003c42 <Get_Password>:

u16 Get_Password(u8 key)
{
    3c42:	df 93       	push	r29
    3c44:	cf 93       	push	r28
    3c46:	0f 92       	push	r0
    3c48:	cd b7       	in	r28, 0x3d	; 61
    3c4a:	de b7       	in	r29, 0x3e	; 62
    3c4c:	89 83       	std	Y+1, r24	; 0x01

	if(key>='0' && key <='9')
    3c4e:	89 81       	ldd	r24, Y+1	; 0x01
    3c50:	80 33       	cpi	r24, 0x30	; 48
    3c52:	10 f1       	brcs	.+68     	; 0x3c98 <Get_Password+0x56>
    3c54:	89 81       	ldd	r24, Y+1	; 0x01
    3c56:	8a 33       	cpi	r24, 0x3A	; 58
    3c58:	f8 f4       	brcc	.+62     	; 0x3c98 <Get_Password+0x56>
	{
		key = key -'0';
    3c5a:	89 81       	ldd	r24, Y+1	; 0x01
    3c5c:	80 53       	subi	r24, 0x30	; 48
    3c5e:	89 83       	std	Y+1, r24	; 0x01
		LCD_VidSendNumber(key);
    3c60:	89 81       	ldd	r24, Y+1	; 0x01
    3c62:	88 2f       	mov	r24, r24
    3c64:	90 e0       	ldi	r25, 0x00	; 0
    3c66:	0e 94 b4 18 	call	0x3168	; 0x3168 <LCD_VidSendNumber>
		password = password*10 +key;
    3c6a:	80 91 fb 00 	lds	r24, 0x00FB
    3c6e:	90 91 fc 00 	lds	r25, 0x00FC
    3c72:	9c 01       	movw	r18, r24
    3c74:	22 0f       	add	r18, r18
    3c76:	33 1f       	adc	r19, r19
    3c78:	c9 01       	movw	r24, r18
    3c7a:	88 0f       	add	r24, r24
    3c7c:	99 1f       	adc	r25, r25
    3c7e:	88 0f       	add	r24, r24
    3c80:	99 1f       	adc	r25, r25
    3c82:	28 0f       	add	r18, r24
    3c84:	39 1f       	adc	r19, r25
    3c86:	89 81       	ldd	r24, Y+1	; 0x01
    3c88:	88 2f       	mov	r24, r24
    3c8a:	90 e0       	ldi	r25, 0x00	; 0
    3c8c:	82 0f       	add	r24, r18
    3c8e:	93 1f       	adc	r25, r19
    3c90:	90 93 fc 00 	sts	0x00FC, r25
    3c94:	80 93 fb 00 	sts	0x00FB, r24
	}
	return password;
    3c98:	80 91 fb 00 	lds	r24, 0x00FB
    3c9c:	90 91 fc 00 	lds	r25, 0x00FC
}
    3ca0:	0f 90       	pop	r0
    3ca2:	cf 91       	pop	r28
    3ca4:	df 91       	pop	r29
    3ca6:	08 95       	ret

00003ca8 <__udivmodhi4>:
    3ca8:	aa 1b       	sub	r26, r26
    3caa:	bb 1b       	sub	r27, r27
    3cac:	51 e1       	ldi	r21, 0x11	; 17
    3cae:	07 c0       	rjmp	.+14     	; 0x3cbe <__udivmodhi4_ep>

00003cb0 <__udivmodhi4_loop>:
    3cb0:	aa 1f       	adc	r26, r26
    3cb2:	bb 1f       	adc	r27, r27
    3cb4:	a6 17       	cp	r26, r22
    3cb6:	b7 07       	cpc	r27, r23
    3cb8:	10 f0       	brcs	.+4      	; 0x3cbe <__udivmodhi4_ep>
    3cba:	a6 1b       	sub	r26, r22
    3cbc:	b7 0b       	sbc	r27, r23

00003cbe <__udivmodhi4_ep>:
    3cbe:	88 1f       	adc	r24, r24
    3cc0:	99 1f       	adc	r25, r25
    3cc2:	5a 95       	dec	r21
    3cc4:	a9 f7       	brne	.-22     	; 0x3cb0 <__udivmodhi4_loop>
    3cc6:	80 95       	com	r24
    3cc8:	90 95       	com	r25
    3cca:	bc 01       	movw	r22, r24
    3ccc:	cd 01       	movw	r24, r26
    3cce:	08 95       	ret

00003cd0 <__prologue_saves__>:
    3cd0:	2f 92       	push	r2
    3cd2:	3f 92       	push	r3
    3cd4:	4f 92       	push	r4
    3cd6:	5f 92       	push	r5
    3cd8:	6f 92       	push	r6
    3cda:	7f 92       	push	r7
    3cdc:	8f 92       	push	r8
    3cde:	9f 92       	push	r9
    3ce0:	af 92       	push	r10
    3ce2:	bf 92       	push	r11
    3ce4:	cf 92       	push	r12
    3ce6:	df 92       	push	r13
    3ce8:	ef 92       	push	r14
    3cea:	ff 92       	push	r15
    3cec:	0f 93       	push	r16
    3cee:	1f 93       	push	r17
    3cf0:	cf 93       	push	r28
    3cf2:	df 93       	push	r29
    3cf4:	cd b7       	in	r28, 0x3d	; 61
    3cf6:	de b7       	in	r29, 0x3e	; 62
    3cf8:	ca 1b       	sub	r28, r26
    3cfa:	db 0b       	sbc	r29, r27
    3cfc:	0f b6       	in	r0, 0x3f	; 63
    3cfe:	f8 94       	cli
    3d00:	de bf       	out	0x3e, r29	; 62
    3d02:	0f be       	out	0x3f, r0	; 63
    3d04:	cd bf       	out	0x3d, r28	; 61
    3d06:	09 94       	ijmp

00003d08 <__epilogue_restores__>:
    3d08:	2a 88       	ldd	r2, Y+18	; 0x12
    3d0a:	39 88       	ldd	r3, Y+17	; 0x11
    3d0c:	48 88       	ldd	r4, Y+16	; 0x10
    3d0e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3d10:	6e 84       	ldd	r6, Y+14	; 0x0e
    3d12:	7d 84       	ldd	r7, Y+13	; 0x0d
    3d14:	8c 84       	ldd	r8, Y+12	; 0x0c
    3d16:	9b 84       	ldd	r9, Y+11	; 0x0b
    3d18:	aa 84       	ldd	r10, Y+10	; 0x0a
    3d1a:	b9 84       	ldd	r11, Y+9	; 0x09
    3d1c:	c8 84       	ldd	r12, Y+8	; 0x08
    3d1e:	df 80       	ldd	r13, Y+7	; 0x07
    3d20:	ee 80       	ldd	r14, Y+6	; 0x06
    3d22:	fd 80       	ldd	r15, Y+5	; 0x05
    3d24:	0c 81       	ldd	r16, Y+4	; 0x04
    3d26:	1b 81       	ldd	r17, Y+3	; 0x03
    3d28:	aa 81       	ldd	r26, Y+2	; 0x02
    3d2a:	b9 81       	ldd	r27, Y+1	; 0x01
    3d2c:	ce 0f       	add	r28, r30
    3d2e:	d1 1d       	adc	r29, r1
    3d30:	0f b6       	in	r0, 0x3f	; 63
    3d32:	f8 94       	cli
    3d34:	de bf       	out	0x3e, r29	; 62
    3d36:	0f be       	out	0x3f, r0	; 63
    3d38:	cd bf       	out	0x3d, r28	; 61
    3d3a:	ed 01       	movw	r28, r26
    3d3c:	08 95       	ret

00003d3e <sprintf>:
    3d3e:	ae e0       	ldi	r26, 0x0E	; 14
    3d40:	b0 e0       	ldi	r27, 0x00	; 0
    3d42:	e5 ea       	ldi	r30, 0xA5	; 165
    3d44:	fe e1       	ldi	r31, 0x1E	; 30
    3d46:	0c 94 76 1e 	jmp	0x3cec	; 0x3cec <__prologue_saves__+0x1c>
    3d4a:	0d 89       	ldd	r16, Y+21	; 0x15
    3d4c:	1e 89       	ldd	r17, Y+22	; 0x16
    3d4e:	86 e0       	ldi	r24, 0x06	; 6
    3d50:	8c 83       	std	Y+4, r24	; 0x04
    3d52:	1a 83       	std	Y+2, r17	; 0x02
    3d54:	09 83       	std	Y+1, r16	; 0x01
    3d56:	8f ef       	ldi	r24, 0xFF	; 255
    3d58:	9f e7       	ldi	r25, 0x7F	; 127
    3d5a:	9e 83       	std	Y+6, r25	; 0x06
    3d5c:	8d 83       	std	Y+5, r24	; 0x05
    3d5e:	9e 01       	movw	r18, r28
    3d60:	27 5e       	subi	r18, 0xE7	; 231
    3d62:	3f 4f       	sbci	r19, 0xFF	; 255
    3d64:	ce 01       	movw	r24, r28
    3d66:	01 96       	adiw	r24, 0x01	; 1
    3d68:	6f 89       	ldd	r22, Y+23	; 0x17
    3d6a:	78 8d       	ldd	r23, Y+24	; 0x18
    3d6c:	a9 01       	movw	r20, r18
    3d6e:	0e 94 c3 1e 	call	0x3d86	; 0x3d86 <vfprintf>
    3d72:	2f 81       	ldd	r18, Y+7	; 0x07
    3d74:	38 85       	ldd	r19, Y+8	; 0x08
    3d76:	02 0f       	add	r16, r18
    3d78:	13 1f       	adc	r17, r19
    3d7a:	f8 01       	movw	r30, r16
    3d7c:	10 82       	st	Z, r1
    3d7e:	2e 96       	adiw	r28, 0x0e	; 14
    3d80:	e4 e0       	ldi	r30, 0x04	; 4
    3d82:	0c 94 92 1e 	jmp	0x3d24	; 0x3d24 <__epilogue_restores__+0x1c>

00003d86 <vfprintf>:
    3d86:	ab e0       	ldi	r26, 0x0B	; 11
    3d88:	b0 e0       	ldi	r27, 0x00	; 0
    3d8a:	e9 ec       	ldi	r30, 0xC9	; 201
    3d8c:	fe e1       	ldi	r31, 0x1E	; 30
    3d8e:	0c 94 68 1e 	jmp	0x3cd0	; 0x3cd0 <__prologue_saves__>
    3d92:	3c 01       	movw	r6, r24
    3d94:	2b 01       	movw	r4, r22
    3d96:	5a 01       	movw	r10, r20
    3d98:	fc 01       	movw	r30, r24
    3d9a:	17 82       	std	Z+7, r1	; 0x07
    3d9c:	16 82       	std	Z+6, r1	; 0x06
    3d9e:	83 81       	ldd	r24, Z+3	; 0x03
    3da0:	81 fd       	sbrc	r24, 1
    3da2:	03 c0       	rjmp	.+6      	; 0x3daa <vfprintf+0x24>
    3da4:	6f ef       	ldi	r22, 0xFF	; 255
    3da6:	7f ef       	ldi	r23, 0xFF	; 255
    3da8:	c6 c1       	rjmp	.+908    	; 0x4136 <vfprintf+0x3b0>
    3daa:	9a e0       	ldi	r25, 0x0A	; 10
    3dac:	89 2e       	mov	r8, r25
    3dae:	1e 01       	movw	r2, r28
    3db0:	08 94       	sec
    3db2:	21 1c       	adc	r2, r1
    3db4:	31 1c       	adc	r3, r1
    3db6:	f3 01       	movw	r30, r6
    3db8:	23 81       	ldd	r18, Z+3	; 0x03
    3dba:	f2 01       	movw	r30, r4
    3dbc:	23 fd       	sbrc	r18, 3
    3dbe:	85 91       	lpm	r24, Z+
    3dc0:	23 ff       	sbrs	r18, 3
    3dc2:	81 91       	ld	r24, Z+
    3dc4:	2f 01       	movw	r4, r30
    3dc6:	88 23       	and	r24, r24
    3dc8:	09 f4       	brne	.+2      	; 0x3dcc <vfprintf+0x46>
    3dca:	b2 c1       	rjmp	.+868    	; 0x4130 <vfprintf+0x3aa>
    3dcc:	85 32       	cpi	r24, 0x25	; 37
    3dce:	39 f4       	brne	.+14     	; 0x3dde <vfprintf+0x58>
    3dd0:	23 fd       	sbrc	r18, 3
    3dd2:	85 91       	lpm	r24, Z+
    3dd4:	23 ff       	sbrs	r18, 3
    3dd6:	81 91       	ld	r24, Z+
    3dd8:	2f 01       	movw	r4, r30
    3dda:	85 32       	cpi	r24, 0x25	; 37
    3ddc:	29 f4       	brne	.+10     	; 0x3de8 <vfprintf+0x62>
    3dde:	90 e0       	ldi	r25, 0x00	; 0
    3de0:	b3 01       	movw	r22, r6
    3de2:	0e 94 b6 20 	call	0x416c	; 0x416c <fputc>
    3de6:	e7 cf       	rjmp	.-50     	; 0x3db6 <vfprintf+0x30>
    3de8:	98 2f       	mov	r25, r24
    3dea:	ff 24       	eor	r15, r15
    3dec:	ee 24       	eor	r14, r14
    3dee:	99 24       	eor	r9, r9
    3df0:	ff e1       	ldi	r31, 0x1F	; 31
    3df2:	ff 15       	cp	r31, r15
    3df4:	d0 f0       	brcs	.+52     	; 0x3e2a <vfprintf+0xa4>
    3df6:	9b 32       	cpi	r25, 0x2B	; 43
    3df8:	69 f0       	breq	.+26     	; 0x3e14 <vfprintf+0x8e>
    3dfa:	9c 32       	cpi	r25, 0x2C	; 44
    3dfc:	28 f4       	brcc	.+10     	; 0x3e08 <vfprintf+0x82>
    3dfe:	90 32       	cpi	r25, 0x20	; 32
    3e00:	59 f0       	breq	.+22     	; 0x3e18 <vfprintf+0x92>
    3e02:	93 32       	cpi	r25, 0x23	; 35
    3e04:	91 f4       	brne	.+36     	; 0x3e2a <vfprintf+0xa4>
    3e06:	0e c0       	rjmp	.+28     	; 0x3e24 <vfprintf+0x9e>
    3e08:	9d 32       	cpi	r25, 0x2D	; 45
    3e0a:	49 f0       	breq	.+18     	; 0x3e1e <vfprintf+0x98>
    3e0c:	90 33       	cpi	r25, 0x30	; 48
    3e0e:	69 f4       	brne	.+26     	; 0x3e2a <vfprintf+0xa4>
    3e10:	41 e0       	ldi	r20, 0x01	; 1
    3e12:	24 c0       	rjmp	.+72     	; 0x3e5c <vfprintf+0xd6>
    3e14:	52 e0       	ldi	r21, 0x02	; 2
    3e16:	f5 2a       	or	r15, r21
    3e18:	84 e0       	ldi	r24, 0x04	; 4
    3e1a:	f8 2a       	or	r15, r24
    3e1c:	28 c0       	rjmp	.+80     	; 0x3e6e <vfprintf+0xe8>
    3e1e:	98 e0       	ldi	r25, 0x08	; 8
    3e20:	f9 2a       	or	r15, r25
    3e22:	25 c0       	rjmp	.+74     	; 0x3e6e <vfprintf+0xe8>
    3e24:	e0 e1       	ldi	r30, 0x10	; 16
    3e26:	fe 2a       	or	r15, r30
    3e28:	22 c0       	rjmp	.+68     	; 0x3e6e <vfprintf+0xe8>
    3e2a:	f7 fc       	sbrc	r15, 7
    3e2c:	29 c0       	rjmp	.+82     	; 0x3e80 <vfprintf+0xfa>
    3e2e:	89 2f       	mov	r24, r25
    3e30:	80 53       	subi	r24, 0x30	; 48
    3e32:	8a 30       	cpi	r24, 0x0A	; 10
    3e34:	70 f4       	brcc	.+28     	; 0x3e52 <vfprintf+0xcc>
    3e36:	f6 fe       	sbrs	r15, 6
    3e38:	05 c0       	rjmp	.+10     	; 0x3e44 <vfprintf+0xbe>
    3e3a:	98 9c       	mul	r9, r8
    3e3c:	90 2c       	mov	r9, r0
    3e3e:	11 24       	eor	r1, r1
    3e40:	98 0e       	add	r9, r24
    3e42:	15 c0       	rjmp	.+42     	; 0x3e6e <vfprintf+0xe8>
    3e44:	e8 9c       	mul	r14, r8
    3e46:	e0 2c       	mov	r14, r0
    3e48:	11 24       	eor	r1, r1
    3e4a:	e8 0e       	add	r14, r24
    3e4c:	f0 e2       	ldi	r31, 0x20	; 32
    3e4e:	ff 2a       	or	r15, r31
    3e50:	0e c0       	rjmp	.+28     	; 0x3e6e <vfprintf+0xe8>
    3e52:	9e 32       	cpi	r25, 0x2E	; 46
    3e54:	29 f4       	brne	.+10     	; 0x3e60 <vfprintf+0xda>
    3e56:	f6 fc       	sbrc	r15, 6
    3e58:	6b c1       	rjmp	.+726    	; 0x4130 <vfprintf+0x3aa>
    3e5a:	40 e4       	ldi	r20, 0x40	; 64
    3e5c:	f4 2a       	or	r15, r20
    3e5e:	07 c0       	rjmp	.+14     	; 0x3e6e <vfprintf+0xe8>
    3e60:	9c 36       	cpi	r25, 0x6C	; 108
    3e62:	19 f4       	brne	.+6      	; 0x3e6a <vfprintf+0xe4>
    3e64:	50 e8       	ldi	r21, 0x80	; 128
    3e66:	f5 2a       	or	r15, r21
    3e68:	02 c0       	rjmp	.+4      	; 0x3e6e <vfprintf+0xe8>
    3e6a:	98 36       	cpi	r25, 0x68	; 104
    3e6c:	49 f4       	brne	.+18     	; 0x3e80 <vfprintf+0xfa>
    3e6e:	f2 01       	movw	r30, r4
    3e70:	23 fd       	sbrc	r18, 3
    3e72:	95 91       	lpm	r25, Z+
    3e74:	23 ff       	sbrs	r18, 3
    3e76:	91 91       	ld	r25, Z+
    3e78:	2f 01       	movw	r4, r30
    3e7a:	99 23       	and	r25, r25
    3e7c:	09 f0       	breq	.+2      	; 0x3e80 <vfprintf+0xfa>
    3e7e:	b8 cf       	rjmp	.-144    	; 0x3df0 <vfprintf+0x6a>
    3e80:	89 2f       	mov	r24, r25
    3e82:	85 54       	subi	r24, 0x45	; 69
    3e84:	83 30       	cpi	r24, 0x03	; 3
    3e86:	18 f0       	brcs	.+6      	; 0x3e8e <vfprintf+0x108>
    3e88:	80 52       	subi	r24, 0x20	; 32
    3e8a:	83 30       	cpi	r24, 0x03	; 3
    3e8c:	38 f4       	brcc	.+14     	; 0x3e9c <vfprintf+0x116>
    3e8e:	44 e0       	ldi	r20, 0x04	; 4
    3e90:	50 e0       	ldi	r21, 0x00	; 0
    3e92:	a4 0e       	add	r10, r20
    3e94:	b5 1e       	adc	r11, r21
    3e96:	5f e3       	ldi	r21, 0x3F	; 63
    3e98:	59 83       	std	Y+1, r21	; 0x01
    3e9a:	0f c0       	rjmp	.+30     	; 0x3eba <vfprintf+0x134>
    3e9c:	93 36       	cpi	r25, 0x63	; 99
    3e9e:	31 f0       	breq	.+12     	; 0x3eac <vfprintf+0x126>
    3ea0:	93 37       	cpi	r25, 0x73	; 115
    3ea2:	79 f0       	breq	.+30     	; 0x3ec2 <vfprintf+0x13c>
    3ea4:	93 35       	cpi	r25, 0x53	; 83
    3ea6:	09 f0       	breq	.+2      	; 0x3eaa <vfprintf+0x124>
    3ea8:	56 c0       	rjmp	.+172    	; 0x3f56 <vfprintf+0x1d0>
    3eaa:	20 c0       	rjmp	.+64     	; 0x3eec <vfprintf+0x166>
    3eac:	f5 01       	movw	r30, r10
    3eae:	80 81       	ld	r24, Z
    3eb0:	89 83       	std	Y+1, r24	; 0x01
    3eb2:	42 e0       	ldi	r20, 0x02	; 2
    3eb4:	50 e0       	ldi	r21, 0x00	; 0
    3eb6:	a4 0e       	add	r10, r20
    3eb8:	b5 1e       	adc	r11, r21
    3eba:	61 01       	movw	r12, r2
    3ebc:	01 e0       	ldi	r16, 0x01	; 1
    3ebe:	10 e0       	ldi	r17, 0x00	; 0
    3ec0:	12 c0       	rjmp	.+36     	; 0x3ee6 <vfprintf+0x160>
    3ec2:	f5 01       	movw	r30, r10
    3ec4:	c0 80       	ld	r12, Z
    3ec6:	d1 80       	ldd	r13, Z+1	; 0x01
    3ec8:	f6 fc       	sbrc	r15, 6
    3eca:	03 c0       	rjmp	.+6      	; 0x3ed2 <vfprintf+0x14c>
    3ecc:	6f ef       	ldi	r22, 0xFF	; 255
    3ece:	7f ef       	ldi	r23, 0xFF	; 255
    3ed0:	02 c0       	rjmp	.+4      	; 0x3ed6 <vfprintf+0x150>
    3ed2:	69 2d       	mov	r22, r9
    3ed4:	70 e0       	ldi	r23, 0x00	; 0
    3ed6:	42 e0       	ldi	r20, 0x02	; 2
    3ed8:	50 e0       	ldi	r21, 0x00	; 0
    3eda:	a4 0e       	add	r10, r20
    3edc:	b5 1e       	adc	r11, r21
    3ede:	c6 01       	movw	r24, r12
    3ee0:	0e 94 ab 20 	call	0x4156	; 0x4156 <strnlen>
    3ee4:	8c 01       	movw	r16, r24
    3ee6:	5f e7       	ldi	r21, 0x7F	; 127
    3ee8:	f5 22       	and	r15, r21
    3eea:	14 c0       	rjmp	.+40     	; 0x3f14 <vfprintf+0x18e>
    3eec:	f5 01       	movw	r30, r10
    3eee:	c0 80       	ld	r12, Z
    3ef0:	d1 80       	ldd	r13, Z+1	; 0x01
    3ef2:	f6 fc       	sbrc	r15, 6
    3ef4:	03 c0       	rjmp	.+6      	; 0x3efc <vfprintf+0x176>
    3ef6:	6f ef       	ldi	r22, 0xFF	; 255
    3ef8:	7f ef       	ldi	r23, 0xFF	; 255
    3efa:	02 c0       	rjmp	.+4      	; 0x3f00 <vfprintf+0x17a>
    3efc:	69 2d       	mov	r22, r9
    3efe:	70 e0       	ldi	r23, 0x00	; 0
    3f00:	42 e0       	ldi	r20, 0x02	; 2
    3f02:	50 e0       	ldi	r21, 0x00	; 0
    3f04:	a4 0e       	add	r10, r20
    3f06:	b5 1e       	adc	r11, r21
    3f08:	c6 01       	movw	r24, r12
    3f0a:	0e 94 a0 20 	call	0x4140	; 0x4140 <strnlen_P>
    3f0e:	8c 01       	movw	r16, r24
    3f10:	50 e8       	ldi	r21, 0x80	; 128
    3f12:	f5 2a       	or	r15, r21
    3f14:	f3 fe       	sbrs	r15, 3
    3f16:	07 c0       	rjmp	.+14     	; 0x3f26 <vfprintf+0x1a0>
    3f18:	1a c0       	rjmp	.+52     	; 0x3f4e <vfprintf+0x1c8>
    3f1a:	80 e2       	ldi	r24, 0x20	; 32
    3f1c:	90 e0       	ldi	r25, 0x00	; 0
    3f1e:	b3 01       	movw	r22, r6
    3f20:	0e 94 b6 20 	call	0x416c	; 0x416c <fputc>
    3f24:	ea 94       	dec	r14
    3f26:	8e 2d       	mov	r24, r14
    3f28:	90 e0       	ldi	r25, 0x00	; 0
    3f2a:	08 17       	cp	r16, r24
    3f2c:	19 07       	cpc	r17, r25
    3f2e:	a8 f3       	brcs	.-22     	; 0x3f1a <vfprintf+0x194>
    3f30:	0e c0       	rjmp	.+28     	; 0x3f4e <vfprintf+0x1c8>
    3f32:	f6 01       	movw	r30, r12
    3f34:	f7 fc       	sbrc	r15, 7
    3f36:	85 91       	lpm	r24, Z+
    3f38:	f7 fe       	sbrs	r15, 7
    3f3a:	81 91       	ld	r24, Z+
    3f3c:	6f 01       	movw	r12, r30
    3f3e:	90 e0       	ldi	r25, 0x00	; 0
    3f40:	b3 01       	movw	r22, r6
    3f42:	0e 94 b6 20 	call	0x416c	; 0x416c <fputc>
    3f46:	e1 10       	cpse	r14, r1
    3f48:	ea 94       	dec	r14
    3f4a:	01 50       	subi	r16, 0x01	; 1
    3f4c:	10 40       	sbci	r17, 0x00	; 0
    3f4e:	01 15       	cp	r16, r1
    3f50:	11 05       	cpc	r17, r1
    3f52:	79 f7       	brne	.-34     	; 0x3f32 <vfprintf+0x1ac>
    3f54:	ea c0       	rjmp	.+468    	; 0x412a <vfprintf+0x3a4>
    3f56:	94 36       	cpi	r25, 0x64	; 100
    3f58:	11 f0       	breq	.+4      	; 0x3f5e <vfprintf+0x1d8>
    3f5a:	99 36       	cpi	r25, 0x69	; 105
    3f5c:	69 f5       	brne	.+90     	; 0x3fb8 <vfprintf+0x232>
    3f5e:	f7 fe       	sbrs	r15, 7
    3f60:	08 c0       	rjmp	.+16     	; 0x3f72 <vfprintf+0x1ec>
    3f62:	f5 01       	movw	r30, r10
    3f64:	20 81       	ld	r18, Z
    3f66:	31 81       	ldd	r19, Z+1	; 0x01
    3f68:	42 81       	ldd	r20, Z+2	; 0x02
    3f6a:	53 81       	ldd	r21, Z+3	; 0x03
    3f6c:	84 e0       	ldi	r24, 0x04	; 4
    3f6e:	90 e0       	ldi	r25, 0x00	; 0
    3f70:	0a c0       	rjmp	.+20     	; 0x3f86 <vfprintf+0x200>
    3f72:	f5 01       	movw	r30, r10
    3f74:	80 81       	ld	r24, Z
    3f76:	91 81       	ldd	r25, Z+1	; 0x01
    3f78:	9c 01       	movw	r18, r24
    3f7a:	44 27       	eor	r20, r20
    3f7c:	37 fd       	sbrc	r19, 7
    3f7e:	40 95       	com	r20
    3f80:	54 2f       	mov	r21, r20
    3f82:	82 e0       	ldi	r24, 0x02	; 2
    3f84:	90 e0       	ldi	r25, 0x00	; 0
    3f86:	a8 0e       	add	r10, r24
    3f88:	b9 1e       	adc	r11, r25
    3f8a:	9f e6       	ldi	r25, 0x6F	; 111
    3f8c:	f9 22       	and	r15, r25
    3f8e:	57 ff       	sbrs	r21, 7
    3f90:	09 c0       	rjmp	.+18     	; 0x3fa4 <vfprintf+0x21e>
    3f92:	50 95       	com	r21
    3f94:	40 95       	com	r20
    3f96:	30 95       	com	r19
    3f98:	21 95       	neg	r18
    3f9a:	3f 4f       	sbci	r19, 0xFF	; 255
    3f9c:	4f 4f       	sbci	r20, 0xFF	; 255
    3f9e:	5f 4f       	sbci	r21, 0xFF	; 255
    3fa0:	e0 e8       	ldi	r30, 0x80	; 128
    3fa2:	fe 2a       	or	r15, r30
    3fa4:	ca 01       	movw	r24, r20
    3fa6:	b9 01       	movw	r22, r18
    3fa8:	a1 01       	movw	r20, r2
    3faa:	2a e0       	ldi	r18, 0x0A	; 10
    3fac:	30 e0       	ldi	r19, 0x00	; 0
    3fae:	0e 94 e2 20 	call	0x41c4	; 0x41c4 <__ultoa_invert>
    3fb2:	d8 2e       	mov	r13, r24
    3fb4:	d2 18       	sub	r13, r2
    3fb6:	40 c0       	rjmp	.+128    	; 0x4038 <vfprintf+0x2b2>
    3fb8:	95 37       	cpi	r25, 0x75	; 117
    3fba:	29 f4       	brne	.+10     	; 0x3fc6 <vfprintf+0x240>
    3fbc:	1f 2d       	mov	r17, r15
    3fbe:	1f 7e       	andi	r17, 0xEF	; 239
    3fc0:	2a e0       	ldi	r18, 0x0A	; 10
    3fc2:	30 e0       	ldi	r19, 0x00	; 0
    3fc4:	1d c0       	rjmp	.+58     	; 0x4000 <vfprintf+0x27a>
    3fc6:	1f 2d       	mov	r17, r15
    3fc8:	19 7f       	andi	r17, 0xF9	; 249
    3fca:	9f 36       	cpi	r25, 0x6F	; 111
    3fcc:	61 f0       	breq	.+24     	; 0x3fe6 <vfprintf+0x260>
    3fce:	90 37       	cpi	r25, 0x70	; 112
    3fd0:	20 f4       	brcc	.+8      	; 0x3fda <vfprintf+0x254>
    3fd2:	98 35       	cpi	r25, 0x58	; 88
    3fd4:	09 f0       	breq	.+2      	; 0x3fd8 <vfprintf+0x252>
    3fd6:	ac c0       	rjmp	.+344    	; 0x4130 <vfprintf+0x3aa>
    3fd8:	0f c0       	rjmp	.+30     	; 0x3ff8 <vfprintf+0x272>
    3fda:	90 37       	cpi	r25, 0x70	; 112
    3fdc:	39 f0       	breq	.+14     	; 0x3fec <vfprintf+0x266>
    3fde:	98 37       	cpi	r25, 0x78	; 120
    3fe0:	09 f0       	breq	.+2      	; 0x3fe4 <vfprintf+0x25e>
    3fe2:	a6 c0       	rjmp	.+332    	; 0x4130 <vfprintf+0x3aa>
    3fe4:	04 c0       	rjmp	.+8      	; 0x3fee <vfprintf+0x268>
    3fe6:	28 e0       	ldi	r18, 0x08	; 8
    3fe8:	30 e0       	ldi	r19, 0x00	; 0
    3fea:	0a c0       	rjmp	.+20     	; 0x4000 <vfprintf+0x27a>
    3fec:	10 61       	ori	r17, 0x10	; 16
    3fee:	14 fd       	sbrc	r17, 4
    3ff0:	14 60       	ori	r17, 0x04	; 4
    3ff2:	20 e1       	ldi	r18, 0x10	; 16
    3ff4:	30 e0       	ldi	r19, 0x00	; 0
    3ff6:	04 c0       	rjmp	.+8      	; 0x4000 <vfprintf+0x27a>
    3ff8:	14 fd       	sbrc	r17, 4
    3ffa:	16 60       	ori	r17, 0x06	; 6
    3ffc:	20 e1       	ldi	r18, 0x10	; 16
    3ffe:	32 e0       	ldi	r19, 0x02	; 2
    4000:	17 ff       	sbrs	r17, 7
    4002:	08 c0       	rjmp	.+16     	; 0x4014 <vfprintf+0x28e>
    4004:	f5 01       	movw	r30, r10
    4006:	60 81       	ld	r22, Z
    4008:	71 81       	ldd	r23, Z+1	; 0x01
    400a:	82 81       	ldd	r24, Z+2	; 0x02
    400c:	93 81       	ldd	r25, Z+3	; 0x03
    400e:	44 e0       	ldi	r20, 0x04	; 4
    4010:	50 e0       	ldi	r21, 0x00	; 0
    4012:	08 c0       	rjmp	.+16     	; 0x4024 <vfprintf+0x29e>
    4014:	f5 01       	movw	r30, r10
    4016:	80 81       	ld	r24, Z
    4018:	91 81       	ldd	r25, Z+1	; 0x01
    401a:	bc 01       	movw	r22, r24
    401c:	80 e0       	ldi	r24, 0x00	; 0
    401e:	90 e0       	ldi	r25, 0x00	; 0
    4020:	42 e0       	ldi	r20, 0x02	; 2
    4022:	50 e0       	ldi	r21, 0x00	; 0
    4024:	a4 0e       	add	r10, r20
    4026:	b5 1e       	adc	r11, r21
    4028:	a1 01       	movw	r20, r2
    402a:	0e 94 e2 20 	call	0x41c4	; 0x41c4 <__ultoa_invert>
    402e:	d8 2e       	mov	r13, r24
    4030:	d2 18       	sub	r13, r2
    4032:	8f e7       	ldi	r24, 0x7F	; 127
    4034:	f8 2e       	mov	r15, r24
    4036:	f1 22       	and	r15, r17
    4038:	f6 fe       	sbrs	r15, 6
    403a:	0b c0       	rjmp	.+22     	; 0x4052 <vfprintf+0x2cc>
    403c:	5e ef       	ldi	r21, 0xFE	; 254
    403e:	f5 22       	and	r15, r21
    4040:	d9 14       	cp	r13, r9
    4042:	38 f4       	brcc	.+14     	; 0x4052 <vfprintf+0x2cc>
    4044:	f4 fe       	sbrs	r15, 4
    4046:	07 c0       	rjmp	.+14     	; 0x4056 <vfprintf+0x2d0>
    4048:	f2 fc       	sbrc	r15, 2
    404a:	05 c0       	rjmp	.+10     	; 0x4056 <vfprintf+0x2d0>
    404c:	8f ee       	ldi	r24, 0xEF	; 239
    404e:	f8 22       	and	r15, r24
    4050:	02 c0       	rjmp	.+4      	; 0x4056 <vfprintf+0x2d0>
    4052:	1d 2d       	mov	r17, r13
    4054:	01 c0       	rjmp	.+2      	; 0x4058 <vfprintf+0x2d2>
    4056:	19 2d       	mov	r17, r9
    4058:	f4 fe       	sbrs	r15, 4
    405a:	0d c0       	rjmp	.+26     	; 0x4076 <vfprintf+0x2f0>
    405c:	fe 01       	movw	r30, r28
    405e:	ed 0d       	add	r30, r13
    4060:	f1 1d       	adc	r31, r1
    4062:	80 81       	ld	r24, Z
    4064:	80 33       	cpi	r24, 0x30	; 48
    4066:	19 f4       	brne	.+6      	; 0x406e <vfprintf+0x2e8>
    4068:	99 ee       	ldi	r25, 0xE9	; 233
    406a:	f9 22       	and	r15, r25
    406c:	08 c0       	rjmp	.+16     	; 0x407e <vfprintf+0x2f8>
    406e:	1f 5f       	subi	r17, 0xFF	; 255
    4070:	f2 fe       	sbrs	r15, 2
    4072:	05 c0       	rjmp	.+10     	; 0x407e <vfprintf+0x2f8>
    4074:	03 c0       	rjmp	.+6      	; 0x407c <vfprintf+0x2f6>
    4076:	8f 2d       	mov	r24, r15
    4078:	86 78       	andi	r24, 0x86	; 134
    407a:	09 f0       	breq	.+2      	; 0x407e <vfprintf+0x2f8>
    407c:	1f 5f       	subi	r17, 0xFF	; 255
    407e:	0f 2d       	mov	r16, r15
    4080:	f3 fc       	sbrc	r15, 3
    4082:	14 c0       	rjmp	.+40     	; 0x40ac <vfprintf+0x326>
    4084:	f0 fe       	sbrs	r15, 0
    4086:	0f c0       	rjmp	.+30     	; 0x40a6 <vfprintf+0x320>
    4088:	1e 15       	cp	r17, r14
    408a:	10 f0       	brcs	.+4      	; 0x4090 <vfprintf+0x30a>
    408c:	9d 2c       	mov	r9, r13
    408e:	0b c0       	rjmp	.+22     	; 0x40a6 <vfprintf+0x320>
    4090:	9d 2c       	mov	r9, r13
    4092:	9e 0c       	add	r9, r14
    4094:	91 1a       	sub	r9, r17
    4096:	1e 2d       	mov	r17, r14
    4098:	06 c0       	rjmp	.+12     	; 0x40a6 <vfprintf+0x320>
    409a:	80 e2       	ldi	r24, 0x20	; 32
    409c:	90 e0       	ldi	r25, 0x00	; 0
    409e:	b3 01       	movw	r22, r6
    40a0:	0e 94 b6 20 	call	0x416c	; 0x416c <fputc>
    40a4:	1f 5f       	subi	r17, 0xFF	; 255
    40a6:	1e 15       	cp	r17, r14
    40a8:	c0 f3       	brcs	.-16     	; 0x409a <vfprintf+0x314>
    40aa:	04 c0       	rjmp	.+8      	; 0x40b4 <vfprintf+0x32e>
    40ac:	1e 15       	cp	r17, r14
    40ae:	10 f4       	brcc	.+4      	; 0x40b4 <vfprintf+0x32e>
    40b0:	e1 1a       	sub	r14, r17
    40b2:	01 c0       	rjmp	.+2      	; 0x40b6 <vfprintf+0x330>
    40b4:	ee 24       	eor	r14, r14
    40b6:	04 ff       	sbrs	r16, 4
    40b8:	0f c0       	rjmp	.+30     	; 0x40d8 <vfprintf+0x352>
    40ba:	80 e3       	ldi	r24, 0x30	; 48
    40bc:	90 e0       	ldi	r25, 0x00	; 0
    40be:	b3 01       	movw	r22, r6
    40c0:	0e 94 b6 20 	call	0x416c	; 0x416c <fputc>
    40c4:	02 ff       	sbrs	r16, 2
    40c6:	1d c0       	rjmp	.+58     	; 0x4102 <vfprintf+0x37c>
    40c8:	01 fd       	sbrc	r16, 1
    40ca:	03 c0       	rjmp	.+6      	; 0x40d2 <vfprintf+0x34c>
    40cc:	88 e7       	ldi	r24, 0x78	; 120
    40ce:	90 e0       	ldi	r25, 0x00	; 0
    40d0:	0e c0       	rjmp	.+28     	; 0x40ee <vfprintf+0x368>
    40d2:	88 e5       	ldi	r24, 0x58	; 88
    40d4:	90 e0       	ldi	r25, 0x00	; 0
    40d6:	0b c0       	rjmp	.+22     	; 0x40ee <vfprintf+0x368>
    40d8:	80 2f       	mov	r24, r16
    40da:	86 78       	andi	r24, 0x86	; 134
    40dc:	91 f0       	breq	.+36     	; 0x4102 <vfprintf+0x37c>
    40de:	01 ff       	sbrs	r16, 1
    40e0:	02 c0       	rjmp	.+4      	; 0x40e6 <vfprintf+0x360>
    40e2:	8b e2       	ldi	r24, 0x2B	; 43
    40e4:	01 c0       	rjmp	.+2      	; 0x40e8 <vfprintf+0x362>
    40e6:	80 e2       	ldi	r24, 0x20	; 32
    40e8:	f7 fc       	sbrc	r15, 7
    40ea:	8d e2       	ldi	r24, 0x2D	; 45
    40ec:	90 e0       	ldi	r25, 0x00	; 0
    40ee:	b3 01       	movw	r22, r6
    40f0:	0e 94 b6 20 	call	0x416c	; 0x416c <fputc>
    40f4:	06 c0       	rjmp	.+12     	; 0x4102 <vfprintf+0x37c>
    40f6:	80 e3       	ldi	r24, 0x30	; 48
    40f8:	90 e0       	ldi	r25, 0x00	; 0
    40fa:	b3 01       	movw	r22, r6
    40fc:	0e 94 b6 20 	call	0x416c	; 0x416c <fputc>
    4100:	9a 94       	dec	r9
    4102:	d9 14       	cp	r13, r9
    4104:	c0 f3       	brcs	.-16     	; 0x40f6 <vfprintf+0x370>
    4106:	da 94       	dec	r13
    4108:	f1 01       	movw	r30, r2
    410a:	ed 0d       	add	r30, r13
    410c:	f1 1d       	adc	r31, r1
    410e:	80 81       	ld	r24, Z
    4110:	90 e0       	ldi	r25, 0x00	; 0
    4112:	b3 01       	movw	r22, r6
    4114:	0e 94 b6 20 	call	0x416c	; 0x416c <fputc>
    4118:	dd 20       	and	r13, r13
    411a:	a9 f7       	brne	.-22     	; 0x4106 <vfprintf+0x380>
    411c:	06 c0       	rjmp	.+12     	; 0x412a <vfprintf+0x3a4>
    411e:	80 e2       	ldi	r24, 0x20	; 32
    4120:	90 e0       	ldi	r25, 0x00	; 0
    4122:	b3 01       	movw	r22, r6
    4124:	0e 94 b6 20 	call	0x416c	; 0x416c <fputc>
    4128:	ea 94       	dec	r14
    412a:	ee 20       	and	r14, r14
    412c:	c1 f7       	brne	.-16     	; 0x411e <vfprintf+0x398>
    412e:	43 ce       	rjmp	.-890    	; 0x3db6 <vfprintf+0x30>
    4130:	f3 01       	movw	r30, r6
    4132:	66 81       	ldd	r22, Z+6	; 0x06
    4134:	77 81       	ldd	r23, Z+7	; 0x07
    4136:	cb 01       	movw	r24, r22
    4138:	2b 96       	adiw	r28, 0x0b	; 11
    413a:	e2 e1       	ldi	r30, 0x12	; 18
    413c:	0c 94 84 1e 	jmp	0x3d08	; 0x3d08 <__epilogue_restores__>

00004140 <strnlen_P>:
    4140:	fc 01       	movw	r30, r24
    4142:	05 90       	lpm	r0, Z+
    4144:	61 50       	subi	r22, 0x01	; 1
    4146:	70 40       	sbci	r23, 0x00	; 0
    4148:	01 10       	cpse	r0, r1
    414a:	d8 f7       	brcc	.-10     	; 0x4142 <strnlen_P+0x2>
    414c:	80 95       	com	r24
    414e:	90 95       	com	r25
    4150:	8e 0f       	add	r24, r30
    4152:	9f 1f       	adc	r25, r31
    4154:	08 95       	ret

00004156 <strnlen>:
    4156:	fc 01       	movw	r30, r24
    4158:	61 50       	subi	r22, 0x01	; 1
    415a:	70 40       	sbci	r23, 0x00	; 0
    415c:	01 90       	ld	r0, Z+
    415e:	01 10       	cpse	r0, r1
    4160:	d8 f7       	brcc	.-10     	; 0x4158 <strnlen+0x2>
    4162:	80 95       	com	r24
    4164:	90 95       	com	r25
    4166:	8e 0f       	add	r24, r30
    4168:	9f 1f       	adc	r25, r31
    416a:	08 95       	ret

0000416c <fputc>:
    416c:	0f 93       	push	r16
    416e:	1f 93       	push	r17
    4170:	cf 93       	push	r28
    4172:	df 93       	push	r29
    4174:	8c 01       	movw	r16, r24
    4176:	eb 01       	movw	r28, r22
    4178:	8b 81       	ldd	r24, Y+3	; 0x03
    417a:	81 ff       	sbrs	r24, 1
    417c:	1b c0       	rjmp	.+54     	; 0x41b4 <fputc+0x48>
    417e:	82 ff       	sbrs	r24, 2
    4180:	0d c0       	rjmp	.+26     	; 0x419c <fputc+0x30>
    4182:	2e 81       	ldd	r18, Y+6	; 0x06
    4184:	3f 81       	ldd	r19, Y+7	; 0x07
    4186:	8c 81       	ldd	r24, Y+4	; 0x04
    4188:	9d 81       	ldd	r25, Y+5	; 0x05
    418a:	28 17       	cp	r18, r24
    418c:	39 07       	cpc	r19, r25
    418e:	64 f4       	brge	.+24     	; 0x41a8 <fputc+0x3c>
    4190:	e8 81       	ld	r30, Y
    4192:	f9 81       	ldd	r31, Y+1	; 0x01
    4194:	01 93       	st	Z+, r16
    4196:	f9 83       	std	Y+1, r31	; 0x01
    4198:	e8 83       	st	Y, r30
    419a:	06 c0       	rjmp	.+12     	; 0x41a8 <fputc+0x3c>
    419c:	e8 85       	ldd	r30, Y+8	; 0x08
    419e:	f9 85       	ldd	r31, Y+9	; 0x09
    41a0:	80 2f       	mov	r24, r16
    41a2:	09 95       	icall
    41a4:	89 2b       	or	r24, r25
    41a6:	31 f4       	brne	.+12     	; 0x41b4 <fputc+0x48>
    41a8:	8e 81       	ldd	r24, Y+6	; 0x06
    41aa:	9f 81       	ldd	r25, Y+7	; 0x07
    41ac:	01 96       	adiw	r24, 0x01	; 1
    41ae:	9f 83       	std	Y+7, r25	; 0x07
    41b0:	8e 83       	std	Y+6, r24	; 0x06
    41b2:	02 c0       	rjmp	.+4      	; 0x41b8 <fputc+0x4c>
    41b4:	0f ef       	ldi	r16, 0xFF	; 255
    41b6:	1f ef       	ldi	r17, 0xFF	; 255
    41b8:	c8 01       	movw	r24, r16
    41ba:	df 91       	pop	r29
    41bc:	cf 91       	pop	r28
    41be:	1f 91       	pop	r17
    41c0:	0f 91       	pop	r16
    41c2:	08 95       	ret

000041c4 <__ultoa_invert>:
    41c4:	fa 01       	movw	r30, r20
    41c6:	aa 27       	eor	r26, r26
    41c8:	28 30       	cpi	r18, 0x08	; 8
    41ca:	51 f1       	breq	.+84     	; 0x4220 <__ultoa_invert+0x5c>
    41cc:	20 31       	cpi	r18, 0x10	; 16
    41ce:	81 f1       	breq	.+96     	; 0x4230 <__ultoa_invert+0x6c>
    41d0:	e8 94       	clt
    41d2:	6f 93       	push	r22
    41d4:	6e 7f       	andi	r22, 0xFE	; 254
    41d6:	6e 5f       	subi	r22, 0xFE	; 254
    41d8:	7f 4f       	sbci	r23, 0xFF	; 255
    41da:	8f 4f       	sbci	r24, 0xFF	; 255
    41dc:	9f 4f       	sbci	r25, 0xFF	; 255
    41de:	af 4f       	sbci	r26, 0xFF	; 255
    41e0:	b1 e0       	ldi	r27, 0x01	; 1
    41e2:	3e d0       	rcall	.+124    	; 0x4260 <__ultoa_invert+0x9c>
    41e4:	b4 e0       	ldi	r27, 0x04	; 4
    41e6:	3c d0       	rcall	.+120    	; 0x4260 <__ultoa_invert+0x9c>
    41e8:	67 0f       	add	r22, r23
    41ea:	78 1f       	adc	r23, r24
    41ec:	89 1f       	adc	r24, r25
    41ee:	9a 1f       	adc	r25, r26
    41f0:	a1 1d       	adc	r26, r1
    41f2:	68 0f       	add	r22, r24
    41f4:	79 1f       	adc	r23, r25
    41f6:	8a 1f       	adc	r24, r26
    41f8:	91 1d       	adc	r25, r1
    41fa:	a1 1d       	adc	r26, r1
    41fc:	6a 0f       	add	r22, r26
    41fe:	71 1d       	adc	r23, r1
    4200:	81 1d       	adc	r24, r1
    4202:	91 1d       	adc	r25, r1
    4204:	a1 1d       	adc	r26, r1
    4206:	20 d0       	rcall	.+64     	; 0x4248 <__ultoa_invert+0x84>
    4208:	09 f4       	brne	.+2      	; 0x420c <__ultoa_invert+0x48>
    420a:	68 94       	set
    420c:	3f 91       	pop	r19
    420e:	2a e0       	ldi	r18, 0x0A	; 10
    4210:	26 9f       	mul	r18, r22
    4212:	11 24       	eor	r1, r1
    4214:	30 19       	sub	r19, r0
    4216:	30 5d       	subi	r19, 0xD0	; 208
    4218:	31 93       	st	Z+, r19
    421a:	de f6       	brtc	.-74     	; 0x41d2 <__ultoa_invert+0xe>
    421c:	cf 01       	movw	r24, r30
    421e:	08 95       	ret
    4220:	46 2f       	mov	r20, r22
    4222:	47 70       	andi	r20, 0x07	; 7
    4224:	40 5d       	subi	r20, 0xD0	; 208
    4226:	41 93       	st	Z+, r20
    4228:	b3 e0       	ldi	r27, 0x03	; 3
    422a:	0f d0       	rcall	.+30     	; 0x424a <__ultoa_invert+0x86>
    422c:	c9 f7       	brne	.-14     	; 0x4220 <__ultoa_invert+0x5c>
    422e:	f6 cf       	rjmp	.-20     	; 0x421c <__ultoa_invert+0x58>
    4230:	46 2f       	mov	r20, r22
    4232:	4f 70       	andi	r20, 0x0F	; 15
    4234:	40 5d       	subi	r20, 0xD0	; 208
    4236:	4a 33       	cpi	r20, 0x3A	; 58
    4238:	18 f0       	brcs	.+6      	; 0x4240 <__ultoa_invert+0x7c>
    423a:	49 5d       	subi	r20, 0xD9	; 217
    423c:	31 fd       	sbrc	r19, 1
    423e:	40 52       	subi	r20, 0x20	; 32
    4240:	41 93       	st	Z+, r20
    4242:	02 d0       	rcall	.+4      	; 0x4248 <__ultoa_invert+0x84>
    4244:	a9 f7       	brne	.-22     	; 0x4230 <__ultoa_invert+0x6c>
    4246:	ea cf       	rjmp	.-44     	; 0x421c <__ultoa_invert+0x58>
    4248:	b4 e0       	ldi	r27, 0x04	; 4
    424a:	a6 95       	lsr	r26
    424c:	97 95       	ror	r25
    424e:	87 95       	ror	r24
    4250:	77 95       	ror	r23
    4252:	67 95       	ror	r22
    4254:	ba 95       	dec	r27
    4256:	c9 f7       	brne	.-14     	; 0x424a <__ultoa_invert+0x86>
    4258:	00 97       	sbiw	r24, 0x00	; 0
    425a:	61 05       	cpc	r22, r1
    425c:	71 05       	cpc	r23, r1
    425e:	08 95       	ret
    4260:	9b 01       	movw	r18, r22
    4262:	ac 01       	movw	r20, r24
    4264:	0a 2e       	mov	r0, r26
    4266:	06 94       	lsr	r0
    4268:	57 95       	ror	r21
    426a:	47 95       	ror	r20
    426c:	37 95       	ror	r19
    426e:	27 95       	ror	r18
    4270:	ba 95       	dec	r27
    4272:	c9 f7       	brne	.-14     	; 0x4266 <__ultoa_invert+0xa2>
    4274:	62 0f       	add	r22, r18
    4276:	73 1f       	adc	r23, r19
    4278:	84 1f       	adc	r24, r20
    427a:	95 1f       	adc	r25, r21
    427c:	a0 1d       	adc	r26, r0
    427e:	08 95       	ret

00004280 <_exit>:
    4280:	f8 94       	cli

00004282 <__stop_program>:
    4282:	ff cf       	rjmp	.-2      	; 0x4282 <__stop_program>
