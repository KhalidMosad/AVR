
AVR_KeyPad2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003d94  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000086  00800060  00003d94  00003e28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000166  008000e6  008000e6  00003eae  2**0
                  ALLOC
  3 .stab         00002d18  00000000  00000000  00003eb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ccb  00000000  00000000  00006bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007893  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000079d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007b43  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000978c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a677  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b424  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b584  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b811  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bfdf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e9       	ldi	r30, 0x94	; 148
      68:	fd e3       	ldi	r31, 0x3D	; 61
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3e       	cpi	r26, 0xE6	; 230
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a6 ee       	ldi	r26, 0xE6	; 230
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 34       	cpi	r26, 0x4C	; 76
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 47 1b 	call	0x368e	; 0x368e <main>
      8a:	0c 94 c8 1e 	jmp	0x3d90	; 0x3d90 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f0 1b 	jmp	0x37e0	; 0x37e0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae eb       	ldi	r26, 0xBE	; 190
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 0c 1c 	jmp	0x3818	; 0x3818 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 fc 1b 	jmp	0x37f8	; 0x37f8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 18 1c 	jmp	0x3830	; 0x3830 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 fc 1b 	jmp	0x37f8	; 0x37f8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 18 1c 	jmp	0x3830	; 0x3830 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f0 1b 	jmp	0x37e0	; 0x37e0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e eb       	ldi	r24, 0xBE	; 190
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 0c 1c 	jmp	0x3818	; 0x3818 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 fc 1b 	jmp	0x37f8	; 0x37f8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 18 1c 	jmp	0x3830	; 0x3830 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 fc 1b 	jmp	0x37f8	; 0x37f8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 18 1c 	jmp	0x3830	; 0x3830 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 fc 1b 	jmp	0x37f8	; 0x37f8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 18 1c 	jmp	0x3830	; 0x3830 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 00 1c 	jmp	0x3800	; 0x3800 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 1c 1c 	jmp	0x3838	; 0x3838 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GetNumbers>:
#include <avr/delay.h>

u8 InputBuffer[150];
u16 Organized[100];
void GetNumbers(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62

	u8 Pressed;
	static u16 i =0;
	while(1)
	{
		Pressed = Keypad_U8ReadPin();
     b50:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <Keypad_U8ReadPin>
     b54:	89 83       	std	Y+1, r24	; 0x01
		if(Pressed >='0' && Pressed <= '9')
     b56:	89 81       	ldd	r24, Y+1	; 0x01
     b58:	80 33       	cpi	r24, 0x30	; 48
     b5a:	e0 f0       	brcs	.+56     	; 0xb94 <GetNumbers+0x4e>
     b5c:	89 81       	ldd	r24, Y+1	; 0x01
     b5e:	8a 33       	cpi	r24, 0x3A	; 58
     b60:	c8 f4       	brcc	.+50     	; 0xb94 <GetNumbers+0x4e>
		{
			LCD_VidSendData(Pressed);
     b62:	89 81       	ldd	r24, Y+1	; 0x01
     b64:	0e 94 5f 15 	call	0x2abe	; 0x2abe <LCD_VidSendData>
			Pressed = Pressed -'0';
     b68:	89 81       	ldd	r24, Y+1	; 0x01
     b6a:	80 53       	subi	r24, 0x30	; 48
     b6c:	89 83       	std	Y+1, r24	; 0x01
			InputBuffer[i]= Pressed;
     b6e:	80 91 e6 00 	lds	r24, 0x00E6
     b72:	90 91 e7 00 	lds	r25, 0x00E7
     b76:	fc 01       	movw	r30, r24
     b78:	e4 51       	subi	r30, 0x14	; 20
     b7a:	ff 4f       	sbci	r31, 0xFF	; 255
     b7c:	89 81       	ldd	r24, Y+1	; 0x01
     b7e:	80 83       	st	Z, r24
			i++;
     b80:	80 91 e6 00 	lds	r24, 0x00E6
     b84:	90 91 e7 00 	lds	r25, 0x00E7
     b88:	01 96       	adiw	r24, 0x01	; 1
     b8a:	90 93 e7 00 	sts	0x00E7, r25
     b8e:	80 93 e6 00 	sts	0x00E6, r24
     b92:	de cf       	rjmp	.-68     	; 0xb50 <GetNumbers+0xa>
		}
		else if(Pressed == '=')
     b94:	89 81       	ldd	r24, Y+1	; 0x01
     b96:	8d 33       	cpi	r24, 0x3D	; 61
     b98:	69 f4       	brne	.+26     	; 0xbb4 <GetNumbers+0x6e>
		{
			LCD_VidSendData(Pressed);
     b9a:	89 81       	ldd	r24, Y+1	; 0x01
     b9c:	0e 94 5f 15 	call	0x2abe	; 0x2abe <LCD_VidSendData>
			LCD_VidSetPosition(1,0);
     ba0:	81 e0       	ldi	r24, 0x01	; 1
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	60 e0       	ldi	r22, 0x00	; 0
     ba6:	70 e0       	ldi	r23, 0x00	; 0
     ba8:	0e 94 05 1b 	call	0x360a	; 0x360a <LCD_VidSetPosition>
		}
	}



}
     bac:	0f 90       	pop	r0
     bae:	cf 91       	pop	r28
     bb0:	df 91       	pop	r29
     bb2:	08 95       	ret
			break;
		}
		else
		{

			LCD_VidSendData(Pressed);
     bb4:	89 81       	ldd	r24, Y+1	; 0x01
     bb6:	0e 94 5f 15 	call	0x2abe	; 0x2abe <LCD_VidSendData>
			InputBuffer[i]= Pressed;
     bba:	80 91 e6 00 	lds	r24, 0x00E6
     bbe:	90 91 e7 00 	lds	r25, 0x00E7
     bc2:	fc 01       	movw	r30, r24
     bc4:	e4 51       	subi	r30, 0x14	; 20
     bc6:	ff 4f       	sbci	r31, 0xFF	; 255
     bc8:	89 81       	ldd	r24, Y+1	; 0x01
     bca:	80 83       	st	Z, r24
			i++;
     bcc:	80 91 e6 00 	lds	r24, 0x00E6
     bd0:	90 91 e7 00 	lds	r25, 0x00E7
     bd4:	01 96       	adiw	r24, 0x01	; 1
     bd6:	90 93 e7 00 	sts	0x00E7, r25
     bda:	80 93 e6 00 	sts	0x00E6, r24
     bde:	b8 cf       	rjmp	.-144    	; 0xb50 <GetNumbers+0xa>

00000be0 <calculate>:


}

void calculate(void)
{
     be0:	df 93       	push	r29
     be2:	cf 93       	push	r28
     be4:	cd b7       	in	r28, 0x3d	; 61
     be6:	de b7       	in	r29, 0x3e	; 62
     be8:	e6 97       	sbiw	r28, 0x36	; 54
     bea:	0f b6       	in	r0, 0x3f	; 63
     bec:	f8 94       	cli
     bee:	de bf       	out	0x3e, r29	; 62
     bf0:	0f be       	out	0x3f, r0	; 63
     bf2:	cd bf       	out	0x3d, r28	; 61
	int i=0;
     bf4:	1c 82       	std	Y+4, r1	; 0x04
     bf6:	1b 82       	std	Y+3, r1	; 0x03
	int j = 0;
     bf8:	1a 82       	std	Y+2, r1	; 0x02
     bfa:	19 82       	std	Y+1, r1	; 0x01
	static Sum = 0;
	u8 Buffer[50];
	while(1)
	{
		if(InputBuffer[i]>=0 && InputBuffer[i]<=9)
     bfc:	8b 81       	ldd	r24, Y+3	; 0x03
     bfe:	9c 81       	ldd	r25, Y+4	; 0x04
     c00:	fc 01       	movw	r30, r24
     c02:	e4 51       	subi	r30, 0x14	; 20
     c04:	ff 4f       	sbci	r31, 0xFF	; 255
     c06:	80 81       	ld	r24, Z
     c08:	8a 30       	cpi	r24, 0x0A	; 10
     c0a:	40 f5       	brcc	.+80     	; 0xc5c <calculate+0x7c>
		{
			Sum = InputBuffer[i]+Sum*10;
     c0c:	8b 81       	ldd	r24, Y+3	; 0x03
     c0e:	9c 81       	ldd	r25, Y+4	; 0x04
     c10:	fc 01       	movw	r30, r24
     c12:	e4 51       	subi	r30, 0x14	; 20
     c14:	ff 4f       	sbci	r31, 0xFF	; 255
     c16:	80 81       	ld	r24, Z
     c18:	48 2f       	mov	r20, r24
     c1a:	50 e0       	ldi	r21, 0x00	; 0
     c1c:	80 91 e8 00 	lds	r24, 0x00E8
     c20:	90 91 e9 00 	lds	r25, 0x00E9
     c24:	9c 01       	movw	r18, r24
     c26:	22 0f       	add	r18, r18
     c28:	33 1f       	adc	r19, r19
     c2a:	c9 01       	movw	r24, r18
     c2c:	88 0f       	add	r24, r24
     c2e:	99 1f       	adc	r25, r25
     c30:	88 0f       	add	r24, r24
     c32:	99 1f       	adc	r25, r25
     c34:	82 0f       	add	r24, r18
     c36:	93 1f       	adc	r25, r19
     c38:	84 0f       	add	r24, r20
     c3a:	95 1f       	adc	r25, r21
     c3c:	90 93 e9 00 	sts	0x00E9, r25
     c40:	80 93 e8 00 	sts	0x00E8, r24
			InputBuffer[i] = 0;
     c44:	8b 81       	ldd	r24, Y+3	; 0x03
     c46:	9c 81       	ldd	r25, Y+4	; 0x04
     c48:	fc 01       	movw	r30, r24
     c4a:	e4 51       	subi	r30, 0x14	; 20
     c4c:	ff 4f       	sbci	r31, 0xFF	; 255
     c4e:	10 82       	st	Z, r1
			i++;
     c50:	8b 81       	ldd	r24, Y+3	; 0x03
     c52:	9c 81       	ldd	r25, Y+4	; 0x04
     c54:	01 96       	adiw	r24, 0x01	; 1
     c56:	9c 83       	std	Y+4, r25	; 0x04
     c58:	8b 83       	std	Y+3, r24	; 0x03
     c5a:	d0 cf       	rjmp	.-96     	; 0xbfc <calculate+0x1c>
		}
		else if(InputBuffer[i] == '+')
     c5c:	8b 81       	ldd	r24, Y+3	; 0x03
     c5e:	9c 81       	ldd	r25, Y+4	; 0x04
     c60:	fc 01       	movw	r30, r24
     c62:	e4 51       	subi	r30, 0x14	; 20
     c64:	ff 4f       	sbci	r31, 0xFF	; 255
     c66:	80 81       	ld	r24, Z
     c68:	8b 32       	cpi	r24, 0x2B	; 43
     c6a:	59 f1       	breq	.+86     	; 0xcc2 <calculate+0xe2>
		{
			break;
		}
		else
		{
			Organized[j] = Sum;
     c6c:	29 81       	ldd	r18, Y+1	; 0x01
     c6e:	3a 81       	ldd	r19, Y+2	; 0x02
     c70:	80 91 e8 00 	lds	r24, 0x00E8
     c74:	90 91 e9 00 	lds	r25, 0x00E9
     c78:	ac 01       	movw	r20, r24
     c7a:	c9 01       	movw	r24, r18
     c7c:	88 0f       	add	r24, r24
     c7e:	99 1f       	adc	r25, r25
     c80:	fc 01       	movw	r30, r24
     c82:	ee 57       	subi	r30, 0x7E	; 126
     c84:	fe 4f       	sbci	r31, 0xFE	; 254
     c86:	51 83       	std	Z+1, r21	; 0x01
     c88:	40 83       	st	Z, r20
			Organized[j]=InputBuffer[i];
     c8a:	49 81       	ldd	r20, Y+1	; 0x01
     c8c:	5a 81       	ldd	r21, Y+2	; 0x02
     c8e:	8b 81       	ldd	r24, Y+3	; 0x03
     c90:	9c 81       	ldd	r25, Y+4	; 0x04
     c92:	fc 01       	movw	r30, r24
     c94:	e4 51       	subi	r30, 0x14	; 20
     c96:	ff 4f       	sbci	r31, 0xFF	; 255
     c98:	80 81       	ld	r24, Z
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	ca 01       	movw	r24, r20
     ca0:	88 0f       	add	r24, r24
     ca2:	99 1f       	adc	r25, r25
     ca4:	fc 01       	movw	r30, r24
     ca6:	ee 57       	subi	r30, 0x7E	; 126
     ca8:	fe 4f       	sbci	r31, 0xFE	; 254
     caa:	31 83       	std	Z+1, r19	; 0x01
     cac:	20 83       	st	Z, r18
			Sum = 0;
     cae:	10 92 e9 00 	sts	0x00E9, r1
     cb2:	10 92 e8 00 	sts	0x00E8, r1
			j++;
     cb6:	89 81       	ldd	r24, Y+1	; 0x01
     cb8:	9a 81       	ldd	r25, Y+2	; 0x02
     cba:	01 96       	adiw	r24, 0x01	; 1
     cbc:	9a 83       	std	Y+2, r25	; 0x02
     cbe:	89 83       	std	Y+1, r24	; 0x01
     cc0:	9d cf       	rjmp	.-198    	; 0xbfc <calculate+0x1c>
		}

	}

	//sprintf(Buffer,"%s", Organized);
	LCD_VidSendNumber(Organized[0]);
     cc2:	80 91 82 01 	lds	r24, 0x0182
     cc6:	90 91 83 01 	lds	r25, 0x0183
     cca:	0e 94 3e 1a 	call	0x347c	; 0x347c <LCD_VidSendNumber>



}
     cce:	e6 96       	adiw	r28, 0x36	; 54
     cd0:	0f b6       	in	r0, 0x3f	; 63
     cd2:	f8 94       	cli
     cd4:	de bf       	out	0x3e, r29	; 62
     cd6:	0f be       	out	0x3f, r0	; 63
     cd8:	cd bf       	out	0x3d, r28	; 61
     cda:	cf 91       	pop	r28
     cdc:	df 91       	pop	r29
     cde:	08 95       	ret

00000ce0 <PasswordTrials>:
int PasswordTrials(void)
{
     ce0:	df 93       	push	r29
     ce2:	cf 93       	push	r28
     ce4:	cd b7       	in	r28, 0x3d	; 61
     ce6:	de b7       	in	r29, 0x3e	; 62
     ce8:	c5 55       	subi	r28, 0x55	; 85
     cea:	d0 40       	sbci	r29, 0x00	; 0
     cec:	0f b6       	in	r0, 0x3f	; 63
     cee:	f8 94       	cli
     cf0:	de bf       	out	0x3e, r29	; 62
     cf2:	0f be       	out	0x3f, r0	; 63
     cf4:	cd bf       	out	0x3d, r28	; 61
	u8 Trials = 3;
     cf6:	83 e0       	ldi	r24, 0x03	; 3
     cf8:	89 a3       	std	Y+33, r24	; 0x21
     cfa:	45 c1       	rjmp	.+650    	; 0xf86 <PasswordTrials+0x2a6>
	u8 buffer[50];
	while (Trials > 0)
	{
		u32 getPassword = Password_Func();
     cfc:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <Password_Func>
     d00:	aa 27       	eor	r26, r26
     d02:	97 fd       	sbrc	r25, 7
     d04:	a0 95       	com	r26
     d06:	ba 2f       	mov	r27, r26
     d08:	8d 8f       	std	Y+29, r24	; 0x1d
     d0a:	9e 8f       	std	Y+30, r25	; 0x1e
     d0c:	af 8f       	std	Y+31, r26	; 0x1f
     d0e:	b8 a3       	std	Y+32, r27	; 0x20
		if(getPassword == DefaultPassword)
     d10:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d12:	9e 8d       	ldd	r25, Y+30	; 0x1e
     d14:	af 8d       	ldd	r26, Y+31	; 0x1f
     d16:	b8 a1       	ldd	r27, Y+32	; 0x20
     d18:	82 3d       	cpi	r24, 0xD2	; 210
     d1a:	24 e0       	ldi	r18, 0x04	; 4
     d1c:	92 07       	cpc	r25, r18
     d1e:	20 e0       	ldi	r18, 0x00	; 0
     d20:	a2 07       	cpc	r26, r18
     d22:	20 e0       	ldi	r18, 0x00	; 0
     d24:	b2 07       	cpc	r27, r18
     d26:	e9 f4       	brne	.+58     	; 0xd62 <PasswordTrials+0x82>
		{
			LCD_VidClear();
     d28:	0e 94 1f 1b 	call	0x363e	; 0x363e <LCD_VidClear>
			LCD_VidSetPosition(0,3);
     d2c:	80 e0       	ldi	r24, 0x00	; 0
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	63 e0       	ldi	r22, 0x03	; 3
     d32:	70 e0       	ldi	r23, 0x00	; 0
     d34:	0e 94 05 1b 	call	0x360a	; 0x360a <LCD_VidSetPosition>
			LCD_VidSendString("WELCOME TO ");
     d38:	80 e6       	ldi	r24, 0x60	; 96
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	0e 94 15 1a 	call	0x342a	; 0x342a <LCD_VidSendString>
			LCD_VidSetPosition(1,3);
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	63 e0       	ldi	r22, 0x03	; 3
     d46:	70 e0       	ldi	r23, 0x00	; 0
     d48:	0e 94 05 1b 	call	0x360a	; 0x360a <LCD_VidSetPosition>
			LCD_VidSendString("YOUR  HOME");
     d4c:	8c e6       	ldi	r24, 0x6C	; 108
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	0e 94 15 1a 	call	0x342a	; 0x342a <LCD_VidSendString>
			return 1;
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	66 96       	adiw	r28, 0x16	; 22
     d5a:	9f af       	std	Y+63, r25	; 0x3f
     d5c:	8e af       	std	Y+62, r24	; 0x3e
     d5e:	66 97       	sbiw	r28, 0x16	; 22
     d60:	1a c1       	rjmp	.+564    	; 0xf96 <PasswordTrials+0x2b6>
		}
		else
		{
			Trials--;
     d62:	89 a1       	ldd	r24, Y+33	; 0x21
     d64:	81 50       	subi	r24, 0x01	; 1
     d66:	89 a3       	std	Y+33, r24	; 0x21
     d68:	80 e0       	ldi	r24, 0x00	; 0
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	a8 e4       	ldi	r26, 0x48	; 72
     d6e:	b3 e4       	ldi	r27, 0x43	; 67
     d70:	89 8f       	std	Y+25, r24	; 0x19
     d72:	9a 8f       	std	Y+26, r25	; 0x1a
     d74:	ab 8f       	std	Y+27, r26	; 0x1b
     d76:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d78:	69 8d       	ldd	r22, Y+25	; 0x19
     d7a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d7c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d7e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d80:	20 e0       	ldi	r18, 0x00	; 0
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	4a ef       	ldi	r20, 0xFA	; 250
     d86:	54 e4       	ldi	r21, 0x44	; 68
     d88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d8c:	dc 01       	movw	r26, r24
     d8e:	cb 01       	movw	r24, r22
     d90:	8d 8b       	std	Y+21, r24	; 0x15
     d92:	9e 8b       	std	Y+22, r25	; 0x16
     d94:	af 8b       	std	Y+23, r26	; 0x17
     d96:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     d98:	6d 89       	ldd	r22, Y+21	; 0x15
     d9a:	7e 89       	ldd	r23, Y+22	; 0x16
     d9c:	8f 89       	ldd	r24, Y+23	; 0x17
     d9e:	98 8d       	ldd	r25, Y+24	; 0x18
     da0:	20 e0       	ldi	r18, 0x00	; 0
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	40 e8       	ldi	r20, 0x80	; 128
     da6:	5f e3       	ldi	r21, 0x3F	; 63
     da8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     dac:	88 23       	and	r24, r24
     dae:	2c f4       	brge	.+10     	; 0xdba <PasswordTrials+0xda>
		__ticks = 1;
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	9c 8b       	std	Y+20, r25	; 0x14
     db6:	8b 8b       	std	Y+19, r24	; 0x13
     db8:	3f c0       	rjmp	.+126    	; 0xe38 <PasswordTrials+0x158>
	else if (__tmp > 65535)
     dba:	6d 89       	ldd	r22, Y+21	; 0x15
     dbc:	7e 89       	ldd	r23, Y+22	; 0x16
     dbe:	8f 89       	ldd	r24, Y+23	; 0x17
     dc0:	98 8d       	ldd	r25, Y+24	; 0x18
     dc2:	20 e0       	ldi	r18, 0x00	; 0
     dc4:	3f ef       	ldi	r19, 0xFF	; 255
     dc6:	4f e7       	ldi	r20, 0x7F	; 127
     dc8:	57 e4       	ldi	r21, 0x47	; 71
     dca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     dce:	18 16       	cp	r1, r24
     dd0:	4c f5       	brge	.+82     	; 0xe24 <PasswordTrials+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dd2:	69 8d       	ldd	r22, Y+25	; 0x19
     dd4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     dd6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     dd8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     dda:	20 e0       	ldi	r18, 0x00	; 0
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	40 e2       	ldi	r20, 0x20	; 32
     de0:	51 e4       	ldi	r21, 0x41	; 65
     de2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     de6:	dc 01       	movw	r26, r24
     de8:	cb 01       	movw	r24, r22
     dea:	bc 01       	movw	r22, r24
     dec:	cd 01       	movw	r24, r26
     dee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     df2:	dc 01       	movw	r26, r24
     df4:	cb 01       	movw	r24, r22
     df6:	9c 8b       	std	Y+20, r25	; 0x14
     df8:	8b 8b       	std	Y+19, r24	; 0x13
     dfa:	0f c0       	rjmp	.+30     	; 0xe1a <PasswordTrials+0x13a>
     dfc:	88 ec       	ldi	r24, 0xC8	; 200
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	9a 8b       	std	Y+18, r25	; 0x12
     e02:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e04:	89 89       	ldd	r24, Y+17	; 0x11
     e06:	9a 89       	ldd	r25, Y+18	; 0x12
     e08:	01 97       	sbiw	r24, 0x01	; 1
     e0a:	f1 f7       	brne	.-4      	; 0xe08 <PasswordTrials+0x128>
     e0c:	9a 8b       	std	Y+18, r25	; 0x12
     e0e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e10:	8b 89       	ldd	r24, Y+19	; 0x13
     e12:	9c 89       	ldd	r25, Y+20	; 0x14
     e14:	01 97       	sbiw	r24, 0x01	; 1
     e16:	9c 8b       	std	Y+20, r25	; 0x14
     e18:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e1a:	8b 89       	ldd	r24, Y+19	; 0x13
     e1c:	9c 89       	ldd	r25, Y+20	; 0x14
     e1e:	00 97       	sbiw	r24, 0x00	; 0
     e20:	69 f7       	brne	.-38     	; 0xdfc <PasswordTrials+0x11c>
     e22:	14 c0       	rjmp	.+40     	; 0xe4c <PasswordTrials+0x16c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e24:	6d 89       	ldd	r22, Y+21	; 0x15
     e26:	7e 89       	ldd	r23, Y+22	; 0x16
     e28:	8f 89       	ldd	r24, Y+23	; 0x17
     e2a:	98 8d       	ldd	r25, Y+24	; 0x18
     e2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e30:	dc 01       	movw	r26, r24
     e32:	cb 01       	movw	r24, r22
     e34:	9c 8b       	std	Y+20, r25	; 0x14
     e36:	8b 8b       	std	Y+19, r24	; 0x13
     e38:	8b 89       	ldd	r24, Y+19	; 0x13
     e3a:	9c 89       	ldd	r25, Y+20	; 0x14
     e3c:	98 8b       	std	Y+16, r25	; 0x10
     e3e:	8f 87       	std	Y+15, r24	; 0x0f
     e40:	8f 85       	ldd	r24, Y+15	; 0x0f
     e42:	98 89       	ldd	r25, Y+16	; 0x10
     e44:	01 97       	sbiw	r24, 0x01	; 1
     e46:	f1 f7       	brne	.-4      	; 0xe44 <PasswordTrials+0x164>
     e48:	98 8b       	std	Y+16, r25	; 0x10
     e4a:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(200);
			sprintf(buffer,"You have %d Trials", Trials);
     e4c:	89 a1       	ldd	r24, Y+33	; 0x21
     e4e:	28 2f       	mov	r18, r24
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	00 d0       	rcall	.+0      	; 0xe54 <PasswordTrials+0x174>
     e54:	00 d0       	rcall	.+0      	; 0xe56 <PasswordTrials+0x176>
     e56:	00 d0       	rcall	.+0      	; 0xe58 <PasswordTrials+0x178>
     e58:	ed b7       	in	r30, 0x3d	; 61
     e5a:	fe b7       	in	r31, 0x3e	; 62
     e5c:	31 96       	adiw	r30, 0x01	; 1
     e5e:	ce 01       	movw	r24, r28
     e60:	82 96       	adiw	r24, 0x22	; 34
     e62:	91 83       	std	Z+1, r25	; 0x01
     e64:	80 83       	st	Z, r24
     e66:	87 e7       	ldi	r24, 0x77	; 119
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	93 83       	std	Z+3, r25	; 0x03
     e6c:	82 83       	std	Z+2, r24	; 0x02
     e6e:	35 83       	std	Z+5, r19	; 0x05
     e70:	24 83       	std	Z+4, r18	; 0x04
     e72:	0e 94 27 1c 	call	0x384e	; 0x384e <sprintf>
     e76:	8d b7       	in	r24, 0x3d	; 61
     e78:	9e b7       	in	r25, 0x3e	; 62
     e7a:	06 96       	adiw	r24, 0x06	; 6
     e7c:	0f b6       	in	r0, 0x3f	; 63
     e7e:	f8 94       	cli
     e80:	9e bf       	out	0x3e, r25	; 62
     e82:	0f be       	out	0x3f, r0	; 63
     e84:	8d bf       	out	0x3d, r24	; 61
			LCD_VidClear();
     e86:	0e 94 1f 1b 	call	0x363e	; 0x363e <LCD_VidClear>
			LCD_VidSetPosition(0,0);
     e8a:	80 e0       	ldi	r24, 0x00	; 0
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	60 e0       	ldi	r22, 0x00	; 0
     e90:	70 e0       	ldi	r23, 0x00	; 0
     e92:	0e 94 05 1b 	call	0x360a	; 0x360a <LCD_VidSetPosition>
			LCD_VidSendString(buffer);
     e96:	ce 01       	movw	r24, r28
     e98:	82 96       	adiw	r24, 0x22	; 34
     e9a:	0e 94 15 1a 	call	0x342a	; 0x342a <LCD_VidSendString>
     e9e:	80 e0       	ldi	r24, 0x00	; 0
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	aa ef       	ldi	r26, 0xFA	; 250
     ea4:	b3 e4       	ldi	r27, 0x43	; 67
     ea6:	8b 87       	std	Y+11, r24	; 0x0b
     ea8:	9c 87       	std	Y+12, r25	; 0x0c
     eaa:	ad 87       	std	Y+13, r26	; 0x0d
     eac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     eae:	6b 85       	ldd	r22, Y+11	; 0x0b
     eb0:	7c 85       	ldd	r23, Y+12	; 0x0c
     eb2:	8d 85       	ldd	r24, Y+13	; 0x0d
     eb4:	9e 85       	ldd	r25, Y+14	; 0x0e
     eb6:	20 e0       	ldi	r18, 0x00	; 0
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	4a ef       	ldi	r20, 0xFA	; 250
     ebc:	54 e4       	ldi	r21, 0x44	; 68
     ebe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ec2:	dc 01       	movw	r26, r24
     ec4:	cb 01       	movw	r24, r22
     ec6:	8f 83       	std	Y+7, r24	; 0x07
     ec8:	98 87       	std	Y+8, r25	; 0x08
     eca:	a9 87       	std	Y+9, r26	; 0x09
     ecc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ece:	6f 81       	ldd	r22, Y+7	; 0x07
     ed0:	78 85       	ldd	r23, Y+8	; 0x08
     ed2:	89 85       	ldd	r24, Y+9	; 0x09
     ed4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ed6:	20 e0       	ldi	r18, 0x00	; 0
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	40 e8       	ldi	r20, 0x80	; 128
     edc:	5f e3       	ldi	r21, 0x3F	; 63
     ede:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ee2:	88 23       	and	r24, r24
     ee4:	2c f4       	brge	.+10     	; 0xef0 <PasswordTrials+0x210>
		__ticks = 1;
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	9e 83       	std	Y+6, r25	; 0x06
     eec:	8d 83       	std	Y+5, r24	; 0x05
     eee:	3f c0       	rjmp	.+126    	; 0xf6e <PasswordTrials+0x28e>
	else if (__tmp > 65535)
     ef0:	6f 81       	ldd	r22, Y+7	; 0x07
     ef2:	78 85       	ldd	r23, Y+8	; 0x08
     ef4:	89 85       	ldd	r24, Y+9	; 0x09
     ef6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ef8:	20 e0       	ldi	r18, 0x00	; 0
     efa:	3f ef       	ldi	r19, 0xFF	; 255
     efc:	4f e7       	ldi	r20, 0x7F	; 127
     efe:	57 e4       	ldi	r21, 0x47	; 71
     f00:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f04:	18 16       	cp	r1, r24
     f06:	4c f5       	brge	.+82     	; 0xf5a <PasswordTrials+0x27a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f08:	6b 85       	ldd	r22, Y+11	; 0x0b
     f0a:	7c 85       	ldd	r23, Y+12	; 0x0c
     f0c:	8d 85       	ldd	r24, Y+13	; 0x0d
     f0e:	9e 85       	ldd	r25, Y+14	; 0x0e
     f10:	20 e0       	ldi	r18, 0x00	; 0
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	40 e2       	ldi	r20, 0x20	; 32
     f16:	51 e4       	ldi	r21, 0x41	; 65
     f18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f1c:	dc 01       	movw	r26, r24
     f1e:	cb 01       	movw	r24, r22
     f20:	bc 01       	movw	r22, r24
     f22:	cd 01       	movw	r24, r26
     f24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f28:	dc 01       	movw	r26, r24
     f2a:	cb 01       	movw	r24, r22
     f2c:	9e 83       	std	Y+6, r25	; 0x06
     f2e:	8d 83       	std	Y+5, r24	; 0x05
     f30:	0f c0       	rjmp	.+30     	; 0xf50 <PasswordTrials+0x270>
     f32:	88 ec       	ldi	r24, 0xC8	; 200
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	9c 83       	std	Y+4, r25	; 0x04
     f38:	8b 83       	std	Y+3, r24	; 0x03
     f3a:	8b 81       	ldd	r24, Y+3	; 0x03
     f3c:	9c 81       	ldd	r25, Y+4	; 0x04
     f3e:	01 97       	sbiw	r24, 0x01	; 1
     f40:	f1 f7       	brne	.-4      	; 0xf3e <PasswordTrials+0x25e>
     f42:	9c 83       	std	Y+4, r25	; 0x04
     f44:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f46:	8d 81       	ldd	r24, Y+5	; 0x05
     f48:	9e 81       	ldd	r25, Y+6	; 0x06
     f4a:	01 97       	sbiw	r24, 0x01	; 1
     f4c:	9e 83       	std	Y+6, r25	; 0x06
     f4e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f50:	8d 81       	ldd	r24, Y+5	; 0x05
     f52:	9e 81       	ldd	r25, Y+6	; 0x06
     f54:	00 97       	sbiw	r24, 0x00	; 0
     f56:	69 f7       	brne	.-38     	; 0xf32 <PasswordTrials+0x252>
     f58:	14 c0       	rjmp	.+40     	; 0xf82 <PasswordTrials+0x2a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f5a:	6f 81       	ldd	r22, Y+7	; 0x07
     f5c:	78 85       	ldd	r23, Y+8	; 0x08
     f5e:	89 85       	ldd	r24, Y+9	; 0x09
     f60:	9a 85       	ldd	r25, Y+10	; 0x0a
     f62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f66:	dc 01       	movw	r26, r24
     f68:	cb 01       	movw	r24, r22
     f6a:	9e 83       	std	Y+6, r25	; 0x06
     f6c:	8d 83       	std	Y+5, r24	; 0x05
     f6e:	8d 81       	ldd	r24, Y+5	; 0x05
     f70:	9e 81       	ldd	r25, Y+6	; 0x06
     f72:	9a 83       	std	Y+2, r25	; 0x02
     f74:	89 83       	std	Y+1, r24	; 0x01
     f76:	89 81       	ldd	r24, Y+1	; 0x01
     f78:	9a 81       	ldd	r25, Y+2	; 0x02
     f7a:	01 97       	sbiw	r24, 0x01	; 1
     f7c:	f1 f7       	brne	.-4      	; 0xf7a <PasswordTrials+0x29a>
     f7e:	9a 83       	std	Y+2, r25	; 0x02
     f80:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			LCD_VidClear();
     f82:	0e 94 1f 1b 	call	0x363e	; 0x363e <LCD_VidClear>
}
int PasswordTrials(void)
{
	u8 Trials = 3;
	u8 buffer[50];
	while (Trials > 0)
     f86:	89 a1       	ldd	r24, Y+33	; 0x21
     f88:	88 23       	and	r24, r24
     f8a:	09 f0       	breq	.+2      	; 0xf8e <PasswordTrials+0x2ae>
     f8c:	b7 ce       	rjmp	.-658    	; 0xcfc <PasswordTrials+0x1c>
			LCD_VidSendString(buffer);
			_delay_ms(500);
			LCD_VidClear();
		}
	}
	return 0;
     f8e:	66 96       	adiw	r28, 0x16	; 22
     f90:	1f ae       	std	Y+63, r1	; 0x3f
     f92:	1e ae       	std	Y+62, r1	; 0x3e
     f94:	66 97       	sbiw	r28, 0x16	; 22
     f96:	66 96       	adiw	r28, 0x16	; 22
     f98:	8e ad       	ldd	r24, Y+62	; 0x3e
     f9a:	9f ad       	ldd	r25, Y+63	; 0x3f
     f9c:	66 97       	sbiw	r28, 0x16	; 22
}
     f9e:	cb 5a       	subi	r28, 0xAB	; 171
     fa0:	df 4f       	sbci	r29, 0xFF	; 255
     fa2:	0f b6       	in	r0, 0x3f	; 63
     fa4:	f8 94       	cli
     fa6:	de bf       	out	0x3e, r29	; 62
     fa8:	0f be       	out	0x3f, r0	; 63
     faa:	cd bf       	out	0x3d, r28	; 61
     fac:	cf 91       	pop	r28
     fae:	df 91       	pop	r29
     fb0:	08 95       	ret

00000fb2 <Password_Func>:


int Password_Func(void)
{
     fb2:	df 93       	push	r29
     fb4:	cf 93       	push	r28
     fb6:	cd b7       	in	r28, 0x3d	; 61
     fb8:	de b7       	in	r29, 0x3e	; 62
     fba:	64 97       	sbiw	r28, 0x14	; 20
     fbc:	0f b6       	in	r0, 0x3f	; 63
     fbe:	f8 94       	cli
     fc0:	de bf       	out	0x3e, r29	; 62
     fc2:	0f be       	out	0x3f, r0	; 63
     fc4:	cd bf       	out	0x3d, r28	; 61
	int Pass =0;
     fc6:	1c 8a       	std	Y+20, r1	; 0x14
     fc8:	1b 8a       	std	Y+19, r1	; 0x13
	int i = 4;
     fca:	84 e0       	ldi	r24, 0x04	; 4
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	9a 8b       	std	Y+18, r25	; 0x12
     fd0:	89 8b       	std	Y+17, r24	; 0x11
	static int x=0;
	u8 Pressed =0;
     fd2:	18 8a       	std	Y+16, r1	; 0x10
	u8 starts;
	LCD_VidSendString("Enter Password");
     fd4:	8a e8       	ldi	r24, 0x8A	; 138
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	0e 94 15 1a 	call	0x342a	; 0x342a <LCD_VidSendString>
     fdc:	ce c0       	rjmp	.+412    	; 0x117a <Password_Func+0x1c8>
	while(i>0)
	{

		Pressed = Keypad_U8ReadPin();
     fde:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <Keypad_U8ReadPin>
     fe2:	88 8b       	std	Y+16, r24	; 0x10
		if(Pressed>='0' && Pressed <='9')
     fe4:	88 89       	ldd	r24, Y+16	; 0x10
     fe6:	80 33       	cpi	r24, 0x30	; 48
     fe8:	08 f4       	brcc	.+2      	; 0xfec <Password_Func+0x3a>
     fea:	4e c0       	rjmp	.+156    	; 0x1088 <Password_Func+0xd6>
     fec:	88 89       	ldd	r24, Y+16	; 0x10
     fee:	8a 33       	cpi	r24, 0x3A	; 58
     ff0:	08 f0       	brcs	.+2      	; 0xff4 <Password_Func+0x42>
     ff2:	4a c0       	rjmp	.+148    	; 0x1088 <Password_Func+0xd6>
		{
			LCD_VidSetPosition(1,0);
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	60 e0       	ldi	r22, 0x00	; 0
     ffa:	70 e0       	ldi	r23, 0x00	; 0
     ffc:	0e 94 05 1b 	call	0x360a	; 0x360a <LCD_VidSetPosition>
			Pressed = Pressed -'0';
    1000:	88 89       	ldd	r24, Y+16	; 0x10
    1002:	80 53       	subi	r24, 0x30	; 48
    1004:	88 8b       	std	Y+16, r24	; 0x10

			x= Pressed + x*10 ;
    1006:	88 89       	ldd	r24, Y+16	; 0x10
    1008:	48 2f       	mov	r20, r24
    100a:	50 e0       	ldi	r21, 0x00	; 0
    100c:	80 91 ea 00 	lds	r24, 0x00EA
    1010:	90 91 eb 00 	lds	r25, 0x00EB
    1014:	9c 01       	movw	r18, r24
    1016:	22 0f       	add	r18, r18
    1018:	33 1f       	adc	r19, r19
    101a:	c9 01       	movw	r24, r18
    101c:	88 0f       	add	r24, r24
    101e:	99 1f       	adc	r25, r25
    1020:	88 0f       	add	r24, r24
    1022:	99 1f       	adc	r25, r25
    1024:	82 0f       	add	r24, r18
    1026:	93 1f       	adc	r25, r19
    1028:	84 0f       	add	r24, r20
    102a:	95 1f       	adc	r25, r21
    102c:	90 93 eb 00 	sts	0x00EB, r25
    1030:	80 93 ea 00 	sts	0x00EA, r24
			LCD_VidSendNumber(x);
    1034:	80 91 ea 00 	lds	r24, 0x00EA
    1038:	90 91 eb 00 	lds	r25, 0x00EB
    103c:	0e 94 3e 1a 	call	0x347c	; 0x347c <LCD_VidSendNumber>
			i--;
    1040:	89 89       	ldd	r24, Y+17	; 0x11
    1042:	9a 89       	ldd	r25, Y+18	; 0x12
    1044:	01 97       	sbiw	r24, 0x01	; 1
    1046:	9a 8b       	std	Y+18, r25	; 0x12
    1048:	89 8b       	std	Y+17, r24	; 0x11
			for(starts=0; starts<=3-i;starts++)
    104a:	1f 86       	std	Y+15, r1	; 0x0f
    104c:	0e c0       	rjmp	.+28     	; 0x106a <Password_Func+0xb8>
			{
				LCD_VidSetPosition(1,starts);
    104e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1050:	28 2f       	mov	r18, r24
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	b9 01       	movw	r22, r18
    105a:	0e 94 05 1b 	call	0x360a	; 0x360a <LCD_VidSetPosition>
				LCD_VidSendData('*');
    105e:	8a e2       	ldi	r24, 0x2A	; 42
    1060:	0e 94 5f 15 	call	0x2abe	; 0x2abe <LCD_VidSendData>
			Pressed = Pressed -'0';

			x= Pressed + x*10 ;
			LCD_VidSendNumber(x);
			i--;
			for(starts=0; starts<=3-i;starts++)
    1064:	8f 85       	ldd	r24, Y+15	; 0x0f
    1066:	8f 5f       	subi	r24, 0xFF	; 255
    1068:	8f 87       	std	Y+15, r24	; 0x0f
    106a:	8f 85       	ldd	r24, Y+15	; 0x0f
    106c:	48 2f       	mov	r20, r24
    106e:	50 e0       	ldi	r21, 0x00	; 0
    1070:	23 e0       	ldi	r18, 0x03	; 3
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	89 89       	ldd	r24, Y+17	; 0x11
    1076:	9a 89       	ldd	r25, Y+18	; 0x12
    1078:	b9 01       	movw	r22, r18
    107a:	68 1b       	sub	r22, r24
    107c:	79 0b       	sbc	r23, r25
    107e:	cb 01       	movw	r24, r22
    1080:	84 17       	cp	r24, r20
    1082:	95 07       	cpc	r25, r21
    1084:	24 f7       	brge	.-56     	; 0x104e <Password_Func+0x9c>
    1086:	79 c0       	rjmp	.+242    	; 0x117a <Password_Func+0x1c8>
	LCD_VidSendString("Enter Password");
	while(i>0)
	{

		Pressed = Keypad_U8ReadPin();
		if(Pressed>='0' && Pressed <='9')
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	a8 e4       	ldi	r26, 0x48	; 72
    108e:	b3 e4       	ldi	r27, 0x43	; 67
    1090:	8b 87       	std	Y+11, r24	; 0x0b
    1092:	9c 87       	std	Y+12, r25	; 0x0c
    1094:	ad 87       	std	Y+13, r26	; 0x0d
    1096:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1098:	6b 85       	ldd	r22, Y+11	; 0x0b
    109a:	7c 85       	ldd	r23, Y+12	; 0x0c
    109c:	8d 85       	ldd	r24, Y+13	; 0x0d
    109e:	9e 85       	ldd	r25, Y+14	; 0x0e
    10a0:	20 e0       	ldi	r18, 0x00	; 0
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	4a ef       	ldi	r20, 0xFA	; 250
    10a6:	54 e4       	ldi	r21, 0x44	; 68
    10a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ac:	dc 01       	movw	r26, r24
    10ae:	cb 01       	movw	r24, r22
    10b0:	8f 83       	std	Y+7, r24	; 0x07
    10b2:	98 87       	std	Y+8, r25	; 0x08
    10b4:	a9 87       	std	Y+9, r26	; 0x09
    10b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10b8:	6f 81       	ldd	r22, Y+7	; 0x07
    10ba:	78 85       	ldd	r23, Y+8	; 0x08
    10bc:	89 85       	ldd	r24, Y+9	; 0x09
    10be:	9a 85       	ldd	r25, Y+10	; 0x0a
    10c0:	20 e0       	ldi	r18, 0x00	; 0
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	40 e8       	ldi	r20, 0x80	; 128
    10c6:	5f e3       	ldi	r21, 0x3F	; 63
    10c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10cc:	88 23       	and	r24, r24
    10ce:	2c f4       	brge	.+10     	; 0x10da <Password_Func+0x128>
		__ticks = 1;
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	9e 83       	std	Y+6, r25	; 0x06
    10d6:	8d 83       	std	Y+5, r24	; 0x05
    10d8:	3f c0       	rjmp	.+126    	; 0x1158 <Password_Func+0x1a6>
	else if (__tmp > 65535)
    10da:	6f 81       	ldd	r22, Y+7	; 0x07
    10dc:	78 85       	ldd	r23, Y+8	; 0x08
    10de:	89 85       	ldd	r24, Y+9	; 0x09
    10e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    10e2:	20 e0       	ldi	r18, 0x00	; 0
    10e4:	3f ef       	ldi	r19, 0xFF	; 255
    10e6:	4f e7       	ldi	r20, 0x7F	; 127
    10e8:	57 e4       	ldi	r21, 0x47	; 71
    10ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10ee:	18 16       	cp	r1, r24
    10f0:	4c f5       	brge	.+82     	; 0x1144 <Password_Func+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    10f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    10f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    10f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    10fa:	20 e0       	ldi	r18, 0x00	; 0
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	40 e2       	ldi	r20, 0x20	; 32
    1100:	51 e4       	ldi	r21, 0x41	; 65
    1102:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1106:	dc 01       	movw	r26, r24
    1108:	cb 01       	movw	r24, r22
    110a:	bc 01       	movw	r22, r24
    110c:	cd 01       	movw	r24, r26
    110e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1112:	dc 01       	movw	r26, r24
    1114:	cb 01       	movw	r24, r22
    1116:	9e 83       	std	Y+6, r25	; 0x06
    1118:	8d 83       	std	Y+5, r24	; 0x05
    111a:	0f c0       	rjmp	.+30     	; 0x113a <Password_Func+0x188>
    111c:	88 ec       	ldi	r24, 0xC8	; 200
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	9c 83       	std	Y+4, r25	; 0x04
    1122:	8b 83       	std	Y+3, r24	; 0x03
    1124:	8b 81       	ldd	r24, Y+3	; 0x03
    1126:	9c 81       	ldd	r25, Y+4	; 0x04
    1128:	01 97       	sbiw	r24, 0x01	; 1
    112a:	f1 f7       	brne	.-4      	; 0x1128 <Password_Func+0x176>
    112c:	9c 83       	std	Y+4, r25	; 0x04
    112e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1130:	8d 81       	ldd	r24, Y+5	; 0x05
    1132:	9e 81       	ldd	r25, Y+6	; 0x06
    1134:	01 97       	sbiw	r24, 0x01	; 1
    1136:	9e 83       	std	Y+6, r25	; 0x06
    1138:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    113a:	8d 81       	ldd	r24, Y+5	; 0x05
    113c:	9e 81       	ldd	r25, Y+6	; 0x06
    113e:	00 97       	sbiw	r24, 0x00	; 0
    1140:	69 f7       	brne	.-38     	; 0x111c <Password_Func+0x16a>
    1142:	14 c0       	rjmp	.+40     	; 0x116c <Password_Func+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1144:	6f 81       	ldd	r22, Y+7	; 0x07
    1146:	78 85       	ldd	r23, Y+8	; 0x08
    1148:	89 85       	ldd	r24, Y+9	; 0x09
    114a:	9a 85       	ldd	r25, Y+10	; 0x0a
    114c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1150:	dc 01       	movw	r26, r24
    1152:	cb 01       	movw	r24, r22
    1154:	9e 83       	std	Y+6, r25	; 0x06
    1156:	8d 83       	std	Y+5, r24	; 0x05
    1158:	8d 81       	ldd	r24, Y+5	; 0x05
    115a:	9e 81       	ldd	r25, Y+6	; 0x06
    115c:	9a 83       	std	Y+2, r25	; 0x02
    115e:	89 83       	std	Y+1, r24	; 0x01
    1160:	89 81       	ldd	r24, Y+1	; 0x01
    1162:	9a 81       	ldd	r25, Y+2	; 0x02
    1164:	01 97       	sbiw	r24, 0x01	; 1
    1166:	f1 f7       	brne	.-4      	; 0x1164 <Password_Func+0x1b2>
    1168:	9a 83       	std	Y+2, r25	; 0x02
    116a:	89 83       	std	Y+1, r24	; 0x01

		}
		else
		{
			_delay_ms(200);
			LCD_VidClear();
    116c:	0e 94 1f 1b 	call	0x363e	; 0x363e <LCD_VidClear>
			LCD_VidSendString("Wrong Password");
    1170:	89 e9       	ldi	r24, 0x99	; 153
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	0e 94 15 1a 	call	0x342a	; 0x342a <LCD_VidSendString>
    1178:	06 c0       	rjmp	.+12     	; 0x1186 <Password_Func+0x1d4>
	int i = 4;
	static int x=0;
	u8 Pressed =0;
	u8 starts;
	LCD_VidSendString("Enter Password");
	while(i>0)
    117a:	89 89       	ldd	r24, Y+17	; 0x11
    117c:	9a 89       	ldd	r25, Y+18	; 0x12
    117e:	18 16       	cp	r1, r24
    1180:	19 06       	cpc	r1, r25
    1182:	0c f4       	brge	.+2      	; 0x1186 <Password_Func+0x1d4>
    1184:	2c cf       	rjmp	.-424    	; 0xfde <Password_Func+0x2c>
			LCD_VidSendString("Wrong Password");
			break;
		}
	}

	Pass = x;
    1186:	80 91 ea 00 	lds	r24, 0x00EA
    118a:	90 91 eb 00 	lds	r25, 0x00EB
    118e:	9c 8b       	std	Y+20, r25	; 0x14
    1190:	8b 8b       	std	Y+19, r24	; 0x13
	x = 0;
    1192:	10 92 eb 00 	sts	0x00EB, r1
    1196:	10 92 ea 00 	sts	0x00EA, r1

	return Pass;
    119a:	8b 89       	ldd	r24, Y+19	; 0x13
    119c:	9c 89       	ldd	r25, Y+20	; 0x14
}
    119e:	64 96       	adiw	r28, 0x14	; 20
    11a0:	0f b6       	in	r0, 0x3f	; 63
    11a2:	f8 94       	cli
    11a4:	de bf       	out	0x3e, r29	; 62
    11a6:	0f be       	out	0x3f, r0	; 63
    11a8:	cd bf       	out	0x3d, r28	; 61
    11aa:	cf 91       	pop	r28
    11ac:	df 91       	pop	r29
    11ae:	08 95       	ret

000011b0 <DIO_VidSetPinDirection>:
#include"DIO_register.h"
#include"DIO_config.h"
#include"DIO_interface.h"

void DIO_VidSetPinDirection		(u8 copy_u8port, u8 copy_U8pin, u8 copy_U8state)
{
    11b0:	df 93       	push	r29
    11b2:	cf 93       	push	r28
    11b4:	cd b7       	in	r28, 0x3d	; 61
    11b6:	de b7       	in	r29, 0x3e	; 62
    11b8:	27 97       	sbiw	r28, 0x07	; 7
    11ba:	0f b6       	in	r0, 0x3f	; 63
    11bc:	f8 94       	cli
    11be:	de bf       	out	0x3e, r29	; 62
    11c0:	0f be       	out	0x3f, r0	; 63
    11c2:	cd bf       	out	0x3d, r28	; 61
    11c4:	89 83       	std	Y+1, r24	; 0x01
    11c6:	6a 83       	std	Y+2, r22	; 0x02
    11c8:	4b 83       	std	Y+3, r20	; 0x03
	if(OUTPUT==copy_U8state)
    11ca:	8b 81       	ldd	r24, Y+3	; 0x03
    11cc:	81 30       	cpi	r24, 0x01	; 1
    11ce:	09 f0       	breq	.+2      	; 0x11d2 <DIO_VidSetPinDirection+0x22>
    11d0:	6f c0       	rjmp	.+222    	; 0x12b0 <DIO_VidSetPinDirection+0x100>
	{
		switch (copy_u8port)
    11d2:	89 81       	ldd	r24, Y+1	; 0x01
    11d4:	28 2f       	mov	r18, r24
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	3f 83       	std	Y+7, r19	; 0x07
    11da:	2e 83       	std	Y+6, r18	; 0x06
    11dc:	8e 81       	ldd	r24, Y+6	; 0x06
    11de:	9f 81       	ldd	r25, Y+7	; 0x07
    11e0:	81 30       	cpi	r24, 0x01	; 1
    11e2:	91 05       	cpc	r25, r1
    11e4:	49 f1       	breq	.+82     	; 0x1238 <DIO_VidSetPinDirection+0x88>
    11e6:	2e 81       	ldd	r18, Y+6	; 0x06
    11e8:	3f 81       	ldd	r19, Y+7	; 0x07
    11ea:	22 30       	cpi	r18, 0x02	; 2
    11ec:	31 05       	cpc	r19, r1
    11ee:	2c f4       	brge	.+10     	; 0x11fa <DIO_VidSetPinDirection+0x4a>
    11f0:	8e 81       	ldd	r24, Y+6	; 0x06
    11f2:	9f 81       	ldd	r25, Y+7	; 0x07
    11f4:	00 97       	sbiw	r24, 0x00	; 0
    11f6:	61 f0       	breq	.+24     	; 0x1210 <DIO_VidSetPinDirection+0x60>
    11f8:	d2 c0       	rjmp	.+420    	; 0x139e <DIO_VidSetPinDirection+0x1ee>
    11fa:	2e 81       	ldd	r18, Y+6	; 0x06
    11fc:	3f 81       	ldd	r19, Y+7	; 0x07
    11fe:	22 30       	cpi	r18, 0x02	; 2
    1200:	31 05       	cpc	r19, r1
    1202:	71 f1       	breq	.+92     	; 0x1260 <DIO_VidSetPinDirection+0xb0>
    1204:	8e 81       	ldd	r24, Y+6	; 0x06
    1206:	9f 81       	ldd	r25, Y+7	; 0x07
    1208:	83 30       	cpi	r24, 0x03	; 3
    120a:	91 05       	cpc	r25, r1
    120c:	e9 f1       	breq	.+122    	; 0x1288 <DIO_VidSetPinDirection+0xd8>
    120e:	c7 c0       	rjmp	.+398    	; 0x139e <DIO_VidSetPinDirection+0x1ee>
		{
			case PORTA:SET_BIT(DDRA, copy_U8pin); break;
    1210:	aa e3       	ldi	r26, 0x3A	; 58
    1212:	b0 e0       	ldi	r27, 0x00	; 0
    1214:	ea e3       	ldi	r30, 0x3A	; 58
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	48 2f       	mov	r20, r24
    121c:	8a 81       	ldd	r24, Y+2	; 0x02
    121e:	28 2f       	mov	r18, r24
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	02 2e       	mov	r0, r18
    1228:	02 c0       	rjmp	.+4      	; 0x122e <DIO_VidSetPinDirection+0x7e>
    122a:	88 0f       	add	r24, r24
    122c:	99 1f       	adc	r25, r25
    122e:	0a 94       	dec	r0
    1230:	e2 f7       	brpl	.-8      	; 0x122a <DIO_VidSetPinDirection+0x7a>
    1232:	84 2b       	or	r24, r20
    1234:	8c 93       	st	X, r24
    1236:	b3 c0       	rjmp	.+358    	; 0x139e <DIO_VidSetPinDirection+0x1ee>
			case PORTB:SET_BIT(DDRB, copy_U8pin); break;
    1238:	a7 e3       	ldi	r26, 0x37	; 55
    123a:	b0 e0       	ldi	r27, 0x00	; 0
    123c:	e7 e3       	ldi	r30, 0x37	; 55
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	48 2f       	mov	r20, r24
    1244:	8a 81       	ldd	r24, Y+2	; 0x02
    1246:	28 2f       	mov	r18, r24
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	02 2e       	mov	r0, r18
    1250:	02 c0       	rjmp	.+4      	; 0x1256 <DIO_VidSetPinDirection+0xa6>
    1252:	88 0f       	add	r24, r24
    1254:	99 1f       	adc	r25, r25
    1256:	0a 94       	dec	r0
    1258:	e2 f7       	brpl	.-8      	; 0x1252 <DIO_VidSetPinDirection+0xa2>
    125a:	84 2b       	or	r24, r20
    125c:	8c 93       	st	X, r24
    125e:	9f c0       	rjmp	.+318    	; 0x139e <DIO_VidSetPinDirection+0x1ee>
			case PORTC:SET_BIT(DDRC, copy_U8pin); break;
    1260:	a4 e3       	ldi	r26, 0x34	; 52
    1262:	b0 e0       	ldi	r27, 0x00	; 0
    1264:	e4 e3       	ldi	r30, 0x34	; 52
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	80 81       	ld	r24, Z
    126a:	48 2f       	mov	r20, r24
    126c:	8a 81       	ldd	r24, Y+2	; 0x02
    126e:	28 2f       	mov	r18, r24
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	02 2e       	mov	r0, r18
    1278:	02 c0       	rjmp	.+4      	; 0x127e <DIO_VidSetPinDirection+0xce>
    127a:	88 0f       	add	r24, r24
    127c:	99 1f       	adc	r25, r25
    127e:	0a 94       	dec	r0
    1280:	e2 f7       	brpl	.-8      	; 0x127a <DIO_VidSetPinDirection+0xca>
    1282:	84 2b       	or	r24, r20
    1284:	8c 93       	st	X, r24
    1286:	8b c0       	rjmp	.+278    	; 0x139e <DIO_VidSetPinDirection+0x1ee>
			case PORTD:SET_BIT(DDRD, copy_U8pin); break;
    1288:	a1 e3       	ldi	r26, 0x31	; 49
    128a:	b0 e0       	ldi	r27, 0x00	; 0
    128c:	e1 e3       	ldi	r30, 0x31	; 49
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	48 2f       	mov	r20, r24
    1294:	8a 81       	ldd	r24, Y+2	; 0x02
    1296:	28 2f       	mov	r18, r24
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	02 2e       	mov	r0, r18
    12a0:	02 c0       	rjmp	.+4      	; 0x12a6 <DIO_VidSetPinDirection+0xf6>
    12a2:	88 0f       	add	r24, r24
    12a4:	99 1f       	adc	r25, r25
    12a6:	0a 94       	dec	r0
    12a8:	e2 f7       	brpl	.-8      	; 0x12a2 <DIO_VidSetPinDirection+0xf2>
    12aa:	84 2b       	or	r24, r20
    12ac:	8c 93       	st	X, r24
    12ae:	77 c0       	rjmp	.+238    	; 0x139e <DIO_VidSetPinDirection+0x1ee>
	
		}	
	}
	else if(INPUT==copy_U8state)
    12b0:	8b 81       	ldd	r24, Y+3	; 0x03
    12b2:	88 23       	and	r24, r24
    12b4:	09 f0       	breq	.+2      	; 0x12b8 <DIO_VidSetPinDirection+0x108>
    12b6:	73 c0       	rjmp	.+230    	; 0x139e <DIO_VidSetPinDirection+0x1ee>
	{
		switch(copy_u8port)
    12b8:	89 81       	ldd	r24, Y+1	; 0x01
    12ba:	28 2f       	mov	r18, r24
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	3d 83       	std	Y+5, r19	; 0x05
    12c0:	2c 83       	std	Y+4, r18	; 0x04
    12c2:	8c 81       	ldd	r24, Y+4	; 0x04
    12c4:	9d 81       	ldd	r25, Y+5	; 0x05
    12c6:	81 30       	cpi	r24, 0x01	; 1
    12c8:	91 05       	cpc	r25, r1
    12ca:	59 f1       	breq	.+86     	; 0x1322 <DIO_VidSetPinDirection+0x172>
    12cc:	2c 81       	ldd	r18, Y+4	; 0x04
    12ce:	3d 81       	ldd	r19, Y+5	; 0x05
    12d0:	22 30       	cpi	r18, 0x02	; 2
    12d2:	31 05       	cpc	r19, r1
    12d4:	2c f4       	brge	.+10     	; 0x12e0 <DIO_VidSetPinDirection+0x130>
    12d6:	8c 81       	ldd	r24, Y+4	; 0x04
    12d8:	9d 81       	ldd	r25, Y+5	; 0x05
    12da:	00 97       	sbiw	r24, 0x00	; 0
    12dc:	69 f0       	breq	.+26     	; 0x12f8 <DIO_VidSetPinDirection+0x148>
    12de:	5f c0       	rjmp	.+190    	; 0x139e <DIO_VidSetPinDirection+0x1ee>
    12e0:	2c 81       	ldd	r18, Y+4	; 0x04
    12e2:	3d 81       	ldd	r19, Y+5	; 0x05
    12e4:	22 30       	cpi	r18, 0x02	; 2
    12e6:	31 05       	cpc	r19, r1
    12e8:	89 f1       	breq	.+98     	; 0x134c <DIO_VidSetPinDirection+0x19c>
    12ea:	8c 81       	ldd	r24, Y+4	; 0x04
    12ec:	9d 81       	ldd	r25, Y+5	; 0x05
    12ee:	83 30       	cpi	r24, 0x03	; 3
    12f0:	91 05       	cpc	r25, r1
    12f2:	09 f4       	brne	.+2      	; 0x12f6 <DIO_VidSetPinDirection+0x146>
    12f4:	40 c0       	rjmp	.+128    	; 0x1376 <DIO_VidSetPinDirection+0x1c6>
    12f6:	53 c0       	rjmp	.+166    	; 0x139e <DIO_VidSetPinDirection+0x1ee>
		{
			case PORTA:CLR_BIT(DDRA, copy_U8pin); break;
    12f8:	aa e3       	ldi	r26, 0x3A	; 58
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	ea e3       	ldi	r30, 0x3A	; 58
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 81       	ld	r24, Z
    1302:	48 2f       	mov	r20, r24
    1304:	8a 81       	ldd	r24, Y+2	; 0x02
    1306:	28 2f       	mov	r18, r24
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	02 2e       	mov	r0, r18
    1310:	02 c0       	rjmp	.+4      	; 0x1316 <DIO_VidSetPinDirection+0x166>
    1312:	88 0f       	add	r24, r24
    1314:	99 1f       	adc	r25, r25
    1316:	0a 94       	dec	r0
    1318:	e2 f7       	brpl	.-8      	; 0x1312 <DIO_VidSetPinDirection+0x162>
    131a:	80 95       	com	r24
    131c:	84 23       	and	r24, r20
    131e:	8c 93       	st	X, r24
    1320:	3e c0       	rjmp	.+124    	; 0x139e <DIO_VidSetPinDirection+0x1ee>
			case PORTB:CLR_BIT(DDRB, copy_U8pin); break;
    1322:	a7 e3       	ldi	r26, 0x37	; 55
    1324:	b0 e0       	ldi	r27, 0x00	; 0
    1326:	e7 e3       	ldi	r30, 0x37	; 55
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	80 81       	ld	r24, Z
    132c:	48 2f       	mov	r20, r24
    132e:	8a 81       	ldd	r24, Y+2	; 0x02
    1330:	28 2f       	mov	r18, r24
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	02 2e       	mov	r0, r18
    133a:	02 c0       	rjmp	.+4      	; 0x1340 <DIO_VidSetPinDirection+0x190>
    133c:	88 0f       	add	r24, r24
    133e:	99 1f       	adc	r25, r25
    1340:	0a 94       	dec	r0
    1342:	e2 f7       	brpl	.-8      	; 0x133c <DIO_VidSetPinDirection+0x18c>
    1344:	80 95       	com	r24
    1346:	84 23       	and	r24, r20
    1348:	8c 93       	st	X, r24
    134a:	29 c0       	rjmp	.+82     	; 0x139e <DIO_VidSetPinDirection+0x1ee>
		    case PORTC:CLR_BIT(DDRC, copy_U8pin); break;
    134c:	a4 e3       	ldi	r26, 0x34	; 52
    134e:	b0 e0       	ldi	r27, 0x00	; 0
    1350:	e4 e3       	ldi	r30, 0x34	; 52
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	80 81       	ld	r24, Z
    1356:	48 2f       	mov	r20, r24
    1358:	8a 81       	ldd	r24, Y+2	; 0x02
    135a:	28 2f       	mov	r18, r24
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	02 2e       	mov	r0, r18
    1364:	02 c0       	rjmp	.+4      	; 0x136a <DIO_VidSetPinDirection+0x1ba>
    1366:	88 0f       	add	r24, r24
    1368:	99 1f       	adc	r25, r25
    136a:	0a 94       	dec	r0
    136c:	e2 f7       	brpl	.-8      	; 0x1366 <DIO_VidSetPinDirection+0x1b6>
    136e:	80 95       	com	r24
    1370:	84 23       	and	r24, r20
    1372:	8c 93       	st	X, r24
    1374:	14 c0       	rjmp	.+40     	; 0x139e <DIO_VidSetPinDirection+0x1ee>
		    case PORTD:CLR_BIT(DDRD, copy_U8pin); break;
    1376:	a1 e3       	ldi	r26, 0x31	; 49
    1378:	b0 e0       	ldi	r27, 0x00	; 0
    137a:	e1 e3       	ldi	r30, 0x31	; 49
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	80 81       	ld	r24, Z
    1380:	48 2f       	mov	r20, r24
    1382:	8a 81       	ldd	r24, Y+2	; 0x02
    1384:	28 2f       	mov	r18, r24
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	02 2e       	mov	r0, r18
    138e:	02 c0       	rjmp	.+4      	; 0x1394 <DIO_VidSetPinDirection+0x1e4>
    1390:	88 0f       	add	r24, r24
    1392:	99 1f       	adc	r25, r25
    1394:	0a 94       	dec	r0
    1396:	e2 f7       	brpl	.-8      	; 0x1390 <DIO_VidSetPinDirection+0x1e0>
    1398:	80 95       	com	r24
    139a:	84 23       	and	r24, r20
    139c:	8c 93       	st	X, r24
	else
	{
		
	}
	
}
    139e:	27 96       	adiw	r28, 0x07	; 7
    13a0:	0f b6       	in	r0, 0x3f	; 63
    13a2:	f8 94       	cli
    13a4:	de bf       	out	0x3e, r29	; 62
    13a6:	0f be       	out	0x3f, r0	; 63
    13a8:	cd bf       	out	0x3d, r28	; 61
    13aa:	cf 91       	pop	r28
    13ac:	df 91       	pop	r29
    13ae:	08 95       	ret

000013b0 <DIO_VidSetPinValue>:
void DIO_VidSetPinValue			(u8 copy_u8port, u8 copy_U8pin, u8 copy_U8value)
{
    13b0:	df 93       	push	r29
    13b2:	cf 93       	push	r28
    13b4:	cd b7       	in	r28, 0x3d	; 61
    13b6:	de b7       	in	r29, 0x3e	; 62
    13b8:	27 97       	sbiw	r28, 0x07	; 7
    13ba:	0f b6       	in	r0, 0x3f	; 63
    13bc:	f8 94       	cli
    13be:	de bf       	out	0x3e, r29	; 62
    13c0:	0f be       	out	0x3f, r0	; 63
    13c2:	cd bf       	out	0x3d, r28	; 61
    13c4:	89 83       	std	Y+1, r24	; 0x01
    13c6:	6a 83       	std	Y+2, r22	; 0x02
    13c8:	4b 83       	std	Y+3, r20	; 0x03
	if(HIGH==copy_U8value)
    13ca:	8b 81       	ldd	r24, Y+3	; 0x03
    13cc:	81 30       	cpi	r24, 0x01	; 1
    13ce:	09 f0       	breq	.+2      	; 0x13d2 <DIO_VidSetPinValue+0x22>
    13d0:	6f c0       	rjmp	.+222    	; 0x14b0 <DIO_VidSetPinValue+0x100>
	{
		switch (copy_u8port)
    13d2:	89 81       	ldd	r24, Y+1	; 0x01
    13d4:	28 2f       	mov	r18, r24
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	3f 83       	std	Y+7, r19	; 0x07
    13da:	2e 83       	std	Y+6, r18	; 0x06
    13dc:	8e 81       	ldd	r24, Y+6	; 0x06
    13de:	9f 81       	ldd	r25, Y+7	; 0x07
    13e0:	81 30       	cpi	r24, 0x01	; 1
    13e2:	91 05       	cpc	r25, r1
    13e4:	49 f1       	breq	.+82     	; 0x1438 <DIO_VidSetPinValue+0x88>
    13e6:	2e 81       	ldd	r18, Y+6	; 0x06
    13e8:	3f 81       	ldd	r19, Y+7	; 0x07
    13ea:	22 30       	cpi	r18, 0x02	; 2
    13ec:	31 05       	cpc	r19, r1
    13ee:	2c f4       	brge	.+10     	; 0x13fa <DIO_VidSetPinValue+0x4a>
    13f0:	8e 81       	ldd	r24, Y+6	; 0x06
    13f2:	9f 81       	ldd	r25, Y+7	; 0x07
    13f4:	00 97       	sbiw	r24, 0x00	; 0
    13f6:	61 f0       	breq	.+24     	; 0x1410 <DIO_VidSetPinValue+0x60>
    13f8:	d2 c0       	rjmp	.+420    	; 0x159e <DIO_VidSetPinValue+0x1ee>
    13fa:	2e 81       	ldd	r18, Y+6	; 0x06
    13fc:	3f 81       	ldd	r19, Y+7	; 0x07
    13fe:	22 30       	cpi	r18, 0x02	; 2
    1400:	31 05       	cpc	r19, r1
    1402:	71 f1       	breq	.+92     	; 0x1460 <DIO_VidSetPinValue+0xb0>
    1404:	8e 81       	ldd	r24, Y+6	; 0x06
    1406:	9f 81       	ldd	r25, Y+7	; 0x07
    1408:	83 30       	cpi	r24, 0x03	; 3
    140a:	91 05       	cpc	r25, r1
    140c:	e9 f1       	breq	.+122    	; 0x1488 <DIO_VidSetPinValue+0xd8>
    140e:	c7 c0       	rjmp	.+398    	; 0x159e <DIO_VidSetPinValue+0x1ee>
		{
			case PORTA:SET_BIT(PORT_A, copy_U8pin); break;
    1410:	ab e3       	ldi	r26, 0x3B	; 59
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	eb e3       	ldi	r30, 0x3B	; 59
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	48 2f       	mov	r20, r24
    141c:	8a 81       	ldd	r24, Y+2	; 0x02
    141e:	28 2f       	mov	r18, r24
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	02 2e       	mov	r0, r18
    1428:	02 c0       	rjmp	.+4      	; 0x142e <DIO_VidSetPinValue+0x7e>
    142a:	88 0f       	add	r24, r24
    142c:	99 1f       	adc	r25, r25
    142e:	0a 94       	dec	r0
    1430:	e2 f7       	brpl	.-8      	; 0x142a <DIO_VidSetPinValue+0x7a>
    1432:	84 2b       	or	r24, r20
    1434:	8c 93       	st	X, r24
    1436:	b3 c0       	rjmp	.+358    	; 0x159e <DIO_VidSetPinValue+0x1ee>
			case PORTB:SET_BIT(PORT_B, copy_U8pin); break;
    1438:	a8 e3       	ldi	r26, 0x38	; 56
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	e8 e3       	ldi	r30, 0x38	; 56
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	48 2f       	mov	r20, r24
    1444:	8a 81       	ldd	r24, Y+2	; 0x02
    1446:	28 2f       	mov	r18, r24
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	02 2e       	mov	r0, r18
    1450:	02 c0       	rjmp	.+4      	; 0x1456 <DIO_VidSetPinValue+0xa6>
    1452:	88 0f       	add	r24, r24
    1454:	99 1f       	adc	r25, r25
    1456:	0a 94       	dec	r0
    1458:	e2 f7       	brpl	.-8      	; 0x1452 <DIO_VidSetPinValue+0xa2>
    145a:	84 2b       	or	r24, r20
    145c:	8c 93       	st	X, r24
    145e:	9f c0       	rjmp	.+318    	; 0x159e <DIO_VidSetPinValue+0x1ee>
			case PORTC:SET_BIT(PORT_C, copy_U8pin); break;
    1460:	a5 e3       	ldi	r26, 0x35	; 53
    1462:	b0 e0       	ldi	r27, 0x00	; 0
    1464:	e5 e3       	ldi	r30, 0x35	; 53
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	80 81       	ld	r24, Z
    146a:	48 2f       	mov	r20, r24
    146c:	8a 81       	ldd	r24, Y+2	; 0x02
    146e:	28 2f       	mov	r18, r24
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	02 2e       	mov	r0, r18
    1478:	02 c0       	rjmp	.+4      	; 0x147e <DIO_VidSetPinValue+0xce>
    147a:	88 0f       	add	r24, r24
    147c:	99 1f       	adc	r25, r25
    147e:	0a 94       	dec	r0
    1480:	e2 f7       	brpl	.-8      	; 0x147a <DIO_VidSetPinValue+0xca>
    1482:	84 2b       	or	r24, r20
    1484:	8c 93       	st	X, r24
    1486:	8b c0       	rjmp	.+278    	; 0x159e <DIO_VidSetPinValue+0x1ee>
			case PORTD:SET_BIT(PORT_D, copy_U8pin); break;
    1488:	a2 e3       	ldi	r26, 0x32	; 50
    148a:	b0 e0       	ldi	r27, 0x00	; 0
    148c:	e2 e3       	ldi	r30, 0x32	; 50
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	80 81       	ld	r24, Z
    1492:	48 2f       	mov	r20, r24
    1494:	8a 81       	ldd	r24, Y+2	; 0x02
    1496:	28 2f       	mov	r18, r24
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	81 e0       	ldi	r24, 0x01	; 1
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	02 2e       	mov	r0, r18
    14a0:	02 c0       	rjmp	.+4      	; 0x14a6 <DIO_VidSetPinValue+0xf6>
    14a2:	88 0f       	add	r24, r24
    14a4:	99 1f       	adc	r25, r25
    14a6:	0a 94       	dec	r0
    14a8:	e2 f7       	brpl	.-8      	; 0x14a2 <DIO_VidSetPinValue+0xf2>
    14aa:	84 2b       	or	r24, r20
    14ac:	8c 93       	st	X, r24
    14ae:	77 c0       	rjmp	.+238    	; 0x159e <DIO_VidSetPinValue+0x1ee>
	
		}	
	}
	else if(LOW==copy_U8value)
    14b0:	8b 81       	ldd	r24, Y+3	; 0x03
    14b2:	88 23       	and	r24, r24
    14b4:	09 f0       	breq	.+2      	; 0x14b8 <DIO_VidSetPinValue+0x108>
    14b6:	73 c0       	rjmp	.+230    	; 0x159e <DIO_VidSetPinValue+0x1ee>
	{
		switch(copy_u8port)
    14b8:	89 81       	ldd	r24, Y+1	; 0x01
    14ba:	28 2f       	mov	r18, r24
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	3d 83       	std	Y+5, r19	; 0x05
    14c0:	2c 83       	std	Y+4, r18	; 0x04
    14c2:	8c 81       	ldd	r24, Y+4	; 0x04
    14c4:	9d 81       	ldd	r25, Y+5	; 0x05
    14c6:	81 30       	cpi	r24, 0x01	; 1
    14c8:	91 05       	cpc	r25, r1
    14ca:	59 f1       	breq	.+86     	; 0x1522 <DIO_VidSetPinValue+0x172>
    14cc:	2c 81       	ldd	r18, Y+4	; 0x04
    14ce:	3d 81       	ldd	r19, Y+5	; 0x05
    14d0:	22 30       	cpi	r18, 0x02	; 2
    14d2:	31 05       	cpc	r19, r1
    14d4:	2c f4       	brge	.+10     	; 0x14e0 <DIO_VidSetPinValue+0x130>
    14d6:	8c 81       	ldd	r24, Y+4	; 0x04
    14d8:	9d 81       	ldd	r25, Y+5	; 0x05
    14da:	00 97       	sbiw	r24, 0x00	; 0
    14dc:	69 f0       	breq	.+26     	; 0x14f8 <DIO_VidSetPinValue+0x148>
    14de:	5f c0       	rjmp	.+190    	; 0x159e <DIO_VidSetPinValue+0x1ee>
    14e0:	2c 81       	ldd	r18, Y+4	; 0x04
    14e2:	3d 81       	ldd	r19, Y+5	; 0x05
    14e4:	22 30       	cpi	r18, 0x02	; 2
    14e6:	31 05       	cpc	r19, r1
    14e8:	89 f1       	breq	.+98     	; 0x154c <DIO_VidSetPinValue+0x19c>
    14ea:	8c 81       	ldd	r24, Y+4	; 0x04
    14ec:	9d 81       	ldd	r25, Y+5	; 0x05
    14ee:	83 30       	cpi	r24, 0x03	; 3
    14f0:	91 05       	cpc	r25, r1
    14f2:	09 f4       	brne	.+2      	; 0x14f6 <DIO_VidSetPinValue+0x146>
    14f4:	40 c0       	rjmp	.+128    	; 0x1576 <DIO_VidSetPinValue+0x1c6>
    14f6:	53 c0       	rjmp	.+166    	; 0x159e <DIO_VidSetPinValue+0x1ee>
		{
			case PORTA:CLR_BIT(PORT_A, copy_U8pin); break;
    14f8:	ab e3       	ldi	r26, 0x3B	; 59
    14fa:	b0 e0       	ldi	r27, 0x00	; 0
    14fc:	eb e3       	ldi	r30, 0x3B	; 59
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	80 81       	ld	r24, Z
    1502:	48 2f       	mov	r20, r24
    1504:	8a 81       	ldd	r24, Y+2	; 0x02
    1506:	28 2f       	mov	r18, r24
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	02 2e       	mov	r0, r18
    1510:	02 c0       	rjmp	.+4      	; 0x1516 <DIO_VidSetPinValue+0x166>
    1512:	88 0f       	add	r24, r24
    1514:	99 1f       	adc	r25, r25
    1516:	0a 94       	dec	r0
    1518:	e2 f7       	brpl	.-8      	; 0x1512 <DIO_VidSetPinValue+0x162>
    151a:	80 95       	com	r24
    151c:	84 23       	and	r24, r20
    151e:	8c 93       	st	X, r24
    1520:	3e c0       	rjmp	.+124    	; 0x159e <DIO_VidSetPinValue+0x1ee>
			case PORTB:CLR_BIT(PORT_B, copy_U8pin); break;
    1522:	a8 e3       	ldi	r26, 0x38	; 56
    1524:	b0 e0       	ldi	r27, 0x00	; 0
    1526:	e8 e3       	ldi	r30, 0x38	; 56
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	48 2f       	mov	r20, r24
    152e:	8a 81       	ldd	r24, Y+2	; 0x02
    1530:	28 2f       	mov	r18, r24
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	81 e0       	ldi	r24, 0x01	; 1
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	02 2e       	mov	r0, r18
    153a:	02 c0       	rjmp	.+4      	; 0x1540 <DIO_VidSetPinValue+0x190>
    153c:	88 0f       	add	r24, r24
    153e:	99 1f       	adc	r25, r25
    1540:	0a 94       	dec	r0
    1542:	e2 f7       	brpl	.-8      	; 0x153c <DIO_VidSetPinValue+0x18c>
    1544:	80 95       	com	r24
    1546:	84 23       	and	r24, r20
    1548:	8c 93       	st	X, r24
    154a:	29 c0       	rjmp	.+82     	; 0x159e <DIO_VidSetPinValue+0x1ee>
		    case PORTC:CLR_BIT(PORT_C, copy_U8pin); break;
    154c:	a5 e3       	ldi	r26, 0x35	; 53
    154e:	b0 e0       	ldi	r27, 0x00	; 0
    1550:	e5 e3       	ldi	r30, 0x35	; 53
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	80 81       	ld	r24, Z
    1556:	48 2f       	mov	r20, r24
    1558:	8a 81       	ldd	r24, Y+2	; 0x02
    155a:	28 2f       	mov	r18, r24
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	81 e0       	ldi	r24, 0x01	; 1
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	02 2e       	mov	r0, r18
    1564:	02 c0       	rjmp	.+4      	; 0x156a <DIO_VidSetPinValue+0x1ba>
    1566:	88 0f       	add	r24, r24
    1568:	99 1f       	adc	r25, r25
    156a:	0a 94       	dec	r0
    156c:	e2 f7       	brpl	.-8      	; 0x1566 <DIO_VidSetPinValue+0x1b6>
    156e:	80 95       	com	r24
    1570:	84 23       	and	r24, r20
    1572:	8c 93       	st	X, r24
    1574:	14 c0       	rjmp	.+40     	; 0x159e <DIO_VidSetPinValue+0x1ee>
		    case PORTD:CLR_BIT(PORT_D, copy_U8pin); break;
    1576:	a2 e3       	ldi	r26, 0x32	; 50
    1578:	b0 e0       	ldi	r27, 0x00	; 0
    157a:	e2 e3       	ldi	r30, 0x32	; 50
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	80 81       	ld	r24, Z
    1580:	48 2f       	mov	r20, r24
    1582:	8a 81       	ldd	r24, Y+2	; 0x02
    1584:	28 2f       	mov	r18, r24
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	02 2e       	mov	r0, r18
    158e:	02 c0       	rjmp	.+4      	; 0x1594 <DIO_VidSetPinValue+0x1e4>
    1590:	88 0f       	add	r24, r24
    1592:	99 1f       	adc	r25, r25
    1594:	0a 94       	dec	r0
    1596:	e2 f7       	brpl	.-8      	; 0x1590 <DIO_VidSetPinValue+0x1e0>
    1598:	80 95       	com	r24
    159a:	84 23       	and	r24, r20
    159c:	8c 93       	st	X, r24
		
	}	
	
	
	
}
    159e:	27 96       	adiw	r28, 0x07	; 7
    15a0:	0f b6       	in	r0, 0x3f	; 63
    15a2:	f8 94       	cli
    15a4:	de bf       	out	0x3e, r29	; 62
    15a6:	0f be       	out	0x3f, r0	; 63
    15a8:	cd bf       	out	0x3d, r28	; 61
    15aa:	cf 91       	pop	r28
    15ac:	df 91       	pop	r29
    15ae:	08 95       	ret

000015b0 <DIO_VidGetPinValue>:


u8 DIO_VidGetPinValue			(u8 copy_u8port, u8 Copy_U8Pin)
{
    15b0:	df 93       	push	r29
    15b2:	cf 93       	push	r28
    15b4:	00 d0       	rcall	.+0      	; 0x15b6 <DIO_VidGetPinValue+0x6>
    15b6:	00 d0       	rcall	.+0      	; 0x15b8 <DIO_VidGetPinValue+0x8>
    15b8:	0f 92       	push	r0
    15ba:	cd b7       	in	r28, 0x3d	; 61
    15bc:	de b7       	in	r29, 0x3e	; 62
    15be:	8a 83       	std	Y+2, r24	; 0x02
    15c0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Lcal_U8PinResult=0;
    15c2:	19 82       	std	Y+1, r1	; 0x01
	switch(copy_u8port){
    15c4:	8a 81       	ldd	r24, Y+2	; 0x02
    15c6:	28 2f       	mov	r18, r24
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	3d 83       	std	Y+5, r19	; 0x05
    15cc:	2c 83       	std	Y+4, r18	; 0x04
    15ce:	4c 81       	ldd	r20, Y+4	; 0x04
    15d0:	5d 81       	ldd	r21, Y+5	; 0x05
    15d2:	41 30       	cpi	r20, 0x01	; 1
    15d4:	51 05       	cpc	r21, r1
    15d6:	41 f1       	breq	.+80     	; 0x1628 <DIO_VidGetPinValue+0x78>
    15d8:	8c 81       	ldd	r24, Y+4	; 0x04
    15da:	9d 81       	ldd	r25, Y+5	; 0x05
    15dc:	82 30       	cpi	r24, 0x02	; 2
    15de:	91 05       	cpc	r25, r1
    15e0:	34 f4       	brge	.+12     	; 0x15ee <DIO_VidGetPinValue+0x3e>
    15e2:	2c 81       	ldd	r18, Y+4	; 0x04
    15e4:	3d 81       	ldd	r19, Y+5	; 0x05
    15e6:	21 15       	cp	r18, r1
    15e8:	31 05       	cpc	r19, r1
    15ea:	61 f0       	breq	.+24     	; 0x1604 <DIO_VidGetPinValue+0x54>
    15ec:	52 c0       	rjmp	.+164    	; 0x1692 <DIO_VidGetPinValue+0xe2>
    15ee:	4c 81       	ldd	r20, Y+4	; 0x04
    15f0:	5d 81       	ldd	r21, Y+5	; 0x05
    15f2:	42 30       	cpi	r20, 0x02	; 2
    15f4:	51 05       	cpc	r21, r1
    15f6:	51 f1       	breq	.+84     	; 0x164c <DIO_VidGetPinValue+0x9c>
    15f8:	8c 81       	ldd	r24, Y+4	; 0x04
    15fa:	9d 81       	ldd	r25, Y+5	; 0x05
    15fc:	83 30       	cpi	r24, 0x03	; 3
    15fe:	91 05       	cpc	r25, r1
    1600:	b9 f1       	breq	.+110    	; 0x1670 <DIO_VidGetPinValue+0xc0>
    1602:	47 c0       	rjmp	.+142    	; 0x1692 <DIO_VidGetPinValue+0xe2>

			case PORTA :		Lcal_U8PinResult=GET_BIT(PINA,Copy_U8Pin);	        break;
    1604:	e9 e3       	ldi	r30, 0x39	; 57
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	80 81       	ld	r24, Z
    160a:	28 2f       	mov	r18, r24
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	8b 81       	ldd	r24, Y+3	; 0x03
    1610:	88 2f       	mov	r24, r24
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	a9 01       	movw	r20, r18
    1616:	02 c0       	rjmp	.+4      	; 0x161c <DIO_VidGetPinValue+0x6c>
    1618:	55 95       	asr	r21
    161a:	47 95       	ror	r20
    161c:	8a 95       	dec	r24
    161e:	e2 f7       	brpl	.-8      	; 0x1618 <DIO_VidGetPinValue+0x68>
    1620:	ca 01       	movw	r24, r20
    1622:	81 70       	andi	r24, 0x01	; 1
    1624:	89 83       	std	Y+1, r24	; 0x01
    1626:	35 c0       	rjmp	.+106    	; 0x1692 <DIO_VidGetPinValue+0xe2>
			case PORTB :		Lcal_U8PinResult=GET_BIT(PINB,Copy_U8Pin); 		    break;
    1628:	e6 e3       	ldi	r30, 0x36	; 54
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	80 81       	ld	r24, Z
    162e:	28 2f       	mov	r18, r24
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	8b 81       	ldd	r24, Y+3	; 0x03
    1634:	88 2f       	mov	r24, r24
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	a9 01       	movw	r20, r18
    163a:	02 c0       	rjmp	.+4      	; 0x1640 <DIO_VidGetPinValue+0x90>
    163c:	55 95       	asr	r21
    163e:	47 95       	ror	r20
    1640:	8a 95       	dec	r24
    1642:	e2 f7       	brpl	.-8      	; 0x163c <DIO_VidGetPinValue+0x8c>
    1644:	ca 01       	movw	r24, r20
    1646:	81 70       	andi	r24, 0x01	; 1
    1648:	89 83       	std	Y+1, r24	; 0x01
    164a:	23 c0       	rjmp	.+70     	; 0x1692 <DIO_VidGetPinValue+0xe2>
			case PORTC :		Lcal_U8PinResult=GET_BIT(PINC,Copy_U8Pin);			break;
    164c:	e3 e3       	ldi	r30, 0x33	; 51
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	80 81       	ld	r24, Z
    1652:	28 2f       	mov	r18, r24
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	8b 81       	ldd	r24, Y+3	; 0x03
    1658:	88 2f       	mov	r24, r24
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	a9 01       	movw	r20, r18
    165e:	02 c0       	rjmp	.+4      	; 0x1664 <DIO_VidGetPinValue+0xb4>
    1660:	55 95       	asr	r21
    1662:	47 95       	ror	r20
    1664:	8a 95       	dec	r24
    1666:	e2 f7       	brpl	.-8      	; 0x1660 <DIO_VidGetPinValue+0xb0>
    1668:	ca 01       	movw	r24, r20
    166a:	81 70       	andi	r24, 0x01	; 1
    166c:	89 83       	std	Y+1, r24	; 0x01
    166e:	11 c0       	rjmp	.+34     	; 0x1692 <DIO_VidGetPinValue+0xe2>
			case PORTD :		Lcal_U8PinResult=GET_BIT(PIND,Copy_U8Pin);			break;
    1670:	e0 e3       	ldi	r30, 0x30	; 48
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	80 81       	ld	r24, Z
    1676:	28 2f       	mov	r18, r24
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	8b 81       	ldd	r24, Y+3	; 0x03
    167c:	88 2f       	mov	r24, r24
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	a9 01       	movw	r20, r18
    1682:	02 c0       	rjmp	.+4      	; 0x1688 <DIO_VidGetPinValue+0xd8>
    1684:	55 95       	asr	r21
    1686:	47 95       	ror	r20
    1688:	8a 95       	dec	r24
    168a:	e2 f7       	brpl	.-8      	; 0x1684 <DIO_VidGetPinValue+0xd4>
    168c:	ca 01       	movw	r24, r20
    168e:	81 70       	andi	r24, 0x01	; 1
    1690:	89 83       	std	Y+1, r24	; 0x01

			}


return(Lcal_U8PinResult);
    1692:	89 81       	ldd	r24, Y+1	; 0x01
	
	
}
    1694:	0f 90       	pop	r0
    1696:	0f 90       	pop	r0
    1698:	0f 90       	pop	r0
    169a:	0f 90       	pop	r0
    169c:	0f 90       	pop	r0
    169e:	cf 91       	pop	r28
    16a0:	df 91       	pop	r29
    16a2:	08 95       	ret

000016a4 <DIO_VidSetPortDirection>:

void DIO_VidSetPortDirection	(u8 copy_u8port, u8 copy_U8state)
{
    16a4:	df 93       	push	r29
    16a6:	cf 93       	push	r28
    16a8:	00 d0       	rcall	.+0      	; 0x16aa <DIO_VidSetPortDirection+0x6>
    16aa:	00 d0       	rcall	.+0      	; 0x16ac <DIO_VidSetPortDirection+0x8>
    16ac:	00 d0       	rcall	.+0      	; 0x16ae <DIO_VidSetPortDirection+0xa>
    16ae:	cd b7       	in	r28, 0x3d	; 61
    16b0:	de b7       	in	r29, 0x3e	; 62
    16b2:	89 83       	std	Y+1, r24	; 0x01
    16b4:	6a 83       	std	Y+2, r22	; 0x02
	
	if(OUTPUT==copy_U8state)
    16b6:	8a 81       	ldd	r24, Y+2	; 0x02
    16b8:	81 30       	cpi	r24, 0x01	; 1
    16ba:	99 f5       	brne	.+102    	; 0x1722 <DIO_VidSetPortDirection+0x7e>
	{
		switch (copy_u8port)
    16bc:	89 81       	ldd	r24, Y+1	; 0x01
    16be:	28 2f       	mov	r18, r24
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	3e 83       	std	Y+6, r19	; 0x06
    16c4:	2d 83       	std	Y+5, r18	; 0x05
    16c6:	8d 81       	ldd	r24, Y+5	; 0x05
    16c8:	9e 81       	ldd	r25, Y+6	; 0x06
    16ca:	81 30       	cpi	r24, 0x01	; 1
    16cc:	91 05       	cpc	r25, r1
    16ce:	d1 f0       	breq	.+52     	; 0x1704 <DIO_VidSetPortDirection+0x60>
    16d0:	2d 81       	ldd	r18, Y+5	; 0x05
    16d2:	3e 81       	ldd	r19, Y+6	; 0x06
    16d4:	22 30       	cpi	r18, 0x02	; 2
    16d6:	31 05       	cpc	r19, r1
    16d8:	2c f4       	brge	.+10     	; 0x16e4 <DIO_VidSetPortDirection+0x40>
    16da:	8d 81       	ldd	r24, Y+5	; 0x05
    16dc:	9e 81       	ldd	r25, Y+6	; 0x06
    16de:	00 97       	sbiw	r24, 0x00	; 0
    16e0:	61 f0       	breq	.+24     	; 0x16fa <DIO_VidSetPortDirection+0x56>
    16e2:	50 c0       	rjmp	.+160    	; 0x1784 <DIO_VidSetPortDirection+0xe0>
    16e4:	2d 81       	ldd	r18, Y+5	; 0x05
    16e6:	3e 81       	ldd	r19, Y+6	; 0x06
    16e8:	22 30       	cpi	r18, 0x02	; 2
    16ea:	31 05       	cpc	r19, r1
    16ec:	81 f0       	breq	.+32     	; 0x170e <DIO_VidSetPortDirection+0x6a>
    16ee:	8d 81       	ldd	r24, Y+5	; 0x05
    16f0:	9e 81       	ldd	r25, Y+6	; 0x06
    16f2:	83 30       	cpi	r24, 0x03	; 3
    16f4:	91 05       	cpc	r25, r1
    16f6:	81 f0       	breq	.+32     	; 0x1718 <DIO_VidSetPortDirection+0x74>
    16f8:	45 c0       	rjmp	.+138    	; 0x1784 <DIO_VidSetPortDirection+0xe0>
		{
			case PORTA:DDRA= ALL_OUTPUT		; break;
    16fa:	ea e3       	ldi	r30, 0x3A	; 58
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	8f ef       	ldi	r24, 0xFF	; 255
    1700:	80 83       	st	Z, r24
    1702:	40 c0       	rjmp	.+128    	; 0x1784 <DIO_VidSetPortDirection+0xe0>
			case PORTB:DDRB= ALL_OUTPUT		; break;
    1704:	e7 e3       	ldi	r30, 0x37	; 55
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	8f ef       	ldi	r24, 0xFF	; 255
    170a:	80 83       	st	Z, r24
    170c:	3b c0       	rjmp	.+118    	; 0x1784 <DIO_VidSetPortDirection+0xe0>
			case PORTC:DDRC= ALL_OUTPUT		; break;
    170e:	e4 e3       	ldi	r30, 0x34	; 52
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	8f ef       	ldi	r24, 0xFF	; 255
    1714:	80 83       	st	Z, r24
    1716:	36 c0       	rjmp	.+108    	; 0x1784 <DIO_VidSetPortDirection+0xe0>
			case PORTD:DDRD= ALL_OUTPUT		; break;
    1718:	e1 e3       	ldi	r30, 0x31	; 49
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	8f ef       	ldi	r24, 0xFF	; 255
    171e:	80 83       	st	Z, r24
    1720:	31 c0       	rjmp	.+98     	; 0x1784 <DIO_VidSetPortDirection+0xe0>
		}
	}
	else if(INPUT==copy_U8state)
    1722:	8a 81       	ldd	r24, Y+2	; 0x02
    1724:	88 23       	and	r24, r24
    1726:	71 f5       	brne	.+92     	; 0x1784 <DIO_VidSetPortDirection+0xe0>
	{
		switch(copy_u8port)
    1728:	89 81       	ldd	r24, Y+1	; 0x01
    172a:	28 2f       	mov	r18, r24
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	3c 83       	std	Y+4, r19	; 0x04
    1730:	2b 83       	std	Y+3, r18	; 0x03
    1732:	8b 81       	ldd	r24, Y+3	; 0x03
    1734:	9c 81       	ldd	r25, Y+4	; 0x04
    1736:	81 30       	cpi	r24, 0x01	; 1
    1738:	91 05       	cpc	r25, r1
    173a:	c9 f0       	breq	.+50     	; 0x176e <DIO_VidSetPortDirection+0xca>
    173c:	2b 81       	ldd	r18, Y+3	; 0x03
    173e:	3c 81       	ldd	r19, Y+4	; 0x04
    1740:	22 30       	cpi	r18, 0x02	; 2
    1742:	31 05       	cpc	r19, r1
    1744:	2c f4       	brge	.+10     	; 0x1750 <DIO_VidSetPortDirection+0xac>
    1746:	8b 81       	ldd	r24, Y+3	; 0x03
    1748:	9c 81       	ldd	r25, Y+4	; 0x04
    174a:	00 97       	sbiw	r24, 0x00	; 0
    174c:	61 f0       	breq	.+24     	; 0x1766 <DIO_VidSetPortDirection+0xc2>
    174e:	1a c0       	rjmp	.+52     	; 0x1784 <DIO_VidSetPortDirection+0xe0>
    1750:	2b 81       	ldd	r18, Y+3	; 0x03
    1752:	3c 81       	ldd	r19, Y+4	; 0x04
    1754:	22 30       	cpi	r18, 0x02	; 2
    1756:	31 05       	cpc	r19, r1
    1758:	71 f0       	breq	.+28     	; 0x1776 <DIO_VidSetPortDirection+0xd2>
    175a:	8b 81       	ldd	r24, Y+3	; 0x03
    175c:	9c 81       	ldd	r25, Y+4	; 0x04
    175e:	83 30       	cpi	r24, 0x03	; 3
    1760:	91 05       	cpc	r25, r1
    1762:	69 f0       	breq	.+26     	; 0x177e <DIO_VidSetPortDirection+0xda>
    1764:	0f c0       	rjmp	.+30     	; 0x1784 <DIO_VidSetPortDirection+0xe0>
		{
			case PORTA:DDRA= ALL_INPUT		; break;
    1766:	ea e3       	ldi	r30, 0x3A	; 58
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	10 82       	st	Z, r1
    176c:	0b c0       	rjmp	.+22     	; 0x1784 <DIO_VidSetPortDirection+0xe0>
			case PORTB:DDRB= ALL_INPUT		; break;
    176e:	e7 e3       	ldi	r30, 0x37	; 55
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	10 82       	st	Z, r1
    1774:	07 c0       	rjmp	.+14     	; 0x1784 <DIO_VidSetPortDirection+0xe0>
			case PORTC:DDRC= ALL_INPUT		; break;
    1776:	e4 e3       	ldi	r30, 0x34	; 52
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	10 82       	st	Z, r1
    177c:	03 c0       	rjmp	.+6      	; 0x1784 <DIO_VidSetPortDirection+0xe0>
			case PORTD:DDRD= ALL_INPUT		; break;
    177e:	e1 e3       	ldi	r30, 0x31	; 49
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	10 82       	st	Z, r1
	{

	}

	
}
    1784:	26 96       	adiw	r28, 0x06	; 6
    1786:	0f b6       	in	r0, 0x3f	; 63
    1788:	f8 94       	cli
    178a:	de bf       	out	0x3e, r29	; 62
    178c:	0f be       	out	0x3f, r0	; 63
    178e:	cd bf       	out	0x3d, r28	; 61
    1790:	cf 91       	pop	r28
    1792:	df 91       	pop	r29
    1794:	08 95       	ret

00001796 <DIO_VidSetPortValue>:
void DIO_VidSetPortValue		(u8 copy_u8port, u8 copy_U8value)
{
    1796:	df 93       	push	r29
    1798:	cf 93       	push	r28
    179a:	00 d0       	rcall	.+0      	; 0x179c <DIO_VidSetPortValue+0x6>
    179c:	00 d0       	rcall	.+0      	; 0x179e <DIO_VidSetPortValue+0x8>
    179e:	cd b7       	in	r28, 0x3d	; 61
    17a0:	de b7       	in	r29, 0x3e	; 62
    17a2:	89 83       	std	Y+1, r24	; 0x01
    17a4:	6a 83       	std	Y+2, r22	; 0x02
		
		switch (copy_u8port)
    17a6:	89 81       	ldd	r24, Y+1	; 0x01
    17a8:	28 2f       	mov	r18, r24
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	3c 83       	std	Y+4, r19	; 0x04
    17ae:	2b 83       	std	Y+3, r18	; 0x03
    17b0:	8b 81       	ldd	r24, Y+3	; 0x03
    17b2:	9c 81       	ldd	r25, Y+4	; 0x04
    17b4:	81 30       	cpi	r24, 0x01	; 1
    17b6:	91 05       	cpc	r25, r1
    17b8:	d1 f0       	breq	.+52     	; 0x17ee <DIO_VidSetPortValue+0x58>
    17ba:	2b 81       	ldd	r18, Y+3	; 0x03
    17bc:	3c 81       	ldd	r19, Y+4	; 0x04
    17be:	22 30       	cpi	r18, 0x02	; 2
    17c0:	31 05       	cpc	r19, r1
    17c2:	2c f4       	brge	.+10     	; 0x17ce <DIO_VidSetPortValue+0x38>
    17c4:	8b 81       	ldd	r24, Y+3	; 0x03
    17c6:	9c 81       	ldd	r25, Y+4	; 0x04
    17c8:	00 97       	sbiw	r24, 0x00	; 0
    17ca:	61 f0       	breq	.+24     	; 0x17e4 <DIO_VidSetPortValue+0x4e>
    17cc:	1e c0       	rjmp	.+60     	; 0x180a <DIO_VidSetPortValue+0x74>
    17ce:	2b 81       	ldd	r18, Y+3	; 0x03
    17d0:	3c 81       	ldd	r19, Y+4	; 0x04
    17d2:	22 30       	cpi	r18, 0x02	; 2
    17d4:	31 05       	cpc	r19, r1
    17d6:	81 f0       	breq	.+32     	; 0x17f8 <DIO_VidSetPortValue+0x62>
    17d8:	8b 81       	ldd	r24, Y+3	; 0x03
    17da:	9c 81       	ldd	r25, Y+4	; 0x04
    17dc:	83 30       	cpi	r24, 0x03	; 3
    17de:	91 05       	cpc	r25, r1
    17e0:	81 f0       	breq	.+32     	; 0x1802 <DIO_VidSetPortValue+0x6c>
    17e2:	13 c0       	rjmp	.+38     	; 0x180a <DIO_VidSetPortValue+0x74>
		{
			case PORTA:PORT_A=copy_U8value		; break;
    17e4:	eb e3       	ldi	r30, 0x3B	; 59
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ea:	80 83       	st	Z, r24
    17ec:	0e c0       	rjmp	.+28     	; 0x180a <DIO_VidSetPortValue+0x74>
			case PORTB:PORT_B=copy_U8value		; break;
    17ee:	e8 e3       	ldi	r30, 0x38	; 56
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	8a 81       	ldd	r24, Y+2	; 0x02
    17f4:	80 83       	st	Z, r24
    17f6:	09 c0       	rjmp	.+18     	; 0x180a <DIO_VidSetPortValue+0x74>
			case PORTC:PORT_C=copy_U8value		; break;
    17f8:	e5 e3       	ldi	r30, 0x35	; 53
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	8a 81       	ldd	r24, Y+2	; 0x02
    17fe:	80 83       	st	Z, r24
    1800:	04 c0       	rjmp	.+8      	; 0x180a <DIO_VidSetPortValue+0x74>
			case PORTD:PORT_D=copy_U8value		; break;
    1802:	e2 e3       	ldi	r30, 0x32	; 50
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	8a 81       	ldd	r24, Y+2	; 0x02
    1808:	80 83       	st	Z, r24
		}	
	
	
	
	
}
    180a:	0f 90       	pop	r0
    180c:	0f 90       	pop	r0
    180e:	0f 90       	pop	r0
    1810:	0f 90       	pop	r0
    1812:	cf 91       	pop	r28
    1814:	df 91       	pop	r29
    1816:	08 95       	ret

00001818 <DIO_VidTogglePin>:

void DIO_VidTogglePin			(u8 copy_u8port, u8 copy_U8pin)
{
    1818:	df 93       	push	r29
    181a:	cf 93       	push	r28
    181c:	00 d0       	rcall	.+0      	; 0x181e <DIO_VidTogglePin+0x6>
    181e:	00 d0       	rcall	.+0      	; 0x1820 <DIO_VidTogglePin+0x8>
    1820:	cd b7       	in	r28, 0x3d	; 61
    1822:	de b7       	in	r29, 0x3e	; 62
    1824:	89 83       	std	Y+1, r24	; 0x01
    1826:	6a 83       	std	Y+2, r22	; 0x02

		switch (copy_u8port)
    1828:	89 81       	ldd	r24, Y+1	; 0x01
    182a:	28 2f       	mov	r18, r24
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	3c 83       	std	Y+4, r19	; 0x04
    1830:	2b 83       	std	Y+3, r18	; 0x03
    1832:	8b 81       	ldd	r24, Y+3	; 0x03
    1834:	9c 81       	ldd	r25, Y+4	; 0x04
    1836:	81 30       	cpi	r24, 0x01	; 1
    1838:	91 05       	cpc	r25, r1
    183a:	49 f1       	breq	.+82     	; 0x188e <DIO_VidTogglePin+0x76>
    183c:	2b 81       	ldd	r18, Y+3	; 0x03
    183e:	3c 81       	ldd	r19, Y+4	; 0x04
    1840:	22 30       	cpi	r18, 0x02	; 2
    1842:	31 05       	cpc	r19, r1
    1844:	2c f4       	brge	.+10     	; 0x1850 <DIO_VidTogglePin+0x38>
    1846:	8b 81       	ldd	r24, Y+3	; 0x03
    1848:	9c 81       	ldd	r25, Y+4	; 0x04
    184a:	00 97       	sbiw	r24, 0x00	; 0
    184c:	61 f0       	breq	.+24     	; 0x1866 <DIO_VidTogglePin+0x4e>
    184e:	5a c0       	rjmp	.+180    	; 0x1904 <DIO_VidTogglePin+0xec>
    1850:	2b 81       	ldd	r18, Y+3	; 0x03
    1852:	3c 81       	ldd	r19, Y+4	; 0x04
    1854:	22 30       	cpi	r18, 0x02	; 2
    1856:	31 05       	cpc	r19, r1
    1858:	71 f1       	breq	.+92     	; 0x18b6 <DIO_VidTogglePin+0x9e>
    185a:	8b 81       	ldd	r24, Y+3	; 0x03
    185c:	9c 81       	ldd	r25, Y+4	; 0x04
    185e:	83 30       	cpi	r24, 0x03	; 3
    1860:	91 05       	cpc	r25, r1
    1862:	e9 f1       	breq	.+122    	; 0x18de <DIO_VidTogglePin+0xc6>
    1864:	4f c0       	rjmp	.+158    	; 0x1904 <DIO_VidTogglePin+0xec>
		{
					case PORTA:TOG_BIT(PORT_A, copy_U8pin); break;
    1866:	ab e3       	ldi	r26, 0x3B	; 59
    1868:	b0 e0       	ldi	r27, 0x00	; 0
    186a:	eb e3       	ldi	r30, 0x3B	; 59
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	80 81       	ld	r24, Z
    1870:	48 2f       	mov	r20, r24
    1872:	8a 81       	ldd	r24, Y+2	; 0x02
    1874:	28 2f       	mov	r18, r24
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	02 2e       	mov	r0, r18
    187e:	02 c0       	rjmp	.+4      	; 0x1884 <DIO_VidTogglePin+0x6c>
    1880:	88 0f       	add	r24, r24
    1882:	99 1f       	adc	r25, r25
    1884:	0a 94       	dec	r0
    1886:	e2 f7       	brpl	.-8      	; 0x1880 <DIO_VidTogglePin+0x68>
    1888:	84 27       	eor	r24, r20
    188a:	8c 93       	st	X, r24
    188c:	3b c0       	rjmp	.+118    	; 0x1904 <DIO_VidTogglePin+0xec>
					case PORTB:TOG_BIT(PORT_B, copy_U8pin); break;
    188e:	a8 e3       	ldi	r26, 0x38	; 56
    1890:	b0 e0       	ldi	r27, 0x00	; 0
    1892:	e8 e3       	ldi	r30, 0x38	; 56
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	80 81       	ld	r24, Z
    1898:	48 2f       	mov	r20, r24
    189a:	8a 81       	ldd	r24, Y+2	; 0x02
    189c:	28 2f       	mov	r18, r24
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	81 e0       	ldi	r24, 0x01	; 1
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	02 2e       	mov	r0, r18
    18a6:	02 c0       	rjmp	.+4      	; 0x18ac <DIO_VidTogglePin+0x94>
    18a8:	88 0f       	add	r24, r24
    18aa:	99 1f       	adc	r25, r25
    18ac:	0a 94       	dec	r0
    18ae:	e2 f7       	brpl	.-8      	; 0x18a8 <DIO_VidTogglePin+0x90>
    18b0:	84 27       	eor	r24, r20
    18b2:	8c 93       	st	X, r24
    18b4:	27 c0       	rjmp	.+78     	; 0x1904 <DIO_VidTogglePin+0xec>
					case PORTC:TOG_BIT(PORT_C, copy_U8pin); break;
    18b6:	a5 e3       	ldi	r26, 0x35	; 53
    18b8:	b0 e0       	ldi	r27, 0x00	; 0
    18ba:	e5 e3       	ldi	r30, 0x35	; 53
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	80 81       	ld	r24, Z
    18c0:	48 2f       	mov	r20, r24
    18c2:	8a 81       	ldd	r24, Y+2	; 0x02
    18c4:	28 2f       	mov	r18, r24
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	81 e0       	ldi	r24, 0x01	; 1
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	02 2e       	mov	r0, r18
    18ce:	02 c0       	rjmp	.+4      	; 0x18d4 <DIO_VidTogglePin+0xbc>
    18d0:	88 0f       	add	r24, r24
    18d2:	99 1f       	adc	r25, r25
    18d4:	0a 94       	dec	r0
    18d6:	e2 f7       	brpl	.-8      	; 0x18d0 <DIO_VidTogglePin+0xb8>
    18d8:	84 27       	eor	r24, r20
    18da:	8c 93       	st	X, r24
    18dc:	13 c0       	rjmp	.+38     	; 0x1904 <DIO_VidTogglePin+0xec>
					case PORTD:TOG_BIT(PORT_D, copy_U8pin); break;
    18de:	a2 e3       	ldi	r26, 0x32	; 50
    18e0:	b0 e0       	ldi	r27, 0x00	; 0
    18e2:	e2 e3       	ldi	r30, 0x32	; 50
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	80 81       	ld	r24, Z
    18e8:	48 2f       	mov	r20, r24
    18ea:	8a 81       	ldd	r24, Y+2	; 0x02
    18ec:	28 2f       	mov	r18, r24
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	81 e0       	ldi	r24, 0x01	; 1
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	02 2e       	mov	r0, r18
    18f6:	02 c0       	rjmp	.+4      	; 0x18fc <DIO_VidTogglePin+0xe4>
    18f8:	88 0f       	add	r24, r24
    18fa:	99 1f       	adc	r25, r25
    18fc:	0a 94       	dec	r0
    18fe:	e2 f7       	brpl	.-8      	; 0x18f8 <DIO_VidTogglePin+0xe0>
    1900:	84 27       	eor	r24, r20
    1902:	8c 93       	st	X, r24
		}

}
    1904:	0f 90       	pop	r0
    1906:	0f 90       	pop	r0
    1908:	0f 90       	pop	r0
    190a:	0f 90       	pop	r0
    190c:	cf 91       	pop	r28
    190e:	df 91       	pop	r29
    1910:	08 95       	ret

00001912 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 copy_u8port)
{
    1912:	df 93       	push	r29
    1914:	cf 93       	push	r28
    1916:	00 d0       	rcall	.+0      	; 0x1918 <DIO_u8GetPortValue+0x6>
    1918:	00 d0       	rcall	.+0      	; 0x191a <DIO_u8GetPortValue+0x8>
    191a:	cd b7       	in	r28, 0x3d	; 61
    191c:	de b7       	in	r29, 0x3e	; 62
    191e:	8a 83       	std	Y+2, r24	; 0x02
		u8 Lcal_U8PortResult=0;
    1920:	19 82       	std	Y+1, r1	; 0x01
	switch(copy_u8port){
    1922:	8a 81       	ldd	r24, Y+2	; 0x02
    1924:	28 2f       	mov	r18, r24
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	3c 83       	std	Y+4, r19	; 0x04
    192a:	2b 83       	std	Y+3, r18	; 0x03
    192c:	8b 81       	ldd	r24, Y+3	; 0x03
    192e:	9c 81       	ldd	r25, Y+4	; 0x04
    1930:	81 30       	cpi	r24, 0x01	; 1
    1932:	91 05       	cpc	r25, r1
    1934:	d1 f0       	breq	.+52     	; 0x196a <DIO_u8GetPortValue+0x58>
    1936:	2b 81       	ldd	r18, Y+3	; 0x03
    1938:	3c 81       	ldd	r19, Y+4	; 0x04
    193a:	22 30       	cpi	r18, 0x02	; 2
    193c:	31 05       	cpc	r19, r1
    193e:	2c f4       	brge	.+10     	; 0x194a <DIO_u8GetPortValue+0x38>
    1940:	8b 81       	ldd	r24, Y+3	; 0x03
    1942:	9c 81       	ldd	r25, Y+4	; 0x04
    1944:	00 97       	sbiw	r24, 0x00	; 0
    1946:	61 f0       	breq	.+24     	; 0x1960 <DIO_u8GetPortValue+0x4e>
    1948:	1e c0       	rjmp	.+60     	; 0x1986 <DIO_u8GetPortValue+0x74>
    194a:	2b 81       	ldd	r18, Y+3	; 0x03
    194c:	3c 81       	ldd	r19, Y+4	; 0x04
    194e:	22 30       	cpi	r18, 0x02	; 2
    1950:	31 05       	cpc	r19, r1
    1952:	81 f0       	breq	.+32     	; 0x1974 <DIO_u8GetPortValue+0x62>
    1954:	8b 81       	ldd	r24, Y+3	; 0x03
    1956:	9c 81       	ldd	r25, Y+4	; 0x04
    1958:	83 30       	cpi	r24, 0x03	; 3
    195a:	91 05       	cpc	r25, r1
    195c:	81 f0       	breq	.+32     	; 0x197e <DIO_u8GetPortValue+0x6c>
    195e:	13 c0       	rjmp	.+38     	; 0x1986 <DIO_u8GetPortValue+0x74>

			case PORTA :	Lcal_U8PortResult=PINA;	        break;
    1960:	e9 e3       	ldi	r30, 0x39	; 57
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	80 81       	ld	r24, Z
    1966:	89 83       	std	Y+1, r24	; 0x01
    1968:	0e c0       	rjmp	.+28     	; 0x1986 <DIO_u8GetPortValue+0x74>
			case PORTB :	Lcal_U8PortResult=PINB; 		    break;
    196a:	e6 e3       	ldi	r30, 0x36	; 54
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	80 81       	ld	r24, Z
    1970:	89 83       	std	Y+1, r24	; 0x01
    1972:	09 c0       	rjmp	.+18     	; 0x1986 <DIO_u8GetPortValue+0x74>
			case PORTC :	Lcal_U8PortResult=PINC;			break;
    1974:	e3 e3       	ldi	r30, 0x33	; 51
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	80 81       	ld	r24, Z
    197a:	89 83       	std	Y+1, r24	; 0x01
    197c:	04 c0       	rjmp	.+8      	; 0x1986 <DIO_u8GetPortValue+0x74>
			case PORTD :	Lcal_U8PortResult=PIND;			break;
    197e:	e0 e3       	ldi	r30, 0x30	; 48
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	80 81       	ld	r24, Z
    1984:	89 83       	std	Y+1, r24	; 0x01

			}


return(Lcal_U8PortResult);
    1986:	89 81       	ldd	r24, Y+1	; 0x01
	
	
}
    1988:	0f 90       	pop	r0
    198a:	0f 90       	pop	r0
    198c:	0f 90       	pop	r0
    198e:	0f 90       	pop	r0
    1990:	cf 91       	pop	r28
    1992:	df 91       	pop	r29
    1994:	08 95       	ret

00001996 <Keypad_VoidInit>:
								{'4','5','6','*'},
								{'1','2','3','-'},
								{'Q','0','=','+'}};

void Keypad_VoidInit(void)
{
    1996:	df 93       	push	r29
    1998:	cf 93       	push	r28
    199a:	cd b7       	in	r28, 0x3d	; 61
    199c:	de b7       	in	r29, 0x3e	; 62
	
	DIO_VidSetPinDirection(COLS_ROWSPORT,COLS0,OUTPUT);
    199e:	81 e0       	ldi	r24, 0x01	; 1
    19a0:	60 e0       	ldi	r22, 0x00	; 0
    19a2:	41 e0       	ldi	r20, 0x01	; 1
    19a4:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(COLS_ROWSPORT,COLS1,OUTPUT);
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	61 e0       	ldi	r22, 0x01	; 1
    19ac:	41 e0       	ldi	r20, 0x01	; 1
    19ae:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(COLS_ROWSPORT,COLS2,OUTPUT);
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	62 e0       	ldi	r22, 0x02	; 2
    19b6:	41 e0       	ldi	r20, 0x01	; 1
    19b8:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(COLS_ROWSPORT,COLS3,OUTPUT);
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	63 e0       	ldi	r22, 0x03	; 3
    19c0:	41 e0       	ldi	r20, 0x01	; 1
    19c2:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <DIO_VidSetPinDirection>

	DIO_VidSetPinDirection(COLS_ROWSPORT,ROW0,INPUT);
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	64 e0       	ldi	r22, 0x04	; 4
    19ca:	40 e0       	ldi	r20, 0x00	; 0
    19cc:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(COLS_ROWSPORT,ROW1,INPUT);
    19d0:	81 e0       	ldi	r24, 0x01	; 1
    19d2:	65 e0       	ldi	r22, 0x05	; 5
    19d4:	40 e0       	ldi	r20, 0x00	; 0
    19d6:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(COLS_ROWSPORT,ROW2,INPUT);
    19da:	81 e0       	ldi	r24, 0x01	; 1
    19dc:	66 e0       	ldi	r22, 0x06	; 6
    19de:	40 e0       	ldi	r20, 0x00	; 0
    19e0:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(COLS_ROWSPORT,ROW3,INPUT);
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	67 e0       	ldi	r22, 0x07	; 7
    19e8:	40 e0       	ldi	r20, 0x00	; 0
    19ea:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <DIO_VidSetPinDirection>
	DIO_VidSetPinValue(COLS_ROWSPORT,ROW0 ,HIGH);
    19ee:	81 e0       	ldi	r24, 0x01	; 1
    19f0:	64 e0       	ldi	r22, 0x04	; 4
    19f2:	41 e0       	ldi	r20, 0x01	; 1
    19f4:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(COLS_ROWSPORT,ROW1 ,HIGH);
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	65 e0       	ldi	r22, 0x05	; 5
    19fc:	41 e0       	ldi	r20, 0x01	; 1
    19fe:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(COLS_ROWSPORT,ROW2 ,HIGH);
    1a02:	81 e0       	ldi	r24, 0x01	; 1
    1a04:	66 e0       	ldi	r22, 0x06	; 6
    1a06:	41 e0       	ldi	r20, 0x01	; 1
    1a08:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <DIO_VidSetPinValue>
  	DIO_VidSetPinValue(COLS_ROWSPORT,ROW3 ,HIGH);
    1a0c:	81 e0       	ldi	r24, 0x01	; 1
    1a0e:	67 e0       	ldi	r22, 0x07	; 7
    1a10:	41 e0       	ldi	r20, 0x01	; 1
    1a12:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <DIO_VidSetPinValue>

	DIO_VidSetPinValue(COLS_ROWSPORT,COLS0,HIGH);
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	60 e0       	ldi	r22, 0x00	; 0
    1a1a:	41 e0       	ldi	r20, 0x01	; 1
    1a1c:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS1,HIGH);
    1a20:	81 e0       	ldi	r24, 0x01	; 1
    1a22:	61 e0       	ldi	r22, 0x01	; 1
    1a24:	41 e0       	ldi	r20, 0x01	; 1
    1a26:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS2,HIGH);
    1a2a:	81 e0       	ldi	r24, 0x01	; 1
    1a2c:	62 e0       	ldi	r22, 0x02	; 2
    1a2e:	41 e0       	ldi	r20, 0x01	; 1
    1a30:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <DIO_VidSetPinValue>
  	DIO_VidSetPinValue(COLS_ROWSPORT,COLS3,HIGH);
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	63 e0       	ldi	r22, 0x03	; 3
    1a38:	41 e0       	ldi	r20, 0x01	; 1
    1a3a:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <DIO_VidSetPinValue>


}
    1a3e:	cf 91       	pop	r28
    1a40:	df 91       	pop	r29
    1a42:	08 95       	ret

00001a44 <Keypad_U8ReadPin>:

u8 Keypad_U8ReadPin(void)
{
    1a44:	df 93       	push	r29
    1a46:	cf 93       	push	r28
    1a48:	cd b7       	in	r28, 0x3d	; 61
    1a4a:	de b7       	in	r29, 0x3e	; 62
    1a4c:	61 97       	sbiw	r28, 0x11	; 17
    1a4e:	0f b6       	in	r0, 0x3f	; 63
    1a50:	f8 94       	cli
    1a52:	de bf       	out	0x3e, r29	; 62
    1a54:	0f be       	out	0x3f, r0	; 63
    1a56:	cd bf       	out	0x3d, r28	; 61
	u8 pressdkey=DEFAULT_KEY;
    1a58:	83 e4       	ldi	r24, 0x43	; 67
    1a5a:	89 8b       	std	Y+17, r24	; 0x11
	while(1)
	{
		DIO_VidSetPinValue(COLS_ROWSPORT,ROW0 ,HIGH);
    1a5c:	81 e0       	ldi	r24, 0x01	; 1
    1a5e:	64 e0       	ldi	r22, 0x04	; 4
    1a60:	41 e0       	ldi	r20, 0x01	; 1
    1a62:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(COLS_ROWSPORT,ROW1 ,HIGH);
    1a66:	81 e0       	ldi	r24, 0x01	; 1
    1a68:	65 e0       	ldi	r22, 0x05	; 5
    1a6a:	41 e0       	ldi	r20, 0x01	; 1
    1a6c:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(COLS_ROWSPORT,ROW2 ,HIGH);
    1a70:	81 e0       	ldi	r24, 0x01	; 1
    1a72:	66 e0       	ldi	r22, 0x06	; 6
    1a74:	41 e0       	ldi	r20, 0x01	; 1
    1a76:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(COLS_ROWSPORT,ROW3 ,HIGH);
    1a7a:	81 e0       	ldi	r24, 0x01	; 1
    1a7c:	67 e0       	ldi	r22, 0x07	; 7
    1a7e:	41 e0       	ldi	r20, 0x01	; 1
    1a80:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <DIO_VidSetPinValue>


		u8 col=0,row=0;
    1a84:	18 8a       	std	Y+16, r1	; 0x10
    1a86:	1f 86       	std	Y+15, r1	; 0x0f

		for(row=0;row<=3;row++)
    1a88:	1f 86       	std	Y+15, r1	; 0x0f
    1a8a:	ad c0       	rjmp	.+346    	; 0x1be6 <Keypad_U8ReadPin+0x1a2>
		{
			DIO_VidSetPinValue(COLS_ROWSPORT,row,LOW);
    1a8c:	81 e0       	ldi	r24, 0x01	; 1
    1a8e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1a90:	40 e0       	ldi	r20, 0x00	; 0
    1a92:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <DIO_VidSetPinValue>

			for(col=0;col<=3;col++)
    1a96:	18 8a       	std	Y+16, r1	; 0x10
    1a98:	9a c0       	rjmp	.+308    	; 0x1bce <Keypad_U8ReadPin+0x18a>
			{
				if(DIO_VidGetPinValue(COLS_ROWSPORT,col+ROWSHIFT)==0)
    1a9a:	88 89       	ldd	r24, Y+16	; 0x10
    1a9c:	98 2f       	mov	r25, r24
    1a9e:	9c 5f       	subi	r25, 0xFC	; 252
    1aa0:	81 e0       	ldi	r24, 0x01	; 1
    1aa2:	69 2f       	mov	r22, r25
    1aa4:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <DIO_VidGetPinValue>
    1aa8:	88 23       	and	r24, r24
    1aaa:	09 f0       	breq	.+2      	; 0x1aae <Keypad_U8ReadPin+0x6a>
    1aac:	8d c0       	rjmp	.+282    	; 0x1bc8 <Keypad_U8ReadPin+0x184>
				{
					pressdkey=	array_keypad[row][col];
    1aae:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ab0:	48 2f       	mov	r20, r24
    1ab2:	50 e0       	ldi	r21, 0x00	; 0
    1ab4:	88 89       	ldd	r24, Y+16	; 0x10
    1ab6:	28 2f       	mov	r18, r24
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	ca 01       	movw	r24, r20
    1abc:	88 0f       	add	r24, r24
    1abe:	99 1f       	adc	r25, r25
    1ac0:	88 0f       	add	r24, r24
    1ac2:	99 1f       	adc	r25, r25
    1ac4:	82 0f       	add	r24, r18
    1ac6:	93 1f       	adc	r25, r19
    1ac8:	fc 01       	movw	r30, r24
    1aca:	ea 53       	subi	r30, 0x3A	; 58
    1acc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ace:	80 81       	ld	r24, Z
    1ad0:	89 8b       	std	Y+17, r24	; 0x11
					while(DIO_VidGetPinValue(COLS_ROWSPORT,col+ROWSHIFT)==0);
    1ad2:	88 89       	ldd	r24, Y+16	; 0x10
    1ad4:	98 2f       	mov	r25, r24
    1ad6:	9c 5f       	subi	r25, 0xFC	; 252
    1ad8:	81 e0       	ldi	r24, 0x01	; 1
    1ada:	69 2f       	mov	r22, r25
    1adc:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <DIO_VidGetPinValue>
    1ae0:	88 23       	and	r24, r24
    1ae2:	b9 f3       	breq	.-18     	; 0x1ad2 <Keypad_U8ReadPin+0x8e>
    1ae4:	80 e0       	ldi	r24, 0x00	; 0
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	a0 e2       	ldi	r26, 0x20	; 32
    1aea:	b1 e4       	ldi	r27, 0x41	; 65
    1aec:	8b 87       	std	Y+11, r24	; 0x0b
    1aee:	9c 87       	std	Y+12, r25	; 0x0c
    1af0:	ad 87       	std	Y+13, r26	; 0x0d
    1af2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1af4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1af6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1af8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1afa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1afc:	20 e0       	ldi	r18, 0x00	; 0
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	4a ef       	ldi	r20, 0xFA	; 250
    1b02:	54 e4       	ldi	r21, 0x44	; 68
    1b04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b08:	dc 01       	movw	r26, r24
    1b0a:	cb 01       	movw	r24, r22
    1b0c:	8f 83       	std	Y+7, r24	; 0x07
    1b0e:	98 87       	std	Y+8, r25	; 0x08
    1b10:	a9 87       	std	Y+9, r26	; 0x09
    1b12:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b14:	6f 81       	ldd	r22, Y+7	; 0x07
    1b16:	78 85       	ldd	r23, Y+8	; 0x08
    1b18:	89 85       	ldd	r24, Y+9	; 0x09
    1b1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b1c:	20 e0       	ldi	r18, 0x00	; 0
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	40 e8       	ldi	r20, 0x80	; 128
    1b22:	5f e3       	ldi	r21, 0x3F	; 63
    1b24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b28:	88 23       	and	r24, r24
    1b2a:	2c f4       	brge	.+10     	; 0x1b36 <Keypad_U8ReadPin+0xf2>
		__ticks = 1;
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	9e 83       	std	Y+6, r25	; 0x06
    1b32:	8d 83       	std	Y+5, r24	; 0x05
    1b34:	3f c0       	rjmp	.+126    	; 0x1bb4 <Keypad_U8ReadPin+0x170>
	else if (__tmp > 65535)
    1b36:	6f 81       	ldd	r22, Y+7	; 0x07
    1b38:	78 85       	ldd	r23, Y+8	; 0x08
    1b3a:	89 85       	ldd	r24, Y+9	; 0x09
    1b3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b3e:	20 e0       	ldi	r18, 0x00	; 0
    1b40:	3f ef       	ldi	r19, 0xFF	; 255
    1b42:	4f e7       	ldi	r20, 0x7F	; 127
    1b44:	57 e4       	ldi	r21, 0x47	; 71
    1b46:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b4a:	18 16       	cp	r1, r24
    1b4c:	4c f5       	brge	.+82     	; 0x1ba0 <Keypad_U8ReadPin+0x15c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b50:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b52:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b54:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b56:	20 e0       	ldi	r18, 0x00	; 0
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	40 e2       	ldi	r20, 0x20	; 32
    1b5c:	51 e4       	ldi	r21, 0x41	; 65
    1b5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b62:	dc 01       	movw	r26, r24
    1b64:	cb 01       	movw	r24, r22
    1b66:	bc 01       	movw	r22, r24
    1b68:	cd 01       	movw	r24, r26
    1b6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b6e:	dc 01       	movw	r26, r24
    1b70:	cb 01       	movw	r24, r22
    1b72:	9e 83       	std	Y+6, r25	; 0x06
    1b74:	8d 83       	std	Y+5, r24	; 0x05
    1b76:	0f c0       	rjmp	.+30     	; 0x1b96 <Keypad_U8ReadPin+0x152>
    1b78:	88 ec       	ldi	r24, 0xC8	; 200
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	9c 83       	std	Y+4, r25	; 0x04
    1b7e:	8b 83       	std	Y+3, r24	; 0x03
    1b80:	8b 81       	ldd	r24, Y+3	; 0x03
    1b82:	9c 81       	ldd	r25, Y+4	; 0x04
    1b84:	01 97       	sbiw	r24, 0x01	; 1
    1b86:	f1 f7       	brne	.-4      	; 0x1b84 <Keypad_U8ReadPin+0x140>
    1b88:	9c 83       	std	Y+4, r25	; 0x04
    1b8a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b90:	01 97       	sbiw	r24, 0x01	; 1
    1b92:	9e 83       	std	Y+6, r25	; 0x06
    1b94:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b96:	8d 81       	ldd	r24, Y+5	; 0x05
    1b98:	9e 81       	ldd	r25, Y+6	; 0x06
    1b9a:	00 97       	sbiw	r24, 0x00	; 0
    1b9c:	69 f7       	brne	.-38     	; 0x1b78 <Keypad_U8ReadPin+0x134>
    1b9e:	14 c0       	rjmp	.+40     	; 0x1bc8 <Keypad_U8ReadPin+0x184>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ba0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ba2:	78 85       	ldd	r23, Y+8	; 0x08
    1ba4:	89 85       	ldd	r24, Y+9	; 0x09
    1ba6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ba8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bac:	dc 01       	movw	r26, r24
    1bae:	cb 01       	movw	r24, r22
    1bb0:	9e 83       	std	Y+6, r25	; 0x06
    1bb2:	8d 83       	std	Y+5, r24	; 0x05
    1bb4:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb6:	9e 81       	ldd	r25, Y+6	; 0x06
    1bb8:	9a 83       	std	Y+2, r25	; 0x02
    1bba:	89 83       	std	Y+1, r24	; 0x01
    1bbc:	89 81       	ldd	r24, Y+1	; 0x01
    1bbe:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc0:	01 97       	sbiw	r24, 0x01	; 1
    1bc2:	f1 f7       	brne	.-4      	; 0x1bc0 <Keypad_U8ReadPin+0x17c>
    1bc4:	9a 83       	std	Y+2, r25	; 0x02
    1bc6:	89 83       	std	Y+1, r24	; 0x01

		for(row=0;row<=3;row++)
		{
			DIO_VidSetPinValue(COLS_ROWSPORT,row,LOW);

			for(col=0;col<=3;col++)
    1bc8:	88 89       	ldd	r24, Y+16	; 0x10
    1bca:	8f 5f       	subi	r24, 0xFF	; 255
    1bcc:	88 8b       	std	Y+16, r24	; 0x10
    1bce:	88 89       	ldd	r24, Y+16	; 0x10
    1bd0:	84 30       	cpi	r24, 0x04	; 4
    1bd2:	08 f4       	brcc	.+2      	; 0x1bd6 <Keypad_U8ReadPin+0x192>
    1bd4:	62 cf       	rjmp	.-316    	; 0x1a9a <Keypad_U8ReadPin+0x56>
					pressdkey=	array_keypad[row][col];
					while(DIO_VidGetPinValue(COLS_ROWSPORT,col+ROWSHIFT)==0);
					_delay_ms(10);
				}
			}
			DIO_VidSetPinValue(COLS_ROWSPORT,row,HIGH);
    1bd6:	81 e0       	ldi	r24, 0x01	; 1
    1bd8:	6f 85       	ldd	r22, Y+15	; 0x0f
    1bda:	41 e0       	ldi	r20, 0x01	; 1
    1bdc:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(COLS_ROWSPORT,ROW3 ,HIGH);


		u8 col=0,row=0;

		for(row=0;row<=3;row++)
    1be0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1be2:	8f 5f       	subi	r24, 0xFF	; 255
    1be4:	8f 87       	std	Y+15, r24	; 0x0f
    1be6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1be8:	84 30       	cpi	r24, 0x04	; 4
    1bea:	08 f4       	brcc	.+2      	; 0x1bee <Keypad_U8ReadPin+0x1aa>
    1bec:	4f cf       	rjmp	.-354    	; 0x1a8c <Keypad_U8ReadPin+0x48>
					_delay_ms(10);
				}
			}
			DIO_VidSetPinValue(COLS_ROWSPORT,row,HIGH);
		}
		if (pressdkey!= DEFAULT_KEY)
    1bee:	89 89       	ldd	r24, Y+17	; 0x11
    1bf0:	83 34       	cpi	r24, 0x43	; 67
    1bf2:	09 f4       	brne	.+2      	; 0x1bf6 <Keypad_U8ReadPin+0x1b2>
    1bf4:	33 cf       	rjmp	.-410    	; 0x1a5c <Keypad_U8ReadPin+0x18>
			break;
		}

	}

return pressdkey;
    1bf6:	89 89       	ldd	r24, Y+17	; 0x11
	
}
    1bf8:	61 96       	adiw	r28, 0x11	; 17
    1bfa:	0f b6       	in	r0, 0x3f	; 63
    1bfc:	f8 94       	cli
    1bfe:	de bf       	out	0x3e, r29	; 62
    1c00:	0f be       	out	0x3f, r0	; 63
    1c02:	cd bf       	out	0x3d, r28	; 61
    1c04:	cf 91       	pop	r28
    1c06:	df 91       	pop	r29
    1c08:	08 95       	ret

00001c0a <Keypad_U8ReadPin1>:

u8 Keypad_U8ReadPin1(void)
{
    1c0a:	df 93       	push	r29
    1c0c:	cf 93       	push	r28
    1c0e:	cd b7       	in	r28, 0x3d	; 61
    1c10:	de b7       	in	r29, 0x3e	; 62
    1c12:	ea 97       	sbiw	r28, 0x3a	; 58
    1c14:	0f b6       	in	r0, 0x3f	; 63
    1c16:	f8 94       	cli
    1c18:	de bf       	out	0x3e, r29	; 62
    1c1a:	0f be       	out	0x3f, r0	; 63
    1c1c:	cd bf       	out	0x3d, r28	; 61
	u8 row, pressdkey=0;
    1c1e:	19 ae       	std	Y+57, r1	; 0x39
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS0,LOW);
    1c20:	81 e0       	ldi	r24, 0x01	; 1
    1c22:	60 e0       	ldi	r22, 0x00	; 0
    1c24:	40 e0       	ldi	r20, 0x00	; 0
    1c26:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS1,HIGH);
    1c2a:	81 e0       	ldi	r24, 0x01	; 1
    1c2c:	61 e0       	ldi	r22, 0x01	; 1
    1c2e:	41 e0       	ldi	r20, 0x01	; 1
    1c30:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS2,HIGH);
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	62 e0       	ldi	r22, 0x02	; 2
    1c38:	41 e0       	ldi	r20, 0x01	; 1
    1c3a:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <DIO_VidSetPinValue>
  	DIO_VidSetPinValue(COLS_ROWSPORT,COLS3,HIGH);
    1c3e:	81 e0       	ldi	r24, 0x01	; 1
    1c40:	63 e0       	ldi	r22, 0x03	; 3
    1c42:	41 e0       	ldi	r20, 0x01	; 1
    1c44:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <DIO_VidSetPinValue>
	for(row=4;row<=7;row++)
    1c48:	84 e0       	ldi	r24, 0x04	; 4
    1c4a:	8a af       	std	Y+58, r24	; 0x3a
    1c4c:	8d c0       	rjmp	.+282    	; 0x1d68 <Keypad_U8ReadPin1+0x15e>
	{
		if(DIO_VidGetPinValue(COLS_ROWSPORT,row)==0)
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	6a ad       	ldd	r22, Y+58	; 0x3a
    1c52:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <DIO_VidGetPinValue>
    1c56:	88 23       	and	r24, r24
    1c58:	61 f4       	brne	.+24     	; 0x1c72 <Keypad_U8ReadPin1+0x68>
		{
			pressdkey=	array_keypad[row][COLS0];
    1c5a:	8a ad       	ldd	r24, Y+58	; 0x3a
    1c5c:	88 2f       	mov	r24, r24
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	88 0f       	add	r24, r24
    1c62:	99 1f       	adc	r25, r25
    1c64:	88 0f       	add	r24, r24
    1c66:	99 1f       	adc	r25, r25
    1c68:	fc 01       	movw	r30, r24
    1c6a:	ea 53       	subi	r30, 0x3A	; 58
    1c6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6e:	80 81       	ld	r24, Z
    1c70:	89 af       	std	Y+57, r24	; 0x39
		}
		while(DIO_VidGetPinValue(COLS_ROWSPORT,row)==0);
    1c72:	81 e0       	ldi	r24, 0x01	; 1
    1c74:	6a ad       	ldd	r22, Y+58	; 0x3a
    1c76:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <DIO_VidGetPinValue>
    1c7a:	88 23       	and	r24, r24
    1c7c:	d1 f3       	breq	.-12     	; 0x1c72 <Keypad_U8ReadPin1+0x68>
    1c7e:	80 e0       	ldi	r24, 0x00	; 0
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	a0 ea       	ldi	r26, 0xA0	; 160
    1c84:	b0 e4       	ldi	r27, 0x40	; 64
    1c86:	8d ab       	std	Y+53, r24	; 0x35
    1c88:	9e ab       	std	Y+54, r25	; 0x36
    1c8a:	af ab       	std	Y+55, r26	; 0x37
    1c8c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c8e:	6d a9       	ldd	r22, Y+53	; 0x35
    1c90:	7e a9       	ldd	r23, Y+54	; 0x36
    1c92:	8f a9       	ldd	r24, Y+55	; 0x37
    1c94:	98 ad       	ldd	r25, Y+56	; 0x38
    1c96:	20 e0       	ldi	r18, 0x00	; 0
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	4a ef       	ldi	r20, 0xFA	; 250
    1c9c:	54 e4       	ldi	r21, 0x44	; 68
    1c9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ca2:	dc 01       	movw	r26, r24
    1ca4:	cb 01       	movw	r24, r22
    1ca6:	89 ab       	std	Y+49, r24	; 0x31
    1ca8:	9a ab       	std	Y+50, r25	; 0x32
    1caa:	ab ab       	std	Y+51, r26	; 0x33
    1cac:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1cae:	69 a9       	ldd	r22, Y+49	; 0x31
    1cb0:	7a a9       	ldd	r23, Y+50	; 0x32
    1cb2:	8b a9       	ldd	r24, Y+51	; 0x33
    1cb4:	9c a9       	ldd	r25, Y+52	; 0x34
    1cb6:	20 e0       	ldi	r18, 0x00	; 0
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	40 e8       	ldi	r20, 0x80	; 128
    1cbc:	5f e3       	ldi	r21, 0x3F	; 63
    1cbe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cc2:	88 23       	and	r24, r24
    1cc4:	2c f4       	brge	.+10     	; 0x1cd0 <Keypad_U8ReadPin1+0xc6>
		__ticks = 1;
    1cc6:	81 e0       	ldi	r24, 0x01	; 1
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	98 ab       	std	Y+48, r25	; 0x30
    1ccc:	8f a7       	std	Y+47, r24	; 0x2f
    1cce:	3f c0       	rjmp	.+126    	; 0x1d4e <Keypad_U8ReadPin1+0x144>
	else if (__tmp > 65535)
    1cd0:	69 a9       	ldd	r22, Y+49	; 0x31
    1cd2:	7a a9       	ldd	r23, Y+50	; 0x32
    1cd4:	8b a9       	ldd	r24, Y+51	; 0x33
    1cd6:	9c a9       	ldd	r25, Y+52	; 0x34
    1cd8:	20 e0       	ldi	r18, 0x00	; 0
    1cda:	3f ef       	ldi	r19, 0xFF	; 255
    1cdc:	4f e7       	ldi	r20, 0x7F	; 127
    1cde:	57 e4       	ldi	r21, 0x47	; 71
    1ce0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ce4:	18 16       	cp	r1, r24
    1ce6:	4c f5       	brge	.+82     	; 0x1d3a <Keypad_U8ReadPin1+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ce8:	6d a9       	ldd	r22, Y+53	; 0x35
    1cea:	7e a9       	ldd	r23, Y+54	; 0x36
    1cec:	8f a9       	ldd	r24, Y+55	; 0x37
    1cee:	98 ad       	ldd	r25, Y+56	; 0x38
    1cf0:	20 e0       	ldi	r18, 0x00	; 0
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	40 e2       	ldi	r20, 0x20	; 32
    1cf6:	51 e4       	ldi	r21, 0x41	; 65
    1cf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cfc:	dc 01       	movw	r26, r24
    1cfe:	cb 01       	movw	r24, r22
    1d00:	bc 01       	movw	r22, r24
    1d02:	cd 01       	movw	r24, r26
    1d04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d08:	dc 01       	movw	r26, r24
    1d0a:	cb 01       	movw	r24, r22
    1d0c:	98 ab       	std	Y+48, r25	; 0x30
    1d0e:	8f a7       	std	Y+47, r24	; 0x2f
    1d10:	0f c0       	rjmp	.+30     	; 0x1d30 <Keypad_U8ReadPin1+0x126>
    1d12:	88 ec       	ldi	r24, 0xC8	; 200
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	9e a7       	std	Y+46, r25	; 0x2e
    1d18:	8d a7       	std	Y+45, r24	; 0x2d
    1d1a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d1c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d1e:	01 97       	sbiw	r24, 0x01	; 1
    1d20:	f1 f7       	brne	.-4      	; 0x1d1e <Keypad_U8ReadPin1+0x114>
    1d22:	9e a7       	std	Y+46, r25	; 0x2e
    1d24:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d26:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d28:	98 a9       	ldd	r25, Y+48	; 0x30
    1d2a:	01 97       	sbiw	r24, 0x01	; 1
    1d2c:	98 ab       	std	Y+48, r25	; 0x30
    1d2e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d30:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d32:	98 a9       	ldd	r25, Y+48	; 0x30
    1d34:	00 97       	sbiw	r24, 0x00	; 0
    1d36:	69 f7       	brne	.-38     	; 0x1d12 <Keypad_U8ReadPin1+0x108>
    1d38:	14 c0       	rjmp	.+40     	; 0x1d62 <Keypad_U8ReadPin1+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d3a:	69 a9       	ldd	r22, Y+49	; 0x31
    1d3c:	7a a9       	ldd	r23, Y+50	; 0x32
    1d3e:	8b a9       	ldd	r24, Y+51	; 0x33
    1d40:	9c a9       	ldd	r25, Y+52	; 0x34
    1d42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d46:	dc 01       	movw	r26, r24
    1d48:	cb 01       	movw	r24, r22
    1d4a:	98 ab       	std	Y+48, r25	; 0x30
    1d4c:	8f a7       	std	Y+47, r24	; 0x2f
    1d4e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d50:	98 a9       	ldd	r25, Y+48	; 0x30
    1d52:	9c a7       	std	Y+44, r25	; 0x2c
    1d54:	8b a7       	std	Y+43, r24	; 0x2b
    1d56:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d58:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d5a:	01 97       	sbiw	r24, 0x01	; 1
    1d5c:	f1 f7       	brne	.-4      	; 0x1d5a <Keypad_U8ReadPin1+0x150>
    1d5e:	9c a7       	std	Y+44, r25	; 0x2c
    1d60:	8b a7       	std	Y+43, r24	; 0x2b
	u8 row, pressdkey=0;
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS0,LOW);
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS1,HIGH);
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS2,HIGH);
  	DIO_VidSetPinValue(COLS_ROWSPORT,COLS3,HIGH);
	for(row=4;row<=7;row++)
    1d62:	8a ad       	ldd	r24, Y+58	; 0x3a
    1d64:	8f 5f       	subi	r24, 0xFF	; 255
    1d66:	8a af       	std	Y+58, r24	; 0x3a
    1d68:	8a ad       	ldd	r24, Y+58	; 0x3a
    1d6a:	88 30       	cpi	r24, 0x08	; 8
    1d6c:	08 f4       	brcc	.+2      	; 0x1d70 <Keypad_U8ReadPin1+0x166>
    1d6e:	6f cf       	rjmp	.-290    	; 0x1c4e <Keypad_U8ReadPin1+0x44>
			pressdkey=	array_keypad[row][COLS0];
		}
		while(DIO_VidGetPinValue(COLS_ROWSPORT,row)==0);
		_delay_ms(5);
	}
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS0,HIGH);
    1d70:	81 e0       	ldi	r24, 0x01	; 1
    1d72:	60 e0       	ldi	r22, 0x00	; 0
    1d74:	41 e0       	ldi	r20, 0x01	; 1
    1d76:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS1,LOW );
    1d7a:	81 e0       	ldi	r24, 0x01	; 1
    1d7c:	61 e0       	ldi	r22, 0x01	; 1
    1d7e:	40 e0       	ldi	r20, 0x00	; 0
    1d80:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS2,HIGH);
    1d84:	81 e0       	ldi	r24, 0x01	; 1
    1d86:	62 e0       	ldi	r22, 0x02	; 2
    1d88:	41 e0       	ldi	r20, 0x01	; 1
    1d8a:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <DIO_VidSetPinValue>
  	DIO_VidSetPinValue(COLS_ROWSPORT,COLS3,HIGH);
    1d8e:	81 e0       	ldi	r24, 0x01	; 1
    1d90:	63 e0       	ldi	r22, 0x03	; 3
    1d92:	41 e0       	ldi	r20, 0x01	; 1
    1d94:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <DIO_VidSetPinValue>
	for(row=4;row<=7;row++)
    1d98:	84 e0       	ldi	r24, 0x04	; 4
    1d9a:	8a af       	std	Y+58, r24	; 0x3a
    1d9c:	8d c0       	rjmp	.+282    	; 0x1eb8 <Keypad_U8ReadPin1+0x2ae>
	{
		if(DIO_VidGetPinValue(COLS_ROWSPORT,row)==0)
    1d9e:	81 e0       	ldi	r24, 0x01	; 1
    1da0:	6a ad       	ldd	r22, Y+58	; 0x3a
    1da2:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <DIO_VidGetPinValue>
    1da6:	88 23       	and	r24, r24
    1da8:	61 f4       	brne	.+24     	; 0x1dc2 <Keypad_U8ReadPin1+0x1b8>
		{
			pressdkey=	array_keypad[row][COLS1];
    1daa:	8a ad       	ldd	r24, Y+58	; 0x3a
    1dac:	88 2f       	mov	r24, r24
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	88 0f       	add	r24, r24
    1db2:	99 1f       	adc	r25, r25
    1db4:	88 0f       	add	r24, r24
    1db6:	99 1f       	adc	r25, r25
    1db8:	fc 01       	movw	r30, r24
    1dba:	e9 53       	subi	r30, 0x39	; 57
    1dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dbe:	80 81       	ld	r24, Z
    1dc0:	89 af       	std	Y+57, r24	; 0x39
		}
		while(DIO_VidGetPinValue(COLS_ROWSPORT,row)==0);
    1dc2:	81 e0       	ldi	r24, 0x01	; 1
    1dc4:	6a ad       	ldd	r22, Y+58	; 0x3a
    1dc6:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <DIO_VidGetPinValue>
    1dca:	88 23       	and	r24, r24
    1dcc:	d1 f3       	breq	.-12     	; 0x1dc2 <Keypad_U8ReadPin1+0x1b8>
    1dce:	80 e0       	ldi	r24, 0x00	; 0
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	a0 ea       	ldi	r26, 0xA0	; 160
    1dd4:	b0 e4       	ldi	r27, 0x40	; 64
    1dd6:	8f a3       	std	Y+39, r24	; 0x27
    1dd8:	98 a7       	std	Y+40, r25	; 0x28
    1dda:	a9 a7       	std	Y+41, r26	; 0x29
    1ddc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dde:	6f a1       	ldd	r22, Y+39	; 0x27
    1de0:	78 a5       	ldd	r23, Y+40	; 0x28
    1de2:	89 a5       	ldd	r24, Y+41	; 0x29
    1de4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1de6:	20 e0       	ldi	r18, 0x00	; 0
    1de8:	30 e0       	ldi	r19, 0x00	; 0
    1dea:	4a ef       	ldi	r20, 0xFA	; 250
    1dec:	54 e4       	ldi	r21, 0x44	; 68
    1dee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df2:	dc 01       	movw	r26, r24
    1df4:	cb 01       	movw	r24, r22
    1df6:	8b a3       	std	Y+35, r24	; 0x23
    1df8:	9c a3       	std	Y+36, r25	; 0x24
    1dfa:	ad a3       	std	Y+37, r26	; 0x25
    1dfc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1dfe:	6b a1       	ldd	r22, Y+35	; 0x23
    1e00:	7c a1       	ldd	r23, Y+36	; 0x24
    1e02:	8d a1       	ldd	r24, Y+37	; 0x25
    1e04:	9e a1       	ldd	r25, Y+38	; 0x26
    1e06:	20 e0       	ldi	r18, 0x00	; 0
    1e08:	30 e0       	ldi	r19, 0x00	; 0
    1e0a:	40 e8       	ldi	r20, 0x80	; 128
    1e0c:	5f e3       	ldi	r21, 0x3F	; 63
    1e0e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e12:	88 23       	and	r24, r24
    1e14:	2c f4       	brge	.+10     	; 0x1e20 <Keypad_U8ReadPin1+0x216>
		__ticks = 1;
    1e16:	81 e0       	ldi	r24, 0x01	; 1
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	9a a3       	std	Y+34, r25	; 0x22
    1e1c:	89 a3       	std	Y+33, r24	; 0x21
    1e1e:	3f c0       	rjmp	.+126    	; 0x1e9e <Keypad_U8ReadPin1+0x294>
	else if (__tmp > 65535)
    1e20:	6b a1       	ldd	r22, Y+35	; 0x23
    1e22:	7c a1       	ldd	r23, Y+36	; 0x24
    1e24:	8d a1       	ldd	r24, Y+37	; 0x25
    1e26:	9e a1       	ldd	r25, Y+38	; 0x26
    1e28:	20 e0       	ldi	r18, 0x00	; 0
    1e2a:	3f ef       	ldi	r19, 0xFF	; 255
    1e2c:	4f e7       	ldi	r20, 0x7F	; 127
    1e2e:	57 e4       	ldi	r21, 0x47	; 71
    1e30:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e34:	18 16       	cp	r1, r24
    1e36:	4c f5       	brge	.+82     	; 0x1e8a <Keypad_U8ReadPin1+0x280>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e38:	6f a1       	ldd	r22, Y+39	; 0x27
    1e3a:	78 a5       	ldd	r23, Y+40	; 0x28
    1e3c:	89 a5       	ldd	r24, Y+41	; 0x29
    1e3e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e40:	20 e0       	ldi	r18, 0x00	; 0
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	40 e2       	ldi	r20, 0x20	; 32
    1e46:	51 e4       	ldi	r21, 0x41	; 65
    1e48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e4c:	dc 01       	movw	r26, r24
    1e4e:	cb 01       	movw	r24, r22
    1e50:	bc 01       	movw	r22, r24
    1e52:	cd 01       	movw	r24, r26
    1e54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e58:	dc 01       	movw	r26, r24
    1e5a:	cb 01       	movw	r24, r22
    1e5c:	9a a3       	std	Y+34, r25	; 0x22
    1e5e:	89 a3       	std	Y+33, r24	; 0x21
    1e60:	0f c0       	rjmp	.+30     	; 0x1e80 <Keypad_U8ReadPin1+0x276>
    1e62:	88 ec       	ldi	r24, 0xC8	; 200
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	98 a3       	std	Y+32, r25	; 0x20
    1e68:	8f 8f       	std	Y+31, r24	; 0x1f
    1e6a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e6c:	98 a1       	ldd	r25, Y+32	; 0x20
    1e6e:	01 97       	sbiw	r24, 0x01	; 1
    1e70:	f1 f7       	brne	.-4      	; 0x1e6e <Keypad_U8ReadPin1+0x264>
    1e72:	98 a3       	std	Y+32, r25	; 0x20
    1e74:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e76:	89 a1       	ldd	r24, Y+33	; 0x21
    1e78:	9a a1       	ldd	r25, Y+34	; 0x22
    1e7a:	01 97       	sbiw	r24, 0x01	; 1
    1e7c:	9a a3       	std	Y+34, r25	; 0x22
    1e7e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e80:	89 a1       	ldd	r24, Y+33	; 0x21
    1e82:	9a a1       	ldd	r25, Y+34	; 0x22
    1e84:	00 97       	sbiw	r24, 0x00	; 0
    1e86:	69 f7       	brne	.-38     	; 0x1e62 <Keypad_U8ReadPin1+0x258>
    1e88:	14 c0       	rjmp	.+40     	; 0x1eb2 <Keypad_U8ReadPin1+0x2a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e8a:	6b a1       	ldd	r22, Y+35	; 0x23
    1e8c:	7c a1       	ldd	r23, Y+36	; 0x24
    1e8e:	8d a1       	ldd	r24, Y+37	; 0x25
    1e90:	9e a1       	ldd	r25, Y+38	; 0x26
    1e92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e96:	dc 01       	movw	r26, r24
    1e98:	cb 01       	movw	r24, r22
    1e9a:	9a a3       	std	Y+34, r25	; 0x22
    1e9c:	89 a3       	std	Y+33, r24	; 0x21
    1e9e:	89 a1       	ldd	r24, Y+33	; 0x21
    1ea0:	9a a1       	ldd	r25, Y+34	; 0x22
    1ea2:	9e 8f       	std	Y+30, r25	; 0x1e
    1ea4:	8d 8f       	std	Y+29, r24	; 0x1d
    1ea6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ea8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1eaa:	01 97       	sbiw	r24, 0x01	; 1
    1eac:	f1 f7       	brne	.-4      	; 0x1eaa <Keypad_U8ReadPin1+0x2a0>
    1eae:	9e 8f       	std	Y+30, r25	; 0x1e
    1eb0:	8d 8f       	std	Y+29, r24	; 0x1d
	}
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS0,HIGH);
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS1,LOW );
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS2,HIGH);
  	DIO_VidSetPinValue(COLS_ROWSPORT,COLS3,HIGH);
	for(row=4;row<=7;row++)
    1eb2:	8a ad       	ldd	r24, Y+58	; 0x3a
    1eb4:	8f 5f       	subi	r24, 0xFF	; 255
    1eb6:	8a af       	std	Y+58, r24	; 0x3a
    1eb8:	8a ad       	ldd	r24, Y+58	; 0x3a
    1eba:	88 30       	cpi	r24, 0x08	; 8
    1ebc:	08 f4       	brcc	.+2      	; 0x1ec0 <Keypad_U8ReadPin1+0x2b6>
    1ebe:	6f cf       	rjmp	.-290    	; 0x1d9e <Keypad_U8ReadPin1+0x194>
			pressdkey=	array_keypad[row][COLS1];
		}
		while(DIO_VidGetPinValue(COLS_ROWSPORT,row)==0);
		_delay_ms(5);
	}
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS0,HIGH);
    1ec0:	81 e0       	ldi	r24, 0x01	; 1
    1ec2:	60 e0       	ldi	r22, 0x00	; 0
    1ec4:	41 e0       	ldi	r20, 0x01	; 1
    1ec6:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS1,HIGH);
    1eca:	81 e0       	ldi	r24, 0x01	; 1
    1ecc:	61 e0       	ldi	r22, 0x01	; 1
    1ece:	41 e0       	ldi	r20, 0x01	; 1
    1ed0:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS2,LOW );
    1ed4:	81 e0       	ldi	r24, 0x01	; 1
    1ed6:	62 e0       	ldi	r22, 0x02	; 2
    1ed8:	40 e0       	ldi	r20, 0x00	; 0
    1eda:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <DIO_VidSetPinValue>
  	DIO_VidSetPinValue(COLS_ROWSPORT,COLS3,HIGH);
    1ede:	81 e0       	ldi	r24, 0x01	; 1
    1ee0:	63 e0       	ldi	r22, 0x03	; 3
    1ee2:	41 e0       	ldi	r20, 0x01	; 1
    1ee4:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <DIO_VidSetPinValue>
	for(row=4;row<=7;row++)
    1ee8:	84 e0       	ldi	r24, 0x04	; 4
    1eea:	8a af       	std	Y+58, r24	; 0x3a
    1eec:	8e c0       	rjmp	.+284    	; 0x200a <Keypad_U8ReadPin1+0x400>
	{
		if(DIO_VidGetPinValue(COLS_ROWSPORT,row)==0)
    1eee:	81 e0       	ldi	r24, 0x01	; 1
    1ef0:	6a ad       	ldd	r22, Y+58	; 0x3a
    1ef2:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <DIO_VidGetPinValue>
    1ef6:	88 23       	and	r24, r24
    1ef8:	69 f4       	brne	.+26     	; 0x1f14 <Keypad_U8ReadPin1+0x30a>
		{
			pressdkey=	array_keypad[row][COLS2];
    1efa:	8a ad       	ldd	r24, Y+58	; 0x3a
    1efc:	88 2f       	mov	r24, r24
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	88 0f       	add	r24, r24
    1f02:	99 1f       	adc	r25, r25
    1f04:	01 96       	adiw	r24, 0x01	; 1
    1f06:	88 0f       	add	r24, r24
    1f08:	99 1f       	adc	r25, r25
    1f0a:	fc 01       	movw	r30, r24
    1f0c:	ea 53       	subi	r30, 0x3A	; 58
    1f0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f10:	80 81       	ld	r24, Z
    1f12:	89 af       	std	Y+57, r24	; 0x39
		}
		while(DIO_VidGetPinValue(COLS_ROWSPORT,row)==0);
    1f14:	81 e0       	ldi	r24, 0x01	; 1
    1f16:	6a ad       	ldd	r22, Y+58	; 0x3a
    1f18:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <DIO_VidGetPinValue>
    1f1c:	88 23       	and	r24, r24
    1f1e:	d1 f3       	breq	.-12     	; 0x1f14 <Keypad_U8ReadPin1+0x30a>
    1f20:	80 e0       	ldi	r24, 0x00	; 0
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	a0 ea       	ldi	r26, 0xA0	; 160
    1f26:	b0 e4       	ldi	r27, 0x40	; 64
    1f28:	89 8f       	std	Y+25, r24	; 0x19
    1f2a:	9a 8f       	std	Y+26, r25	; 0x1a
    1f2c:	ab 8f       	std	Y+27, r26	; 0x1b
    1f2e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f30:	69 8d       	ldd	r22, Y+25	; 0x19
    1f32:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f34:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f36:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f38:	20 e0       	ldi	r18, 0x00	; 0
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	4a ef       	ldi	r20, 0xFA	; 250
    1f3e:	54 e4       	ldi	r21, 0x44	; 68
    1f40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f44:	dc 01       	movw	r26, r24
    1f46:	cb 01       	movw	r24, r22
    1f48:	8d 8b       	std	Y+21, r24	; 0x15
    1f4a:	9e 8b       	std	Y+22, r25	; 0x16
    1f4c:	af 8b       	std	Y+23, r26	; 0x17
    1f4e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f50:	6d 89       	ldd	r22, Y+21	; 0x15
    1f52:	7e 89       	ldd	r23, Y+22	; 0x16
    1f54:	8f 89       	ldd	r24, Y+23	; 0x17
    1f56:	98 8d       	ldd	r25, Y+24	; 0x18
    1f58:	20 e0       	ldi	r18, 0x00	; 0
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	40 e8       	ldi	r20, 0x80	; 128
    1f5e:	5f e3       	ldi	r21, 0x3F	; 63
    1f60:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f64:	88 23       	and	r24, r24
    1f66:	2c f4       	brge	.+10     	; 0x1f72 <Keypad_U8ReadPin1+0x368>
		__ticks = 1;
    1f68:	81 e0       	ldi	r24, 0x01	; 1
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	9c 8b       	std	Y+20, r25	; 0x14
    1f6e:	8b 8b       	std	Y+19, r24	; 0x13
    1f70:	3f c0       	rjmp	.+126    	; 0x1ff0 <Keypad_U8ReadPin1+0x3e6>
	else if (__tmp > 65535)
    1f72:	6d 89       	ldd	r22, Y+21	; 0x15
    1f74:	7e 89       	ldd	r23, Y+22	; 0x16
    1f76:	8f 89       	ldd	r24, Y+23	; 0x17
    1f78:	98 8d       	ldd	r25, Y+24	; 0x18
    1f7a:	20 e0       	ldi	r18, 0x00	; 0
    1f7c:	3f ef       	ldi	r19, 0xFF	; 255
    1f7e:	4f e7       	ldi	r20, 0x7F	; 127
    1f80:	57 e4       	ldi	r21, 0x47	; 71
    1f82:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f86:	18 16       	cp	r1, r24
    1f88:	4c f5       	brge	.+82     	; 0x1fdc <Keypad_U8ReadPin1+0x3d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f8a:	69 8d       	ldd	r22, Y+25	; 0x19
    1f8c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f8e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f90:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f92:	20 e0       	ldi	r18, 0x00	; 0
    1f94:	30 e0       	ldi	r19, 0x00	; 0
    1f96:	40 e2       	ldi	r20, 0x20	; 32
    1f98:	51 e4       	ldi	r21, 0x41	; 65
    1f9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f9e:	dc 01       	movw	r26, r24
    1fa0:	cb 01       	movw	r24, r22
    1fa2:	bc 01       	movw	r22, r24
    1fa4:	cd 01       	movw	r24, r26
    1fa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1faa:	dc 01       	movw	r26, r24
    1fac:	cb 01       	movw	r24, r22
    1fae:	9c 8b       	std	Y+20, r25	; 0x14
    1fb0:	8b 8b       	std	Y+19, r24	; 0x13
    1fb2:	0f c0       	rjmp	.+30     	; 0x1fd2 <Keypad_U8ReadPin1+0x3c8>
    1fb4:	88 ec       	ldi	r24, 0xC8	; 200
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	9a 8b       	std	Y+18, r25	; 0x12
    1fba:	89 8b       	std	Y+17, r24	; 0x11
    1fbc:	89 89       	ldd	r24, Y+17	; 0x11
    1fbe:	9a 89       	ldd	r25, Y+18	; 0x12
    1fc0:	01 97       	sbiw	r24, 0x01	; 1
    1fc2:	f1 f7       	brne	.-4      	; 0x1fc0 <Keypad_U8ReadPin1+0x3b6>
    1fc4:	9a 8b       	std	Y+18, r25	; 0x12
    1fc6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fc8:	8b 89       	ldd	r24, Y+19	; 0x13
    1fca:	9c 89       	ldd	r25, Y+20	; 0x14
    1fcc:	01 97       	sbiw	r24, 0x01	; 1
    1fce:	9c 8b       	std	Y+20, r25	; 0x14
    1fd0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fd2:	8b 89       	ldd	r24, Y+19	; 0x13
    1fd4:	9c 89       	ldd	r25, Y+20	; 0x14
    1fd6:	00 97       	sbiw	r24, 0x00	; 0
    1fd8:	69 f7       	brne	.-38     	; 0x1fb4 <Keypad_U8ReadPin1+0x3aa>
    1fda:	14 c0       	rjmp	.+40     	; 0x2004 <Keypad_U8ReadPin1+0x3fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fdc:	6d 89       	ldd	r22, Y+21	; 0x15
    1fde:	7e 89       	ldd	r23, Y+22	; 0x16
    1fe0:	8f 89       	ldd	r24, Y+23	; 0x17
    1fe2:	98 8d       	ldd	r25, Y+24	; 0x18
    1fe4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe8:	dc 01       	movw	r26, r24
    1fea:	cb 01       	movw	r24, r22
    1fec:	9c 8b       	std	Y+20, r25	; 0x14
    1fee:	8b 8b       	std	Y+19, r24	; 0x13
    1ff0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ff2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ff4:	98 8b       	std	Y+16, r25	; 0x10
    1ff6:	8f 87       	std	Y+15, r24	; 0x0f
    1ff8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ffa:	98 89       	ldd	r25, Y+16	; 0x10
    1ffc:	01 97       	sbiw	r24, 0x01	; 1
    1ffe:	f1 f7       	brne	.-4      	; 0x1ffc <Keypad_U8ReadPin1+0x3f2>
    2000:	98 8b       	std	Y+16, r25	; 0x10
    2002:	8f 87       	std	Y+15, r24	; 0x0f
	}
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS0,HIGH);
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS1,HIGH);
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS2,LOW );
  	DIO_VidSetPinValue(COLS_ROWSPORT,COLS3,HIGH);
	for(row=4;row<=7;row++)
    2004:	8a ad       	ldd	r24, Y+58	; 0x3a
    2006:	8f 5f       	subi	r24, 0xFF	; 255
    2008:	8a af       	std	Y+58, r24	; 0x3a
    200a:	8a ad       	ldd	r24, Y+58	; 0x3a
    200c:	88 30       	cpi	r24, 0x08	; 8
    200e:	08 f4       	brcc	.+2      	; 0x2012 <Keypad_U8ReadPin1+0x408>
    2010:	6e cf       	rjmp	.-292    	; 0x1eee <Keypad_U8ReadPin1+0x2e4>
			pressdkey=	array_keypad[row][COLS2];
		}
		while(DIO_VidGetPinValue(COLS_ROWSPORT,row)==0);
		_delay_ms(5);
	}
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS0,HIGH);
    2012:	81 e0       	ldi	r24, 0x01	; 1
    2014:	60 e0       	ldi	r22, 0x00	; 0
    2016:	41 e0       	ldi	r20, 0x01	; 1
    2018:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS1,HIGH);
    201c:	81 e0       	ldi	r24, 0x01	; 1
    201e:	61 e0       	ldi	r22, 0x01	; 1
    2020:	41 e0       	ldi	r20, 0x01	; 1
    2022:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS2,HIGH);
    2026:	81 e0       	ldi	r24, 0x01	; 1
    2028:	62 e0       	ldi	r22, 0x02	; 2
    202a:	41 e0       	ldi	r20, 0x01	; 1
    202c:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <DIO_VidSetPinValue>
  	DIO_VidSetPinValue(COLS_ROWSPORT,COLS3,LOW );
    2030:	81 e0       	ldi	r24, 0x01	; 1
    2032:	63 e0       	ldi	r22, 0x03	; 3
    2034:	40 e0       	ldi	r20, 0x00	; 0
    2036:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <DIO_VidSetPinValue>
	for(row=4;row<=7;row++)
    203a:	84 e0       	ldi	r24, 0x04	; 4
    203c:	8a af       	std	Y+58, r24	; 0x3a
    203e:	8d c0       	rjmp	.+282    	; 0x215a <Keypad_U8ReadPin1+0x550>
	{
		if(DIO_VidGetPinValue(COLS_ROWSPORT,row)==0)
    2040:	81 e0       	ldi	r24, 0x01	; 1
    2042:	6a ad       	ldd	r22, Y+58	; 0x3a
    2044:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <DIO_VidGetPinValue>
    2048:	88 23       	and	r24, r24
    204a:	61 f4       	brne	.+24     	; 0x2064 <Keypad_U8ReadPin1+0x45a>
		{
			pressdkey=	array_keypad[row][COLS3];
    204c:	8a ad       	ldd	r24, Y+58	; 0x3a
    204e:	88 2f       	mov	r24, r24
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	88 0f       	add	r24, r24
    2054:	99 1f       	adc	r25, r25
    2056:	88 0f       	add	r24, r24
    2058:	99 1f       	adc	r25, r25
    205a:	fc 01       	movw	r30, r24
    205c:	e7 53       	subi	r30, 0x37	; 55
    205e:	ff 4f       	sbci	r31, 0xFF	; 255
    2060:	80 81       	ld	r24, Z
    2062:	89 af       	std	Y+57, r24	; 0x39
		}
		while(DIO_VidGetPinValue(COLS_ROWSPORT,row)==0);
    2064:	81 e0       	ldi	r24, 0x01	; 1
    2066:	6a ad       	ldd	r22, Y+58	; 0x3a
    2068:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <DIO_VidGetPinValue>
    206c:	88 23       	and	r24, r24
    206e:	d1 f3       	breq	.-12     	; 0x2064 <Keypad_U8ReadPin1+0x45a>
    2070:	80 e0       	ldi	r24, 0x00	; 0
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	a0 ea       	ldi	r26, 0xA0	; 160
    2076:	b0 e4       	ldi	r27, 0x40	; 64
    2078:	8b 87       	std	Y+11, r24	; 0x0b
    207a:	9c 87       	std	Y+12, r25	; 0x0c
    207c:	ad 87       	std	Y+13, r26	; 0x0d
    207e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2080:	6b 85       	ldd	r22, Y+11	; 0x0b
    2082:	7c 85       	ldd	r23, Y+12	; 0x0c
    2084:	8d 85       	ldd	r24, Y+13	; 0x0d
    2086:	9e 85       	ldd	r25, Y+14	; 0x0e
    2088:	20 e0       	ldi	r18, 0x00	; 0
    208a:	30 e0       	ldi	r19, 0x00	; 0
    208c:	4a ef       	ldi	r20, 0xFA	; 250
    208e:	54 e4       	ldi	r21, 0x44	; 68
    2090:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2094:	dc 01       	movw	r26, r24
    2096:	cb 01       	movw	r24, r22
    2098:	8f 83       	std	Y+7, r24	; 0x07
    209a:	98 87       	std	Y+8, r25	; 0x08
    209c:	a9 87       	std	Y+9, r26	; 0x09
    209e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20a0:	6f 81       	ldd	r22, Y+7	; 0x07
    20a2:	78 85       	ldd	r23, Y+8	; 0x08
    20a4:	89 85       	ldd	r24, Y+9	; 0x09
    20a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    20a8:	20 e0       	ldi	r18, 0x00	; 0
    20aa:	30 e0       	ldi	r19, 0x00	; 0
    20ac:	40 e8       	ldi	r20, 0x80	; 128
    20ae:	5f e3       	ldi	r21, 0x3F	; 63
    20b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20b4:	88 23       	and	r24, r24
    20b6:	2c f4       	brge	.+10     	; 0x20c2 <Keypad_U8ReadPin1+0x4b8>
		__ticks = 1;
    20b8:	81 e0       	ldi	r24, 0x01	; 1
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	9e 83       	std	Y+6, r25	; 0x06
    20be:	8d 83       	std	Y+5, r24	; 0x05
    20c0:	3f c0       	rjmp	.+126    	; 0x2140 <Keypad_U8ReadPin1+0x536>
	else if (__tmp > 65535)
    20c2:	6f 81       	ldd	r22, Y+7	; 0x07
    20c4:	78 85       	ldd	r23, Y+8	; 0x08
    20c6:	89 85       	ldd	r24, Y+9	; 0x09
    20c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ca:	20 e0       	ldi	r18, 0x00	; 0
    20cc:	3f ef       	ldi	r19, 0xFF	; 255
    20ce:	4f e7       	ldi	r20, 0x7F	; 127
    20d0:	57 e4       	ldi	r21, 0x47	; 71
    20d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20d6:	18 16       	cp	r1, r24
    20d8:	4c f5       	brge	.+82     	; 0x212c <Keypad_U8ReadPin1+0x522>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20da:	6b 85       	ldd	r22, Y+11	; 0x0b
    20dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    20de:	8d 85       	ldd	r24, Y+13	; 0x0d
    20e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    20e2:	20 e0       	ldi	r18, 0x00	; 0
    20e4:	30 e0       	ldi	r19, 0x00	; 0
    20e6:	40 e2       	ldi	r20, 0x20	; 32
    20e8:	51 e4       	ldi	r21, 0x41	; 65
    20ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ee:	dc 01       	movw	r26, r24
    20f0:	cb 01       	movw	r24, r22
    20f2:	bc 01       	movw	r22, r24
    20f4:	cd 01       	movw	r24, r26
    20f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20fa:	dc 01       	movw	r26, r24
    20fc:	cb 01       	movw	r24, r22
    20fe:	9e 83       	std	Y+6, r25	; 0x06
    2100:	8d 83       	std	Y+5, r24	; 0x05
    2102:	0f c0       	rjmp	.+30     	; 0x2122 <Keypad_U8ReadPin1+0x518>
    2104:	88 ec       	ldi	r24, 0xC8	; 200
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	9c 83       	std	Y+4, r25	; 0x04
    210a:	8b 83       	std	Y+3, r24	; 0x03
    210c:	8b 81       	ldd	r24, Y+3	; 0x03
    210e:	9c 81       	ldd	r25, Y+4	; 0x04
    2110:	01 97       	sbiw	r24, 0x01	; 1
    2112:	f1 f7       	brne	.-4      	; 0x2110 <Keypad_U8ReadPin1+0x506>
    2114:	9c 83       	std	Y+4, r25	; 0x04
    2116:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2118:	8d 81       	ldd	r24, Y+5	; 0x05
    211a:	9e 81       	ldd	r25, Y+6	; 0x06
    211c:	01 97       	sbiw	r24, 0x01	; 1
    211e:	9e 83       	std	Y+6, r25	; 0x06
    2120:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2122:	8d 81       	ldd	r24, Y+5	; 0x05
    2124:	9e 81       	ldd	r25, Y+6	; 0x06
    2126:	00 97       	sbiw	r24, 0x00	; 0
    2128:	69 f7       	brne	.-38     	; 0x2104 <Keypad_U8ReadPin1+0x4fa>
    212a:	14 c0       	rjmp	.+40     	; 0x2154 <Keypad_U8ReadPin1+0x54a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    212c:	6f 81       	ldd	r22, Y+7	; 0x07
    212e:	78 85       	ldd	r23, Y+8	; 0x08
    2130:	89 85       	ldd	r24, Y+9	; 0x09
    2132:	9a 85       	ldd	r25, Y+10	; 0x0a
    2134:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2138:	dc 01       	movw	r26, r24
    213a:	cb 01       	movw	r24, r22
    213c:	9e 83       	std	Y+6, r25	; 0x06
    213e:	8d 83       	std	Y+5, r24	; 0x05
    2140:	8d 81       	ldd	r24, Y+5	; 0x05
    2142:	9e 81       	ldd	r25, Y+6	; 0x06
    2144:	9a 83       	std	Y+2, r25	; 0x02
    2146:	89 83       	std	Y+1, r24	; 0x01
    2148:	89 81       	ldd	r24, Y+1	; 0x01
    214a:	9a 81       	ldd	r25, Y+2	; 0x02
    214c:	01 97       	sbiw	r24, 0x01	; 1
    214e:	f1 f7       	brne	.-4      	; 0x214c <Keypad_U8ReadPin1+0x542>
    2150:	9a 83       	std	Y+2, r25	; 0x02
    2152:	89 83       	std	Y+1, r24	; 0x01
	}
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS0,HIGH);
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS1,HIGH);
	DIO_VidSetPinValue(COLS_ROWSPORT,COLS2,HIGH);
  	DIO_VidSetPinValue(COLS_ROWSPORT,COLS3,LOW );
	for(row=4;row<=7;row++)
    2154:	8a ad       	ldd	r24, Y+58	; 0x3a
    2156:	8f 5f       	subi	r24, 0xFF	; 255
    2158:	8a af       	std	Y+58, r24	; 0x3a
    215a:	8a ad       	ldd	r24, Y+58	; 0x3a
    215c:	88 30       	cpi	r24, 0x08	; 8
    215e:	08 f4       	brcc	.+2      	; 0x2162 <Keypad_U8ReadPin1+0x558>
    2160:	6f cf       	rjmp	.-290    	; 0x2040 <Keypad_U8ReadPin1+0x436>
		}
		while(DIO_VidGetPinValue(COLS_ROWSPORT,row)==0);
		_delay_ms(5);
	}

	return pressdkey;
    2162:	89 ad       	ldd	r24, Y+57	; 0x39


}
    2164:	ea 96       	adiw	r28, 0x3a	; 58
    2166:	0f b6       	in	r0, 0x3f	; 63
    2168:	f8 94       	cli
    216a:	de bf       	out	0x3e, r29	; 62
    216c:	0f be       	out	0x3f, r0	; 63
    216e:	cd bf       	out	0x3d, r28	; 61
    2170:	cf 91       	pop	r28
    2172:	df 91       	pop	r29
    2174:	08 95       	ret

00002176 <LCD_VidInit>:
#include "LCD_configure.h"
#include "LCD_private.h"
#include<avr/delay.h>

void LCD_VidInit(void)
{
    2176:	0f 93       	push	r16
    2178:	1f 93       	push	r17
    217a:	df 93       	push	r29
    217c:	cf 93       	push	r28
    217e:	cd b7       	in	r28, 0x3d	; 61
    2180:	de b7       	in	r29, 0x3e	; 62
    2182:	c0 57       	subi	r28, 0x70	; 112
    2184:	d0 40       	sbci	r29, 0x00	; 0
    2186:	0f b6       	in	r0, 0x3f	; 63
    2188:	f8 94       	cli
    218a:	de bf       	out	0x3e, r29	; 62
    218c:	0f be       	out	0x3f, r0	; 63
    218e:	cd bf       	out	0x3d, r28	; 61
    2190:	fe 01       	movw	r30, r28
    2192:	e3 59       	subi	r30, 0x93	; 147
    2194:	ff 4f       	sbci	r31, 0xFF	; 255
    2196:	80 e0       	ldi	r24, 0x00	; 0
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	a0 e7       	ldi	r26, 0x70	; 112
    219c:	b2 e4       	ldi	r27, 0x42	; 66
    219e:	80 83       	st	Z, r24
    21a0:	91 83       	std	Z+1, r25	; 0x01
    21a2:	a2 83       	std	Z+2, r26	; 0x02
    21a4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21a6:	8e 01       	movw	r16, r28
    21a8:	07 59       	subi	r16, 0x97	; 151
    21aa:	1f 4f       	sbci	r17, 0xFF	; 255
    21ac:	fe 01       	movw	r30, r28
    21ae:	e3 59       	subi	r30, 0x93	; 147
    21b0:	ff 4f       	sbci	r31, 0xFF	; 255
    21b2:	60 81       	ld	r22, Z
    21b4:	71 81       	ldd	r23, Z+1	; 0x01
    21b6:	82 81       	ldd	r24, Z+2	; 0x02
    21b8:	93 81       	ldd	r25, Z+3	; 0x03
    21ba:	20 e0       	ldi	r18, 0x00	; 0
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	4a ef       	ldi	r20, 0xFA	; 250
    21c0:	54 e4       	ldi	r21, 0x44	; 68
    21c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21c6:	dc 01       	movw	r26, r24
    21c8:	cb 01       	movw	r24, r22
    21ca:	f8 01       	movw	r30, r16
    21cc:	80 83       	st	Z, r24
    21ce:	91 83       	std	Z+1, r25	; 0x01
    21d0:	a2 83       	std	Z+2, r26	; 0x02
    21d2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21d4:	fe 01       	movw	r30, r28
    21d6:	e7 59       	subi	r30, 0x97	; 151
    21d8:	ff 4f       	sbci	r31, 0xFF	; 255
    21da:	60 81       	ld	r22, Z
    21dc:	71 81       	ldd	r23, Z+1	; 0x01
    21de:	82 81       	ldd	r24, Z+2	; 0x02
    21e0:	93 81       	ldd	r25, Z+3	; 0x03
    21e2:	20 e0       	ldi	r18, 0x00	; 0
    21e4:	30 e0       	ldi	r19, 0x00	; 0
    21e6:	40 e8       	ldi	r20, 0x80	; 128
    21e8:	5f e3       	ldi	r21, 0x3F	; 63
    21ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21ee:	88 23       	and	r24, r24
    21f0:	44 f4       	brge	.+16     	; 0x2202 <LCD_VidInit+0x8c>
		__ticks = 1;
    21f2:	fe 01       	movw	r30, r28
    21f4:	e9 59       	subi	r30, 0x99	; 153
    21f6:	ff 4f       	sbci	r31, 0xFF	; 255
    21f8:	81 e0       	ldi	r24, 0x01	; 1
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	91 83       	std	Z+1, r25	; 0x01
    21fe:	80 83       	st	Z, r24
    2200:	64 c0       	rjmp	.+200    	; 0x22ca <LCD_VidInit+0x154>
	else if (__tmp > 65535)
    2202:	fe 01       	movw	r30, r28
    2204:	e7 59       	subi	r30, 0x97	; 151
    2206:	ff 4f       	sbci	r31, 0xFF	; 255
    2208:	60 81       	ld	r22, Z
    220a:	71 81       	ldd	r23, Z+1	; 0x01
    220c:	82 81       	ldd	r24, Z+2	; 0x02
    220e:	93 81       	ldd	r25, Z+3	; 0x03
    2210:	20 e0       	ldi	r18, 0x00	; 0
    2212:	3f ef       	ldi	r19, 0xFF	; 255
    2214:	4f e7       	ldi	r20, 0x7F	; 127
    2216:	57 e4       	ldi	r21, 0x47	; 71
    2218:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    221c:	18 16       	cp	r1, r24
    221e:	0c f0       	brlt	.+2      	; 0x2222 <LCD_VidInit+0xac>
    2220:	43 c0       	rjmp	.+134    	; 0x22a8 <LCD_VidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2222:	fe 01       	movw	r30, r28
    2224:	e3 59       	subi	r30, 0x93	; 147
    2226:	ff 4f       	sbci	r31, 0xFF	; 255
    2228:	60 81       	ld	r22, Z
    222a:	71 81       	ldd	r23, Z+1	; 0x01
    222c:	82 81       	ldd	r24, Z+2	; 0x02
    222e:	93 81       	ldd	r25, Z+3	; 0x03
    2230:	20 e0       	ldi	r18, 0x00	; 0
    2232:	30 e0       	ldi	r19, 0x00	; 0
    2234:	40 e2       	ldi	r20, 0x20	; 32
    2236:	51 e4       	ldi	r21, 0x41	; 65
    2238:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    223c:	dc 01       	movw	r26, r24
    223e:	cb 01       	movw	r24, r22
    2240:	8e 01       	movw	r16, r28
    2242:	09 59       	subi	r16, 0x99	; 153
    2244:	1f 4f       	sbci	r17, 0xFF	; 255
    2246:	bc 01       	movw	r22, r24
    2248:	cd 01       	movw	r24, r26
    224a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    224e:	dc 01       	movw	r26, r24
    2250:	cb 01       	movw	r24, r22
    2252:	f8 01       	movw	r30, r16
    2254:	91 83       	std	Z+1, r25	; 0x01
    2256:	80 83       	st	Z, r24
    2258:	1f c0       	rjmp	.+62     	; 0x2298 <LCD_VidInit+0x122>
    225a:	fe 01       	movw	r30, r28
    225c:	eb 59       	subi	r30, 0x9B	; 155
    225e:	ff 4f       	sbci	r31, 0xFF	; 255
    2260:	88 ec       	ldi	r24, 0xC8	; 200
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	91 83       	std	Z+1, r25	; 0x01
    2266:	80 83       	st	Z, r24
    2268:	fe 01       	movw	r30, r28
    226a:	eb 59       	subi	r30, 0x9B	; 155
    226c:	ff 4f       	sbci	r31, 0xFF	; 255
    226e:	80 81       	ld	r24, Z
    2270:	91 81       	ldd	r25, Z+1	; 0x01
    2272:	01 97       	sbiw	r24, 0x01	; 1
    2274:	f1 f7       	brne	.-4      	; 0x2272 <LCD_VidInit+0xfc>
    2276:	fe 01       	movw	r30, r28
    2278:	eb 59       	subi	r30, 0x9B	; 155
    227a:	ff 4f       	sbci	r31, 0xFF	; 255
    227c:	91 83       	std	Z+1, r25	; 0x01
    227e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2280:	de 01       	movw	r26, r28
    2282:	a9 59       	subi	r26, 0x99	; 153
    2284:	bf 4f       	sbci	r27, 0xFF	; 255
    2286:	fe 01       	movw	r30, r28
    2288:	e9 59       	subi	r30, 0x99	; 153
    228a:	ff 4f       	sbci	r31, 0xFF	; 255
    228c:	80 81       	ld	r24, Z
    228e:	91 81       	ldd	r25, Z+1	; 0x01
    2290:	01 97       	sbiw	r24, 0x01	; 1
    2292:	11 96       	adiw	r26, 0x01	; 1
    2294:	9c 93       	st	X, r25
    2296:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2298:	fe 01       	movw	r30, r28
    229a:	e9 59       	subi	r30, 0x99	; 153
    229c:	ff 4f       	sbci	r31, 0xFF	; 255
    229e:	80 81       	ld	r24, Z
    22a0:	91 81       	ldd	r25, Z+1	; 0x01
    22a2:	00 97       	sbiw	r24, 0x00	; 0
    22a4:	d1 f6       	brne	.-76     	; 0x225a <LCD_VidInit+0xe4>
    22a6:	27 c0       	rjmp	.+78     	; 0x22f6 <LCD_VidInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22a8:	8e 01       	movw	r16, r28
    22aa:	09 59       	subi	r16, 0x99	; 153
    22ac:	1f 4f       	sbci	r17, 0xFF	; 255
    22ae:	fe 01       	movw	r30, r28
    22b0:	e7 59       	subi	r30, 0x97	; 151
    22b2:	ff 4f       	sbci	r31, 0xFF	; 255
    22b4:	60 81       	ld	r22, Z
    22b6:	71 81       	ldd	r23, Z+1	; 0x01
    22b8:	82 81       	ldd	r24, Z+2	; 0x02
    22ba:	93 81       	ldd	r25, Z+3	; 0x03
    22bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c0:	dc 01       	movw	r26, r24
    22c2:	cb 01       	movw	r24, r22
    22c4:	f8 01       	movw	r30, r16
    22c6:	91 83       	std	Z+1, r25	; 0x01
    22c8:	80 83       	st	Z, r24
    22ca:	de 01       	movw	r26, r28
    22cc:	ad 59       	subi	r26, 0x9D	; 157
    22ce:	bf 4f       	sbci	r27, 0xFF	; 255
    22d0:	fe 01       	movw	r30, r28
    22d2:	e9 59       	subi	r30, 0x99	; 153
    22d4:	ff 4f       	sbci	r31, 0xFF	; 255
    22d6:	80 81       	ld	r24, Z
    22d8:	91 81       	ldd	r25, Z+1	; 0x01
    22da:	8d 93       	st	X+, r24
    22dc:	9c 93       	st	X, r25
    22de:	fe 01       	movw	r30, r28
    22e0:	ed 59       	subi	r30, 0x9D	; 157
    22e2:	ff 4f       	sbci	r31, 0xFF	; 255
    22e4:	80 81       	ld	r24, Z
    22e6:	91 81       	ldd	r25, Z+1	; 0x01
    22e8:	01 97       	sbiw	r24, 0x01	; 1
    22ea:	f1 f7       	brne	.-4      	; 0x22e8 <LCD_VidInit+0x172>
    22ec:	fe 01       	movw	r30, r28
    22ee:	ed 59       	subi	r30, 0x9D	; 157
    22f0:	ff 4f       	sbci	r31, 0xFF	; 255
    22f2:	91 83       	std	Z+1, r25	; 0x01
    22f4:	80 83       	st	Z, r24
	_delay_ms(1);


	#elif LCD_Mode==FOUR_BIT
	_delay_ms(60);
	DIO_VidSetPinDirection	( Lcopy_u8PORT,RS_copy_u8Pin, OUTPUT);
    22f6:	80 e0       	ldi	r24, 0x00	; 0
    22f8:	60 e0       	ldi	r22, 0x00	; 0
    22fa:	41 e0       	ldi	r20, 0x01	; 1
    22fc:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection	( Lcopy_u8PORT,R_w_copy_u8Pin,OUTPUT);
    2300:	80 e0       	ldi	r24, 0x00	; 0
    2302:	61 e0       	ldi	r22, 0x01	; 1
    2304:	41 e0       	ldi	r20, 0x01	; 1
    2306:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection	( Lcopy_u8PORT,E_copy_u8Pin,  OUTPUT);
    230a:	80 e0       	ldi	r24, 0x00	; 0
    230c:	62 e0       	ldi	r22, 0x02	; 2
    230e:	41 e0       	ldi	r20, 0x01	; 1
    2310:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <DIO_VidSetPinDirection>
    2314:	fe 01       	movw	r30, r28
    2316:	e1 5a       	subi	r30, 0xA1	; 161
    2318:	ff 4f       	sbci	r31, 0xFF	; 255
    231a:	80 e0       	ldi	r24, 0x00	; 0
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	a0 e8       	ldi	r26, 0x80	; 128
    2320:	bf e3       	ldi	r27, 0x3F	; 63
    2322:	80 83       	st	Z, r24
    2324:	91 83       	std	Z+1, r25	; 0x01
    2326:	a2 83       	std	Z+2, r26	; 0x02
    2328:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    232a:	8e 01       	movw	r16, r28
    232c:	05 5a       	subi	r16, 0xA5	; 165
    232e:	1f 4f       	sbci	r17, 0xFF	; 255
    2330:	fe 01       	movw	r30, r28
    2332:	e1 5a       	subi	r30, 0xA1	; 161
    2334:	ff 4f       	sbci	r31, 0xFF	; 255
    2336:	60 81       	ld	r22, Z
    2338:	71 81       	ldd	r23, Z+1	; 0x01
    233a:	82 81       	ldd	r24, Z+2	; 0x02
    233c:	93 81       	ldd	r25, Z+3	; 0x03
    233e:	20 e0       	ldi	r18, 0x00	; 0
    2340:	30 e0       	ldi	r19, 0x00	; 0
    2342:	4a ef       	ldi	r20, 0xFA	; 250
    2344:	54 e4       	ldi	r21, 0x44	; 68
    2346:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    234a:	dc 01       	movw	r26, r24
    234c:	cb 01       	movw	r24, r22
    234e:	f8 01       	movw	r30, r16
    2350:	80 83       	st	Z, r24
    2352:	91 83       	std	Z+1, r25	; 0x01
    2354:	a2 83       	std	Z+2, r26	; 0x02
    2356:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2358:	fe 01       	movw	r30, r28
    235a:	e5 5a       	subi	r30, 0xA5	; 165
    235c:	ff 4f       	sbci	r31, 0xFF	; 255
    235e:	60 81       	ld	r22, Z
    2360:	71 81       	ldd	r23, Z+1	; 0x01
    2362:	82 81       	ldd	r24, Z+2	; 0x02
    2364:	93 81       	ldd	r25, Z+3	; 0x03
    2366:	20 e0       	ldi	r18, 0x00	; 0
    2368:	30 e0       	ldi	r19, 0x00	; 0
    236a:	40 e8       	ldi	r20, 0x80	; 128
    236c:	5f e3       	ldi	r21, 0x3F	; 63
    236e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2372:	88 23       	and	r24, r24
    2374:	44 f4       	brge	.+16     	; 0x2386 <LCD_VidInit+0x210>
		__ticks = 1;
    2376:	fe 01       	movw	r30, r28
    2378:	e7 5a       	subi	r30, 0xA7	; 167
    237a:	ff 4f       	sbci	r31, 0xFF	; 255
    237c:	81 e0       	ldi	r24, 0x01	; 1
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	91 83       	std	Z+1, r25	; 0x01
    2382:	80 83       	st	Z, r24
    2384:	64 c0       	rjmp	.+200    	; 0x244e <LCD_VidInit+0x2d8>
	else if (__tmp > 65535)
    2386:	fe 01       	movw	r30, r28
    2388:	e5 5a       	subi	r30, 0xA5	; 165
    238a:	ff 4f       	sbci	r31, 0xFF	; 255
    238c:	60 81       	ld	r22, Z
    238e:	71 81       	ldd	r23, Z+1	; 0x01
    2390:	82 81       	ldd	r24, Z+2	; 0x02
    2392:	93 81       	ldd	r25, Z+3	; 0x03
    2394:	20 e0       	ldi	r18, 0x00	; 0
    2396:	3f ef       	ldi	r19, 0xFF	; 255
    2398:	4f e7       	ldi	r20, 0x7F	; 127
    239a:	57 e4       	ldi	r21, 0x47	; 71
    239c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23a0:	18 16       	cp	r1, r24
    23a2:	0c f0       	brlt	.+2      	; 0x23a6 <LCD_VidInit+0x230>
    23a4:	43 c0       	rjmp	.+134    	; 0x242c <LCD_VidInit+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23a6:	fe 01       	movw	r30, r28
    23a8:	e1 5a       	subi	r30, 0xA1	; 161
    23aa:	ff 4f       	sbci	r31, 0xFF	; 255
    23ac:	60 81       	ld	r22, Z
    23ae:	71 81       	ldd	r23, Z+1	; 0x01
    23b0:	82 81       	ldd	r24, Z+2	; 0x02
    23b2:	93 81       	ldd	r25, Z+3	; 0x03
    23b4:	20 e0       	ldi	r18, 0x00	; 0
    23b6:	30 e0       	ldi	r19, 0x00	; 0
    23b8:	40 e2       	ldi	r20, 0x20	; 32
    23ba:	51 e4       	ldi	r21, 0x41	; 65
    23bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c0:	dc 01       	movw	r26, r24
    23c2:	cb 01       	movw	r24, r22
    23c4:	8e 01       	movw	r16, r28
    23c6:	07 5a       	subi	r16, 0xA7	; 167
    23c8:	1f 4f       	sbci	r17, 0xFF	; 255
    23ca:	bc 01       	movw	r22, r24
    23cc:	cd 01       	movw	r24, r26
    23ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d2:	dc 01       	movw	r26, r24
    23d4:	cb 01       	movw	r24, r22
    23d6:	f8 01       	movw	r30, r16
    23d8:	91 83       	std	Z+1, r25	; 0x01
    23da:	80 83       	st	Z, r24
    23dc:	1f c0       	rjmp	.+62     	; 0x241c <LCD_VidInit+0x2a6>
    23de:	fe 01       	movw	r30, r28
    23e0:	e9 5a       	subi	r30, 0xA9	; 169
    23e2:	ff 4f       	sbci	r31, 0xFF	; 255
    23e4:	88 ec       	ldi	r24, 0xC8	; 200
    23e6:	90 e0       	ldi	r25, 0x00	; 0
    23e8:	91 83       	std	Z+1, r25	; 0x01
    23ea:	80 83       	st	Z, r24
    23ec:	fe 01       	movw	r30, r28
    23ee:	e9 5a       	subi	r30, 0xA9	; 169
    23f0:	ff 4f       	sbci	r31, 0xFF	; 255
    23f2:	80 81       	ld	r24, Z
    23f4:	91 81       	ldd	r25, Z+1	; 0x01
    23f6:	01 97       	sbiw	r24, 0x01	; 1
    23f8:	f1 f7       	brne	.-4      	; 0x23f6 <LCD_VidInit+0x280>
    23fa:	fe 01       	movw	r30, r28
    23fc:	e9 5a       	subi	r30, 0xA9	; 169
    23fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2400:	91 83       	std	Z+1, r25	; 0x01
    2402:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2404:	de 01       	movw	r26, r28
    2406:	a7 5a       	subi	r26, 0xA7	; 167
    2408:	bf 4f       	sbci	r27, 0xFF	; 255
    240a:	fe 01       	movw	r30, r28
    240c:	e7 5a       	subi	r30, 0xA7	; 167
    240e:	ff 4f       	sbci	r31, 0xFF	; 255
    2410:	80 81       	ld	r24, Z
    2412:	91 81       	ldd	r25, Z+1	; 0x01
    2414:	01 97       	sbiw	r24, 0x01	; 1
    2416:	11 96       	adiw	r26, 0x01	; 1
    2418:	9c 93       	st	X, r25
    241a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    241c:	fe 01       	movw	r30, r28
    241e:	e7 5a       	subi	r30, 0xA7	; 167
    2420:	ff 4f       	sbci	r31, 0xFF	; 255
    2422:	80 81       	ld	r24, Z
    2424:	91 81       	ldd	r25, Z+1	; 0x01
    2426:	00 97       	sbiw	r24, 0x00	; 0
    2428:	d1 f6       	brne	.-76     	; 0x23de <LCD_VidInit+0x268>
    242a:	27 c0       	rjmp	.+78     	; 0x247a <LCD_VidInit+0x304>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    242c:	8e 01       	movw	r16, r28
    242e:	07 5a       	subi	r16, 0xA7	; 167
    2430:	1f 4f       	sbci	r17, 0xFF	; 255
    2432:	fe 01       	movw	r30, r28
    2434:	e5 5a       	subi	r30, 0xA5	; 165
    2436:	ff 4f       	sbci	r31, 0xFF	; 255
    2438:	60 81       	ld	r22, Z
    243a:	71 81       	ldd	r23, Z+1	; 0x01
    243c:	82 81       	ldd	r24, Z+2	; 0x02
    243e:	93 81       	ldd	r25, Z+3	; 0x03
    2440:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2444:	dc 01       	movw	r26, r24
    2446:	cb 01       	movw	r24, r22
    2448:	f8 01       	movw	r30, r16
    244a:	91 83       	std	Z+1, r25	; 0x01
    244c:	80 83       	st	Z, r24
    244e:	de 01       	movw	r26, r28
    2450:	ab 5a       	subi	r26, 0xAB	; 171
    2452:	bf 4f       	sbci	r27, 0xFF	; 255
    2454:	fe 01       	movw	r30, r28
    2456:	e7 5a       	subi	r30, 0xA7	; 167
    2458:	ff 4f       	sbci	r31, 0xFF	; 255
    245a:	80 81       	ld	r24, Z
    245c:	91 81       	ldd	r25, Z+1	; 0x01
    245e:	8d 93       	st	X+, r24
    2460:	9c 93       	st	X, r25
    2462:	fe 01       	movw	r30, r28
    2464:	eb 5a       	subi	r30, 0xAB	; 171
    2466:	ff 4f       	sbci	r31, 0xFF	; 255
    2468:	80 81       	ld	r24, Z
    246a:	91 81       	ldd	r25, Z+1	; 0x01
    246c:	01 97       	sbiw	r24, 0x01	; 1
    246e:	f1 f7       	brne	.-4      	; 0x246c <LCD_VidInit+0x2f6>
    2470:	fe 01       	movw	r30, r28
    2472:	eb 5a       	subi	r30, 0xAB	; 171
    2474:	ff 4f       	sbci	r31, 0xFF	; 255
    2476:	91 83       	std	Z+1, r25	; 0x01
    2478:	80 83       	st	Z, r24
	_delay_ms(1);
	DIO_VidSetPortDirection	( LDcopy_u8PORT,OUTPUT);
    247a:	82 e0       	ldi	r24, 0x02	; 2
    247c:	61 e0       	ldi	r22, 0x01	; 1
    247e:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <DIO_VidSetPortDirection>
	LCD_VidSendCommand(0x33);
    2482:	83 e3       	ldi	r24, 0x33	; 51
    2484:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <LCD_VidSendCommand>
    2488:	fe 01       	movw	r30, r28
    248a:	ef 5a       	subi	r30, 0xAF	; 175
    248c:	ff 4f       	sbci	r31, 0xFF	; 255
    248e:	80 e0       	ldi	r24, 0x00	; 0
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	a0 e0       	ldi	r26, 0x00	; 0
    2494:	b0 e4       	ldi	r27, 0x40	; 64
    2496:	80 83       	st	Z, r24
    2498:	91 83       	std	Z+1, r25	; 0x01
    249a:	a2 83       	std	Z+2, r26	; 0x02
    249c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    249e:	8e 01       	movw	r16, r28
    24a0:	03 5b       	subi	r16, 0xB3	; 179
    24a2:	1f 4f       	sbci	r17, 0xFF	; 255
    24a4:	fe 01       	movw	r30, r28
    24a6:	ef 5a       	subi	r30, 0xAF	; 175
    24a8:	ff 4f       	sbci	r31, 0xFF	; 255
    24aa:	60 81       	ld	r22, Z
    24ac:	71 81       	ldd	r23, Z+1	; 0x01
    24ae:	82 81       	ldd	r24, Z+2	; 0x02
    24b0:	93 81       	ldd	r25, Z+3	; 0x03
    24b2:	20 e0       	ldi	r18, 0x00	; 0
    24b4:	30 e0       	ldi	r19, 0x00	; 0
    24b6:	4a ef       	ldi	r20, 0xFA	; 250
    24b8:	54 e4       	ldi	r21, 0x44	; 68
    24ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24be:	dc 01       	movw	r26, r24
    24c0:	cb 01       	movw	r24, r22
    24c2:	f8 01       	movw	r30, r16
    24c4:	80 83       	st	Z, r24
    24c6:	91 83       	std	Z+1, r25	; 0x01
    24c8:	a2 83       	std	Z+2, r26	; 0x02
    24ca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24cc:	fe 01       	movw	r30, r28
    24ce:	e3 5b       	subi	r30, 0xB3	; 179
    24d0:	ff 4f       	sbci	r31, 0xFF	; 255
    24d2:	60 81       	ld	r22, Z
    24d4:	71 81       	ldd	r23, Z+1	; 0x01
    24d6:	82 81       	ldd	r24, Z+2	; 0x02
    24d8:	93 81       	ldd	r25, Z+3	; 0x03
    24da:	20 e0       	ldi	r18, 0x00	; 0
    24dc:	30 e0       	ldi	r19, 0x00	; 0
    24de:	40 e8       	ldi	r20, 0x80	; 128
    24e0:	5f e3       	ldi	r21, 0x3F	; 63
    24e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24e6:	88 23       	and	r24, r24
    24e8:	44 f4       	brge	.+16     	; 0x24fa <LCD_VidInit+0x384>
		__ticks = 1;
    24ea:	fe 01       	movw	r30, r28
    24ec:	e5 5b       	subi	r30, 0xB5	; 181
    24ee:	ff 4f       	sbci	r31, 0xFF	; 255
    24f0:	81 e0       	ldi	r24, 0x01	; 1
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	91 83       	std	Z+1, r25	; 0x01
    24f6:	80 83       	st	Z, r24
    24f8:	64 c0       	rjmp	.+200    	; 0x25c2 <LCD_VidInit+0x44c>
	else if (__tmp > 65535)
    24fa:	fe 01       	movw	r30, r28
    24fc:	e3 5b       	subi	r30, 0xB3	; 179
    24fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2500:	60 81       	ld	r22, Z
    2502:	71 81       	ldd	r23, Z+1	; 0x01
    2504:	82 81       	ldd	r24, Z+2	; 0x02
    2506:	93 81       	ldd	r25, Z+3	; 0x03
    2508:	20 e0       	ldi	r18, 0x00	; 0
    250a:	3f ef       	ldi	r19, 0xFF	; 255
    250c:	4f e7       	ldi	r20, 0x7F	; 127
    250e:	57 e4       	ldi	r21, 0x47	; 71
    2510:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2514:	18 16       	cp	r1, r24
    2516:	0c f0       	brlt	.+2      	; 0x251a <LCD_VidInit+0x3a4>
    2518:	43 c0       	rjmp	.+134    	; 0x25a0 <LCD_VidInit+0x42a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    251a:	fe 01       	movw	r30, r28
    251c:	ef 5a       	subi	r30, 0xAF	; 175
    251e:	ff 4f       	sbci	r31, 0xFF	; 255
    2520:	60 81       	ld	r22, Z
    2522:	71 81       	ldd	r23, Z+1	; 0x01
    2524:	82 81       	ldd	r24, Z+2	; 0x02
    2526:	93 81       	ldd	r25, Z+3	; 0x03
    2528:	20 e0       	ldi	r18, 0x00	; 0
    252a:	30 e0       	ldi	r19, 0x00	; 0
    252c:	40 e2       	ldi	r20, 0x20	; 32
    252e:	51 e4       	ldi	r21, 0x41	; 65
    2530:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2534:	dc 01       	movw	r26, r24
    2536:	cb 01       	movw	r24, r22
    2538:	8e 01       	movw	r16, r28
    253a:	05 5b       	subi	r16, 0xB5	; 181
    253c:	1f 4f       	sbci	r17, 0xFF	; 255
    253e:	bc 01       	movw	r22, r24
    2540:	cd 01       	movw	r24, r26
    2542:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2546:	dc 01       	movw	r26, r24
    2548:	cb 01       	movw	r24, r22
    254a:	f8 01       	movw	r30, r16
    254c:	91 83       	std	Z+1, r25	; 0x01
    254e:	80 83       	st	Z, r24
    2550:	1f c0       	rjmp	.+62     	; 0x2590 <LCD_VidInit+0x41a>
    2552:	fe 01       	movw	r30, r28
    2554:	e7 5b       	subi	r30, 0xB7	; 183
    2556:	ff 4f       	sbci	r31, 0xFF	; 255
    2558:	88 ec       	ldi	r24, 0xC8	; 200
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	91 83       	std	Z+1, r25	; 0x01
    255e:	80 83       	st	Z, r24
    2560:	fe 01       	movw	r30, r28
    2562:	e7 5b       	subi	r30, 0xB7	; 183
    2564:	ff 4f       	sbci	r31, 0xFF	; 255
    2566:	80 81       	ld	r24, Z
    2568:	91 81       	ldd	r25, Z+1	; 0x01
    256a:	01 97       	sbiw	r24, 0x01	; 1
    256c:	f1 f7       	brne	.-4      	; 0x256a <LCD_VidInit+0x3f4>
    256e:	fe 01       	movw	r30, r28
    2570:	e7 5b       	subi	r30, 0xB7	; 183
    2572:	ff 4f       	sbci	r31, 0xFF	; 255
    2574:	91 83       	std	Z+1, r25	; 0x01
    2576:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2578:	de 01       	movw	r26, r28
    257a:	a5 5b       	subi	r26, 0xB5	; 181
    257c:	bf 4f       	sbci	r27, 0xFF	; 255
    257e:	fe 01       	movw	r30, r28
    2580:	e5 5b       	subi	r30, 0xB5	; 181
    2582:	ff 4f       	sbci	r31, 0xFF	; 255
    2584:	80 81       	ld	r24, Z
    2586:	91 81       	ldd	r25, Z+1	; 0x01
    2588:	01 97       	sbiw	r24, 0x01	; 1
    258a:	11 96       	adiw	r26, 0x01	; 1
    258c:	9c 93       	st	X, r25
    258e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2590:	fe 01       	movw	r30, r28
    2592:	e5 5b       	subi	r30, 0xB5	; 181
    2594:	ff 4f       	sbci	r31, 0xFF	; 255
    2596:	80 81       	ld	r24, Z
    2598:	91 81       	ldd	r25, Z+1	; 0x01
    259a:	00 97       	sbiw	r24, 0x00	; 0
    259c:	d1 f6       	brne	.-76     	; 0x2552 <LCD_VidInit+0x3dc>
    259e:	27 c0       	rjmp	.+78     	; 0x25ee <LCD_VidInit+0x478>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25a0:	8e 01       	movw	r16, r28
    25a2:	05 5b       	subi	r16, 0xB5	; 181
    25a4:	1f 4f       	sbci	r17, 0xFF	; 255
    25a6:	fe 01       	movw	r30, r28
    25a8:	e3 5b       	subi	r30, 0xB3	; 179
    25aa:	ff 4f       	sbci	r31, 0xFF	; 255
    25ac:	60 81       	ld	r22, Z
    25ae:	71 81       	ldd	r23, Z+1	; 0x01
    25b0:	82 81       	ldd	r24, Z+2	; 0x02
    25b2:	93 81       	ldd	r25, Z+3	; 0x03
    25b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25b8:	dc 01       	movw	r26, r24
    25ba:	cb 01       	movw	r24, r22
    25bc:	f8 01       	movw	r30, r16
    25be:	91 83       	std	Z+1, r25	; 0x01
    25c0:	80 83       	st	Z, r24
    25c2:	de 01       	movw	r26, r28
    25c4:	a9 5b       	subi	r26, 0xB9	; 185
    25c6:	bf 4f       	sbci	r27, 0xFF	; 255
    25c8:	fe 01       	movw	r30, r28
    25ca:	e5 5b       	subi	r30, 0xB5	; 181
    25cc:	ff 4f       	sbci	r31, 0xFF	; 255
    25ce:	80 81       	ld	r24, Z
    25d0:	91 81       	ldd	r25, Z+1	; 0x01
    25d2:	8d 93       	st	X+, r24
    25d4:	9c 93       	st	X, r25
    25d6:	fe 01       	movw	r30, r28
    25d8:	e9 5b       	subi	r30, 0xB9	; 185
    25da:	ff 4f       	sbci	r31, 0xFF	; 255
    25dc:	80 81       	ld	r24, Z
    25de:	91 81       	ldd	r25, Z+1	; 0x01
    25e0:	01 97       	sbiw	r24, 0x01	; 1
    25e2:	f1 f7       	brne	.-4      	; 0x25e0 <LCD_VidInit+0x46a>
    25e4:	fe 01       	movw	r30, r28
    25e6:	e9 5b       	subi	r30, 0xB9	; 185
    25e8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ea:	91 83       	std	Z+1, r25	; 0x01
    25ec:	80 83       	st	Z, r24
	_delay_ms(2);
	LCD_VidSendCommand(0x32);	/* Send for 4 bit initialization of LCD  */
    25ee:	82 e3       	ldi	r24, 0x32	; 50
    25f0:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <LCD_VidSendCommand>
    25f4:	fe 01       	movw	r30, r28
    25f6:	ed 5b       	subi	r30, 0xBD	; 189
    25f8:	ff 4f       	sbci	r31, 0xFF	; 255
    25fa:	80 e0       	ldi	r24, 0x00	; 0
    25fc:	90 e0       	ldi	r25, 0x00	; 0
    25fe:	a0 e0       	ldi	r26, 0x00	; 0
    2600:	b0 e4       	ldi	r27, 0x40	; 64
    2602:	80 83       	st	Z, r24
    2604:	91 83       	std	Z+1, r25	; 0x01
    2606:	a2 83       	std	Z+2, r26	; 0x02
    2608:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    260a:	8e 01       	movw	r16, r28
    260c:	01 5c       	subi	r16, 0xC1	; 193
    260e:	1f 4f       	sbci	r17, 0xFF	; 255
    2610:	fe 01       	movw	r30, r28
    2612:	ed 5b       	subi	r30, 0xBD	; 189
    2614:	ff 4f       	sbci	r31, 0xFF	; 255
    2616:	60 81       	ld	r22, Z
    2618:	71 81       	ldd	r23, Z+1	; 0x01
    261a:	82 81       	ldd	r24, Z+2	; 0x02
    261c:	93 81       	ldd	r25, Z+3	; 0x03
    261e:	20 e0       	ldi	r18, 0x00	; 0
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	4a ef       	ldi	r20, 0xFA	; 250
    2624:	54 e4       	ldi	r21, 0x44	; 68
    2626:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    262a:	dc 01       	movw	r26, r24
    262c:	cb 01       	movw	r24, r22
    262e:	f8 01       	movw	r30, r16
    2630:	80 83       	st	Z, r24
    2632:	91 83       	std	Z+1, r25	; 0x01
    2634:	a2 83       	std	Z+2, r26	; 0x02
    2636:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2638:	fe 01       	movw	r30, r28
    263a:	ff 96       	adiw	r30, 0x3f	; 63
    263c:	60 81       	ld	r22, Z
    263e:	71 81       	ldd	r23, Z+1	; 0x01
    2640:	82 81       	ldd	r24, Z+2	; 0x02
    2642:	93 81       	ldd	r25, Z+3	; 0x03
    2644:	20 e0       	ldi	r18, 0x00	; 0
    2646:	30 e0       	ldi	r19, 0x00	; 0
    2648:	40 e8       	ldi	r20, 0x80	; 128
    264a:	5f e3       	ldi	r21, 0x3F	; 63
    264c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2650:	88 23       	and	r24, r24
    2652:	2c f4       	brge	.+10     	; 0x265e <LCD_VidInit+0x4e8>
		__ticks = 1;
    2654:	81 e0       	ldi	r24, 0x01	; 1
    2656:	90 e0       	ldi	r25, 0x00	; 0
    2658:	9e af       	std	Y+62, r25	; 0x3e
    265a:	8d af       	std	Y+61, r24	; 0x3d
    265c:	46 c0       	rjmp	.+140    	; 0x26ea <LCD_VidInit+0x574>
	else if (__tmp > 65535)
    265e:	fe 01       	movw	r30, r28
    2660:	ff 96       	adiw	r30, 0x3f	; 63
    2662:	60 81       	ld	r22, Z
    2664:	71 81       	ldd	r23, Z+1	; 0x01
    2666:	82 81       	ldd	r24, Z+2	; 0x02
    2668:	93 81       	ldd	r25, Z+3	; 0x03
    266a:	20 e0       	ldi	r18, 0x00	; 0
    266c:	3f ef       	ldi	r19, 0xFF	; 255
    266e:	4f e7       	ldi	r20, 0x7F	; 127
    2670:	57 e4       	ldi	r21, 0x47	; 71
    2672:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2676:	18 16       	cp	r1, r24
    2678:	64 f5       	brge	.+88     	; 0x26d2 <LCD_VidInit+0x55c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    267a:	fe 01       	movw	r30, r28
    267c:	ed 5b       	subi	r30, 0xBD	; 189
    267e:	ff 4f       	sbci	r31, 0xFF	; 255
    2680:	60 81       	ld	r22, Z
    2682:	71 81       	ldd	r23, Z+1	; 0x01
    2684:	82 81       	ldd	r24, Z+2	; 0x02
    2686:	93 81       	ldd	r25, Z+3	; 0x03
    2688:	20 e0       	ldi	r18, 0x00	; 0
    268a:	30 e0       	ldi	r19, 0x00	; 0
    268c:	40 e2       	ldi	r20, 0x20	; 32
    268e:	51 e4       	ldi	r21, 0x41	; 65
    2690:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2694:	dc 01       	movw	r26, r24
    2696:	cb 01       	movw	r24, r22
    2698:	bc 01       	movw	r22, r24
    269a:	cd 01       	movw	r24, r26
    269c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26a0:	dc 01       	movw	r26, r24
    26a2:	cb 01       	movw	r24, r22
    26a4:	9e af       	std	Y+62, r25	; 0x3e
    26a6:	8d af       	std	Y+61, r24	; 0x3d
    26a8:	0f c0       	rjmp	.+30     	; 0x26c8 <LCD_VidInit+0x552>
    26aa:	88 ec       	ldi	r24, 0xC8	; 200
    26ac:	90 e0       	ldi	r25, 0x00	; 0
    26ae:	9c af       	std	Y+60, r25	; 0x3c
    26b0:	8b af       	std	Y+59, r24	; 0x3b
    26b2:	8b ad       	ldd	r24, Y+59	; 0x3b
    26b4:	9c ad       	ldd	r25, Y+60	; 0x3c
    26b6:	01 97       	sbiw	r24, 0x01	; 1
    26b8:	f1 f7       	brne	.-4      	; 0x26b6 <LCD_VidInit+0x540>
    26ba:	9c af       	std	Y+60, r25	; 0x3c
    26bc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26be:	8d ad       	ldd	r24, Y+61	; 0x3d
    26c0:	9e ad       	ldd	r25, Y+62	; 0x3e
    26c2:	01 97       	sbiw	r24, 0x01	; 1
    26c4:	9e af       	std	Y+62, r25	; 0x3e
    26c6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26c8:	8d ad       	ldd	r24, Y+61	; 0x3d
    26ca:	9e ad       	ldd	r25, Y+62	; 0x3e
    26cc:	00 97       	sbiw	r24, 0x00	; 0
    26ce:	69 f7       	brne	.-38     	; 0x26aa <LCD_VidInit+0x534>
    26d0:	16 c0       	rjmp	.+44     	; 0x26fe <LCD_VidInit+0x588>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26d2:	fe 01       	movw	r30, r28
    26d4:	ff 96       	adiw	r30, 0x3f	; 63
    26d6:	60 81       	ld	r22, Z
    26d8:	71 81       	ldd	r23, Z+1	; 0x01
    26da:	82 81       	ldd	r24, Z+2	; 0x02
    26dc:	93 81       	ldd	r25, Z+3	; 0x03
    26de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26e2:	dc 01       	movw	r26, r24
    26e4:	cb 01       	movw	r24, r22
    26e6:	9e af       	std	Y+62, r25	; 0x3e
    26e8:	8d af       	std	Y+61, r24	; 0x3d
    26ea:	8d ad       	ldd	r24, Y+61	; 0x3d
    26ec:	9e ad       	ldd	r25, Y+62	; 0x3e
    26ee:	9a af       	std	Y+58, r25	; 0x3a
    26f0:	89 af       	std	Y+57, r24	; 0x39
    26f2:	89 ad       	ldd	r24, Y+57	; 0x39
    26f4:	9a ad       	ldd	r25, Y+58	; 0x3a
    26f6:	01 97       	sbiw	r24, 0x01	; 1
    26f8:	f1 f7       	brne	.-4      	; 0x26f6 <LCD_VidInit+0x580>
    26fa:	9a af       	std	Y+58, r25	; 0x3a
    26fc:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(2);
	LCD_VidSendCommand(0x28);	/* 2 line, 5*7 matrix in 4-bit mode */
    26fe:	88 e2       	ldi	r24, 0x28	; 40
    2700:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <LCD_VidSendCommand>
    2704:	80 e0       	ldi	r24, 0x00	; 0
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	a0 e0       	ldi	r26, 0x00	; 0
    270a:	b0 e4       	ldi	r27, 0x40	; 64
    270c:	8d ab       	std	Y+53, r24	; 0x35
    270e:	9e ab       	std	Y+54, r25	; 0x36
    2710:	af ab       	std	Y+55, r26	; 0x37
    2712:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2714:	6d a9       	ldd	r22, Y+53	; 0x35
    2716:	7e a9       	ldd	r23, Y+54	; 0x36
    2718:	8f a9       	ldd	r24, Y+55	; 0x37
    271a:	98 ad       	ldd	r25, Y+56	; 0x38
    271c:	20 e0       	ldi	r18, 0x00	; 0
    271e:	30 e0       	ldi	r19, 0x00	; 0
    2720:	4a ef       	ldi	r20, 0xFA	; 250
    2722:	54 e4       	ldi	r21, 0x44	; 68
    2724:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2728:	dc 01       	movw	r26, r24
    272a:	cb 01       	movw	r24, r22
    272c:	89 ab       	std	Y+49, r24	; 0x31
    272e:	9a ab       	std	Y+50, r25	; 0x32
    2730:	ab ab       	std	Y+51, r26	; 0x33
    2732:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2734:	69 a9       	ldd	r22, Y+49	; 0x31
    2736:	7a a9       	ldd	r23, Y+50	; 0x32
    2738:	8b a9       	ldd	r24, Y+51	; 0x33
    273a:	9c a9       	ldd	r25, Y+52	; 0x34
    273c:	20 e0       	ldi	r18, 0x00	; 0
    273e:	30 e0       	ldi	r19, 0x00	; 0
    2740:	40 e8       	ldi	r20, 0x80	; 128
    2742:	5f e3       	ldi	r21, 0x3F	; 63
    2744:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2748:	88 23       	and	r24, r24
    274a:	2c f4       	brge	.+10     	; 0x2756 <LCD_VidInit+0x5e0>
		__ticks = 1;
    274c:	81 e0       	ldi	r24, 0x01	; 1
    274e:	90 e0       	ldi	r25, 0x00	; 0
    2750:	98 ab       	std	Y+48, r25	; 0x30
    2752:	8f a7       	std	Y+47, r24	; 0x2f
    2754:	3f c0       	rjmp	.+126    	; 0x27d4 <LCD_VidInit+0x65e>
	else if (__tmp > 65535)
    2756:	69 a9       	ldd	r22, Y+49	; 0x31
    2758:	7a a9       	ldd	r23, Y+50	; 0x32
    275a:	8b a9       	ldd	r24, Y+51	; 0x33
    275c:	9c a9       	ldd	r25, Y+52	; 0x34
    275e:	20 e0       	ldi	r18, 0x00	; 0
    2760:	3f ef       	ldi	r19, 0xFF	; 255
    2762:	4f e7       	ldi	r20, 0x7F	; 127
    2764:	57 e4       	ldi	r21, 0x47	; 71
    2766:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    276a:	18 16       	cp	r1, r24
    276c:	4c f5       	brge	.+82     	; 0x27c0 <LCD_VidInit+0x64a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    276e:	6d a9       	ldd	r22, Y+53	; 0x35
    2770:	7e a9       	ldd	r23, Y+54	; 0x36
    2772:	8f a9       	ldd	r24, Y+55	; 0x37
    2774:	98 ad       	ldd	r25, Y+56	; 0x38
    2776:	20 e0       	ldi	r18, 0x00	; 0
    2778:	30 e0       	ldi	r19, 0x00	; 0
    277a:	40 e2       	ldi	r20, 0x20	; 32
    277c:	51 e4       	ldi	r21, 0x41	; 65
    277e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2782:	dc 01       	movw	r26, r24
    2784:	cb 01       	movw	r24, r22
    2786:	bc 01       	movw	r22, r24
    2788:	cd 01       	movw	r24, r26
    278a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    278e:	dc 01       	movw	r26, r24
    2790:	cb 01       	movw	r24, r22
    2792:	98 ab       	std	Y+48, r25	; 0x30
    2794:	8f a7       	std	Y+47, r24	; 0x2f
    2796:	0f c0       	rjmp	.+30     	; 0x27b6 <LCD_VidInit+0x640>
    2798:	88 ec       	ldi	r24, 0xC8	; 200
    279a:	90 e0       	ldi	r25, 0x00	; 0
    279c:	9e a7       	std	Y+46, r25	; 0x2e
    279e:	8d a7       	std	Y+45, r24	; 0x2d
    27a0:	8d a5       	ldd	r24, Y+45	; 0x2d
    27a2:	9e a5       	ldd	r25, Y+46	; 0x2e
    27a4:	01 97       	sbiw	r24, 0x01	; 1
    27a6:	f1 f7       	brne	.-4      	; 0x27a4 <LCD_VidInit+0x62e>
    27a8:	9e a7       	std	Y+46, r25	; 0x2e
    27aa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    27ae:	98 a9       	ldd	r25, Y+48	; 0x30
    27b0:	01 97       	sbiw	r24, 0x01	; 1
    27b2:	98 ab       	std	Y+48, r25	; 0x30
    27b4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    27b8:	98 a9       	ldd	r25, Y+48	; 0x30
    27ba:	00 97       	sbiw	r24, 0x00	; 0
    27bc:	69 f7       	brne	.-38     	; 0x2798 <LCD_VidInit+0x622>
    27be:	14 c0       	rjmp	.+40     	; 0x27e8 <LCD_VidInit+0x672>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27c0:	69 a9       	ldd	r22, Y+49	; 0x31
    27c2:	7a a9       	ldd	r23, Y+50	; 0x32
    27c4:	8b a9       	ldd	r24, Y+51	; 0x33
    27c6:	9c a9       	ldd	r25, Y+52	; 0x34
    27c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27cc:	dc 01       	movw	r26, r24
    27ce:	cb 01       	movw	r24, r22
    27d0:	98 ab       	std	Y+48, r25	; 0x30
    27d2:	8f a7       	std	Y+47, r24	; 0x2f
    27d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    27d6:	98 a9       	ldd	r25, Y+48	; 0x30
    27d8:	9c a7       	std	Y+44, r25	; 0x2c
    27da:	8b a7       	std	Y+43, r24	; 0x2b
    27dc:	8b a5       	ldd	r24, Y+43	; 0x2b
    27de:	9c a5       	ldd	r25, Y+44	; 0x2c
    27e0:	01 97       	sbiw	r24, 0x01	; 1
    27e2:	f1 f7       	brne	.-4      	; 0x27e0 <LCD_VidInit+0x66a>
    27e4:	9c a7       	std	Y+44, r25	; 0x2c
    27e6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	LCD_VidSendCommand(0x0c);	/* Display on cursor off */
    27e8:	8c e0       	ldi	r24, 0x0C	; 12
    27ea:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <LCD_VidSendCommand>
    27ee:	80 e0       	ldi	r24, 0x00	; 0
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	a0 e0       	ldi	r26, 0x00	; 0
    27f4:	b0 e4       	ldi	r27, 0x40	; 64
    27f6:	8f a3       	std	Y+39, r24	; 0x27
    27f8:	98 a7       	std	Y+40, r25	; 0x28
    27fa:	a9 a7       	std	Y+41, r26	; 0x29
    27fc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27fe:	6f a1       	ldd	r22, Y+39	; 0x27
    2800:	78 a5       	ldd	r23, Y+40	; 0x28
    2802:	89 a5       	ldd	r24, Y+41	; 0x29
    2804:	9a a5       	ldd	r25, Y+42	; 0x2a
    2806:	20 e0       	ldi	r18, 0x00	; 0
    2808:	30 e0       	ldi	r19, 0x00	; 0
    280a:	4a ef       	ldi	r20, 0xFA	; 250
    280c:	54 e4       	ldi	r21, 0x44	; 68
    280e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2812:	dc 01       	movw	r26, r24
    2814:	cb 01       	movw	r24, r22
    2816:	8b a3       	std	Y+35, r24	; 0x23
    2818:	9c a3       	std	Y+36, r25	; 0x24
    281a:	ad a3       	std	Y+37, r26	; 0x25
    281c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    281e:	6b a1       	ldd	r22, Y+35	; 0x23
    2820:	7c a1       	ldd	r23, Y+36	; 0x24
    2822:	8d a1       	ldd	r24, Y+37	; 0x25
    2824:	9e a1       	ldd	r25, Y+38	; 0x26
    2826:	20 e0       	ldi	r18, 0x00	; 0
    2828:	30 e0       	ldi	r19, 0x00	; 0
    282a:	40 e8       	ldi	r20, 0x80	; 128
    282c:	5f e3       	ldi	r21, 0x3F	; 63
    282e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2832:	88 23       	and	r24, r24
    2834:	2c f4       	brge	.+10     	; 0x2840 <LCD_VidInit+0x6ca>
		__ticks = 1;
    2836:	81 e0       	ldi	r24, 0x01	; 1
    2838:	90 e0       	ldi	r25, 0x00	; 0
    283a:	9a a3       	std	Y+34, r25	; 0x22
    283c:	89 a3       	std	Y+33, r24	; 0x21
    283e:	3f c0       	rjmp	.+126    	; 0x28be <LCD_VidInit+0x748>
	else if (__tmp > 65535)
    2840:	6b a1       	ldd	r22, Y+35	; 0x23
    2842:	7c a1       	ldd	r23, Y+36	; 0x24
    2844:	8d a1       	ldd	r24, Y+37	; 0x25
    2846:	9e a1       	ldd	r25, Y+38	; 0x26
    2848:	20 e0       	ldi	r18, 0x00	; 0
    284a:	3f ef       	ldi	r19, 0xFF	; 255
    284c:	4f e7       	ldi	r20, 0x7F	; 127
    284e:	57 e4       	ldi	r21, 0x47	; 71
    2850:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2854:	18 16       	cp	r1, r24
    2856:	4c f5       	brge	.+82     	; 0x28aa <LCD_VidInit+0x734>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2858:	6f a1       	ldd	r22, Y+39	; 0x27
    285a:	78 a5       	ldd	r23, Y+40	; 0x28
    285c:	89 a5       	ldd	r24, Y+41	; 0x29
    285e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2860:	20 e0       	ldi	r18, 0x00	; 0
    2862:	30 e0       	ldi	r19, 0x00	; 0
    2864:	40 e2       	ldi	r20, 0x20	; 32
    2866:	51 e4       	ldi	r21, 0x41	; 65
    2868:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    286c:	dc 01       	movw	r26, r24
    286e:	cb 01       	movw	r24, r22
    2870:	bc 01       	movw	r22, r24
    2872:	cd 01       	movw	r24, r26
    2874:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2878:	dc 01       	movw	r26, r24
    287a:	cb 01       	movw	r24, r22
    287c:	9a a3       	std	Y+34, r25	; 0x22
    287e:	89 a3       	std	Y+33, r24	; 0x21
    2880:	0f c0       	rjmp	.+30     	; 0x28a0 <LCD_VidInit+0x72a>
    2882:	88 ec       	ldi	r24, 0xC8	; 200
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	98 a3       	std	Y+32, r25	; 0x20
    2888:	8f 8f       	std	Y+31, r24	; 0x1f
    288a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    288c:	98 a1       	ldd	r25, Y+32	; 0x20
    288e:	01 97       	sbiw	r24, 0x01	; 1
    2890:	f1 f7       	brne	.-4      	; 0x288e <LCD_VidInit+0x718>
    2892:	98 a3       	std	Y+32, r25	; 0x20
    2894:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2896:	89 a1       	ldd	r24, Y+33	; 0x21
    2898:	9a a1       	ldd	r25, Y+34	; 0x22
    289a:	01 97       	sbiw	r24, 0x01	; 1
    289c:	9a a3       	std	Y+34, r25	; 0x22
    289e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28a0:	89 a1       	ldd	r24, Y+33	; 0x21
    28a2:	9a a1       	ldd	r25, Y+34	; 0x22
    28a4:	00 97       	sbiw	r24, 0x00	; 0
    28a6:	69 f7       	brne	.-38     	; 0x2882 <LCD_VidInit+0x70c>
    28a8:	14 c0       	rjmp	.+40     	; 0x28d2 <LCD_VidInit+0x75c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28aa:	6b a1       	ldd	r22, Y+35	; 0x23
    28ac:	7c a1       	ldd	r23, Y+36	; 0x24
    28ae:	8d a1       	ldd	r24, Y+37	; 0x25
    28b0:	9e a1       	ldd	r25, Y+38	; 0x26
    28b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28b6:	dc 01       	movw	r26, r24
    28b8:	cb 01       	movw	r24, r22
    28ba:	9a a3       	std	Y+34, r25	; 0x22
    28bc:	89 a3       	std	Y+33, r24	; 0x21
    28be:	89 a1       	ldd	r24, Y+33	; 0x21
    28c0:	9a a1       	ldd	r25, Y+34	; 0x22
    28c2:	9e 8f       	std	Y+30, r25	; 0x1e
    28c4:	8d 8f       	std	Y+29, r24	; 0x1d
    28c6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28c8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    28ca:	01 97       	sbiw	r24, 0x01	; 1
    28cc:	f1 f7       	brne	.-4      	; 0x28ca <LCD_VidInit+0x754>
    28ce:	9e 8f       	std	Y+30, r25	; 0x1e
    28d0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	LCD_VidSendCommand(0x06);	/* Increment cursor (shift cursor to right) */
    28d2:	86 e0       	ldi	r24, 0x06	; 6
    28d4:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <LCD_VidSendCommand>
    28d8:	80 e0       	ldi	r24, 0x00	; 0
    28da:	90 e0       	ldi	r25, 0x00	; 0
    28dc:	a0 e0       	ldi	r26, 0x00	; 0
    28de:	b0 e4       	ldi	r27, 0x40	; 64
    28e0:	89 8f       	std	Y+25, r24	; 0x19
    28e2:	9a 8f       	std	Y+26, r25	; 0x1a
    28e4:	ab 8f       	std	Y+27, r26	; 0x1b
    28e6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28e8:	69 8d       	ldd	r22, Y+25	; 0x19
    28ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28f0:	20 e0       	ldi	r18, 0x00	; 0
    28f2:	30 e0       	ldi	r19, 0x00	; 0
    28f4:	4a ef       	ldi	r20, 0xFA	; 250
    28f6:	54 e4       	ldi	r21, 0x44	; 68
    28f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28fc:	dc 01       	movw	r26, r24
    28fe:	cb 01       	movw	r24, r22
    2900:	8d 8b       	std	Y+21, r24	; 0x15
    2902:	9e 8b       	std	Y+22, r25	; 0x16
    2904:	af 8b       	std	Y+23, r26	; 0x17
    2906:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2908:	6d 89       	ldd	r22, Y+21	; 0x15
    290a:	7e 89       	ldd	r23, Y+22	; 0x16
    290c:	8f 89       	ldd	r24, Y+23	; 0x17
    290e:	98 8d       	ldd	r25, Y+24	; 0x18
    2910:	20 e0       	ldi	r18, 0x00	; 0
    2912:	30 e0       	ldi	r19, 0x00	; 0
    2914:	40 e8       	ldi	r20, 0x80	; 128
    2916:	5f e3       	ldi	r21, 0x3F	; 63
    2918:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    291c:	88 23       	and	r24, r24
    291e:	2c f4       	brge	.+10     	; 0x292a <LCD_VidInit+0x7b4>
		__ticks = 1;
    2920:	81 e0       	ldi	r24, 0x01	; 1
    2922:	90 e0       	ldi	r25, 0x00	; 0
    2924:	9c 8b       	std	Y+20, r25	; 0x14
    2926:	8b 8b       	std	Y+19, r24	; 0x13
    2928:	3f c0       	rjmp	.+126    	; 0x29a8 <LCD_VidInit+0x832>
	else if (__tmp > 65535)
    292a:	6d 89       	ldd	r22, Y+21	; 0x15
    292c:	7e 89       	ldd	r23, Y+22	; 0x16
    292e:	8f 89       	ldd	r24, Y+23	; 0x17
    2930:	98 8d       	ldd	r25, Y+24	; 0x18
    2932:	20 e0       	ldi	r18, 0x00	; 0
    2934:	3f ef       	ldi	r19, 0xFF	; 255
    2936:	4f e7       	ldi	r20, 0x7F	; 127
    2938:	57 e4       	ldi	r21, 0x47	; 71
    293a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    293e:	18 16       	cp	r1, r24
    2940:	4c f5       	brge	.+82     	; 0x2994 <LCD_VidInit+0x81e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2942:	69 8d       	ldd	r22, Y+25	; 0x19
    2944:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2946:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2948:	9c 8d       	ldd	r25, Y+28	; 0x1c
    294a:	20 e0       	ldi	r18, 0x00	; 0
    294c:	30 e0       	ldi	r19, 0x00	; 0
    294e:	40 e2       	ldi	r20, 0x20	; 32
    2950:	51 e4       	ldi	r21, 0x41	; 65
    2952:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2956:	dc 01       	movw	r26, r24
    2958:	cb 01       	movw	r24, r22
    295a:	bc 01       	movw	r22, r24
    295c:	cd 01       	movw	r24, r26
    295e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2962:	dc 01       	movw	r26, r24
    2964:	cb 01       	movw	r24, r22
    2966:	9c 8b       	std	Y+20, r25	; 0x14
    2968:	8b 8b       	std	Y+19, r24	; 0x13
    296a:	0f c0       	rjmp	.+30     	; 0x298a <LCD_VidInit+0x814>
    296c:	88 ec       	ldi	r24, 0xC8	; 200
    296e:	90 e0       	ldi	r25, 0x00	; 0
    2970:	9a 8b       	std	Y+18, r25	; 0x12
    2972:	89 8b       	std	Y+17, r24	; 0x11
    2974:	89 89       	ldd	r24, Y+17	; 0x11
    2976:	9a 89       	ldd	r25, Y+18	; 0x12
    2978:	01 97       	sbiw	r24, 0x01	; 1
    297a:	f1 f7       	brne	.-4      	; 0x2978 <LCD_VidInit+0x802>
    297c:	9a 8b       	std	Y+18, r25	; 0x12
    297e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2980:	8b 89       	ldd	r24, Y+19	; 0x13
    2982:	9c 89       	ldd	r25, Y+20	; 0x14
    2984:	01 97       	sbiw	r24, 0x01	; 1
    2986:	9c 8b       	std	Y+20, r25	; 0x14
    2988:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    298a:	8b 89       	ldd	r24, Y+19	; 0x13
    298c:	9c 89       	ldd	r25, Y+20	; 0x14
    298e:	00 97       	sbiw	r24, 0x00	; 0
    2990:	69 f7       	brne	.-38     	; 0x296c <LCD_VidInit+0x7f6>
    2992:	14 c0       	rjmp	.+40     	; 0x29bc <LCD_VidInit+0x846>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2994:	6d 89       	ldd	r22, Y+21	; 0x15
    2996:	7e 89       	ldd	r23, Y+22	; 0x16
    2998:	8f 89       	ldd	r24, Y+23	; 0x17
    299a:	98 8d       	ldd	r25, Y+24	; 0x18
    299c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29a0:	dc 01       	movw	r26, r24
    29a2:	cb 01       	movw	r24, r22
    29a4:	9c 8b       	std	Y+20, r25	; 0x14
    29a6:	8b 8b       	std	Y+19, r24	; 0x13
    29a8:	8b 89       	ldd	r24, Y+19	; 0x13
    29aa:	9c 89       	ldd	r25, Y+20	; 0x14
    29ac:	98 8b       	std	Y+16, r25	; 0x10
    29ae:	8f 87       	std	Y+15, r24	; 0x0f
    29b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    29b2:	98 89       	ldd	r25, Y+16	; 0x10
    29b4:	01 97       	sbiw	r24, 0x01	; 1
    29b6:	f1 f7       	brne	.-4      	; 0x29b4 <LCD_VidInit+0x83e>
    29b8:	98 8b       	std	Y+16, r25	; 0x10
    29ba:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	LCD_VidSendCommand(0x01);	/* Clear display screen */
    29bc:	81 e0       	ldi	r24, 0x01	; 1
    29be:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <LCD_VidSendCommand>
    29c2:	80 e0       	ldi	r24, 0x00	; 0
    29c4:	90 e0       	ldi	r25, 0x00	; 0
    29c6:	a0 e0       	ldi	r26, 0x00	; 0
    29c8:	b0 e4       	ldi	r27, 0x40	; 64
    29ca:	8b 87       	std	Y+11, r24	; 0x0b
    29cc:	9c 87       	std	Y+12, r25	; 0x0c
    29ce:	ad 87       	std	Y+13, r26	; 0x0d
    29d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    29d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    29d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    29d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    29da:	20 e0       	ldi	r18, 0x00	; 0
    29dc:	30 e0       	ldi	r19, 0x00	; 0
    29de:	4a ef       	ldi	r20, 0xFA	; 250
    29e0:	54 e4       	ldi	r21, 0x44	; 68
    29e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29e6:	dc 01       	movw	r26, r24
    29e8:	cb 01       	movw	r24, r22
    29ea:	8f 83       	std	Y+7, r24	; 0x07
    29ec:	98 87       	std	Y+8, r25	; 0x08
    29ee:	a9 87       	std	Y+9, r26	; 0x09
    29f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29f2:	6f 81       	ldd	r22, Y+7	; 0x07
    29f4:	78 85       	ldd	r23, Y+8	; 0x08
    29f6:	89 85       	ldd	r24, Y+9	; 0x09
    29f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    29fa:	20 e0       	ldi	r18, 0x00	; 0
    29fc:	30 e0       	ldi	r19, 0x00	; 0
    29fe:	40 e8       	ldi	r20, 0x80	; 128
    2a00:	5f e3       	ldi	r21, 0x3F	; 63
    2a02:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a06:	88 23       	and	r24, r24
    2a08:	2c f4       	brge	.+10     	; 0x2a14 <LCD_VidInit+0x89e>
		__ticks = 1;
    2a0a:	81 e0       	ldi	r24, 0x01	; 1
    2a0c:	90 e0       	ldi	r25, 0x00	; 0
    2a0e:	9e 83       	std	Y+6, r25	; 0x06
    2a10:	8d 83       	std	Y+5, r24	; 0x05
    2a12:	3f c0       	rjmp	.+126    	; 0x2a92 <LCD_VidInit+0x91c>
	else if (__tmp > 65535)
    2a14:	6f 81       	ldd	r22, Y+7	; 0x07
    2a16:	78 85       	ldd	r23, Y+8	; 0x08
    2a18:	89 85       	ldd	r24, Y+9	; 0x09
    2a1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a1c:	20 e0       	ldi	r18, 0x00	; 0
    2a1e:	3f ef       	ldi	r19, 0xFF	; 255
    2a20:	4f e7       	ldi	r20, 0x7F	; 127
    2a22:	57 e4       	ldi	r21, 0x47	; 71
    2a24:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a28:	18 16       	cp	r1, r24
    2a2a:	4c f5       	brge	.+82     	; 0x2a7e <LCD_VidInit+0x908>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a30:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a32:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a34:	20 e0       	ldi	r18, 0x00	; 0
    2a36:	30 e0       	ldi	r19, 0x00	; 0
    2a38:	40 e2       	ldi	r20, 0x20	; 32
    2a3a:	51 e4       	ldi	r21, 0x41	; 65
    2a3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a40:	dc 01       	movw	r26, r24
    2a42:	cb 01       	movw	r24, r22
    2a44:	bc 01       	movw	r22, r24
    2a46:	cd 01       	movw	r24, r26
    2a48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a4c:	dc 01       	movw	r26, r24
    2a4e:	cb 01       	movw	r24, r22
    2a50:	9e 83       	std	Y+6, r25	; 0x06
    2a52:	8d 83       	std	Y+5, r24	; 0x05
    2a54:	0f c0       	rjmp	.+30     	; 0x2a74 <LCD_VidInit+0x8fe>
    2a56:	88 ec       	ldi	r24, 0xC8	; 200
    2a58:	90 e0       	ldi	r25, 0x00	; 0
    2a5a:	9c 83       	std	Y+4, r25	; 0x04
    2a5c:	8b 83       	std	Y+3, r24	; 0x03
    2a5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a60:	9c 81       	ldd	r25, Y+4	; 0x04
    2a62:	01 97       	sbiw	r24, 0x01	; 1
    2a64:	f1 f7       	brne	.-4      	; 0x2a62 <LCD_VidInit+0x8ec>
    2a66:	9c 83       	std	Y+4, r25	; 0x04
    2a68:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a6a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a6c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a6e:	01 97       	sbiw	r24, 0x01	; 1
    2a70:	9e 83       	std	Y+6, r25	; 0x06
    2a72:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a74:	8d 81       	ldd	r24, Y+5	; 0x05
    2a76:	9e 81       	ldd	r25, Y+6	; 0x06
    2a78:	00 97       	sbiw	r24, 0x00	; 0
    2a7a:	69 f7       	brne	.-38     	; 0x2a56 <LCD_VidInit+0x8e0>
    2a7c:	14 c0       	rjmp	.+40     	; 0x2aa6 <LCD_VidInit+0x930>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a7e:	6f 81       	ldd	r22, Y+7	; 0x07
    2a80:	78 85       	ldd	r23, Y+8	; 0x08
    2a82:	89 85       	ldd	r24, Y+9	; 0x09
    2a84:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a8a:	dc 01       	movw	r26, r24
    2a8c:	cb 01       	movw	r24, r22
    2a8e:	9e 83       	std	Y+6, r25	; 0x06
    2a90:	8d 83       	std	Y+5, r24	; 0x05
    2a92:	8d 81       	ldd	r24, Y+5	; 0x05
    2a94:	9e 81       	ldd	r25, Y+6	; 0x06
    2a96:	9a 83       	std	Y+2, r25	; 0x02
    2a98:	89 83       	std	Y+1, r24	; 0x01
    2a9a:	89 81       	ldd	r24, Y+1	; 0x01
    2a9c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a9e:	01 97       	sbiw	r24, 0x01	; 1
    2aa0:	f1 f7       	brne	.-4      	; 0x2a9e <LCD_VidInit+0x928>
    2aa2:	9a 83       	std	Y+2, r25	; 0x02
    2aa4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

	#endif
}
    2aa6:	c0 59       	subi	r28, 0x90	; 144
    2aa8:	df 4f       	sbci	r29, 0xFF	; 255
    2aaa:	0f b6       	in	r0, 0x3f	; 63
    2aac:	f8 94       	cli
    2aae:	de bf       	out	0x3e, r29	; 62
    2ab0:	0f be       	out	0x3f, r0	; 63
    2ab2:	cd bf       	out	0x3d, r28	; 61
    2ab4:	cf 91       	pop	r28
    2ab6:	df 91       	pop	r29
    2ab8:	1f 91       	pop	r17
    2aba:	0f 91       	pop	r16
    2abc:	08 95       	ret

00002abe <LCD_VidSendData>:

void LCD_VidSendData(u8 copy_u8data)
{
    2abe:	df 93       	push	r29
    2ac0:	cf 93       	push	r28
    2ac2:	cd b7       	in	r28, 0x3d	; 61
    2ac4:	de b7       	in	r29, 0x3e	; 62
    2ac6:	e9 97       	sbiw	r28, 0x39	; 57
    2ac8:	0f b6       	in	r0, 0x3f	; 63
    2aca:	f8 94       	cli
    2acc:	de bf       	out	0x3e, r29	; 62
    2ace:	0f be       	out	0x3f, r0	; 63
    2ad0:	cd bf       	out	0x3d, r28	; 61
    2ad2:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(1);
		DIO_VidSetPinValue(Lcopy_u8PORT,  E_copy_u8Pin,0);   // E=0 Display Command
        _delay_ms(1);
		
	#elif LCD_Mode==FOUR_BIT
		DIO_VidSetPortValue(LDcopy_u8PORT,(LDcopy_u8PORT & 0x0F)|(copy_u8data & 0xF0));
    2ad4:	89 ad       	ldd	r24, Y+57	; 0x39
    2ad6:	80 7f       	andi	r24, 0xF0	; 240
    2ad8:	82 60       	ori	r24, 0x02	; 2
    2ada:	98 2f       	mov	r25, r24
    2adc:	82 e0       	ldi	r24, 0x02	; 2
    2ade:	69 2f       	mov	r22, r25
    2ae0:	0e 94 cb 0b 	call	0x1796	; 0x1796 <DIO_VidSetPortValue>
		DIO_VidSetPinValue(Lcopy_u8PORT,  RS_copy_u8Pin,1);
    2ae4:	80 e0       	ldi	r24, 0x00	; 0
    2ae6:	60 e0       	ldi	r22, 0x00	; 0
    2ae8:	41 e0       	ldi	r20, 0x01	; 1
    2aea:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(Lcopy_u8PORT,  R_w_copy_u8Pin,0);
    2aee:	80 e0       	ldi	r24, 0x00	; 0
    2af0:	61 e0       	ldi	r22, 0x01	; 1
    2af2:	40 e0       	ldi	r20, 0x00	; 0
    2af4:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(Lcopy_u8PORT,  E_copy_u8Pin,1);  // E=1; Upload Command
    2af8:	80 e0       	ldi	r24, 0x00	; 0
    2afa:	62 e0       	ldi	r22, 0x02	; 2
    2afc:	41 e0       	ldi	r20, 0x01	; 1
    2afe:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <DIO_VidSetPinValue>
    2b02:	80 e0       	ldi	r24, 0x00	; 0
    2b04:	90 e0       	ldi	r25, 0x00	; 0
    2b06:	a0 e0       	ldi	r26, 0x00	; 0
    2b08:	b0 e4       	ldi	r27, 0x40	; 64
    2b0a:	8d ab       	std	Y+53, r24	; 0x35
    2b0c:	9e ab       	std	Y+54, r25	; 0x36
    2b0e:	af ab       	std	Y+55, r26	; 0x37
    2b10:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b12:	6d a9       	ldd	r22, Y+53	; 0x35
    2b14:	7e a9       	ldd	r23, Y+54	; 0x36
    2b16:	8f a9       	ldd	r24, Y+55	; 0x37
    2b18:	98 ad       	ldd	r25, Y+56	; 0x38
    2b1a:	20 e0       	ldi	r18, 0x00	; 0
    2b1c:	30 e0       	ldi	r19, 0x00	; 0
    2b1e:	4a ef       	ldi	r20, 0xFA	; 250
    2b20:	54 e4       	ldi	r21, 0x44	; 68
    2b22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b26:	dc 01       	movw	r26, r24
    2b28:	cb 01       	movw	r24, r22
    2b2a:	89 ab       	std	Y+49, r24	; 0x31
    2b2c:	9a ab       	std	Y+50, r25	; 0x32
    2b2e:	ab ab       	std	Y+51, r26	; 0x33
    2b30:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2b32:	69 a9       	ldd	r22, Y+49	; 0x31
    2b34:	7a a9       	ldd	r23, Y+50	; 0x32
    2b36:	8b a9       	ldd	r24, Y+51	; 0x33
    2b38:	9c a9       	ldd	r25, Y+52	; 0x34
    2b3a:	20 e0       	ldi	r18, 0x00	; 0
    2b3c:	30 e0       	ldi	r19, 0x00	; 0
    2b3e:	40 e8       	ldi	r20, 0x80	; 128
    2b40:	5f e3       	ldi	r21, 0x3F	; 63
    2b42:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b46:	88 23       	and	r24, r24
    2b48:	2c f4       	brge	.+10     	; 0x2b54 <LCD_VidSendData+0x96>
		__ticks = 1;
    2b4a:	81 e0       	ldi	r24, 0x01	; 1
    2b4c:	90 e0       	ldi	r25, 0x00	; 0
    2b4e:	98 ab       	std	Y+48, r25	; 0x30
    2b50:	8f a7       	std	Y+47, r24	; 0x2f
    2b52:	3f c0       	rjmp	.+126    	; 0x2bd2 <LCD_VidSendData+0x114>
	else if (__tmp > 65535)
    2b54:	69 a9       	ldd	r22, Y+49	; 0x31
    2b56:	7a a9       	ldd	r23, Y+50	; 0x32
    2b58:	8b a9       	ldd	r24, Y+51	; 0x33
    2b5a:	9c a9       	ldd	r25, Y+52	; 0x34
    2b5c:	20 e0       	ldi	r18, 0x00	; 0
    2b5e:	3f ef       	ldi	r19, 0xFF	; 255
    2b60:	4f e7       	ldi	r20, 0x7F	; 127
    2b62:	57 e4       	ldi	r21, 0x47	; 71
    2b64:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b68:	18 16       	cp	r1, r24
    2b6a:	4c f5       	brge	.+82     	; 0x2bbe <LCD_VidSendData+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b6c:	6d a9       	ldd	r22, Y+53	; 0x35
    2b6e:	7e a9       	ldd	r23, Y+54	; 0x36
    2b70:	8f a9       	ldd	r24, Y+55	; 0x37
    2b72:	98 ad       	ldd	r25, Y+56	; 0x38
    2b74:	20 e0       	ldi	r18, 0x00	; 0
    2b76:	30 e0       	ldi	r19, 0x00	; 0
    2b78:	40 e2       	ldi	r20, 0x20	; 32
    2b7a:	51 e4       	ldi	r21, 0x41	; 65
    2b7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b80:	dc 01       	movw	r26, r24
    2b82:	cb 01       	movw	r24, r22
    2b84:	bc 01       	movw	r22, r24
    2b86:	cd 01       	movw	r24, r26
    2b88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b8c:	dc 01       	movw	r26, r24
    2b8e:	cb 01       	movw	r24, r22
    2b90:	98 ab       	std	Y+48, r25	; 0x30
    2b92:	8f a7       	std	Y+47, r24	; 0x2f
    2b94:	0f c0       	rjmp	.+30     	; 0x2bb4 <LCD_VidSendData+0xf6>
    2b96:	88 ec       	ldi	r24, 0xC8	; 200
    2b98:	90 e0       	ldi	r25, 0x00	; 0
    2b9a:	9e a7       	std	Y+46, r25	; 0x2e
    2b9c:	8d a7       	std	Y+45, r24	; 0x2d
    2b9e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2ba0:	9e a5       	ldd	r25, Y+46	; 0x2e
    2ba2:	01 97       	sbiw	r24, 0x01	; 1
    2ba4:	f1 f7       	brne	.-4      	; 0x2ba2 <LCD_VidSendData+0xe4>
    2ba6:	9e a7       	std	Y+46, r25	; 0x2e
    2ba8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2baa:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bac:	98 a9       	ldd	r25, Y+48	; 0x30
    2bae:	01 97       	sbiw	r24, 0x01	; 1
    2bb0:	98 ab       	std	Y+48, r25	; 0x30
    2bb2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bb4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bb6:	98 a9       	ldd	r25, Y+48	; 0x30
    2bb8:	00 97       	sbiw	r24, 0x00	; 0
    2bba:	69 f7       	brne	.-38     	; 0x2b96 <LCD_VidSendData+0xd8>
    2bbc:	14 c0       	rjmp	.+40     	; 0x2be6 <LCD_VidSendData+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bbe:	69 a9       	ldd	r22, Y+49	; 0x31
    2bc0:	7a a9       	ldd	r23, Y+50	; 0x32
    2bc2:	8b a9       	ldd	r24, Y+51	; 0x33
    2bc4:	9c a9       	ldd	r25, Y+52	; 0x34
    2bc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bca:	dc 01       	movw	r26, r24
    2bcc:	cb 01       	movw	r24, r22
    2bce:	98 ab       	std	Y+48, r25	; 0x30
    2bd0:	8f a7       	std	Y+47, r24	; 0x2f
    2bd2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bd4:	98 a9       	ldd	r25, Y+48	; 0x30
    2bd6:	9c a7       	std	Y+44, r25	; 0x2c
    2bd8:	8b a7       	std	Y+43, r24	; 0x2b
    2bda:	8b a5       	ldd	r24, Y+43	; 0x2b
    2bdc:	9c a5       	ldd	r25, Y+44	; 0x2c
    2bde:	01 97       	sbiw	r24, 0x01	; 1
    2be0:	f1 f7       	brne	.-4      	; 0x2bde <LCD_VidSendData+0x120>
    2be2:	9c a7       	std	Y+44, r25	; 0x2c
    2be4:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(2);
		DIO_VidSetPinValue(Lcopy_u8PORT,  E_copy_u8Pin,0);   // E=0 Display Command
    2be6:	80 e0       	ldi	r24, 0x00	; 0
    2be8:	62 e0       	ldi	r22, 0x02	; 2
    2bea:	40 e0       	ldi	r20, 0x00	; 0
    2bec:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <DIO_VidSetPinValue>
    2bf0:	80 e0       	ldi	r24, 0x00	; 0
    2bf2:	90 e0       	ldi	r25, 0x00	; 0
    2bf4:	a0 e0       	ldi	r26, 0x00	; 0
    2bf6:	b0 e4       	ldi	r27, 0x40	; 64
    2bf8:	8f a3       	std	Y+39, r24	; 0x27
    2bfa:	98 a7       	std	Y+40, r25	; 0x28
    2bfc:	a9 a7       	std	Y+41, r26	; 0x29
    2bfe:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c00:	6f a1       	ldd	r22, Y+39	; 0x27
    2c02:	78 a5       	ldd	r23, Y+40	; 0x28
    2c04:	89 a5       	ldd	r24, Y+41	; 0x29
    2c06:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c08:	20 e0       	ldi	r18, 0x00	; 0
    2c0a:	30 e0       	ldi	r19, 0x00	; 0
    2c0c:	4a ef       	ldi	r20, 0xFA	; 250
    2c0e:	54 e4       	ldi	r21, 0x44	; 68
    2c10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c14:	dc 01       	movw	r26, r24
    2c16:	cb 01       	movw	r24, r22
    2c18:	8b a3       	std	Y+35, r24	; 0x23
    2c1a:	9c a3       	std	Y+36, r25	; 0x24
    2c1c:	ad a3       	std	Y+37, r26	; 0x25
    2c1e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2c20:	6b a1       	ldd	r22, Y+35	; 0x23
    2c22:	7c a1       	ldd	r23, Y+36	; 0x24
    2c24:	8d a1       	ldd	r24, Y+37	; 0x25
    2c26:	9e a1       	ldd	r25, Y+38	; 0x26
    2c28:	20 e0       	ldi	r18, 0x00	; 0
    2c2a:	30 e0       	ldi	r19, 0x00	; 0
    2c2c:	40 e8       	ldi	r20, 0x80	; 128
    2c2e:	5f e3       	ldi	r21, 0x3F	; 63
    2c30:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c34:	88 23       	and	r24, r24
    2c36:	2c f4       	brge	.+10     	; 0x2c42 <LCD_VidSendData+0x184>
		__ticks = 1;
    2c38:	81 e0       	ldi	r24, 0x01	; 1
    2c3a:	90 e0       	ldi	r25, 0x00	; 0
    2c3c:	9a a3       	std	Y+34, r25	; 0x22
    2c3e:	89 a3       	std	Y+33, r24	; 0x21
    2c40:	3f c0       	rjmp	.+126    	; 0x2cc0 <LCD_VidSendData+0x202>
	else if (__tmp > 65535)
    2c42:	6b a1       	ldd	r22, Y+35	; 0x23
    2c44:	7c a1       	ldd	r23, Y+36	; 0x24
    2c46:	8d a1       	ldd	r24, Y+37	; 0x25
    2c48:	9e a1       	ldd	r25, Y+38	; 0x26
    2c4a:	20 e0       	ldi	r18, 0x00	; 0
    2c4c:	3f ef       	ldi	r19, 0xFF	; 255
    2c4e:	4f e7       	ldi	r20, 0x7F	; 127
    2c50:	57 e4       	ldi	r21, 0x47	; 71
    2c52:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c56:	18 16       	cp	r1, r24
    2c58:	4c f5       	brge	.+82     	; 0x2cac <LCD_VidSendData+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c5a:	6f a1       	ldd	r22, Y+39	; 0x27
    2c5c:	78 a5       	ldd	r23, Y+40	; 0x28
    2c5e:	89 a5       	ldd	r24, Y+41	; 0x29
    2c60:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c62:	20 e0       	ldi	r18, 0x00	; 0
    2c64:	30 e0       	ldi	r19, 0x00	; 0
    2c66:	40 e2       	ldi	r20, 0x20	; 32
    2c68:	51 e4       	ldi	r21, 0x41	; 65
    2c6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c6e:	dc 01       	movw	r26, r24
    2c70:	cb 01       	movw	r24, r22
    2c72:	bc 01       	movw	r22, r24
    2c74:	cd 01       	movw	r24, r26
    2c76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c7a:	dc 01       	movw	r26, r24
    2c7c:	cb 01       	movw	r24, r22
    2c7e:	9a a3       	std	Y+34, r25	; 0x22
    2c80:	89 a3       	std	Y+33, r24	; 0x21
    2c82:	0f c0       	rjmp	.+30     	; 0x2ca2 <LCD_VidSendData+0x1e4>
    2c84:	88 ec       	ldi	r24, 0xC8	; 200
    2c86:	90 e0       	ldi	r25, 0x00	; 0
    2c88:	98 a3       	std	Y+32, r25	; 0x20
    2c8a:	8f 8f       	std	Y+31, r24	; 0x1f
    2c8c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c8e:	98 a1       	ldd	r25, Y+32	; 0x20
    2c90:	01 97       	sbiw	r24, 0x01	; 1
    2c92:	f1 f7       	brne	.-4      	; 0x2c90 <LCD_VidSendData+0x1d2>
    2c94:	98 a3       	std	Y+32, r25	; 0x20
    2c96:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c98:	89 a1       	ldd	r24, Y+33	; 0x21
    2c9a:	9a a1       	ldd	r25, Y+34	; 0x22
    2c9c:	01 97       	sbiw	r24, 0x01	; 1
    2c9e:	9a a3       	std	Y+34, r25	; 0x22
    2ca0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ca2:	89 a1       	ldd	r24, Y+33	; 0x21
    2ca4:	9a a1       	ldd	r25, Y+34	; 0x22
    2ca6:	00 97       	sbiw	r24, 0x00	; 0
    2ca8:	69 f7       	brne	.-38     	; 0x2c84 <LCD_VidSendData+0x1c6>
    2caa:	14 c0       	rjmp	.+40     	; 0x2cd4 <LCD_VidSendData+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cac:	6b a1       	ldd	r22, Y+35	; 0x23
    2cae:	7c a1       	ldd	r23, Y+36	; 0x24
    2cb0:	8d a1       	ldd	r24, Y+37	; 0x25
    2cb2:	9e a1       	ldd	r25, Y+38	; 0x26
    2cb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cb8:	dc 01       	movw	r26, r24
    2cba:	cb 01       	movw	r24, r22
    2cbc:	9a a3       	std	Y+34, r25	; 0x22
    2cbe:	89 a3       	std	Y+33, r24	; 0x21
    2cc0:	89 a1       	ldd	r24, Y+33	; 0x21
    2cc2:	9a a1       	ldd	r25, Y+34	; 0x22
    2cc4:	9e 8f       	std	Y+30, r25	; 0x1e
    2cc6:	8d 8f       	std	Y+29, r24	; 0x1d
    2cc8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2cca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ccc:	01 97       	sbiw	r24, 0x01	; 1
    2cce:	f1 f7       	brne	.-4      	; 0x2ccc <LCD_VidSendData+0x20e>
    2cd0:	9e 8f       	std	Y+30, r25	; 0x1e
    2cd2:	8d 8f       	std	Y+29, r24	; 0x1d

		_delay_ms(2);

		DIO_VidSetPortValue(LDcopy_u8PORT,(LDcopy_u8PORT& 0x0F)|(copy_u8data<<4));
    2cd4:	89 ad       	ldd	r24, Y+57	; 0x39
    2cd6:	88 2f       	mov	r24, r24
    2cd8:	90 e0       	ldi	r25, 0x00	; 0
    2cda:	82 95       	swap	r24
    2cdc:	92 95       	swap	r25
    2cde:	90 7f       	andi	r25, 0xF0	; 240
    2ce0:	98 27       	eor	r25, r24
    2ce2:	80 7f       	andi	r24, 0xF0	; 240
    2ce4:	98 27       	eor	r25, r24
    2ce6:	82 60       	ori	r24, 0x02	; 2
    2ce8:	98 2f       	mov	r25, r24
    2cea:	82 e0       	ldi	r24, 0x02	; 2
    2cec:	69 2f       	mov	r22, r25
    2cee:	0e 94 cb 0b 	call	0x1796	; 0x1796 <DIO_VidSetPortValue>
		DIO_VidSetPinValue(Lcopy_u8PORT,  E_copy_u8Pin,1);  // E=1; Upload Command
    2cf2:	80 e0       	ldi	r24, 0x00	; 0
    2cf4:	62 e0       	ldi	r22, 0x02	; 2
    2cf6:	41 e0       	ldi	r20, 0x01	; 1
    2cf8:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <DIO_VidSetPinValue>
    2cfc:	80 e0       	ldi	r24, 0x00	; 0
    2cfe:	90 e0       	ldi	r25, 0x00	; 0
    2d00:	a0 e0       	ldi	r26, 0x00	; 0
    2d02:	b0 e4       	ldi	r27, 0x40	; 64
    2d04:	89 8f       	std	Y+25, r24	; 0x19
    2d06:	9a 8f       	std	Y+26, r25	; 0x1a
    2d08:	ab 8f       	std	Y+27, r26	; 0x1b
    2d0a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d0c:	69 8d       	ldd	r22, Y+25	; 0x19
    2d0e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d10:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d12:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d14:	20 e0       	ldi	r18, 0x00	; 0
    2d16:	30 e0       	ldi	r19, 0x00	; 0
    2d18:	4a ef       	ldi	r20, 0xFA	; 250
    2d1a:	54 e4       	ldi	r21, 0x44	; 68
    2d1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d20:	dc 01       	movw	r26, r24
    2d22:	cb 01       	movw	r24, r22
    2d24:	8d 8b       	std	Y+21, r24	; 0x15
    2d26:	9e 8b       	std	Y+22, r25	; 0x16
    2d28:	af 8b       	std	Y+23, r26	; 0x17
    2d2a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d2c:	6d 89       	ldd	r22, Y+21	; 0x15
    2d2e:	7e 89       	ldd	r23, Y+22	; 0x16
    2d30:	8f 89       	ldd	r24, Y+23	; 0x17
    2d32:	98 8d       	ldd	r25, Y+24	; 0x18
    2d34:	20 e0       	ldi	r18, 0x00	; 0
    2d36:	30 e0       	ldi	r19, 0x00	; 0
    2d38:	40 e8       	ldi	r20, 0x80	; 128
    2d3a:	5f e3       	ldi	r21, 0x3F	; 63
    2d3c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d40:	88 23       	and	r24, r24
    2d42:	2c f4       	brge	.+10     	; 0x2d4e <LCD_VidSendData+0x290>
		__ticks = 1;
    2d44:	81 e0       	ldi	r24, 0x01	; 1
    2d46:	90 e0       	ldi	r25, 0x00	; 0
    2d48:	9c 8b       	std	Y+20, r25	; 0x14
    2d4a:	8b 8b       	std	Y+19, r24	; 0x13
    2d4c:	3f c0       	rjmp	.+126    	; 0x2dcc <LCD_VidSendData+0x30e>
	else if (__tmp > 65535)
    2d4e:	6d 89       	ldd	r22, Y+21	; 0x15
    2d50:	7e 89       	ldd	r23, Y+22	; 0x16
    2d52:	8f 89       	ldd	r24, Y+23	; 0x17
    2d54:	98 8d       	ldd	r25, Y+24	; 0x18
    2d56:	20 e0       	ldi	r18, 0x00	; 0
    2d58:	3f ef       	ldi	r19, 0xFF	; 255
    2d5a:	4f e7       	ldi	r20, 0x7F	; 127
    2d5c:	57 e4       	ldi	r21, 0x47	; 71
    2d5e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d62:	18 16       	cp	r1, r24
    2d64:	4c f5       	brge	.+82     	; 0x2db8 <LCD_VidSendData+0x2fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d66:	69 8d       	ldd	r22, Y+25	; 0x19
    2d68:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d6a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d6c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d6e:	20 e0       	ldi	r18, 0x00	; 0
    2d70:	30 e0       	ldi	r19, 0x00	; 0
    2d72:	40 e2       	ldi	r20, 0x20	; 32
    2d74:	51 e4       	ldi	r21, 0x41	; 65
    2d76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d7a:	dc 01       	movw	r26, r24
    2d7c:	cb 01       	movw	r24, r22
    2d7e:	bc 01       	movw	r22, r24
    2d80:	cd 01       	movw	r24, r26
    2d82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d86:	dc 01       	movw	r26, r24
    2d88:	cb 01       	movw	r24, r22
    2d8a:	9c 8b       	std	Y+20, r25	; 0x14
    2d8c:	8b 8b       	std	Y+19, r24	; 0x13
    2d8e:	0f c0       	rjmp	.+30     	; 0x2dae <LCD_VidSendData+0x2f0>
    2d90:	88 ec       	ldi	r24, 0xC8	; 200
    2d92:	90 e0       	ldi	r25, 0x00	; 0
    2d94:	9a 8b       	std	Y+18, r25	; 0x12
    2d96:	89 8b       	std	Y+17, r24	; 0x11
    2d98:	89 89       	ldd	r24, Y+17	; 0x11
    2d9a:	9a 89       	ldd	r25, Y+18	; 0x12
    2d9c:	01 97       	sbiw	r24, 0x01	; 1
    2d9e:	f1 f7       	brne	.-4      	; 0x2d9c <LCD_VidSendData+0x2de>
    2da0:	9a 8b       	std	Y+18, r25	; 0x12
    2da2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2da4:	8b 89       	ldd	r24, Y+19	; 0x13
    2da6:	9c 89       	ldd	r25, Y+20	; 0x14
    2da8:	01 97       	sbiw	r24, 0x01	; 1
    2daa:	9c 8b       	std	Y+20, r25	; 0x14
    2dac:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dae:	8b 89       	ldd	r24, Y+19	; 0x13
    2db0:	9c 89       	ldd	r25, Y+20	; 0x14
    2db2:	00 97       	sbiw	r24, 0x00	; 0
    2db4:	69 f7       	brne	.-38     	; 0x2d90 <LCD_VidSendData+0x2d2>
    2db6:	14 c0       	rjmp	.+40     	; 0x2de0 <LCD_VidSendData+0x322>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2db8:	6d 89       	ldd	r22, Y+21	; 0x15
    2dba:	7e 89       	ldd	r23, Y+22	; 0x16
    2dbc:	8f 89       	ldd	r24, Y+23	; 0x17
    2dbe:	98 8d       	ldd	r25, Y+24	; 0x18
    2dc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dc4:	dc 01       	movw	r26, r24
    2dc6:	cb 01       	movw	r24, r22
    2dc8:	9c 8b       	std	Y+20, r25	; 0x14
    2dca:	8b 8b       	std	Y+19, r24	; 0x13
    2dcc:	8b 89       	ldd	r24, Y+19	; 0x13
    2dce:	9c 89       	ldd	r25, Y+20	; 0x14
    2dd0:	98 8b       	std	Y+16, r25	; 0x10
    2dd2:	8f 87       	std	Y+15, r24	; 0x0f
    2dd4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dd6:	98 89       	ldd	r25, Y+16	; 0x10
    2dd8:	01 97       	sbiw	r24, 0x01	; 1
    2dda:	f1 f7       	brne	.-4      	; 0x2dd8 <LCD_VidSendData+0x31a>
    2ddc:	98 8b       	std	Y+16, r25	; 0x10
    2dde:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2);
		DIO_VidSetPinValue(Lcopy_u8PORT,  E_copy_u8Pin,0);   // E=0 Display Command
    2de0:	80 e0       	ldi	r24, 0x00	; 0
    2de2:	62 e0       	ldi	r22, 0x02	; 2
    2de4:	40 e0       	ldi	r20, 0x00	; 0
    2de6:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <DIO_VidSetPinValue>
    2dea:	80 e0       	ldi	r24, 0x00	; 0
    2dec:	90 e0       	ldi	r25, 0x00	; 0
    2dee:	a0 e0       	ldi	r26, 0x00	; 0
    2df0:	b0 e4       	ldi	r27, 0x40	; 64
    2df2:	8b 87       	std	Y+11, r24	; 0x0b
    2df4:	9c 87       	std	Y+12, r25	; 0x0c
    2df6:	ad 87       	std	Y+13, r26	; 0x0d
    2df8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dfa:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dfc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dfe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e00:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e02:	20 e0       	ldi	r18, 0x00	; 0
    2e04:	30 e0       	ldi	r19, 0x00	; 0
    2e06:	4a ef       	ldi	r20, 0xFA	; 250
    2e08:	54 e4       	ldi	r21, 0x44	; 68
    2e0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e0e:	dc 01       	movw	r26, r24
    2e10:	cb 01       	movw	r24, r22
    2e12:	8f 83       	std	Y+7, r24	; 0x07
    2e14:	98 87       	std	Y+8, r25	; 0x08
    2e16:	a9 87       	std	Y+9, r26	; 0x09
    2e18:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e1a:	6f 81       	ldd	r22, Y+7	; 0x07
    2e1c:	78 85       	ldd	r23, Y+8	; 0x08
    2e1e:	89 85       	ldd	r24, Y+9	; 0x09
    2e20:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e22:	20 e0       	ldi	r18, 0x00	; 0
    2e24:	30 e0       	ldi	r19, 0x00	; 0
    2e26:	40 e8       	ldi	r20, 0x80	; 128
    2e28:	5f e3       	ldi	r21, 0x3F	; 63
    2e2a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e2e:	88 23       	and	r24, r24
    2e30:	2c f4       	brge	.+10     	; 0x2e3c <LCD_VidSendData+0x37e>
		__ticks = 1;
    2e32:	81 e0       	ldi	r24, 0x01	; 1
    2e34:	90 e0       	ldi	r25, 0x00	; 0
    2e36:	9e 83       	std	Y+6, r25	; 0x06
    2e38:	8d 83       	std	Y+5, r24	; 0x05
    2e3a:	3f c0       	rjmp	.+126    	; 0x2eba <LCD_VidSendData+0x3fc>
	else if (__tmp > 65535)
    2e3c:	6f 81       	ldd	r22, Y+7	; 0x07
    2e3e:	78 85       	ldd	r23, Y+8	; 0x08
    2e40:	89 85       	ldd	r24, Y+9	; 0x09
    2e42:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e44:	20 e0       	ldi	r18, 0x00	; 0
    2e46:	3f ef       	ldi	r19, 0xFF	; 255
    2e48:	4f e7       	ldi	r20, 0x7F	; 127
    2e4a:	57 e4       	ldi	r21, 0x47	; 71
    2e4c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e50:	18 16       	cp	r1, r24
    2e52:	4c f5       	brge	.+82     	; 0x2ea6 <LCD_VidSendData+0x3e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e54:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e56:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e58:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e5c:	20 e0       	ldi	r18, 0x00	; 0
    2e5e:	30 e0       	ldi	r19, 0x00	; 0
    2e60:	40 e2       	ldi	r20, 0x20	; 32
    2e62:	51 e4       	ldi	r21, 0x41	; 65
    2e64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e68:	dc 01       	movw	r26, r24
    2e6a:	cb 01       	movw	r24, r22
    2e6c:	bc 01       	movw	r22, r24
    2e6e:	cd 01       	movw	r24, r26
    2e70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e74:	dc 01       	movw	r26, r24
    2e76:	cb 01       	movw	r24, r22
    2e78:	9e 83       	std	Y+6, r25	; 0x06
    2e7a:	8d 83       	std	Y+5, r24	; 0x05
    2e7c:	0f c0       	rjmp	.+30     	; 0x2e9c <LCD_VidSendData+0x3de>
    2e7e:	88 ec       	ldi	r24, 0xC8	; 200
    2e80:	90 e0       	ldi	r25, 0x00	; 0
    2e82:	9c 83       	std	Y+4, r25	; 0x04
    2e84:	8b 83       	std	Y+3, r24	; 0x03
    2e86:	8b 81       	ldd	r24, Y+3	; 0x03
    2e88:	9c 81       	ldd	r25, Y+4	; 0x04
    2e8a:	01 97       	sbiw	r24, 0x01	; 1
    2e8c:	f1 f7       	brne	.-4      	; 0x2e8a <LCD_VidSendData+0x3cc>
    2e8e:	9c 83       	std	Y+4, r25	; 0x04
    2e90:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e92:	8d 81       	ldd	r24, Y+5	; 0x05
    2e94:	9e 81       	ldd	r25, Y+6	; 0x06
    2e96:	01 97       	sbiw	r24, 0x01	; 1
    2e98:	9e 83       	std	Y+6, r25	; 0x06
    2e9a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e9c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e9e:	9e 81       	ldd	r25, Y+6	; 0x06
    2ea0:	00 97       	sbiw	r24, 0x00	; 0
    2ea2:	69 f7       	brne	.-38     	; 0x2e7e <LCD_VidSendData+0x3c0>
    2ea4:	14 c0       	rjmp	.+40     	; 0x2ece <LCD_VidSendData+0x410>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ea6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ea8:	78 85       	ldd	r23, Y+8	; 0x08
    2eaa:	89 85       	ldd	r24, Y+9	; 0x09
    2eac:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eb2:	dc 01       	movw	r26, r24
    2eb4:	cb 01       	movw	r24, r22
    2eb6:	9e 83       	std	Y+6, r25	; 0x06
    2eb8:	8d 83       	std	Y+5, r24	; 0x05
    2eba:	8d 81       	ldd	r24, Y+5	; 0x05
    2ebc:	9e 81       	ldd	r25, Y+6	; 0x06
    2ebe:	9a 83       	std	Y+2, r25	; 0x02
    2ec0:	89 83       	std	Y+1, r24	; 0x01
    2ec2:	89 81       	ldd	r24, Y+1	; 0x01
    2ec4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ec6:	01 97       	sbiw	r24, 0x01	; 1
    2ec8:	f1 f7       	brne	.-4      	; 0x2ec6 <LCD_VidSendData+0x408>
    2eca:	9a 83       	std	Y+2, r25	; 0x02
    2ecc:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);

	#endif
}
    2ece:	e9 96       	adiw	r28, 0x39	; 57
    2ed0:	0f b6       	in	r0, 0x3f	; 63
    2ed2:	f8 94       	cli
    2ed4:	de bf       	out	0x3e, r29	; 62
    2ed6:	0f be       	out	0x3f, r0	; 63
    2ed8:	cd bf       	out	0x3d, r28	; 61
    2eda:	cf 91       	pop	r28
    2edc:	df 91       	pop	r29
    2ede:	08 95       	ret

00002ee0 <LCD_VidSendCommand>:

void LCD_VidSendCommand(u8 copy_u8command)
{
    2ee0:	0f 93       	push	r16
    2ee2:	1f 93       	push	r17
    2ee4:	df 93       	push	r29
    2ee6:	cf 93       	push	r28
    2ee8:	cd b7       	in	r28, 0x3d	; 61
    2eea:	de b7       	in	r29, 0x3e	; 62
    2eec:	c7 54       	subi	r28, 0x47	; 71
    2eee:	d0 40       	sbci	r29, 0x00	; 0
    2ef0:	0f b6       	in	r0, 0x3f	; 63
    2ef2:	f8 94       	cli
    2ef4:	de bf       	out	0x3e, r29	; 62
    2ef6:	0f be       	out	0x3f, r0	; 63
    2ef8:	cd bf       	out	0x3d, r28	; 61
    2efa:	fe 01       	movw	r30, r28
    2efc:	e9 5b       	subi	r30, 0xB9	; 185
    2efe:	ff 4f       	sbci	r31, 0xFF	; 255
    2f00:	80 83       	st	Z, r24
	_delay_ms(2);
	
	
	
	#elif LCD_Mode==FOUR_BIT
	DIO_VidSetPortValue(LDcopy_u8PORT,(LDcopy_u8PORT& 0x0F)|(copy_u8command&0xF0));
    2f02:	fe 01       	movw	r30, r28
    2f04:	e9 5b       	subi	r30, 0xB9	; 185
    2f06:	ff 4f       	sbci	r31, 0xFF	; 255
    2f08:	80 81       	ld	r24, Z
    2f0a:	80 7f       	andi	r24, 0xF0	; 240
    2f0c:	82 60       	ori	r24, 0x02	; 2
    2f0e:	98 2f       	mov	r25, r24
    2f10:	82 e0       	ldi	r24, 0x02	; 2
    2f12:	69 2f       	mov	r22, r25
    2f14:	0e 94 cb 0b 	call	0x1796	; 0x1796 <DIO_VidSetPortValue>
	DIO_VidSetPinValue(Lcopy_u8PORT,  RS_copy_u8Pin,0);
    2f18:	80 e0       	ldi	r24, 0x00	; 0
    2f1a:	60 e0       	ldi	r22, 0x00	; 0
    2f1c:	40 e0       	ldi	r20, 0x00	; 0
    2f1e:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(Lcopy_u8PORT,  R_w_copy_u8Pin,0);
    2f22:	80 e0       	ldi	r24, 0x00	; 0
    2f24:	61 e0       	ldi	r22, 0x01	; 1
    2f26:	40 e0       	ldi	r20, 0x00	; 0
    2f28:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(Lcopy_u8PORT,  E_copy_u8Pin,1);
    2f2c:	80 e0       	ldi	r24, 0x00	; 0
    2f2e:	62 e0       	ldi	r22, 0x02	; 2
    2f30:	41 e0       	ldi	r20, 0x01	; 1
    2f32:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <DIO_VidSetPinValue>
    2f36:	fe 01       	movw	r30, r28
    2f38:	ed 5b       	subi	r30, 0xBD	; 189
    2f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f3c:	80 e0       	ldi	r24, 0x00	; 0
    2f3e:	90 e0       	ldi	r25, 0x00	; 0
    2f40:	a0 e0       	ldi	r26, 0x00	; 0
    2f42:	b0 e4       	ldi	r27, 0x40	; 64
    2f44:	80 83       	st	Z, r24
    2f46:	91 83       	std	Z+1, r25	; 0x01
    2f48:	a2 83       	std	Z+2, r26	; 0x02
    2f4a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f4c:	8e 01       	movw	r16, r28
    2f4e:	01 5c       	subi	r16, 0xC1	; 193
    2f50:	1f 4f       	sbci	r17, 0xFF	; 255
    2f52:	fe 01       	movw	r30, r28
    2f54:	ed 5b       	subi	r30, 0xBD	; 189
    2f56:	ff 4f       	sbci	r31, 0xFF	; 255
    2f58:	60 81       	ld	r22, Z
    2f5a:	71 81       	ldd	r23, Z+1	; 0x01
    2f5c:	82 81       	ldd	r24, Z+2	; 0x02
    2f5e:	93 81       	ldd	r25, Z+3	; 0x03
    2f60:	20 e0       	ldi	r18, 0x00	; 0
    2f62:	30 e0       	ldi	r19, 0x00	; 0
    2f64:	4a ef       	ldi	r20, 0xFA	; 250
    2f66:	54 e4       	ldi	r21, 0x44	; 68
    2f68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f6c:	dc 01       	movw	r26, r24
    2f6e:	cb 01       	movw	r24, r22
    2f70:	f8 01       	movw	r30, r16
    2f72:	80 83       	st	Z, r24
    2f74:	91 83       	std	Z+1, r25	; 0x01
    2f76:	a2 83       	std	Z+2, r26	; 0x02
    2f78:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f7a:	fe 01       	movw	r30, r28
    2f7c:	ff 96       	adiw	r30, 0x3f	; 63
    2f7e:	60 81       	ld	r22, Z
    2f80:	71 81       	ldd	r23, Z+1	; 0x01
    2f82:	82 81       	ldd	r24, Z+2	; 0x02
    2f84:	93 81       	ldd	r25, Z+3	; 0x03
    2f86:	20 e0       	ldi	r18, 0x00	; 0
    2f88:	30 e0       	ldi	r19, 0x00	; 0
    2f8a:	40 e8       	ldi	r20, 0x80	; 128
    2f8c:	5f e3       	ldi	r21, 0x3F	; 63
    2f8e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f92:	88 23       	and	r24, r24
    2f94:	2c f4       	brge	.+10     	; 0x2fa0 <LCD_VidSendCommand+0xc0>
		__ticks = 1;
    2f96:	81 e0       	ldi	r24, 0x01	; 1
    2f98:	90 e0       	ldi	r25, 0x00	; 0
    2f9a:	9e af       	std	Y+62, r25	; 0x3e
    2f9c:	8d af       	std	Y+61, r24	; 0x3d
    2f9e:	46 c0       	rjmp	.+140    	; 0x302c <LCD_VidSendCommand+0x14c>
	else if (__tmp > 65535)
    2fa0:	fe 01       	movw	r30, r28
    2fa2:	ff 96       	adiw	r30, 0x3f	; 63
    2fa4:	60 81       	ld	r22, Z
    2fa6:	71 81       	ldd	r23, Z+1	; 0x01
    2fa8:	82 81       	ldd	r24, Z+2	; 0x02
    2faa:	93 81       	ldd	r25, Z+3	; 0x03
    2fac:	20 e0       	ldi	r18, 0x00	; 0
    2fae:	3f ef       	ldi	r19, 0xFF	; 255
    2fb0:	4f e7       	ldi	r20, 0x7F	; 127
    2fb2:	57 e4       	ldi	r21, 0x47	; 71
    2fb4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fb8:	18 16       	cp	r1, r24
    2fba:	64 f5       	brge	.+88     	; 0x3014 <LCD_VidSendCommand+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fbc:	fe 01       	movw	r30, r28
    2fbe:	ed 5b       	subi	r30, 0xBD	; 189
    2fc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc2:	60 81       	ld	r22, Z
    2fc4:	71 81       	ldd	r23, Z+1	; 0x01
    2fc6:	82 81       	ldd	r24, Z+2	; 0x02
    2fc8:	93 81       	ldd	r25, Z+3	; 0x03
    2fca:	20 e0       	ldi	r18, 0x00	; 0
    2fcc:	30 e0       	ldi	r19, 0x00	; 0
    2fce:	40 e2       	ldi	r20, 0x20	; 32
    2fd0:	51 e4       	ldi	r21, 0x41	; 65
    2fd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fd6:	dc 01       	movw	r26, r24
    2fd8:	cb 01       	movw	r24, r22
    2fda:	bc 01       	movw	r22, r24
    2fdc:	cd 01       	movw	r24, r26
    2fde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fe2:	dc 01       	movw	r26, r24
    2fe4:	cb 01       	movw	r24, r22
    2fe6:	9e af       	std	Y+62, r25	; 0x3e
    2fe8:	8d af       	std	Y+61, r24	; 0x3d
    2fea:	0f c0       	rjmp	.+30     	; 0x300a <LCD_VidSendCommand+0x12a>
    2fec:	88 ec       	ldi	r24, 0xC8	; 200
    2fee:	90 e0       	ldi	r25, 0x00	; 0
    2ff0:	9c af       	std	Y+60, r25	; 0x3c
    2ff2:	8b af       	std	Y+59, r24	; 0x3b
    2ff4:	8b ad       	ldd	r24, Y+59	; 0x3b
    2ff6:	9c ad       	ldd	r25, Y+60	; 0x3c
    2ff8:	01 97       	sbiw	r24, 0x01	; 1
    2ffa:	f1 f7       	brne	.-4      	; 0x2ff8 <LCD_VidSendCommand+0x118>
    2ffc:	9c af       	std	Y+60, r25	; 0x3c
    2ffe:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3000:	8d ad       	ldd	r24, Y+61	; 0x3d
    3002:	9e ad       	ldd	r25, Y+62	; 0x3e
    3004:	01 97       	sbiw	r24, 0x01	; 1
    3006:	9e af       	std	Y+62, r25	; 0x3e
    3008:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    300a:	8d ad       	ldd	r24, Y+61	; 0x3d
    300c:	9e ad       	ldd	r25, Y+62	; 0x3e
    300e:	00 97       	sbiw	r24, 0x00	; 0
    3010:	69 f7       	brne	.-38     	; 0x2fec <LCD_VidSendCommand+0x10c>
    3012:	16 c0       	rjmp	.+44     	; 0x3040 <LCD_VidSendCommand+0x160>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3014:	fe 01       	movw	r30, r28
    3016:	ff 96       	adiw	r30, 0x3f	; 63
    3018:	60 81       	ld	r22, Z
    301a:	71 81       	ldd	r23, Z+1	; 0x01
    301c:	82 81       	ldd	r24, Z+2	; 0x02
    301e:	93 81       	ldd	r25, Z+3	; 0x03
    3020:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3024:	dc 01       	movw	r26, r24
    3026:	cb 01       	movw	r24, r22
    3028:	9e af       	std	Y+62, r25	; 0x3e
    302a:	8d af       	std	Y+61, r24	; 0x3d
    302c:	8d ad       	ldd	r24, Y+61	; 0x3d
    302e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3030:	9a af       	std	Y+58, r25	; 0x3a
    3032:	89 af       	std	Y+57, r24	; 0x39
    3034:	89 ad       	ldd	r24, Y+57	; 0x39
    3036:	9a ad       	ldd	r25, Y+58	; 0x3a
    3038:	01 97       	sbiw	r24, 0x01	; 1
    303a:	f1 f7       	brne	.-4      	; 0x3038 <LCD_VidSendCommand+0x158>
    303c:	9a af       	std	Y+58, r25	; 0x3a
    303e:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(2);
	DIO_VidSetPinValue(Lcopy_u8PORT,  E_copy_u8Pin,0);
    3040:	80 e0       	ldi	r24, 0x00	; 0
    3042:	62 e0       	ldi	r22, 0x02	; 2
    3044:	40 e0       	ldi	r20, 0x00	; 0
    3046:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <DIO_VidSetPinValue>
    304a:	80 e0       	ldi	r24, 0x00	; 0
    304c:	90 e0       	ldi	r25, 0x00	; 0
    304e:	a0 e0       	ldi	r26, 0x00	; 0
    3050:	b0 e4       	ldi	r27, 0x40	; 64
    3052:	8d ab       	std	Y+53, r24	; 0x35
    3054:	9e ab       	std	Y+54, r25	; 0x36
    3056:	af ab       	std	Y+55, r26	; 0x37
    3058:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    305a:	6d a9       	ldd	r22, Y+53	; 0x35
    305c:	7e a9       	ldd	r23, Y+54	; 0x36
    305e:	8f a9       	ldd	r24, Y+55	; 0x37
    3060:	98 ad       	ldd	r25, Y+56	; 0x38
    3062:	20 e0       	ldi	r18, 0x00	; 0
    3064:	30 e0       	ldi	r19, 0x00	; 0
    3066:	4a ef       	ldi	r20, 0xFA	; 250
    3068:	54 e4       	ldi	r21, 0x44	; 68
    306a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    306e:	dc 01       	movw	r26, r24
    3070:	cb 01       	movw	r24, r22
    3072:	89 ab       	std	Y+49, r24	; 0x31
    3074:	9a ab       	std	Y+50, r25	; 0x32
    3076:	ab ab       	std	Y+51, r26	; 0x33
    3078:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    307a:	69 a9       	ldd	r22, Y+49	; 0x31
    307c:	7a a9       	ldd	r23, Y+50	; 0x32
    307e:	8b a9       	ldd	r24, Y+51	; 0x33
    3080:	9c a9       	ldd	r25, Y+52	; 0x34
    3082:	20 e0       	ldi	r18, 0x00	; 0
    3084:	30 e0       	ldi	r19, 0x00	; 0
    3086:	40 e8       	ldi	r20, 0x80	; 128
    3088:	5f e3       	ldi	r21, 0x3F	; 63
    308a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    308e:	88 23       	and	r24, r24
    3090:	2c f4       	brge	.+10     	; 0x309c <LCD_VidSendCommand+0x1bc>
		__ticks = 1;
    3092:	81 e0       	ldi	r24, 0x01	; 1
    3094:	90 e0       	ldi	r25, 0x00	; 0
    3096:	98 ab       	std	Y+48, r25	; 0x30
    3098:	8f a7       	std	Y+47, r24	; 0x2f
    309a:	3f c0       	rjmp	.+126    	; 0x311a <LCD_VidSendCommand+0x23a>
	else if (__tmp > 65535)
    309c:	69 a9       	ldd	r22, Y+49	; 0x31
    309e:	7a a9       	ldd	r23, Y+50	; 0x32
    30a0:	8b a9       	ldd	r24, Y+51	; 0x33
    30a2:	9c a9       	ldd	r25, Y+52	; 0x34
    30a4:	20 e0       	ldi	r18, 0x00	; 0
    30a6:	3f ef       	ldi	r19, 0xFF	; 255
    30a8:	4f e7       	ldi	r20, 0x7F	; 127
    30aa:	57 e4       	ldi	r21, 0x47	; 71
    30ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30b0:	18 16       	cp	r1, r24
    30b2:	4c f5       	brge	.+82     	; 0x3106 <LCD_VidSendCommand+0x226>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30b4:	6d a9       	ldd	r22, Y+53	; 0x35
    30b6:	7e a9       	ldd	r23, Y+54	; 0x36
    30b8:	8f a9       	ldd	r24, Y+55	; 0x37
    30ba:	98 ad       	ldd	r25, Y+56	; 0x38
    30bc:	20 e0       	ldi	r18, 0x00	; 0
    30be:	30 e0       	ldi	r19, 0x00	; 0
    30c0:	40 e2       	ldi	r20, 0x20	; 32
    30c2:	51 e4       	ldi	r21, 0x41	; 65
    30c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30c8:	dc 01       	movw	r26, r24
    30ca:	cb 01       	movw	r24, r22
    30cc:	bc 01       	movw	r22, r24
    30ce:	cd 01       	movw	r24, r26
    30d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30d4:	dc 01       	movw	r26, r24
    30d6:	cb 01       	movw	r24, r22
    30d8:	98 ab       	std	Y+48, r25	; 0x30
    30da:	8f a7       	std	Y+47, r24	; 0x2f
    30dc:	0f c0       	rjmp	.+30     	; 0x30fc <LCD_VidSendCommand+0x21c>
    30de:	88 ec       	ldi	r24, 0xC8	; 200
    30e0:	90 e0       	ldi	r25, 0x00	; 0
    30e2:	9e a7       	std	Y+46, r25	; 0x2e
    30e4:	8d a7       	std	Y+45, r24	; 0x2d
    30e6:	8d a5       	ldd	r24, Y+45	; 0x2d
    30e8:	9e a5       	ldd	r25, Y+46	; 0x2e
    30ea:	01 97       	sbiw	r24, 0x01	; 1
    30ec:	f1 f7       	brne	.-4      	; 0x30ea <LCD_VidSendCommand+0x20a>
    30ee:	9e a7       	std	Y+46, r25	; 0x2e
    30f0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    30f4:	98 a9       	ldd	r25, Y+48	; 0x30
    30f6:	01 97       	sbiw	r24, 0x01	; 1
    30f8:	98 ab       	std	Y+48, r25	; 0x30
    30fa:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    30fe:	98 a9       	ldd	r25, Y+48	; 0x30
    3100:	00 97       	sbiw	r24, 0x00	; 0
    3102:	69 f7       	brne	.-38     	; 0x30de <LCD_VidSendCommand+0x1fe>
    3104:	14 c0       	rjmp	.+40     	; 0x312e <LCD_VidSendCommand+0x24e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3106:	69 a9       	ldd	r22, Y+49	; 0x31
    3108:	7a a9       	ldd	r23, Y+50	; 0x32
    310a:	8b a9       	ldd	r24, Y+51	; 0x33
    310c:	9c a9       	ldd	r25, Y+52	; 0x34
    310e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3112:	dc 01       	movw	r26, r24
    3114:	cb 01       	movw	r24, r22
    3116:	98 ab       	std	Y+48, r25	; 0x30
    3118:	8f a7       	std	Y+47, r24	; 0x2f
    311a:	8f a5       	ldd	r24, Y+47	; 0x2f
    311c:	98 a9       	ldd	r25, Y+48	; 0x30
    311e:	9c a7       	std	Y+44, r25	; 0x2c
    3120:	8b a7       	std	Y+43, r24	; 0x2b
    3122:	8b a5       	ldd	r24, Y+43	; 0x2b
    3124:	9c a5       	ldd	r25, Y+44	; 0x2c
    3126:	01 97       	sbiw	r24, 0x01	; 1
    3128:	f1 f7       	brne	.-4      	; 0x3126 <LCD_VidSendCommand+0x246>
    312a:	9c a7       	std	Y+44, r25	; 0x2c
    312c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	DIO_VidSetPortValue(LDcopy_u8PORT,(LDcopy_u8PORT& 0x0F)|(copy_u8command<<4)); /* Sending lower cmnds */
    312e:	fe 01       	movw	r30, r28
    3130:	e9 5b       	subi	r30, 0xB9	; 185
    3132:	ff 4f       	sbci	r31, 0xFF	; 255
    3134:	80 81       	ld	r24, Z
    3136:	88 2f       	mov	r24, r24
    3138:	90 e0       	ldi	r25, 0x00	; 0
    313a:	82 95       	swap	r24
    313c:	92 95       	swap	r25
    313e:	90 7f       	andi	r25, 0xF0	; 240
    3140:	98 27       	eor	r25, r24
    3142:	80 7f       	andi	r24, 0xF0	; 240
    3144:	98 27       	eor	r25, r24
    3146:	82 60       	ori	r24, 0x02	; 2
    3148:	98 2f       	mov	r25, r24
    314a:	82 e0       	ldi	r24, 0x02	; 2
    314c:	69 2f       	mov	r22, r25
    314e:	0e 94 cb 0b 	call	0x1796	; 0x1796 <DIO_VidSetPortValue>
	DIO_VidSetPinValue(Lcopy_u8PORT,  E_copy_u8Pin,1);
    3152:	80 e0       	ldi	r24, 0x00	; 0
    3154:	62 e0       	ldi	r22, 0x02	; 2
    3156:	41 e0       	ldi	r20, 0x01	; 1
    3158:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <DIO_VidSetPinValue>
    315c:	80 e0       	ldi	r24, 0x00	; 0
    315e:	90 e0       	ldi	r25, 0x00	; 0
    3160:	a0 e0       	ldi	r26, 0x00	; 0
    3162:	b0 e4       	ldi	r27, 0x40	; 64
    3164:	8f a3       	std	Y+39, r24	; 0x27
    3166:	98 a7       	std	Y+40, r25	; 0x28
    3168:	a9 a7       	std	Y+41, r26	; 0x29
    316a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    316c:	6f a1       	ldd	r22, Y+39	; 0x27
    316e:	78 a5       	ldd	r23, Y+40	; 0x28
    3170:	89 a5       	ldd	r24, Y+41	; 0x29
    3172:	9a a5       	ldd	r25, Y+42	; 0x2a
    3174:	20 e0       	ldi	r18, 0x00	; 0
    3176:	30 e0       	ldi	r19, 0x00	; 0
    3178:	4a ef       	ldi	r20, 0xFA	; 250
    317a:	54 e4       	ldi	r21, 0x44	; 68
    317c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3180:	dc 01       	movw	r26, r24
    3182:	cb 01       	movw	r24, r22
    3184:	8b a3       	std	Y+35, r24	; 0x23
    3186:	9c a3       	std	Y+36, r25	; 0x24
    3188:	ad a3       	std	Y+37, r26	; 0x25
    318a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    318c:	6b a1       	ldd	r22, Y+35	; 0x23
    318e:	7c a1       	ldd	r23, Y+36	; 0x24
    3190:	8d a1       	ldd	r24, Y+37	; 0x25
    3192:	9e a1       	ldd	r25, Y+38	; 0x26
    3194:	20 e0       	ldi	r18, 0x00	; 0
    3196:	30 e0       	ldi	r19, 0x00	; 0
    3198:	40 e8       	ldi	r20, 0x80	; 128
    319a:	5f e3       	ldi	r21, 0x3F	; 63
    319c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31a0:	88 23       	and	r24, r24
    31a2:	2c f4       	brge	.+10     	; 0x31ae <LCD_VidSendCommand+0x2ce>
		__ticks = 1;
    31a4:	81 e0       	ldi	r24, 0x01	; 1
    31a6:	90 e0       	ldi	r25, 0x00	; 0
    31a8:	9a a3       	std	Y+34, r25	; 0x22
    31aa:	89 a3       	std	Y+33, r24	; 0x21
    31ac:	3f c0       	rjmp	.+126    	; 0x322c <LCD_VidSendCommand+0x34c>
	else if (__tmp > 65535)
    31ae:	6b a1       	ldd	r22, Y+35	; 0x23
    31b0:	7c a1       	ldd	r23, Y+36	; 0x24
    31b2:	8d a1       	ldd	r24, Y+37	; 0x25
    31b4:	9e a1       	ldd	r25, Y+38	; 0x26
    31b6:	20 e0       	ldi	r18, 0x00	; 0
    31b8:	3f ef       	ldi	r19, 0xFF	; 255
    31ba:	4f e7       	ldi	r20, 0x7F	; 127
    31bc:	57 e4       	ldi	r21, 0x47	; 71
    31be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31c2:	18 16       	cp	r1, r24
    31c4:	4c f5       	brge	.+82     	; 0x3218 <LCD_VidSendCommand+0x338>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31c6:	6f a1       	ldd	r22, Y+39	; 0x27
    31c8:	78 a5       	ldd	r23, Y+40	; 0x28
    31ca:	89 a5       	ldd	r24, Y+41	; 0x29
    31cc:	9a a5       	ldd	r25, Y+42	; 0x2a
    31ce:	20 e0       	ldi	r18, 0x00	; 0
    31d0:	30 e0       	ldi	r19, 0x00	; 0
    31d2:	40 e2       	ldi	r20, 0x20	; 32
    31d4:	51 e4       	ldi	r21, 0x41	; 65
    31d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31da:	dc 01       	movw	r26, r24
    31dc:	cb 01       	movw	r24, r22
    31de:	bc 01       	movw	r22, r24
    31e0:	cd 01       	movw	r24, r26
    31e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31e6:	dc 01       	movw	r26, r24
    31e8:	cb 01       	movw	r24, r22
    31ea:	9a a3       	std	Y+34, r25	; 0x22
    31ec:	89 a3       	std	Y+33, r24	; 0x21
    31ee:	0f c0       	rjmp	.+30     	; 0x320e <LCD_VidSendCommand+0x32e>
    31f0:	88 ec       	ldi	r24, 0xC8	; 200
    31f2:	90 e0       	ldi	r25, 0x00	; 0
    31f4:	98 a3       	std	Y+32, r25	; 0x20
    31f6:	8f 8f       	std	Y+31, r24	; 0x1f
    31f8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    31fa:	98 a1       	ldd	r25, Y+32	; 0x20
    31fc:	01 97       	sbiw	r24, 0x01	; 1
    31fe:	f1 f7       	brne	.-4      	; 0x31fc <LCD_VidSendCommand+0x31c>
    3200:	98 a3       	std	Y+32, r25	; 0x20
    3202:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3204:	89 a1       	ldd	r24, Y+33	; 0x21
    3206:	9a a1       	ldd	r25, Y+34	; 0x22
    3208:	01 97       	sbiw	r24, 0x01	; 1
    320a:	9a a3       	std	Y+34, r25	; 0x22
    320c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    320e:	89 a1       	ldd	r24, Y+33	; 0x21
    3210:	9a a1       	ldd	r25, Y+34	; 0x22
    3212:	00 97       	sbiw	r24, 0x00	; 0
    3214:	69 f7       	brne	.-38     	; 0x31f0 <LCD_VidSendCommand+0x310>
    3216:	14 c0       	rjmp	.+40     	; 0x3240 <LCD_VidSendCommand+0x360>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3218:	6b a1       	ldd	r22, Y+35	; 0x23
    321a:	7c a1       	ldd	r23, Y+36	; 0x24
    321c:	8d a1       	ldd	r24, Y+37	; 0x25
    321e:	9e a1       	ldd	r25, Y+38	; 0x26
    3220:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3224:	dc 01       	movw	r26, r24
    3226:	cb 01       	movw	r24, r22
    3228:	9a a3       	std	Y+34, r25	; 0x22
    322a:	89 a3       	std	Y+33, r24	; 0x21
    322c:	89 a1       	ldd	r24, Y+33	; 0x21
    322e:	9a a1       	ldd	r25, Y+34	; 0x22
    3230:	9e 8f       	std	Y+30, r25	; 0x1e
    3232:	8d 8f       	std	Y+29, r24	; 0x1d
    3234:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3236:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3238:	01 97       	sbiw	r24, 0x01	; 1
    323a:	f1 f7       	brne	.-4      	; 0x3238 <LCD_VidSendCommand+0x358>
    323c:	9e 8f       	std	Y+30, r25	; 0x1e
    323e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	DIO_VidSetPinValue(Lcopy_u8PORT,  E_copy_u8Pin,0);
    3240:	80 e0       	ldi	r24, 0x00	; 0
    3242:	62 e0       	ldi	r22, 0x02	; 2
    3244:	40 e0       	ldi	r20, 0x00	; 0
    3246:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <DIO_VidSetPinValue>
    324a:	80 e0       	ldi	r24, 0x00	; 0
    324c:	90 e0       	ldi	r25, 0x00	; 0
    324e:	a0 e0       	ldi	r26, 0x00	; 0
    3250:	b0 e4       	ldi	r27, 0x40	; 64
    3252:	89 8f       	std	Y+25, r24	; 0x19
    3254:	9a 8f       	std	Y+26, r25	; 0x1a
    3256:	ab 8f       	std	Y+27, r26	; 0x1b
    3258:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    325a:	69 8d       	ldd	r22, Y+25	; 0x19
    325c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    325e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3260:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3262:	20 e0       	ldi	r18, 0x00	; 0
    3264:	30 e0       	ldi	r19, 0x00	; 0
    3266:	4a ef       	ldi	r20, 0xFA	; 250
    3268:	54 e4       	ldi	r21, 0x44	; 68
    326a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    326e:	dc 01       	movw	r26, r24
    3270:	cb 01       	movw	r24, r22
    3272:	8d 8b       	std	Y+21, r24	; 0x15
    3274:	9e 8b       	std	Y+22, r25	; 0x16
    3276:	af 8b       	std	Y+23, r26	; 0x17
    3278:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    327a:	6d 89       	ldd	r22, Y+21	; 0x15
    327c:	7e 89       	ldd	r23, Y+22	; 0x16
    327e:	8f 89       	ldd	r24, Y+23	; 0x17
    3280:	98 8d       	ldd	r25, Y+24	; 0x18
    3282:	20 e0       	ldi	r18, 0x00	; 0
    3284:	30 e0       	ldi	r19, 0x00	; 0
    3286:	40 e8       	ldi	r20, 0x80	; 128
    3288:	5f e3       	ldi	r21, 0x3F	; 63
    328a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    328e:	88 23       	and	r24, r24
    3290:	2c f4       	brge	.+10     	; 0x329c <LCD_VidSendCommand+0x3bc>
		__ticks = 1;
    3292:	81 e0       	ldi	r24, 0x01	; 1
    3294:	90 e0       	ldi	r25, 0x00	; 0
    3296:	9c 8b       	std	Y+20, r25	; 0x14
    3298:	8b 8b       	std	Y+19, r24	; 0x13
    329a:	3f c0       	rjmp	.+126    	; 0x331a <LCD_VidSendCommand+0x43a>
	else if (__tmp > 65535)
    329c:	6d 89       	ldd	r22, Y+21	; 0x15
    329e:	7e 89       	ldd	r23, Y+22	; 0x16
    32a0:	8f 89       	ldd	r24, Y+23	; 0x17
    32a2:	98 8d       	ldd	r25, Y+24	; 0x18
    32a4:	20 e0       	ldi	r18, 0x00	; 0
    32a6:	3f ef       	ldi	r19, 0xFF	; 255
    32a8:	4f e7       	ldi	r20, 0x7F	; 127
    32aa:	57 e4       	ldi	r21, 0x47	; 71
    32ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32b0:	18 16       	cp	r1, r24
    32b2:	4c f5       	brge	.+82     	; 0x3306 <LCD_VidSendCommand+0x426>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32b4:	69 8d       	ldd	r22, Y+25	; 0x19
    32b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32bc:	20 e0       	ldi	r18, 0x00	; 0
    32be:	30 e0       	ldi	r19, 0x00	; 0
    32c0:	40 e2       	ldi	r20, 0x20	; 32
    32c2:	51 e4       	ldi	r21, 0x41	; 65
    32c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32c8:	dc 01       	movw	r26, r24
    32ca:	cb 01       	movw	r24, r22
    32cc:	bc 01       	movw	r22, r24
    32ce:	cd 01       	movw	r24, r26
    32d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32d4:	dc 01       	movw	r26, r24
    32d6:	cb 01       	movw	r24, r22
    32d8:	9c 8b       	std	Y+20, r25	; 0x14
    32da:	8b 8b       	std	Y+19, r24	; 0x13
    32dc:	0f c0       	rjmp	.+30     	; 0x32fc <LCD_VidSendCommand+0x41c>
    32de:	88 ec       	ldi	r24, 0xC8	; 200
    32e0:	90 e0       	ldi	r25, 0x00	; 0
    32e2:	9a 8b       	std	Y+18, r25	; 0x12
    32e4:	89 8b       	std	Y+17, r24	; 0x11
    32e6:	89 89       	ldd	r24, Y+17	; 0x11
    32e8:	9a 89       	ldd	r25, Y+18	; 0x12
    32ea:	01 97       	sbiw	r24, 0x01	; 1
    32ec:	f1 f7       	brne	.-4      	; 0x32ea <LCD_VidSendCommand+0x40a>
    32ee:	9a 8b       	std	Y+18, r25	; 0x12
    32f0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32f2:	8b 89       	ldd	r24, Y+19	; 0x13
    32f4:	9c 89       	ldd	r25, Y+20	; 0x14
    32f6:	01 97       	sbiw	r24, 0x01	; 1
    32f8:	9c 8b       	std	Y+20, r25	; 0x14
    32fa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32fc:	8b 89       	ldd	r24, Y+19	; 0x13
    32fe:	9c 89       	ldd	r25, Y+20	; 0x14
    3300:	00 97       	sbiw	r24, 0x00	; 0
    3302:	69 f7       	brne	.-38     	; 0x32de <LCD_VidSendCommand+0x3fe>
    3304:	14 c0       	rjmp	.+40     	; 0x332e <LCD_VidSendCommand+0x44e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3306:	6d 89       	ldd	r22, Y+21	; 0x15
    3308:	7e 89       	ldd	r23, Y+22	; 0x16
    330a:	8f 89       	ldd	r24, Y+23	; 0x17
    330c:	98 8d       	ldd	r25, Y+24	; 0x18
    330e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3312:	dc 01       	movw	r26, r24
    3314:	cb 01       	movw	r24, r22
    3316:	9c 8b       	std	Y+20, r25	; 0x14
    3318:	8b 8b       	std	Y+19, r24	; 0x13
    331a:	8b 89       	ldd	r24, Y+19	; 0x13
    331c:	9c 89       	ldd	r25, Y+20	; 0x14
    331e:	98 8b       	std	Y+16, r25	; 0x10
    3320:	8f 87       	std	Y+15, r24	; 0x0f
    3322:	8f 85       	ldd	r24, Y+15	; 0x0f
    3324:	98 89       	ldd	r25, Y+16	; 0x10
    3326:	01 97       	sbiw	r24, 0x01	; 1
    3328:	f1 f7       	brne	.-4      	; 0x3326 <LCD_VidSendCommand+0x446>
    332a:	98 8b       	std	Y+16, r25	; 0x10
    332c:	8f 87       	std	Y+15, r24	; 0x0f
    332e:	80 e0       	ldi	r24, 0x00	; 0
    3330:	90 e0       	ldi	r25, 0x00	; 0
    3332:	a0 ea       	ldi	r26, 0xA0	; 160
    3334:	b0 e4       	ldi	r27, 0x40	; 64
    3336:	8b 87       	std	Y+11, r24	; 0x0b
    3338:	9c 87       	std	Y+12, r25	; 0x0c
    333a:	ad 87       	std	Y+13, r26	; 0x0d
    333c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    333e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3340:	7c 85       	ldd	r23, Y+12	; 0x0c
    3342:	8d 85       	ldd	r24, Y+13	; 0x0d
    3344:	9e 85       	ldd	r25, Y+14	; 0x0e
    3346:	20 e0       	ldi	r18, 0x00	; 0
    3348:	30 e0       	ldi	r19, 0x00	; 0
    334a:	4a ef       	ldi	r20, 0xFA	; 250
    334c:	54 e4       	ldi	r21, 0x44	; 68
    334e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3352:	dc 01       	movw	r26, r24
    3354:	cb 01       	movw	r24, r22
    3356:	8f 83       	std	Y+7, r24	; 0x07
    3358:	98 87       	std	Y+8, r25	; 0x08
    335a:	a9 87       	std	Y+9, r26	; 0x09
    335c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    335e:	6f 81       	ldd	r22, Y+7	; 0x07
    3360:	78 85       	ldd	r23, Y+8	; 0x08
    3362:	89 85       	ldd	r24, Y+9	; 0x09
    3364:	9a 85       	ldd	r25, Y+10	; 0x0a
    3366:	20 e0       	ldi	r18, 0x00	; 0
    3368:	30 e0       	ldi	r19, 0x00	; 0
    336a:	40 e8       	ldi	r20, 0x80	; 128
    336c:	5f e3       	ldi	r21, 0x3F	; 63
    336e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3372:	88 23       	and	r24, r24
    3374:	2c f4       	brge	.+10     	; 0x3380 <LCD_VidSendCommand+0x4a0>
		__ticks = 1;
    3376:	81 e0       	ldi	r24, 0x01	; 1
    3378:	90 e0       	ldi	r25, 0x00	; 0
    337a:	9e 83       	std	Y+6, r25	; 0x06
    337c:	8d 83       	std	Y+5, r24	; 0x05
    337e:	3f c0       	rjmp	.+126    	; 0x33fe <LCD_VidSendCommand+0x51e>
	else if (__tmp > 65535)
    3380:	6f 81       	ldd	r22, Y+7	; 0x07
    3382:	78 85       	ldd	r23, Y+8	; 0x08
    3384:	89 85       	ldd	r24, Y+9	; 0x09
    3386:	9a 85       	ldd	r25, Y+10	; 0x0a
    3388:	20 e0       	ldi	r18, 0x00	; 0
    338a:	3f ef       	ldi	r19, 0xFF	; 255
    338c:	4f e7       	ldi	r20, 0x7F	; 127
    338e:	57 e4       	ldi	r21, 0x47	; 71
    3390:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3394:	18 16       	cp	r1, r24
    3396:	4c f5       	brge	.+82     	; 0x33ea <LCD_VidSendCommand+0x50a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3398:	6b 85       	ldd	r22, Y+11	; 0x0b
    339a:	7c 85       	ldd	r23, Y+12	; 0x0c
    339c:	8d 85       	ldd	r24, Y+13	; 0x0d
    339e:	9e 85       	ldd	r25, Y+14	; 0x0e
    33a0:	20 e0       	ldi	r18, 0x00	; 0
    33a2:	30 e0       	ldi	r19, 0x00	; 0
    33a4:	40 e2       	ldi	r20, 0x20	; 32
    33a6:	51 e4       	ldi	r21, 0x41	; 65
    33a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33ac:	dc 01       	movw	r26, r24
    33ae:	cb 01       	movw	r24, r22
    33b0:	bc 01       	movw	r22, r24
    33b2:	cd 01       	movw	r24, r26
    33b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33b8:	dc 01       	movw	r26, r24
    33ba:	cb 01       	movw	r24, r22
    33bc:	9e 83       	std	Y+6, r25	; 0x06
    33be:	8d 83       	std	Y+5, r24	; 0x05
    33c0:	0f c0       	rjmp	.+30     	; 0x33e0 <LCD_VidSendCommand+0x500>
    33c2:	88 ec       	ldi	r24, 0xC8	; 200
    33c4:	90 e0       	ldi	r25, 0x00	; 0
    33c6:	9c 83       	std	Y+4, r25	; 0x04
    33c8:	8b 83       	std	Y+3, r24	; 0x03
    33ca:	8b 81       	ldd	r24, Y+3	; 0x03
    33cc:	9c 81       	ldd	r25, Y+4	; 0x04
    33ce:	01 97       	sbiw	r24, 0x01	; 1
    33d0:	f1 f7       	brne	.-4      	; 0x33ce <LCD_VidSendCommand+0x4ee>
    33d2:	9c 83       	std	Y+4, r25	; 0x04
    33d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33d6:	8d 81       	ldd	r24, Y+5	; 0x05
    33d8:	9e 81       	ldd	r25, Y+6	; 0x06
    33da:	01 97       	sbiw	r24, 0x01	; 1
    33dc:	9e 83       	std	Y+6, r25	; 0x06
    33de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33e0:	8d 81       	ldd	r24, Y+5	; 0x05
    33e2:	9e 81       	ldd	r25, Y+6	; 0x06
    33e4:	00 97       	sbiw	r24, 0x00	; 0
    33e6:	69 f7       	brne	.-38     	; 0x33c2 <LCD_VidSendCommand+0x4e2>
    33e8:	14 c0       	rjmp	.+40     	; 0x3412 <LCD_VidSendCommand+0x532>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33ea:	6f 81       	ldd	r22, Y+7	; 0x07
    33ec:	78 85       	ldd	r23, Y+8	; 0x08
    33ee:	89 85       	ldd	r24, Y+9	; 0x09
    33f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    33f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33f6:	dc 01       	movw	r26, r24
    33f8:	cb 01       	movw	r24, r22
    33fa:	9e 83       	std	Y+6, r25	; 0x06
    33fc:	8d 83       	std	Y+5, r24	; 0x05
    33fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3400:	9e 81       	ldd	r25, Y+6	; 0x06
    3402:	9a 83       	std	Y+2, r25	; 0x02
    3404:	89 83       	std	Y+1, r24	; 0x01
    3406:	89 81       	ldd	r24, Y+1	; 0x01
    3408:	9a 81       	ldd	r25, Y+2	; 0x02
    340a:	01 97       	sbiw	r24, 0x01	; 1
    340c:	f1 f7       	brne	.-4      	; 0x340a <LCD_VidSendCommand+0x52a>
    340e:	9a 83       	std	Y+2, r25	; 0x02
    3410:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

	_delay_ms(5);
	#endif
}
    3412:	c9 5b       	subi	r28, 0xB9	; 185
    3414:	df 4f       	sbci	r29, 0xFF	; 255
    3416:	0f b6       	in	r0, 0x3f	; 63
    3418:	f8 94       	cli
    341a:	de bf       	out	0x3e, r29	; 62
    341c:	0f be       	out	0x3f, r0	; 63
    341e:	cd bf       	out	0x3d, r28	; 61
    3420:	cf 91       	pop	r28
    3422:	df 91       	pop	r29
    3424:	1f 91       	pop	r17
    3426:	0f 91       	pop	r16
    3428:	08 95       	ret

0000342a <LCD_VidSendString>:

void LCD_VidSendString( u8 *copy_u8string)
{
    342a:	df 93       	push	r29
    342c:	cf 93       	push	r28
    342e:	00 d0       	rcall	.+0      	; 0x3430 <LCD_VidSendString+0x6>
    3430:	0f 92       	push	r0
    3432:	cd b7       	in	r28, 0x3d	; 61
    3434:	de b7       	in	r29, 0x3e	; 62
    3436:	9b 83       	std	Y+3, r25	; 0x03
    3438:	8a 83       	std	Y+2, r24	; 0x02

	u8 i=0;
    343a:	19 82       	std	Y+1, r1	; 0x01
    343c:	0e c0       	rjmp	.+28     	; 0x345a <LCD_VidSendString+0x30>

	while(copy_u8string[i] != '\0')
	{

		LCD_VidSendData(copy_u8string[i]);
    343e:	89 81       	ldd	r24, Y+1	; 0x01
    3440:	28 2f       	mov	r18, r24
    3442:	30 e0       	ldi	r19, 0x00	; 0
    3444:	8a 81       	ldd	r24, Y+2	; 0x02
    3446:	9b 81       	ldd	r25, Y+3	; 0x03
    3448:	fc 01       	movw	r30, r24
    344a:	e2 0f       	add	r30, r18
    344c:	f3 1f       	adc	r31, r19
    344e:	80 81       	ld	r24, Z
    3450:	0e 94 5f 15 	call	0x2abe	; 0x2abe <LCD_VidSendData>
		i++;
    3454:	89 81       	ldd	r24, Y+1	; 0x01
    3456:	8f 5f       	subi	r24, 0xFF	; 255
    3458:	89 83       	std	Y+1, r24	; 0x01
void LCD_VidSendString( u8 *copy_u8string)
{

	u8 i=0;

	while(copy_u8string[i] != '\0')
    345a:	89 81       	ldd	r24, Y+1	; 0x01
    345c:	28 2f       	mov	r18, r24
    345e:	30 e0       	ldi	r19, 0x00	; 0
    3460:	8a 81       	ldd	r24, Y+2	; 0x02
    3462:	9b 81       	ldd	r25, Y+3	; 0x03
    3464:	fc 01       	movw	r30, r24
    3466:	e2 0f       	add	r30, r18
    3468:	f3 1f       	adc	r31, r19
    346a:	80 81       	ld	r24, Z
    346c:	88 23       	and	r24, r24
    346e:	39 f7       	brne	.-50     	; 0x343e <LCD_VidSendString+0x14>
		LCD_VidSendData(copy_u8string[i]);
		i++;
	}


}
    3470:	0f 90       	pop	r0
    3472:	0f 90       	pop	r0
    3474:	0f 90       	pop	r0
    3476:	cf 91       	pop	r28
    3478:	df 91       	pop	r29
    347a:	08 95       	ret

0000347c <LCD_VidSendNumber>:

 void LCD_VidSendNumber( u16 copy_u16number)
{
    347c:	df 93       	push	r29
    347e:	cf 93       	push	r28
    3480:	cd b7       	in	r28, 0x3d	; 61
    3482:	de b7       	in	r29, 0x3e	; 62
    3484:	2a 97       	sbiw	r28, 0x0a	; 10
    3486:	0f b6       	in	r0, 0x3f	; 63
    3488:	f8 94       	cli
    348a:	de bf       	out	0x3e, r29	; 62
    348c:	0f be       	out	0x3f, r0	; 63
    348e:	cd bf       	out	0x3d, r28	; 61
    3490:	98 87       	std	Y+8, r25	; 0x08
    3492:	8f 83       	std	Y+7, r24	; 0x07

	if (copy_u16number==0)
    3494:	8f 81       	ldd	r24, Y+7	; 0x07
    3496:	98 85       	ldd	r25, Y+8	; 0x08
    3498:	00 97       	sbiw	r24, 0x00	; 0
    349a:	19 f4       	brne	.+6      	; 0x34a2 <LCD_VidSendNumber+0x26>
	{
		LCD_VidSendData('0');
    349c:	80 e3       	ldi	r24, 0x30	; 48
    349e:	0e 94 5f 15 	call	0x2abe	; 0x2abe <LCD_VidSendData>
	}
	s8 i=0;
    34a2:	19 82       	std	Y+1, r1	; 0x01
    34a4:	1f c0       	rjmp	.+62     	; 0x34e4 <LCD_VidSendNumber+0x68>
	u8 str_num[5];
	while(copy_u16number>0)
	{
		str_num[i]=copy_u16number%10;
    34a6:	89 81       	ldd	r24, Y+1	; 0x01
    34a8:	e8 2f       	mov	r30, r24
    34aa:	ff 27       	eor	r31, r31
    34ac:	e7 fd       	sbrc	r30, 7
    34ae:	f0 95       	com	r31
    34b0:	8f 81       	ldd	r24, Y+7	; 0x07
    34b2:	98 85       	ldd	r25, Y+8	; 0x08
    34b4:	2a e0       	ldi	r18, 0x0A	; 10
    34b6:	30 e0       	ldi	r19, 0x00	; 0
    34b8:	b9 01       	movw	r22, r18
    34ba:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <__udivmodhi4>
    34be:	28 2f       	mov	r18, r24
    34c0:	ce 01       	movw	r24, r28
    34c2:	02 96       	adiw	r24, 0x02	; 2
    34c4:	e8 0f       	add	r30, r24
    34c6:	f9 1f       	adc	r31, r25
    34c8:	20 83       	st	Z, r18
		copy_u16number/=10;
    34ca:	8f 81       	ldd	r24, Y+7	; 0x07
    34cc:	98 85       	ldd	r25, Y+8	; 0x08
    34ce:	2a e0       	ldi	r18, 0x0A	; 10
    34d0:	30 e0       	ldi	r19, 0x00	; 0
    34d2:	b9 01       	movw	r22, r18
    34d4:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <__udivmodhi4>
    34d8:	cb 01       	movw	r24, r22
    34da:	98 87       	std	Y+8, r25	; 0x08
    34dc:	8f 83       	std	Y+7, r24	; 0x07
		i++;
    34de:	89 81       	ldd	r24, Y+1	; 0x01
    34e0:	8f 5f       	subi	r24, 0xFF	; 255
    34e2:	89 83       	std	Y+1, r24	; 0x01
	{
		LCD_VidSendData('0');
	}
	s8 i=0;
	u8 str_num[5];
	while(copy_u16number>0)
    34e4:	8f 81       	ldd	r24, Y+7	; 0x07
    34e6:	98 85       	ldd	r25, Y+8	; 0x08
    34e8:	00 97       	sbiw	r24, 0x00	; 0
    34ea:	e9 f6       	brne	.-70     	; 0x34a6 <LCD_VidSendNumber+0x2a>
	{
		str_num[i]=copy_u16number%10;
		copy_u16number/=10;
		i++;
	}
	i--;
    34ec:	89 81       	ldd	r24, Y+1	; 0x01
    34ee:	81 50       	subi	r24, 0x01	; 1
    34f0:	89 83       	std	Y+1, r24	; 0x01
    34f2:	7e c0       	rjmp	.+252    	; 0x35f0 <LCD_VidSendNumber+0x174>
	while(i>=0)
	{
		switch(str_num[i])
    34f4:	89 81       	ldd	r24, Y+1	; 0x01
    34f6:	28 2f       	mov	r18, r24
    34f8:	33 27       	eor	r19, r19
    34fa:	27 fd       	sbrc	r18, 7
    34fc:	30 95       	com	r19
    34fe:	ce 01       	movw	r24, r28
    3500:	02 96       	adiw	r24, 0x02	; 2
    3502:	fc 01       	movw	r30, r24
    3504:	e2 0f       	add	r30, r18
    3506:	f3 1f       	adc	r31, r19
    3508:	80 81       	ld	r24, Z
    350a:	28 2f       	mov	r18, r24
    350c:	30 e0       	ldi	r19, 0x00	; 0
    350e:	3a 87       	std	Y+10, r19	; 0x0a
    3510:	29 87       	std	Y+9, r18	; 0x09
    3512:	89 85       	ldd	r24, Y+9	; 0x09
    3514:	9a 85       	ldd	r25, Y+10	; 0x0a
    3516:	84 30       	cpi	r24, 0x04	; 4
    3518:	91 05       	cpc	r25, r1
    351a:	09 f4       	brne	.+2      	; 0x351e <LCD_VidSendNumber+0xa2>
    351c:	4f c0       	rjmp	.+158    	; 0x35bc <LCD_VidSendNumber+0x140>
    351e:	29 85       	ldd	r18, Y+9	; 0x09
    3520:	3a 85       	ldd	r19, Y+10	; 0x0a
    3522:	25 30       	cpi	r18, 0x05	; 5
    3524:	31 05       	cpc	r19, r1
    3526:	d4 f4       	brge	.+52     	; 0x355c <LCD_VidSendNumber+0xe0>
    3528:	89 85       	ldd	r24, Y+9	; 0x09
    352a:	9a 85       	ldd	r25, Y+10	; 0x0a
    352c:	81 30       	cpi	r24, 0x01	; 1
    352e:	91 05       	cpc	r25, r1
    3530:	c9 f1       	breq	.+114    	; 0x35a4 <LCD_VidSendNumber+0x128>
    3532:	29 85       	ldd	r18, Y+9	; 0x09
    3534:	3a 85       	ldd	r19, Y+10	; 0x0a
    3536:	22 30       	cpi	r18, 0x02	; 2
    3538:	31 05       	cpc	r19, r1
    353a:	2c f4       	brge	.+10     	; 0x3546 <LCD_VidSendNumber+0xca>
    353c:	89 85       	ldd	r24, Y+9	; 0x09
    353e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3540:	00 97       	sbiw	r24, 0x00	; 0
    3542:	61 f1       	breq	.+88     	; 0x359c <LCD_VidSendNumber+0x120>
    3544:	52 c0       	rjmp	.+164    	; 0x35ea <LCD_VidSendNumber+0x16e>
    3546:	29 85       	ldd	r18, Y+9	; 0x09
    3548:	3a 85       	ldd	r19, Y+10	; 0x0a
    354a:	22 30       	cpi	r18, 0x02	; 2
    354c:	31 05       	cpc	r19, r1
    354e:	71 f1       	breq	.+92     	; 0x35ac <LCD_VidSendNumber+0x130>
    3550:	89 85       	ldd	r24, Y+9	; 0x09
    3552:	9a 85       	ldd	r25, Y+10	; 0x0a
    3554:	83 30       	cpi	r24, 0x03	; 3
    3556:	91 05       	cpc	r25, r1
    3558:	69 f1       	breq	.+90     	; 0x35b4 <LCD_VidSendNumber+0x138>
    355a:	47 c0       	rjmp	.+142    	; 0x35ea <LCD_VidSendNumber+0x16e>
    355c:	29 85       	ldd	r18, Y+9	; 0x09
    355e:	3a 85       	ldd	r19, Y+10	; 0x0a
    3560:	27 30       	cpi	r18, 0x07	; 7
    3562:	31 05       	cpc	r19, r1
    3564:	b9 f1       	breq	.+110    	; 0x35d4 <LCD_VidSendNumber+0x158>
    3566:	89 85       	ldd	r24, Y+9	; 0x09
    3568:	9a 85       	ldd	r25, Y+10	; 0x0a
    356a:	88 30       	cpi	r24, 0x08	; 8
    356c:	91 05       	cpc	r25, r1
    356e:	5c f4       	brge	.+22     	; 0x3586 <LCD_VidSendNumber+0x10a>
    3570:	29 85       	ldd	r18, Y+9	; 0x09
    3572:	3a 85       	ldd	r19, Y+10	; 0x0a
    3574:	25 30       	cpi	r18, 0x05	; 5
    3576:	31 05       	cpc	r19, r1
    3578:	29 f1       	breq	.+74     	; 0x35c4 <LCD_VidSendNumber+0x148>
    357a:	89 85       	ldd	r24, Y+9	; 0x09
    357c:	9a 85       	ldd	r25, Y+10	; 0x0a
    357e:	86 30       	cpi	r24, 0x06	; 6
    3580:	91 05       	cpc	r25, r1
    3582:	21 f1       	breq	.+72     	; 0x35cc <LCD_VidSendNumber+0x150>
    3584:	32 c0       	rjmp	.+100    	; 0x35ea <LCD_VidSendNumber+0x16e>
    3586:	29 85       	ldd	r18, Y+9	; 0x09
    3588:	3a 85       	ldd	r19, Y+10	; 0x0a
    358a:	28 30       	cpi	r18, 0x08	; 8
    358c:	31 05       	cpc	r19, r1
    358e:	31 f1       	breq	.+76     	; 0x35dc <LCD_VidSendNumber+0x160>
    3590:	89 85       	ldd	r24, Y+9	; 0x09
    3592:	9a 85       	ldd	r25, Y+10	; 0x0a
    3594:	89 30       	cpi	r24, 0x09	; 9
    3596:	91 05       	cpc	r25, r1
    3598:	29 f1       	breq	.+74     	; 0x35e4 <LCD_VidSendNumber+0x168>
    359a:	27 c0       	rjmp	.+78     	; 0x35ea <LCD_VidSendNumber+0x16e>
		{
		case 0 : LCD_VidSendData('0');break;
    359c:	80 e3       	ldi	r24, 0x30	; 48
    359e:	0e 94 5f 15 	call	0x2abe	; 0x2abe <LCD_VidSendData>
    35a2:	23 c0       	rjmp	.+70     	; 0x35ea <LCD_VidSendNumber+0x16e>
		case 1 : LCD_VidSendData('1');break;
    35a4:	81 e3       	ldi	r24, 0x31	; 49
    35a6:	0e 94 5f 15 	call	0x2abe	; 0x2abe <LCD_VidSendData>
    35aa:	1f c0       	rjmp	.+62     	; 0x35ea <LCD_VidSendNumber+0x16e>
		case 2 : LCD_VidSendData('2');break;
    35ac:	82 e3       	ldi	r24, 0x32	; 50
    35ae:	0e 94 5f 15 	call	0x2abe	; 0x2abe <LCD_VidSendData>
    35b2:	1b c0       	rjmp	.+54     	; 0x35ea <LCD_VidSendNumber+0x16e>
		case 3 : LCD_VidSendData('3');break;
    35b4:	83 e3       	ldi	r24, 0x33	; 51
    35b6:	0e 94 5f 15 	call	0x2abe	; 0x2abe <LCD_VidSendData>
    35ba:	17 c0       	rjmp	.+46     	; 0x35ea <LCD_VidSendNumber+0x16e>
		case 4 : LCD_VidSendData('4');break;
    35bc:	84 e3       	ldi	r24, 0x34	; 52
    35be:	0e 94 5f 15 	call	0x2abe	; 0x2abe <LCD_VidSendData>
    35c2:	13 c0       	rjmp	.+38     	; 0x35ea <LCD_VidSendNumber+0x16e>
		case 5 : LCD_VidSendData('5');break;
    35c4:	85 e3       	ldi	r24, 0x35	; 53
    35c6:	0e 94 5f 15 	call	0x2abe	; 0x2abe <LCD_VidSendData>
    35ca:	0f c0       	rjmp	.+30     	; 0x35ea <LCD_VidSendNumber+0x16e>
		case 6 : LCD_VidSendData('6');break;
    35cc:	86 e3       	ldi	r24, 0x36	; 54
    35ce:	0e 94 5f 15 	call	0x2abe	; 0x2abe <LCD_VidSendData>
    35d2:	0b c0       	rjmp	.+22     	; 0x35ea <LCD_VidSendNumber+0x16e>
		case 7 : LCD_VidSendData('7');break;
    35d4:	87 e3       	ldi	r24, 0x37	; 55
    35d6:	0e 94 5f 15 	call	0x2abe	; 0x2abe <LCD_VidSendData>
    35da:	07 c0       	rjmp	.+14     	; 0x35ea <LCD_VidSendNumber+0x16e>
		case 8 : LCD_VidSendData('8');break;
    35dc:	88 e3       	ldi	r24, 0x38	; 56
    35de:	0e 94 5f 15 	call	0x2abe	; 0x2abe <LCD_VidSendData>
    35e2:	03 c0       	rjmp	.+6      	; 0x35ea <LCD_VidSendNumber+0x16e>
		case 9 : LCD_VidSendData('9');break;
    35e4:	89 e3       	ldi	r24, 0x39	; 57
    35e6:	0e 94 5f 15 	call	0x2abe	; 0x2abe <LCD_VidSendData>
		}

		i--;
    35ea:	89 81       	ldd	r24, Y+1	; 0x01
    35ec:	81 50       	subi	r24, 0x01	; 1
    35ee:	89 83       	std	Y+1, r24	; 0x01
		str_num[i]=copy_u16number%10;
		copy_u16number/=10;
		i++;
	}
	i--;
	while(i>=0)
    35f0:	89 81       	ldd	r24, Y+1	; 0x01
    35f2:	88 23       	and	r24, r24
    35f4:	0c f0       	brlt	.+2      	; 0x35f8 <LCD_VidSendNumber+0x17c>
    35f6:	7e cf       	rjmp	.-260    	; 0x34f4 <LCD_VidSendNumber+0x78>

		i--;
	}


}
    35f8:	2a 96       	adiw	r28, 0x0a	; 10
    35fa:	0f b6       	in	r0, 0x3f	; 63
    35fc:	f8 94       	cli
    35fe:	de bf       	out	0x3e, r29	; 62
    3600:	0f be       	out	0x3f, r0	; 63
    3602:	cd bf       	out	0x3d, r28	; 61
    3604:	cf 91       	pop	r28
    3606:	df 91       	pop	r29
    3608:	08 95       	ret

0000360a <LCD_VidSetPosition>:


void LCD_VidSetPosition(u8 raw, u8 column)
{
    360a:	df 93       	push	r29
    360c:	cf 93       	push	r28
    360e:	00 d0       	rcall	.+0      	; 0x3610 <LCD_VidSetPosition+0x6>
    3610:	cd b7       	in	r28, 0x3d	; 61
    3612:	de b7       	in	r29, 0x3e	; 62
    3614:	89 83       	std	Y+1, r24	; 0x01
    3616:	6a 83       	std	Y+2, r22	; 0x02
	if(0==raw)       // raw= 0
    3618:	89 81       	ldd	r24, Y+1	; 0x01
    361a:	88 23       	and	r24, r24
    361c:	21 f4       	brne	.+8      	; 0x3626 <LCD_VidSetPosition+0x1c>
	{
	LCD_VidSendCommand(128+column);    // 0b10000000=128 +column
    361e:	8a 81       	ldd	r24, Y+2	; 0x02
    3620:	80 58       	subi	r24, 0x80	; 128
    3622:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <LCD_VidSendCommand>
	}
	if(1==raw)
    3626:	89 81       	ldd	r24, Y+1	; 0x01
    3628:	81 30       	cpi	r24, 0x01	; 1
    362a:	21 f4       	brne	.+8      	; 0x3634 <LCD_VidSetPosition+0x2a>
	{
	LCD_VidSendCommand(128+64+column);  //  // 0b10000000=128 +column+64
    362c:	8a 81       	ldd	r24, Y+2	; 0x02
    362e:	80 54       	subi	r24, 0x40	; 64
    3630:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <LCD_VidSendCommand>
	                                    // 64 is the start address of row 2
	}

}
    3634:	0f 90       	pop	r0
    3636:	0f 90       	pop	r0
    3638:	cf 91       	pop	r28
    363a:	df 91       	pop	r29
    363c:	08 95       	ret

0000363e <LCD_VidClear>:

void LCD_VidClear(void)
{
    363e:	df 93       	push	r29
    3640:	cf 93       	push	r28
    3642:	cd b7       	in	r28, 0x3d	; 61
    3644:	de b7       	in	r29, 0x3e	; 62
	LCD_VidSendCommand(1);
    3646:	81 e0       	ldi	r24, 0x01	; 1
    3648:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <LCD_VidSendCommand>


}
    364c:	cf 91       	pop	r28
    364e:	df 91       	pop	r29
    3650:	08 95       	ret

00003652 <LCD_VidShiftRight>:

void LCD_VidShiftRight(void)
{
    3652:	df 93       	push	r29
    3654:	cf 93       	push	r28
    3656:	cd b7       	in	r28, 0x3d	; 61
    3658:	de b7       	in	r29, 0x3e	; 62
	LCD_VidSendCommand(0b00011100);
    365a:	8c e1       	ldi	r24, 0x1C	; 28
    365c:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <LCD_VidSendCommand>

}
    3660:	cf 91       	pop	r28
    3662:	df 91       	pop	r29
    3664:	08 95       	ret

00003666 <LCD_VidShiftLeft>:

void LCD_VidShiftLeft(void)
{
    3666:	df 93       	push	r29
    3668:	cf 93       	push	r28
    366a:	cd b7       	in	r28, 0x3d	; 61
    366c:	de b7       	in	r29, 0x3e	; 62
	LCD_VidSendCommand(0x18);
    366e:	88 e1       	ldi	r24, 0x18	; 24
    3670:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <LCD_VidSendCommand>

}
    3674:	cf 91       	pop	r28
    3676:	df 91       	pop	r29
    3678:	08 95       	ret

0000367a <LCD_voidReturnHome>:

void LCD_voidReturnHome(void)
{
    367a:	df 93       	push	r29
    367c:	cf 93       	push	r28
    367e:	cd b7       	in	r28, 0x3d	; 61
    3680:	de b7       	in	r29, 0x3e	; 62
	LCD_VidSendCommand(0x02);
    3682:	82 e0       	ldi	r24, 0x02	; 2
    3684:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <LCD_VidSendCommand>

}
    3688:	cf 91       	pop	r28
    368a:	df 91       	pop	r29
    368c:	08 95       	ret

0000368e <main>:
#include "App.h"
#include "avr/delay.h"


void main()
{
    368e:	df 93       	push	r29
    3690:	cf 93       	push	r28
    3692:	cd b7       	in	r28, 0x3d	; 61
    3694:	de b7       	in	r29, 0x3e	; 62
    3696:	2f 97       	sbiw	r28, 0x0f	; 15
    3698:	0f b6       	in	r0, 0x3f	; 63
    369a:	f8 94       	cli
    369c:	de bf       	out	0x3e, r29	; 62
    369e:	0f be       	out	0x3f, r0	; 63
    36a0:	cd bf       	out	0x3d, r28	; 61
	u8 State;
	LCD_VidInit();
    36a2:	0e 94 bb 10 	call	0x2176	; 0x2176 <LCD_VidInit>

	Keypad_VoidInit();
    36a6:	0e 94 cb 0c 	call	0x1996	; 0x1996 <Keypad_VoidInit>


	State = PasswordTrials();
    36aa:	0e 94 70 06 	call	0xce0	; 0xce0 <PasswordTrials>
    36ae:	8f 87       	std	Y+15, r24	; 0x0f
	if(State== 0)
    36b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    36b2:	88 23       	and	r24, r24
    36b4:	09 f0       	breq	.+2      	; 0x36b8 <main+0x2a>
    36b6:	79 c0       	rjmp	.+242    	; 0x37aa <main+0x11c>
	{
		LCD_VidSendString("System Will Restart..");
    36b8:	88 ea       	ldi	r24, 0xA8	; 168
    36ba:	90 e0       	ldi	r25, 0x00	; 0
    36bc:	0e 94 15 1a 	call	0x342a	; 0x342a <LCD_VidSendString>
    36c0:	80 e0       	ldi	r24, 0x00	; 0
    36c2:	90 e0       	ldi	r25, 0x00	; 0
    36c4:	aa ef       	ldi	r26, 0xFA	; 250
    36c6:	b3 e4       	ldi	r27, 0x43	; 67
    36c8:	8b 87       	std	Y+11, r24	; 0x0b
    36ca:	9c 87       	std	Y+12, r25	; 0x0c
    36cc:	ad 87       	std	Y+13, r26	; 0x0d
    36ce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    36d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    36d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    36d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    36d8:	20 e0       	ldi	r18, 0x00	; 0
    36da:	30 e0       	ldi	r19, 0x00	; 0
    36dc:	4a ef       	ldi	r20, 0xFA	; 250
    36de:	54 e4       	ldi	r21, 0x44	; 68
    36e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36e4:	dc 01       	movw	r26, r24
    36e6:	cb 01       	movw	r24, r22
    36e8:	8f 83       	std	Y+7, r24	; 0x07
    36ea:	98 87       	std	Y+8, r25	; 0x08
    36ec:	a9 87       	std	Y+9, r26	; 0x09
    36ee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    36f0:	6f 81       	ldd	r22, Y+7	; 0x07
    36f2:	78 85       	ldd	r23, Y+8	; 0x08
    36f4:	89 85       	ldd	r24, Y+9	; 0x09
    36f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    36f8:	20 e0       	ldi	r18, 0x00	; 0
    36fa:	30 e0       	ldi	r19, 0x00	; 0
    36fc:	40 e8       	ldi	r20, 0x80	; 128
    36fe:	5f e3       	ldi	r21, 0x3F	; 63
    3700:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3704:	88 23       	and	r24, r24
    3706:	2c f4       	brge	.+10     	; 0x3712 <main+0x84>
		__ticks = 1;
    3708:	81 e0       	ldi	r24, 0x01	; 1
    370a:	90 e0       	ldi	r25, 0x00	; 0
    370c:	9e 83       	std	Y+6, r25	; 0x06
    370e:	8d 83       	std	Y+5, r24	; 0x05
    3710:	3f c0       	rjmp	.+126    	; 0x3790 <main+0x102>
	else if (__tmp > 65535)
    3712:	6f 81       	ldd	r22, Y+7	; 0x07
    3714:	78 85       	ldd	r23, Y+8	; 0x08
    3716:	89 85       	ldd	r24, Y+9	; 0x09
    3718:	9a 85       	ldd	r25, Y+10	; 0x0a
    371a:	20 e0       	ldi	r18, 0x00	; 0
    371c:	3f ef       	ldi	r19, 0xFF	; 255
    371e:	4f e7       	ldi	r20, 0x7F	; 127
    3720:	57 e4       	ldi	r21, 0x47	; 71
    3722:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3726:	18 16       	cp	r1, r24
    3728:	4c f5       	brge	.+82     	; 0x377c <main+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    372a:	6b 85       	ldd	r22, Y+11	; 0x0b
    372c:	7c 85       	ldd	r23, Y+12	; 0x0c
    372e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3730:	9e 85       	ldd	r25, Y+14	; 0x0e
    3732:	20 e0       	ldi	r18, 0x00	; 0
    3734:	30 e0       	ldi	r19, 0x00	; 0
    3736:	40 e2       	ldi	r20, 0x20	; 32
    3738:	51 e4       	ldi	r21, 0x41	; 65
    373a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    373e:	dc 01       	movw	r26, r24
    3740:	cb 01       	movw	r24, r22
    3742:	bc 01       	movw	r22, r24
    3744:	cd 01       	movw	r24, r26
    3746:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    374a:	dc 01       	movw	r26, r24
    374c:	cb 01       	movw	r24, r22
    374e:	9e 83       	std	Y+6, r25	; 0x06
    3750:	8d 83       	std	Y+5, r24	; 0x05
    3752:	0f c0       	rjmp	.+30     	; 0x3772 <main+0xe4>
    3754:	88 ec       	ldi	r24, 0xC8	; 200
    3756:	90 e0       	ldi	r25, 0x00	; 0
    3758:	9c 83       	std	Y+4, r25	; 0x04
    375a:	8b 83       	std	Y+3, r24	; 0x03
    375c:	8b 81       	ldd	r24, Y+3	; 0x03
    375e:	9c 81       	ldd	r25, Y+4	; 0x04
    3760:	01 97       	sbiw	r24, 0x01	; 1
    3762:	f1 f7       	brne	.-4      	; 0x3760 <main+0xd2>
    3764:	9c 83       	std	Y+4, r25	; 0x04
    3766:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3768:	8d 81       	ldd	r24, Y+5	; 0x05
    376a:	9e 81       	ldd	r25, Y+6	; 0x06
    376c:	01 97       	sbiw	r24, 0x01	; 1
    376e:	9e 83       	std	Y+6, r25	; 0x06
    3770:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3772:	8d 81       	ldd	r24, Y+5	; 0x05
    3774:	9e 81       	ldd	r25, Y+6	; 0x06
    3776:	00 97       	sbiw	r24, 0x00	; 0
    3778:	69 f7       	brne	.-38     	; 0x3754 <main+0xc6>
    377a:	14 c0       	rjmp	.+40     	; 0x37a4 <main+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    377c:	6f 81       	ldd	r22, Y+7	; 0x07
    377e:	78 85       	ldd	r23, Y+8	; 0x08
    3780:	89 85       	ldd	r24, Y+9	; 0x09
    3782:	9a 85       	ldd	r25, Y+10	; 0x0a
    3784:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3788:	dc 01       	movw	r26, r24
    378a:	cb 01       	movw	r24, r22
    378c:	9e 83       	std	Y+6, r25	; 0x06
    378e:	8d 83       	std	Y+5, r24	; 0x05
    3790:	8d 81       	ldd	r24, Y+5	; 0x05
    3792:	9e 81       	ldd	r25, Y+6	; 0x06
    3794:	9a 83       	std	Y+2, r25	; 0x02
    3796:	89 83       	std	Y+1, r24	; 0x01
    3798:	89 81       	ldd	r24, Y+1	; 0x01
    379a:	9a 81       	ldd	r25, Y+2	; 0x02
    379c:	01 97       	sbiw	r24, 0x01	; 1
    379e:	f1 f7       	brne	.-4      	; 0x379c <main+0x10e>
    37a0:	9a 83       	std	Y+2, r25	; 0x02
    37a2:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		main();
    37a4:	0e 94 47 1b 	call	0x368e	; 0x368e <main>
    37a8:	06 c0       	rjmp	.+12     	; 0x37b6 <main+0x128>
	}
	else
	{
		LCD_VidClear();
    37aa:	0e 94 1f 1b 	call	0x363e	; 0x363e <LCD_VidClear>
		GetNumbers();
    37ae:	0e 94 a3 05 	call	0xb46	; 0xb46 <GetNumbers>
		calculate();
    37b2:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <calculate>
    37b6:	ff cf       	rjmp	.-2      	; 0x37b6 <main+0x128>

000037b8 <__udivmodhi4>:
    37b8:	aa 1b       	sub	r26, r26
    37ba:	bb 1b       	sub	r27, r27
    37bc:	51 e1       	ldi	r21, 0x11	; 17
    37be:	07 c0       	rjmp	.+14     	; 0x37ce <__udivmodhi4_ep>

000037c0 <__udivmodhi4_loop>:
    37c0:	aa 1f       	adc	r26, r26
    37c2:	bb 1f       	adc	r27, r27
    37c4:	a6 17       	cp	r26, r22
    37c6:	b7 07       	cpc	r27, r23
    37c8:	10 f0       	brcs	.+4      	; 0x37ce <__udivmodhi4_ep>
    37ca:	a6 1b       	sub	r26, r22
    37cc:	b7 0b       	sbc	r27, r23

000037ce <__udivmodhi4_ep>:
    37ce:	88 1f       	adc	r24, r24
    37d0:	99 1f       	adc	r25, r25
    37d2:	5a 95       	dec	r21
    37d4:	a9 f7       	brne	.-22     	; 0x37c0 <__udivmodhi4_loop>
    37d6:	80 95       	com	r24
    37d8:	90 95       	com	r25
    37da:	bc 01       	movw	r22, r24
    37dc:	cd 01       	movw	r24, r26
    37de:	08 95       	ret

000037e0 <__prologue_saves__>:
    37e0:	2f 92       	push	r2
    37e2:	3f 92       	push	r3
    37e4:	4f 92       	push	r4
    37e6:	5f 92       	push	r5
    37e8:	6f 92       	push	r6
    37ea:	7f 92       	push	r7
    37ec:	8f 92       	push	r8
    37ee:	9f 92       	push	r9
    37f0:	af 92       	push	r10
    37f2:	bf 92       	push	r11
    37f4:	cf 92       	push	r12
    37f6:	df 92       	push	r13
    37f8:	ef 92       	push	r14
    37fa:	ff 92       	push	r15
    37fc:	0f 93       	push	r16
    37fe:	1f 93       	push	r17
    3800:	cf 93       	push	r28
    3802:	df 93       	push	r29
    3804:	cd b7       	in	r28, 0x3d	; 61
    3806:	de b7       	in	r29, 0x3e	; 62
    3808:	ca 1b       	sub	r28, r26
    380a:	db 0b       	sbc	r29, r27
    380c:	0f b6       	in	r0, 0x3f	; 63
    380e:	f8 94       	cli
    3810:	de bf       	out	0x3e, r29	; 62
    3812:	0f be       	out	0x3f, r0	; 63
    3814:	cd bf       	out	0x3d, r28	; 61
    3816:	09 94       	ijmp

00003818 <__epilogue_restores__>:
    3818:	2a 88       	ldd	r2, Y+18	; 0x12
    381a:	39 88       	ldd	r3, Y+17	; 0x11
    381c:	48 88       	ldd	r4, Y+16	; 0x10
    381e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3820:	6e 84       	ldd	r6, Y+14	; 0x0e
    3822:	7d 84       	ldd	r7, Y+13	; 0x0d
    3824:	8c 84       	ldd	r8, Y+12	; 0x0c
    3826:	9b 84       	ldd	r9, Y+11	; 0x0b
    3828:	aa 84       	ldd	r10, Y+10	; 0x0a
    382a:	b9 84       	ldd	r11, Y+9	; 0x09
    382c:	c8 84       	ldd	r12, Y+8	; 0x08
    382e:	df 80       	ldd	r13, Y+7	; 0x07
    3830:	ee 80       	ldd	r14, Y+6	; 0x06
    3832:	fd 80       	ldd	r15, Y+5	; 0x05
    3834:	0c 81       	ldd	r16, Y+4	; 0x04
    3836:	1b 81       	ldd	r17, Y+3	; 0x03
    3838:	aa 81       	ldd	r26, Y+2	; 0x02
    383a:	b9 81       	ldd	r27, Y+1	; 0x01
    383c:	ce 0f       	add	r28, r30
    383e:	d1 1d       	adc	r29, r1
    3840:	0f b6       	in	r0, 0x3f	; 63
    3842:	f8 94       	cli
    3844:	de bf       	out	0x3e, r29	; 62
    3846:	0f be       	out	0x3f, r0	; 63
    3848:	cd bf       	out	0x3d, r28	; 61
    384a:	ed 01       	movw	r28, r26
    384c:	08 95       	ret

0000384e <sprintf>:
    384e:	ae e0       	ldi	r26, 0x0E	; 14
    3850:	b0 e0       	ldi	r27, 0x00	; 0
    3852:	ed e2       	ldi	r30, 0x2D	; 45
    3854:	fc e1       	ldi	r31, 0x1C	; 28
    3856:	0c 94 fe 1b 	jmp	0x37fc	; 0x37fc <__prologue_saves__+0x1c>
    385a:	0d 89       	ldd	r16, Y+21	; 0x15
    385c:	1e 89       	ldd	r17, Y+22	; 0x16
    385e:	86 e0       	ldi	r24, 0x06	; 6
    3860:	8c 83       	std	Y+4, r24	; 0x04
    3862:	1a 83       	std	Y+2, r17	; 0x02
    3864:	09 83       	std	Y+1, r16	; 0x01
    3866:	8f ef       	ldi	r24, 0xFF	; 255
    3868:	9f e7       	ldi	r25, 0x7F	; 127
    386a:	9e 83       	std	Y+6, r25	; 0x06
    386c:	8d 83       	std	Y+5, r24	; 0x05
    386e:	9e 01       	movw	r18, r28
    3870:	27 5e       	subi	r18, 0xE7	; 231
    3872:	3f 4f       	sbci	r19, 0xFF	; 255
    3874:	ce 01       	movw	r24, r28
    3876:	01 96       	adiw	r24, 0x01	; 1
    3878:	6f 89       	ldd	r22, Y+23	; 0x17
    387a:	78 8d       	ldd	r23, Y+24	; 0x18
    387c:	a9 01       	movw	r20, r18
    387e:	0e 94 4b 1c 	call	0x3896	; 0x3896 <vfprintf>
    3882:	2f 81       	ldd	r18, Y+7	; 0x07
    3884:	38 85       	ldd	r19, Y+8	; 0x08
    3886:	02 0f       	add	r16, r18
    3888:	13 1f       	adc	r17, r19
    388a:	f8 01       	movw	r30, r16
    388c:	10 82       	st	Z, r1
    388e:	2e 96       	adiw	r28, 0x0e	; 14
    3890:	e4 e0       	ldi	r30, 0x04	; 4
    3892:	0c 94 1a 1c 	jmp	0x3834	; 0x3834 <__epilogue_restores__+0x1c>

00003896 <vfprintf>:
    3896:	ab e0       	ldi	r26, 0x0B	; 11
    3898:	b0 e0       	ldi	r27, 0x00	; 0
    389a:	e1 e5       	ldi	r30, 0x51	; 81
    389c:	fc e1       	ldi	r31, 0x1C	; 28
    389e:	0c 94 f0 1b 	jmp	0x37e0	; 0x37e0 <__prologue_saves__>
    38a2:	3c 01       	movw	r6, r24
    38a4:	2b 01       	movw	r4, r22
    38a6:	5a 01       	movw	r10, r20
    38a8:	fc 01       	movw	r30, r24
    38aa:	17 82       	std	Z+7, r1	; 0x07
    38ac:	16 82       	std	Z+6, r1	; 0x06
    38ae:	83 81       	ldd	r24, Z+3	; 0x03
    38b0:	81 fd       	sbrc	r24, 1
    38b2:	03 c0       	rjmp	.+6      	; 0x38ba <vfprintf+0x24>
    38b4:	6f ef       	ldi	r22, 0xFF	; 255
    38b6:	7f ef       	ldi	r23, 0xFF	; 255
    38b8:	c6 c1       	rjmp	.+908    	; 0x3c46 <vfprintf+0x3b0>
    38ba:	9a e0       	ldi	r25, 0x0A	; 10
    38bc:	89 2e       	mov	r8, r25
    38be:	1e 01       	movw	r2, r28
    38c0:	08 94       	sec
    38c2:	21 1c       	adc	r2, r1
    38c4:	31 1c       	adc	r3, r1
    38c6:	f3 01       	movw	r30, r6
    38c8:	23 81       	ldd	r18, Z+3	; 0x03
    38ca:	f2 01       	movw	r30, r4
    38cc:	23 fd       	sbrc	r18, 3
    38ce:	85 91       	lpm	r24, Z+
    38d0:	23 ff       	sbrs	r18, 3
    38d2:	81 91       	ld	r24, Z+
    38d4:	2f 01       	movw	r4, r30
    38d6:	88 23       	and	r24, r24
    38d8:	09 f4       	brne	.+2      	; 0x38dc <vfprintf+0x46>
    38da:	b2 c1       	rjmp	.+868    	; 0x3c40 <vfprintf+0x3aa>
    38dc:	85 32       	cpi	r24, 0x25	; 37
    38de:	39 f4       	brne	.+14     	; 0x38ee <vfprintf+0x58>
    38e0:	23 fd       	sbrc	r18, 3
    38e2:	85 91       	lpm	r24, Z+
    38e4:	23 ff       	sbrs	r18, 3
    38e6:	81 91       	ld	r24, Z+
    38e8:	2f 01       	movw	r4, r30
    38ea:	85 32       	cpi	r24, 0x25	; 37
    38ec:	29 f4       	brne	.+10     	; 0x38f8 <vfprintf+0x62>
    38ee:	90 e0       	ldi	r25, 0x00	; 0
    38f0:	b3 01       	movw	r22, r6
    38f2:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <fputc>
    38f6:	e7 cf       	rjmp	.-50     	; 0x38c6 <vfprintf+0x30>
    38f8:	98 2f       	mov	r25, r24
    38fa:	ff 24       	eor	r15, r15
    38fc:	ee 24       	eor	r14, r14
    38fe:	99 24       	eor	r9, r9
    3900:	ff e1       	ldi	r31, 0x1F	; 31
    3902:	ff 15       	cp	r31, r15
    3904:	d0 f0       	brcs	.+52     	; 0x393a <vfprintf+0xa4>
    3906:	9b 32       	cpi	r25, 0x2B	; 43
    3908:	69 f0       	breq	.+26     	; 0x3924 <vfprintf+0x8e>
    390a:	9c 32       	cpi	r25, 0x2C	; 44
    390c:	28 f4       	brcc	.+10     	; 0x3918 <vfprintf+0x82>
    390e:	90 32       	cpi	r25, 0x20	; 32
    3910:	59 f0       	breq	.+22     	; 0x3928 <vfprintf+0x92>
    3912:	93 32       	cpi	r25, 0x23	; 35
    3914:	91 f4       	brne	.+36     	; 0x393a <vfprintf+0xa4>
    3916:	0e c0       	rjmp	.+28     	; 0x3934 <vfprintf+0x9e>
    3918:	9d 32       	cpi	r25, 0x2D	; 45
    391a:	49 f0       	breq	.+18     	; 0x392e <vfprintf+0x98>
    391c:	90 33       	cpi	r25, 0x30	; 48
    391e:	69 f4       	brne	.+26     	; 0x393a <vfprintf+0xa4>
    3920:	41 e0       	ldi	r20, 0x01	; 1
    3922:	24 c0       	rjmp	.+72     	; 0x396c <vfprintf+0xd6>
    3924:	52 e0       	ldi	r21, 0x02	; 2
    3926:	f5 2a       	or	r15, r21
    3928:	84 e0       	ldi	r24, 0x04	; 4
    392a:	f8 2a       	or	r15, r24
    392c:	28 c0       	rjmp	.+80     	; 0x397e <vfprintf+0xe8>
    392e:	98 e0       	ldi	r25, 0x08	; 8
    3930:	f9 2a       	or	r15, r25
    3932:	25 c0       	rjmp	.+74     	; 0x397e <vfprintf+0xe8>
    3934:	e0 e1       	ldi	r30, 0x10	; 16
    3936:	fe 2a       	or	r15, r30
    3938:	22 c0       	rjmp	.+68     	; 0x397e <vfprintf+0xe8>
    393a:	f7 fc       	sbrc	r15, 7
    393c:	29 c0       	rjmp	.+82     	; 0x3990 <vfprintf+0xfa>
    393e:	89 2f       	mov	r24, r25
    3940:	80 53       	subi	r24, 0x30	; 48
    3942:	8a 30       	cpi	r24, 0x0A	; 10
    3944:	70 f4       	brcc	.+28     	; 0x3962 <vfprintf+0xcc>
    3946:	f6 fe       	sbrs	r15, 6
    3948:	05 c0       	rjmp	.+10     	; 0x3954 <vfprintf+0xbe>
    394a:	98 9c       	mul	r9, r8
    394c:	90 2c       	mov	r9, r0
    394e:	11 24       	eor	r1, r1
    3950:	98 0e       	add	r9, r24
    3952:	15 c0       	rjmp	.+42     	; 0x397e <vfprintf+0xe8>
    3954:	e8 9c       	mul	r14, r8
    3956:	e0 2c       	mov	r14, r0
    3958:	11 24       	eor	r1, r1
    395a:	e8 0e       	add	r14, r24
    395c:	f0 e2       	ldi	r31, 0x20	; 32
    395e:	ff 2a       	or	r15, r31
    3960:	0e c0       	rjmp	.+28     	; 0x397e <vfprintf+0xe8>
    3962:	9e 32       	cpi	r25, 0x2E	; 46
    3964:	29 f4       	brne	.+10     	; 0x3970 <vfprintf+0xda>
    3966:	f6 fc       	sbrc	r15, 6
    3968:	6b c1       	rjmp	.+726    	; 0x3c40 <vfprintf+0x3aa>
    396a:	40 e4       	ldi	r20, 0x40	; 64
    396c:	f4 2a       	or	r15, r20
    396e:	07 c0       	rjmp	.+14     	; 0x397e <vfprintf+0xe8>
    3970:	9c 36       	cpi	r25, 0x6C	; 108
    3972:	19 f4       	brne	.+6      	; 0x397a <vfprintf+0xe4>
    3974:	50 e8       	ldi	r21, 0x80	; 128
    3976:	f5 2a       	or	r15, r21
    3978:	02 c0       	rjmp	.+4      	; 0x397e <vfprintf+0xe8>
    397a:	98 36       	cpi	r25, 0x68	; 104
    397c:	49 f4       	brne	.+18     	; 0x3990 <vfprintf+0xfa>
    397e:	f2 01       	movw	r30, r4
    3980:	23 fd       	sbrc	r18, 3
    3982:	95 91       	lpm	r25, Z+
    3984:	23 ff       	sbrs	r18, 3
    3986:	91 91       	ld	r25, Z+
    3988:	2f 01       	movw	r4, r30
    398a:	99 23       	and	r25, r25
    398c:	09 f0       	breq	.+2      	; 0x3990 <vfprintf+0xfa>
    398e:	b8 cf       	rjmp	.-144    	; 0x3900 <vfprintf+0x6a>
    3990:	89 2f       	mov	r24, r25
    3992:	85 54       	subi	r24, 0x45	; 69
    3994:	83 30       	cpi	r24, 0x03	; 3
    3996:	18 f0       	brcs	.+6      	; 0x399e <vfprintf+0x108>
    3998:	80 52       	subi	r24, 0x20	; 32
    399a:	83 30       	cpi	r24, 0x03	; 3
    399c:	38 f4       	brcc	.+14     	; 0x39ac <vfprintf+0x116>
    399e:	44 e0       	ldi	r20, 0x04	; 4
    39a0:	50 e0       	ldi	r21, 0x00	; 0
    39a2:	a4 0e       	add	r10, r20
    39a4:	b5 1e       	adc	r11, r21
    39a6:	5f e3       	ldi	r21, 0x3F	; 63
    39a8:	59 83       	std	Y+1, r21	; 0x01
    39aa:	0f c0       	rjmp	.+30     	; 0x39ca <vfprintf+0x134>
    39ac:	93 36       	cpi	r25, 0x63	; 99
    39ae:	31 f0       	breq	.+12     	; 0x39bc <vfprintf+0x126>
    39b0:	93 37       	cpi	r25, 0x73	; 115
    39b2:	79 f0       	breq	.+30     	; 0x39d2 <vfprintf+0x13c>
    39b4:	93 35       	cpi	r25, 0x53	; 83
    39b6:	09 f0       	breq	.+2      	; 0x39ba <vfprintf+0x124>
    39b8:	56 c0       	rjmp	.+172    	; 0x3a66 <vfprintf+0x1d0>
    39ba:	20 c0       	rjmp	.+64     	; 0x39fc <vfprintf+0x166>
    39bc:	f5 01       	movw	r30, r10
    39be:	80 81       	ld	r24, Z
    39c0:	89 83       	std	Y+1, r24	; 0x01
    39c2:	42 e0       	ldi	r20, 0x02	; 2
    39c4:	50 e0       	ldi	r21, 0x00	; 0
    39c6:	a4 0e       	add	r10, r20
    39c8:	b5 1e       	adc	r11, r21
    39ca:	61 01       	movw	r12, r2
    39cc:	01 e0       	ldi	r16, 0x01	; 1
    39ce:	10 e0       	ldi	r17, 0x00	; 0
    39d0:	12 c0       	rjmp	.+36     	; 0x39f6 <vfprintf+0x160>
    39d2:	f5 01       	movw	r30, r10
    39d4:	c0 80       	ld	r12, Z
    39d6:	d1 80       	ldd	r13, Z+1	; 0x01
    39d8:	f6 fc       	sbrc	r15, 6
    39da:	03 c0       	rjmp	.+6      	; 0x39e2 <vfprintf+0x14c>
    39dc:	6f ef       	ldi	r22, 0xFF	; 255
    39de:	7f ef       	ldi	r23, 0xFF	; 255
    39e0:	02 c0       	rjmp	.+4      	; 0x39e6 <vfprintf+0x150>
    39e2:	69 2d       	mov	r22, r9
    39e4:	70 e0       	ldi	r23, 0x00	; 0
    39e6:	42 e0       	ldi	r20, 0x02	; 2
    39e8:	50 e0       	ldi	r21, 0x00	; 0
    39ea:	a4 0e       	add	r10, r20
    39ec:	b5 1e       	adc	r11, r21
    39ee:	c6 01       	movw	r24, r12
    39f0:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <strnlen>
    39f4:	8c 01       	movw	r16, r24
    39f6:	5f e7       	ldi	r21, 0x7F	; 127
    39f8:	f5 22       	and	r15, r21
    39fa:	14 c0       	rjmp	.+40     	; 0x3a24 <vfprintf+0x18e>
    39fc:	f5 01       	movw	r30, r10
    39fe:	c0 80       	ld	r12, Z
    3a00:	d1 80       	ldd	r13, Z+1	; 0x01
    3a02:	f6 fc       	sbrc	r15, 6
    3a04:	03 c0       	rjmp	.+6      	; 0x3a0c <vfprintf+0x176>
    3a06:	6f ef       	ldi	r22, 0xFF	; 255
    3a08:	7f ef       	ldi	r23, 0xFF	; 255
    3a0a:	02 c0       	rjmp	.+4      	; 0x3a10 <vfprintf+0x17a>
    3a0c:	69 2d       	mov	r22, r9
    3a0e:	70 e0       	ldi	r23, 0x00	; 0
    3a10:	42 e0       	ldi	r20, 0x02	; 2
    3a12:	50 e0       	ldi	r21, 0x00	; 0
    3a14:	a4 0e       	add	r10, r20
    3a16:	b5 1e       	adc	r11, r21
    3a18:	c6 01       	movw	r24, r12
    3a1a:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <strnlen_P>
    3a1e:	8c 01       	movw	r16, r24
    3a20:	50 e8       	ldi	r21, 0x80	; 128
    3a22:	f5 2a       	or	r15, r21
    3a24:	f3 fe       	sbrs	r15, 3
    3a26:	07 c0       	rjmp	.+14     	; 0x3a36 <vfprintf+0x1a0>
    3a28:	1a c0       	rjmp	.+52     	; 0x3a5e <vfprintf+0x1c8>
    3a2a:	80 e2       	ldi	r24, 0x20	; 32
    3a2c:	90 e0       	ldi	r25, 0x00	; 0
    3a2e:	b3 01       	movw	r22, r6
    3a30:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <fputc>
    3a34:	ea 94       	dec	r14
    3a36:	8e 2d       	mov	r24, r14
    3a38:	90 e0       	ldi	r25, 0x00	; 0
    3a3a:	08 17       	cp	r16, r24
    3a3c:	19 07       	cpc	r17, r25
    3a3e:	a8 f3       	brcs	.-22     	; 0x3a2a <vfprintf+0x194>
    3a40:	0e c0       	rjmp	.+28     	; 0x3a5e <vfprintf+0x1c8>
    3a42:	f6 01       	movw	r30, r12
    3a44:	f7 fc       	sbrc	r15, 7
    3a46:	85 91       	lpm	r24, Z+
    3a48:	f7 fe       	sbrs	r15, 7
    3a4a:	81 91       	ld	r24, Z+
    3a4c:	6f 01       	movw	r12, r30
    3a4e:	90 e0       	ldi	r25, 0x00	; 0
    3a50:	b3 01       	movw	r22, r6
    3a52:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <fputc>
    3a56:	e1 10       	cpse	r14, r1
    3a58:	ea 94       	dec	r14
    3a5a:	01 50       	subi	r16, 0x01	; 1
    3a5c:	10 40       	sbci	r17, 0x00	; 0
    3a5e:	01 15       	cp	r16, r1
    3a60:	11 05       	cpc	r17, r1
    3a62:	79 f7       	brne	.-34     	; 0x3a42 <vfprintf+0x1ac>
    3a64:	ea c0       	rjmp	.+468    	; 0x3c3a <vfprintf+0x3a4>
    3a66:	94 36       	cpi	r25, 0x64	; 100
    3a68:	11 f0       	breq	.+4      	; 0x3a6e <vfprintf+0x1d8>
    3a6a:	99 36       	cpi	r25, 0x69	; 105
    3a6c:	69 f5       	brne	.+90     	; 0x3ac8 <vfprintf+0x232>
    3a6e:	f7 fe       	sbrs	r15, 7
    3a70:	08 c0       	rjmp	.+16     	; 0x3a82 <vfprintf+0x1ec>
    3a72:	f5 01       	movw	r30, r10
    3a74:	20 81       	ld	r18, Z
    3a76:	31 81       	ldd	r19, Z+1	; 0x01
    3a78:	42 81       	ldd	r20, Z+2	; 0x02
    3a7a:	53 81       	ldd	r21, Z+3	; 0x03
    3a7c:	84 e0       	ldi	r24, 0x04	; 4
    3a7e:	90 e0       	ldi	r25, 0x00	; 0
    3a80:	0a c0       	rjmp	.+20     	; 0x3a96 <vfprintf+0x200>
    3a82:	f5 01       	movw	r30, r10
    3a84:	80 81       	ld	r24, Z
    3a86:	91 81       	ldd	r25, Z+1	; 0x01
    3a88:	9c 01       	movw	r18, r24
    3a8a:	44 27       	eor	r20, r20
    3a8c:	37 fd       	sbrc	r19, 7
    3a8e:	40 95       	com	r20
    3a90:	54 2f       	mov	r21, r20
    3a92:	82 e0       	ldi	r24, 0x02	; 2
    3a94:	90 e0       	ldi	r25, 0x00	; 0
    3a96:	a8 0e       	add	r10, r24
    3a98:	b9 1e       	adc	r11, r25
    3a9a:	9f e6       	ldi	r25, 0x6F	; 111
    3a9c:	f9 22       	and	r15, r25
    3a9e:	57 ff       	sbrs	r21, 7
    3aa0:	09 c0       	rjmp	.+18     	; 0x3ab4 <vfprintf+0x21e>
    3aa2:	50 95       	com	r21
    3aa4:	40 95       	com	r20
    3aa6:	30 95       	com	r19
    3aa8:	21 95       	neg	r18
    3aaa:	3f 4f       	sbci	r19, 0xFF	; 255
    3aac:	4f 4f       	sbci	r20, 0xFF	; 255
    3aae:	5f 4f       	sbci	r21, 0xFF	; 255
    3ab0:	e0 e8       	ldi	r30, 0x80	; 128
    3ab2:	fe 2a       	or	r15, r30
    3ab4:	ca 01       	movw	r24, r20
    3ab6:	b9 01       	movw	r22, r18
    3ab8:	a1 01       	movw	r20, r2
    3aba:	2a e0       	ldi	r18, 0x0A	; 10
    3abc:	30 e0       	ldi	r19, 0x00	; 0
    3abe:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <__ultoa_invert>
    3ac2:	d8 2e       	mov	r13, r24
    3ac4:	d2 18       	sub	r13, r2
    3ac6:	40 c0       	rjmp	.+128    	; 0x3b48 <vfprintf+0x2b2>
    3ac8:	95 37       	cpi	r25, 0x75	; 117
    3aca:	29 f4       	brne	.+10     	; 0x3ad6 <vfprintf+0x240>
    3acc:	1f 2d       	mov	r17, r15
    3ace:	1f 7e       	andi	r17, 0xEF	; 239
    3ad0:	2a e0       	ldi	r18, 0x0A	; 10
    3ad2:	30 e0       	ldi	r19, 0x00	; 0
    3ad4:	1d c0       	rjmp	.+58     	; 0x3b10 <vfprintf+0x27a>
    3ad6:	1f 2d       	mov	r17, r15
    3ad8:	19 7f       	andi	r17, 0xF9	; 249
    3ada:	9f 36       	cpi	r25, 0x6F	; 111
    3adc:	61 f0       	breq	.+24     	; 0x3af6 <vfprintf+0x260>
    3ade:	90 37       	cpi	r25, 0x70	; 112
    3ae0:	20 f4       	brcc	.+8      	; 0x3aea <vfprintf+0x254>
    3ae2:	98 35       	cpi	r25, 0x58	; 88
    3ae4:	09 f0       	breq	.+2      	; 0x3ae8 <vfprintf+0x252>
    3ae6:	ac c0       	rjmp	.+344    	; 0x3c40 <vfprintf+0x3aa>
    3ae8:	0f c0       	rjmp	.+30     	; 0x3b08 <vfprintf+0x272>
    3aea:	90 37       	cpi	r25, 0x70	; 112
    3aec:	39 f0       	breq	.+14     	; 0x3afc <vfprintf+0x266>
    3aee:	98 37       	cpi	r25, 0x78	; 120
    3af0:	09 f0       	breq	.+2      	; 0x3af4 <vfprintf+0x25e>
    3af2:	a6 c0       	rjmp	.+332    	; 0x3c40 <vfprintf+0x3aa>
    3af4:	04 c0       	rjmp	.+8      	; 0x3afe <vfprintf+0x268>
    3af6:	28 e0       	ldi	r18, 0x08	; 8
    3af8:	30 e0       	ldi	r19, 0x00	; 0
    3afa:	0a c0       	rjmp	.+20     	; 0x3b10 <vfprintf+0x27a>
    3afc:	10 61       	ori	r17, 0x10	; 16
    3afe:	14 fd       	sbrc	r17, 4
    3b00:	14 60       	ori	r17, 0x04	; 4
    3b02:	20 e1       	ldi	r18, 0x10	; 16
    3b04:	30 e0       	ldi	r19, 0x00	; 0
    3b06:	04 c0       	rjmp	.+8      	; 0x3b10 <vfprintf+0x27a>
    3b08:	14 fd       	sbrc	r17, 4
    3b0a:	16 60       	ori	r17, 0x06	; 6
    3b0c:	20 e1       	ldi	r18, 0x10	; 16
    3b0e:	32 e0       	ldi	r19, 0x02	; 2
    3b10:	17 ff       	sbrs	r17, 7
    3b12:	08 c0       	rjmp	.+16     	; 0x3b24 <vfprintf+0x28e>
    3b14:	f5 01       	movw	r30, r10
    3b16:	60 81       	ld	r22, Z
    3b18:	71 81       	ldd	r23, Z+1	; 0x01
    3b1a:	82 81       	ldd	r24, Z+2	; 0x02
    3b1c:	93 81       	ldd	r25, Z+3	; 0x03
    3b1e:	44 e0       	ldi	r20, 0x04	; 4
    3b20:	50 e0       	ldi	r21, 0x00	; 0
    3b22:	08 c0       	rjmp	.+16     	; 0x3b34 <vfprintf+0x29e>
    3b24:	f5 01       	movw	r30, r10
    3b26:	80 81       	ld	r24, Z
    3b28:	91 81       	ldd	r25, Z+1	; 0x01
    3b2a:	bc 01       	movw	r22, r24
    3b2c:	80 e0       	ldi	r24, 0x00	; 0
    3b2e:	90 e0       	ldi	r25, 0x00	; 0
    3b30:	42 e0       	ldi	r20, 0x02	; 2
    3b32:	50 e0       	ldi	r21, 0x00	; 0
    3b34:	a4 0e       	add	r10, r20
    3b36:	b5 1e       	adc	r11, r21
    3b38:	a1 01       	movw	r20, r2
    3b3a:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <__ultoa_invert>
    3b3e:	d8 2e       	mov	r13, r24
    3b40:	d2 18       	sub	r13, r2
    3b42:	8f e7       	ldi	r24, 0x7F	; 127
    3b44:	f8 2e       	mov	r15, r24
    3b46:	f1 22       	and	r15, r17
    3b48:	f6 fe       	sbrs	r15, 6
    3b4a:	0b c0       	rjmp	.+22     	; 0x3b62 <vfprintf+0x2cc>
    3b4c:	5e ef       	ldi	r21, 0xFE	; 254
    3b4e:	f5 22       	and	r15, r21
    3b50:	d9 14       	cp	r13, r9
    3b52:	38 f4       	brcc	.+14     	; 0x3b62 <vfprintf+0x2cc>
    3b54:	f4 fe       	sbrs	r15, 4
    3b56:	07 c0       	rjmp	.+14     	; 0x3b66 <vfprintf+0x2d0>
    3b58:	f2 fc       	sbrc	r15, 2
    3b5a:	05 c0       	rjmp	.+10     	; 0x3b66 <vfprintf+0x2d0>
    3b5c:	8f ee       	ldi	r24, 0xEF	; 239
    3b5e:	f8 22       	and	r15, r24
    3b60:	02 c0       	rjmp	.+4      	; 0x3b66 <vfprintf+0x2d0>
    3b62:	1d 2d       	mov	r17, r13
    3b64:	01 c0       	rjmp	.+2      	; 0x3b68 <vfprintf+0x2d2>
    3b66:	19 2d       	mov	r17, r9
    3b68:	f4 fe       	sbrs	r15, 4
    3b6a:	0d c0       	rjmp	.+26     	; 0x3b86 <vfprintf+0x2f0>
    3b6c:	fe 01       	movw	r30, r28
    3b6e:	ed 0d       	add	r30, r13
    3b70:	f1 1d       	adc	r31, r1
    3b72:	80 81       	ld	r24, Z
    3b74:	80 33       	cpi	r24, 0x30	; 48
    3b76:	19 f4       	brne	.+6      	; 0x3b7e <vfprintf+0x2e8>
    3b78:	99 ee       	ldi	r25, 0xE9	; 233
    3b7a:	f9 22       	and	r15, r25
    3b7c:	08 c0       	rjmp	.+16     	; 0x3b8e <vfprintf+0x2f8>
    3b7e:	1f 5f       	subi	r17, 0xFF	; 255
    3b80:	f2 fe       	sbrs	r15, 2
    3b82:	05 c0       	rjmp	.+10     	; 0x3b8e <vfprintf+0x2f8>
    3b84:	03 c0       	rjmp	.+6      	; 0x3b8c <vfprintf+0x2f6>
    3b86:	8f 2d       	mov	r24, r15
    3b88:	86 78       	andi	r24, 0x86	; 134
    3b8a:	09 f0       	breq	.+2      	; 0x3b8e <vfprintf+0x2f8>
    3b8c:	1f 5f       	subi	r17, 0xFF	; 255
    3b8e:	0f 2d       	mov	r16, r15
    3b90:	f3 fc       	sbrc	r15, 3
    3b92:	14 c0       	rjmp	.+40     	; 0x3bbc <vfprintf+0x326>
    3b94:	f0 fe       	sbrs	r15, 0
    3b96:	0f c0       	rjmp	.+30     	; 0x3bb6 <vfprintf+0x320>
    3b98:	1e 15       	cp	r17, r14
    3b9a:	10 f0       	brcs	.+4      	; 0x3ba0 <vfprintf+0x30a>
    3b9c:	9d 2c       	mov	r9, r13
    3b9e:	0b c0       	rjmp	.+22     	; 0x3bb6 <vfprintf+0x320>
    3ba0:	9d 2c       	mov	r9, r13
    3ba2:	9e 0c       	add	r9, r14
    3ba4:	91 1a       	sub	r9, r17
    3ba6:	1e 2d       	mov	r17, r14
    3ba8:	06 c0       	rjmp	.+12     	; 0x3bb6 <vfprintf+0x320>
    3baa:	80 e2       	ldi	r24, 0x20	; 32
    3bac:	90 e0       	ldi	r25, 0x00	; 0
    3bae:	b3 01       	movw	r22, r6
    3bb0:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <fputc>
    3bb4:	1f 5f       	subi	r17, 0xFF	; 255
    3bb6:	1e 15       	cp	r17, r14
    3bb8:	c0 f3       	brcs	.-16     	; 0x3baa <vfprintf+0x314>
    3bba:	04 c0       	rjmp	.+8      	; 0x3bc4 <vfprintf+0x32e>
    3bbc:	1e 15       	cp	r17, r14
    3bbe:	10 f4       	brcc	.+4      	; 0x3bc4 <vfprintf+0x32e>
    3bc0:	e1 1a       	sub	r14, r17
    3bc2:	01 c0       	rjmp	.+2      	; 0x3bc6 <vfprintf+0x330>
    3bc4:	ee 24       	eor	r14, r14
    3bc6:	04 ff       	sbrs	r16, 4
    3bc8:	0f c0       	rjmp	.+30     	; 0x3be8 <vfprintf+0x352>
    3bca:	80 e3       	ldi	r24, 0x30	; 48
    3bcc:	90 e0       	ldi	r25, 0x00	; 0
    3bce:	b3 01       	movw	r22, r6
    3bd0:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <fputc>
    3bd4:	02 ff       	sbrs	r16, 2
    3bd6:	1d c0       	rjmp	.+58     	; 0x3c12 <vfprintf+0x37c>
    3bd8:	01 fd       	sbrc	r16, 1
    3bda:	03 c0       	rjmp	.+6      	; 0x3be2 <vfprintf+0x34c>
    3bdc:	88 e7       	ldi	r24, 0x78	; 120
    3bde:	90 e0       	ldi	r25, 0x00	; 0
    3be0:	0e c0       	rjmp	.+28     	; 0x3bfe <vfprintf+0x368>
    3be2:	88 e5       	ldi	r24, 0x58	; 88
    3be4:	90 e0       	ldi	r25, 0x00	; 0
    3be6:	0b c0       	rjmp	.+22     	; 0x3bfe <vfprintf+0x368>
    3be8:	80 2f       	mov	r24, r16
    3bea:	86 78       	andi	r24, 0x86	; 134
    3bec:	91 f0       	breq	.+36     	; 0x3c12 <vfprintf+0x37c>
    3bee:	01 ff       	sbrs	r16, 1
    3bf0:	02 c0       	rjmp	.+4      	; 0x3bf6 <vfprintf+0x360>
    3bf2:	8b e2       	ldi	r24, 0x2B	; 43
    3bf4:	01 c0       	rjmp	.+2      	; 0x3bf8 <vfprintf+0x362>
    3bf6:	80 e2       	ldi	r24, 0x20	; 32
    3bf8:	f7 fc       	sbrc	r15, 7
    3bfa:	8d e2       	ldi	r24, 0x2D	; 45
    3bfc:	90 e0       	ldi	r25, 0x00	; 0
    3bfe:	b3 01       	movw	r22, r6
    3c00:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <fputc>
    3c04:	06 c0       	rjmp	.+12     	; 0x3c12 <vfprintf+0x37c>
    3c06:	80 e3       	ldi	r24, 0x30	; 48
    3c08:	90 e0       	ldi	r25, 0x00	; 0
    3c0a:	b3 01       	movw	r22, r6
    3c0c:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <fputc>
    3c10:	9a 94       	dec	r9
    3c12:	d9 14       	cp	r13, r9
    3c14:	c0 f3       	brcs	.-16     	; 0x3c06 <vfprintf+0x370>
    3c16:	da 94       	dec	r13
    3c18:	f1 01       	movw	r30, r2
    3c1a:	ed 0d       	add	r30, r13
    3c1c:	f1 1d       	adc	r31, r1
    3c1e:	80 81       	ld	r24, Z
    3c20:	90 e0       	ldi	r25, 0x00	; 0
    3c22:	b3 01       	movw	r22, r6
    3c24:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <fputc>
    3c28:	dd 20       	and	r13, r13
    3c2a:	a9 f7       	brne	.-22     	; 0x3c16 <vfprintf+0x380>
    3c2c:	06 c0       	rjmp	.+12     	; 0x3c3a <vfprintf+0x3a4>
    3c2e:	80 e2       	ldi	r24, 0x20	; 32
    3c30:	90 e0       	ldi	r25, 0x00	; 0
    3c32:	b3 01       	movw	r22, r6
    3c34:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <fputc>
    3c38:	ea 94       	dec	r14
    3c3a:	ee 20       	and	r14, r14
    3c3c:	c1 f7       	brne	.-16     	; 0x3c2e <vfprintf+0x398>
    3c3e:	43 ce       	rjmp	.-890    	; 0x38c6 <vfprintf+0x30>
    3c40:	f3 01       	movw	r30, r6
    3c42:	66 81       	ldd	r22, Z+6	; 0x06
    3c44:	77 81       	ldd	r23, Z+7	; 0x07
    3c46:	cb 01       	movw	r24, r22
    3c48:	2b 96       	adiw	r28, 0x0b	; 11
    3c4a:	e2 e1       	ldi	r30, 0x12	; 18
    3c4c:	0c 94 0c 1c 	jmp	0x3818	; 0x3818 <__epilogue_restores__>

00003c50 <strnlen_P>:
    3c50:	fc 01       	movw	r30, r24
    3c52:	05 90       	lpm	r0, Z+
    3c54:	61 50       	subi	r22, 0x01	; 1
    3c56:	70 40       	sbci	r23, 0x00	; 0
    3c58:	01 10       	cpse	r0, r1
    3c5a:	d8 f7       	brcc	.-10     	; 0x3c52 <strnlen_P+0x2>
    3c5c:	80 95       	com	r24
    3c5e:	90 95       	com	r25
    3c60:	8e 0f       	add	r24, r30
    3c62:	9f 1f       	adc	r25, r31
    3c64:	08 95       	ret

00003c66 <strnlen>:
    3c66:	fc 01       	movw	r30, r24
    3c68:	61 50       	subi	r22, 0x01	; 1
    3c6a:	70 40       	sbci	r23, 0x00	; 0
    3c6c:	01 90       	ld	r0, Z+
    3c6e:	01 10       	cpse	r0, r1
    3c70:	d8 f7       	brcc	.-10     	; 0x3c68 <strnlen+0x2>
    3c72:	80 95       	com	r24
    3c74:	90 95       	com	r25
    3c76:	8e 0f       	add	r24, r30
    3c78:	9f 1f       	adc	r25, r31
    3c7a:	08 95       	ret

00003c7c <fputc>:
    3c7c:	0f 93       	push	r16
    3c7e:	1f 93       	push	r17
    3c80:	cf 93       	push	r28
    3c82:	df 93       	push	r29
    3c84:	8c 01       	movw	r16, r24
    3c86:	eb 01       	movw	r28, r22
    3c88:	8b 81       	ldd	r24, Y+3	; 0x03
    3c8a:	81 ff       	sbrs	r24, 1
    3c8c:	1b c0       	rjmp	.+54     	; 0x3cc4 <fputc+0x48>
    3c8e:	82 ff       	sbrs	r24, 2
    3c90:	0d c0       	rjmp	.+26     	; 0x3cac <fputc+0x30>
    3c92:	2e 81       	ldd	r18, Y+6	; 0x06
    3c94:	3f 81       	ldd	r19, Y+7	; 0x07
    3c96:	8c 81       	ldd	r24, Y+4	; 0x04
    3c98:	9d 81       	ldd	r25, Y+5	; 0x05
    3c9a:	28 17       	cp	r18, r24
    3c9c:	39 07       	cpc	r19, r25
    3c9e:	64 f4       	brge	.+24     	; 0x3cb8 <fputc+0x3c>
    3ca0:	e8 81       	ld	r30, Y
    3ca2:	f9 81       	ldd	r31, Y+1	; 0x01
    3ca4:	01 93       	st	Z+, r16
    3ca6:	f9 83       	std	Y+1, r31	; 0x01
    3ca8:	e8 83       	st	Y, r30
    3caa:	06 c0       	rjmp	.+12     	; 0x3cb8 <fputc+0x3c>
    3cac:	e8 85       	ldd	r30, Y+8	; 0x08
    3cae:	f9 85       	ldd	r31, Y+9	; 0x09
    3cb0:	80 2f       	mov	r24, r16
    3cb2:	09 95       	icall
    3cb4:	89 2b       	or	r24, r25
    3cb6:	31 f4       	brne	.+12     	; 0x3cc4 <fputc+0x48>
    3cb8:	8e 81       	ldd	r24, Y+6	; 0x06
    3cba:	9f 81       	ldd	r25, Y+7	; 0x07
    3cbc:	01 96       	adiw	r24, 0x01	; 1
    3cbe:	9f 83       	std	Y+7, r25	; 0x07
    3cc0:	8e 83       	std	Y+6, r24	; 0x06
    3cc2:	02 c0       	rjmp	.+4      	; 0x3cc8 <fputc+0x4c>
    3cc4:	0f ef       	ldi	r16, 0xFF	; 255
    3cc6:	1f ef       	ldi	r17, 0xFF	; 255
    3cc8:	c8 01       	movw	r24, r16
    3cca:	df 91       	pop	r29
    3ccc:	cf 91       	pop	r28
    3cce:	1f 91       	pop	r17
    3cd0:	0f 91       	pop	r16
    3cd2:	08 95       	ret

00003cd4 <__ultoa_invert>:
    3cd4:	fa 01       	movw	r30, r20
    3cd6:	aa 27       	eor	r26, r26
    3cd8:	28 30       	cpi	r18, 0x08	; 8
    3cda:	51 f1       	breq	.+84     	; 0x3d30 <__ultoa_invert+0x5c>
    3cdc:	20 31       	cpi	r18, 0x10	; 16
    3cde:	81 f1       	breq	.+96     	; 0x3d40 <__ultoa_invert+0x6c>
    3ce0:	e8 94       	clt
    3ce2:	6f 93       	push	r22
    3ce4:	6e 7f       	andi	r22, 0xFE	; 254
    3ce6:	6e 5f       	subi	r22, 0xFE	; 254
    3ce8:	7f 4f       	sbci	r23, 0xFF	; 255
    3cea:	8f 4f       	sbci	r24, 0xFF	; 255
    3cec:	9f 4f       	sbci	r25, 0xFF	; 255
    3cee:	af 4f       	sbci	r26, 0xFF	; 255
    3cf0:	b1 e0       	ldi	r27, 0x01	; 1
    3cf2:	3e d0       	rcall	.+124    	; 0x3d70 <__ultoa_invert+0x9c>
    3cf4:	b4 e0       	ldi	r27, 0x04	; 4
    3cf6:	3c d0       	rcall	.+120    	; 0x3d70 <__ultoa_invert+0x9c>
    3cf8:	67 0f       	add	r22, r23
    3cfa:	78 1f       	adc	r23, r24
    3cfc:	89 1f       	adc	r24, r25
    3cfe:	9a 1f       	adc	r25, r26
    3d00:	a1 1d       	adc	r26, r1
    3d02:	68 0f       	add	r22, r24
    3d04:	79 1f       	adc	r23, r25
    3d06:	8a 1f       	adc	r24, r26
    3d08:	91 1d       	adc	r25, r1
    3d0a:	a1 1d       	adc	r26, r1
    3d0c:	6a 0f       	add	r22, r26
    3d0e:	71 1d       	adc	r23, r1
    3d10:	81 1d       	adc	r24, r1
    3d12:	91 1d       	adc	r25, r1
    3d14:	a1 1d       	adc	r26, r1
    3d16:	20 d0       	rcall	.+64     	; 0x3d58 <__ultoa_invert+0x84>
    3d18:	09 f4       	brne	.+2      	; 0x3d1c <__ultoa_invert+0x48>
    3d1a:	68 94       	set
    3d1c:	3f 91       	pop	r19
    3d1e:	2a e0       	ldi	r18, 0x0A	; 10
    3d20:	26 9f       	mul	r18, r22
    3d22:	11 24       	eor	r1, r1
    3d24:	30 19       	sub	r19, r0
    3d26:	30 5d       	subi	r19, 0xD0	; 208
    3d28:	31 93       	st	Z+, r19
    3d2a:	de f6       	brtc	.-74     	; 0x3ce2 <__ultoa_invert+0xe>
    3d2c:	cf 01       	movw	r24, r30
    3d2e:	08 95       	ret
    3d30:	46 2f       	mov	r20, r22
    3d32:	47 70       	andi	r20, 0x07	; 7
    3d34:	40 5d       	subi	r20, 0xD0	; 208
    3d36:	41 93       	st	Z+, r20
    3d38:	b3 e0       	ldi	r27, 0x03	; 3
    3d3a:	0f d0       	rcall	.+30     	; 0x3d5a <__ultoa_invert+0x86>
    3d3c:	c9 f7       	brne	.-14     	; 0x3d30 <__ultoa_invert+0x5c>
    3d3e:	f6 cf       	rjmp	.-20     	; 0x3d2c <__ultoa_invert+0x58>
    3d40:	46 2f       	mov	r20, r22
    3d42:	4f 70       	andi	r20, 0x0F	; 15
    3d44:	40 5d       	subi	r20, 0xD0	; 208
    3d46:	4a 33       	cpi	r20, 0x3A	; 58
    3d48:	18 f0       	brcs	.+6      	; 0x3d50 <__ultoa_invert+0x7c>
    3d4a:	49 5d       	subi	r20, 0xD9	; 217
    3d4c:	31 fd       	sbrc	r19, 1
    3d4e:	40 52       	subi	r20, 0x20	; 32
    3d50:	41 93       	st	Z+, r20
    3d52:	02 d0       	rcall	.+4      	; 0x3d58 <__ultoa_invert+0x84>
    3d54:	a9 f7       	brne	.-22     	; 0x3d40 <__ultoa_invert+0x6c>
    3d56:	ea cf       	rjmp	.-44     	; 0x3d2c <__ultoa_invert+0x58>
    3d58:	b4 e0       	ldi	r27, 0x04	; 4
    3d5a:	a6 95       	lsr	r26
    3d5c:	97 95       	ror	r25
    3d5e:	87 95       	ror	r24
    3d60:	77 95       	ror	r23
    3d62:	67 95       	ror	r22
    3d64:	ba 95       	dec	r27
    3d66:	c9 f7       	brne	.-14     	; 0x3d5a <__ultoa_invert+0x86>
    3d68:	00 97       	sbiw	r24, 0x00	; 0
    3d6a:	61 05       	cpc	r22, r1
    3d6c:	71 05       	cpc	r23, r1
    3d6e:	08 95       	ret
    3d70:	9b 01       	movw	r18, r22
    3d72:	ac 01       	movw	r20, r24
    3d74:	0a 2e       	mov	r0, r26
    3d76:	06 94       	lsr	r0
    3d78:	57 95       	ror	r21
    3d7a:	47 95       	ror	r20
    3d7c:	37 95       	ror	r19
    3d7e:	27 95       	ror	r18
    3d80:	ba 95       	dec	r27
    3d82:	c9 f7       	brne	.-14     	; 0x3d76 <__ultoa_invert+0xa2>
    3d84:	62 0f       	add	r22, r18
    3d86:	73 1f       	adc	r23, r19
    3d88:	84 1f       	adc	r24, r20
    3d8a:	95 1f       	adc	r25, r21
    3d8c:	a0 1d       	adc	r26, r0
    3d8e:	08 95       	ret

00003d90 <_exit>:
    3d90:	f8 94       	cli

00003d92 <__stop_program>:
    3d92:	ff cf       	rjmp	.-2      	; 0x3d92 <__stop_program>
